<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VideoOS.Platform</name>
    </assembly>
    <members>
        <member name="T:VideoOS.Platform.Admin.AddUserControl">
            <summary>
            UserControl to be used when adding a new Item in the Management Client.
            
            Note: To be used when more detailed behaviour control is needed
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.AddUserControl.#ctor">
            <summary>
            To be constructed by your ItemManager, if needed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.AddUserControl.ItemAlreadySaved">
            <summary>
            Will control if the general 'unsaved' flag is set when dialog is closed by pressing the OK button.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.AddUserControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.AddUserControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VideoOS.Platform.Admin.AddUserControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Admin.AssociatedProperties">
            <summary>
            Contains a cache of properties to be configured by the TabUserControl.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.AssociatedProperties.Properties">
            <summary>
            The properties / parameters stored by this plugin associated with the object.
            
            After the properties has been changed, call the SaveAssociatedProperties() method on the VideoOS.PLatform.Configurtion class.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.AssociatedProperties.LastModified">
            <summary>
            The last time this set of properties was changed
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.AssociatedProperties.Save">
            <summary>
            Save the updated properties dictionary on the server
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.AssociatedProperties.#ctor(VideoOS.Platform.Item,System.Guid)">
            <summary>
            Read and construct the associated properties for a given combination of item and pluginId.
            
            Use the Configuration.GetAssociatedProperties and SaveAssociatedProperties to access the stored values.
            </summary>
            <param name="item"></param>
            <param name="pluginId"></param>
        </member>
        <member name="T:VideoOS.Platform.Admin.TabPlugin">
            <summary>
            Defines a plugin to be placed on the tab control of a built-in object.
            
            The built-in objects that supports this plugin are:<br/>
              - Hardware<br/>
              - Camera<br/>
              - Microphone<br/>
              - Speaker<br/>
              - Metadata<br/>
              - Output<br/>
              - Input<br/>
              
            The plugin is associated with the object it is placed with.
            
            Note: This plugin type is only supported by C-Code products.
            
            The order of construction and method calls is:<br/>
             1) Plugin will construct class (In Management Client environment during initialization)<br/>
             2) Init is called when mgt client is logged in<br/>
             3) When administrator selects an object (hardware or device), the IsVisible is called<br/>
             4) This plugin should then return true or false to control if the TabUserControl will be shown <br/>
             5) If above is true, the GenerateUserControl is called<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.TabPlugin.Id">
            <summary>
            Gets the unique id identifying this plug-in component
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.TabPlugin.Icon">
            <summary>
            Icon to be used on the tab control.  Can return null when no icon is available.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.TabPlugin.Name">
            <summary>
            The name to be displayed on the tab
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.TabPlugin.Init">
            <summary>
            This method is called every time the tab control is constructed
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.TabPlugin.Close">
            <summary>
            This method is called every time the tab control goes away
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.TabPlugin.AssociatedKind">
            <summary>
            The plugin here defines for what Kind the plugin is relevant, e.g. Kind.Camera
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.TabPlugin.GenerateUserControl(VideoOS.Platform.Item)">
            <summary>
            Create a new UserControl to be displayed in a separate tab.<br/>
            It is not allowed to reuse an instance created earlier, since it may have been disposed by the environment.
            </summary>
            <param name="associatedItem">The object that the administrator just selected</param>
        </member>
        <member name="M:VideoOS.Platform.Admin.TabPlugin.IsVisible(VideoOS.Platform.Item)">
            <summary>
            This method should return true, when the tab should be shown.  <br/>
            For hardware dependent plugins the implementation of this property could check
            on hardware type and hardware model to decide if the plugin is relevant.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.TabPlugin.GetConfigurationReportProperties(VideoOS.Platform.Item)">
            <summary>
            Gets the configuration properties added by the tab plugin to a given device/hardware.
            These properties are used for configuration reporting within the administration environment.
            Override this method to provide custom properties for the device/hardware configuration report.
            Will only be called if <see cref="P:VideoOS.Platform.Admin.TabPlugin.AssociatedKind"/> is a match for the Item and <see cref="M:VideoOS.Platform.Admin.TabPlugin.IsVisible(VideoOS.Platform.Item)"/> returns true.
            </summary>
            <param name="item">The item representing the device</param>
            <returns>Dictionary of key-value pairs representing property name and value.</returns>
        </member>
        <member name="T:VideoOS.Platform.Admin.TabUserControl">
            <summary>
            UserControl used to manage configuration associated to e.g. a camera or hardware.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.TabUserControl.Init">
            <summary>
            Called when the UserControl should initialize the UI
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.TabUserControl.Close">
            <summary>
            Cleanup any resources or event registrations
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Admin.TabUserControl.ConfigurationChangedByUser">
            <summary>
            An event that needs to fired when the user changes something on the 
            UserControl that requires a save at some point.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.TabUserControl.FireConfigurationChanged">
            <summary>
            Call this method to signal that something has changed, and the save button gets enabled.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.TabUserControl.ValidateAndSave">
            <summary>
            This method is called when the administrator presses the save button.
            
            If using the AssociatedProperties, please call GetAssociatedProperties and SaveAssociatdProperties on the Configuration class.
            
            If this method experience any issues with the properties or unable to store the updates,
            you should consider to display an error dialog, and then return false.
            </summary>
            <returns>true when validated and saved.</returns>
        </member>
        <member name="T:VideoOS.Platform.Admin.AdminImageViewerControl">
            <summary>
            An ImageViewer UserControl for displaying live video in the Corporate Management Client and
            the Enterprise Management Application.<br/>
            It is intended for assisting the user in configuring specifics that relates to the image of a camera, e.g. lines to cross in an analytics trip wire setup.<br/>
            
            This class is constructed by calling the ClientControl.Instance.GenerateAdminImageViewerControl():<br/>
            <code>
            	adminImageViewerControl1 = ClientControl.Instance.GenerateAdminImageViewerControl();
            	adminImageViewerControl1.Dock = DockStyle.Fill;
            	adminImageViewerControl1.FrameReceivedEvent += new FrameReceivedHandler(adminImageViewerControl1_FrameReceivedEvent);
            	adminImageViewerControl1.StateChangedEvent += new EventHandler(adminImageViewerControl1_StateChangedEvent);
            	adminImageViewerControl1.TabStop = false;
            	panel1.Controls.Add(adminImageViewerControl1);
            </code>
            
            To set the camera id and start showing video:
            <code>
                bool result = adminImageViewerControl1.OpenVideo(_selectedCameraItem.FQID.ObjectId);
            	adminImageViewerControl1.Pause = false;
            </code>
            
            To end the session:
            <code>
                adminImageViewerControl1.CloseVideo();
            </code>
            
            Please check the PluginSample VideoPreview for a working sample.
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.AdminImageViewerControl.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.AdminImageViewerControl.OpenVideo(System.Guid)">
            <summary>
            Starts a new live stream for the identified CameraId.
            </summary>
            <param name="cameraId"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.AdminImageViewerControl.CloseVideo">
            <summary>
            Stops any live video and closes the connection to the camera.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.AdminImageViewerControl.State">
            <summary>
            Contains the current state of the connection to the camera.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.AdminImageViewerControl.Pause">
            <summary>
            Controls if the live video stream should be set on Pause.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.AdminImageViewerControl.Image">
            <summary>
            Retrieve latest Image from the stream.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Admin.AdminImageViewerControl.FrameReceivedEvent">
            <summary>
            An event used to be informed whenever a Frame is received.  
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.AdminImageViewerControl.FireFrameReceivedEvent(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Used internally for firing when a new frame is received.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="size"></param>
            <param name="count"></param>
        </member>
        <member name="E:VideoOS.Platform.Admin.AdminImageViewerControl.StateChangedEvent">
            <summary>
            An event used to be informed when the state of the connection to the camera changes.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.AdminImageViewerControl.FireStateChangedEvent">
            <summary>
            Used internally to fire when the session state has changed to the camera.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.AdminImageViewerControl.ImageUserControl">
            <summary>
            Provides access to the UserControl that actually contains the video.
            Can be used to understand positioning and size of the displayed video,
            in case some overlay is required.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Admin.FrameReceivedHandler">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Admin.VideoInfoArgs">
            <summary>
            Specific EventArgs class to contain the information coming with each frame received.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.VideoInfoArgs.Width">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.VideoInfoArgs.Height">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.VideoInfoArgs.DataSize">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.VideoInfoArgs.Count">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Admin.AdminImageState">
            <summary>
            The state of the connection to the Camera.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.AdminImageState.Connecting">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.AdminImageState.Connected">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.AdminImageState.Closed">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Admin.ContextMenuItem">
            <summary>
            Defines one context menu entry, to be used in the Administration clients.<br/>
            This class is constructed and defined in the ItemManager that owns a given type of Item, as identified by it's Kind.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ContextMenuItem.DisplayName">
            <summary>
            The name to display on the context menu (Translated to correct language)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ContextMenuItem.Icon">
            <summary>
            Icon to display, if Bitmap - supply 16x16 or 24x24 pixel size.
            null if no image to display.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ContextMenuItem.IsContextMenuValid">
            <summary>
            This method is called just before the ContextMenu is constructed/displayed.
            The plugin can control if this ContextMenu is valid at this moment or not.
            </summary>
            <returns>True if valid/enabled now</returns>
        </member>
        <member name="E:VideoOS.Platform.Admin.ContextMenuItem.OnClickEvent">
            <summary>
            This method is called when the context menu is selected.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ContextMenuItem.FireOnClickEvent">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Admin.DetailedUserControl">
            <summary>
            This class is used in the Management Client and Administrator to provide multiple
            pages or tabs of configuration pages.  This class is generated by the MIP Plugin and
            returned to the administrators in the ItemManager.GenerateDetailUserControlList() method.
            </summary>
            The ItemManager owns this UserControl.
            <para>Note: Supported from MIP v4.0</para>
        </member>
        <member name="M:VideoOS.Platform.Admin.DetailedUserControl.#ctor">
            <summary>
            A UserControl used by the ItemManager when multiple UserControls are available for property configuration.
            </summary>
            The Name property is used for display
        </member>
        <member name="P:VideoOS.Platform.Admin.DetailedUserControl.TabHelpId">
            <summary>
            Id used for help display - reserved for future use.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.DetailedUserControl.Image">
            <summary>
            The icon (image) to be used for folder tabs. The bitmap will be resized to relevant size by the MIP Environment.
            </summary>
            The ideal size is 24x24 pixels with Color.Magenta as the transparent color ( FF FF 00 FF ).
        </member>
        <member name="P:VideoOS.Platform.Admin.DetailedUserControl.TabDisplayName">
            <summary>
            The name to be displayed on vertical tab's in XProtect Enterprise / Professional / Express products, and horizontal tabs for XProtect Corporate / Expert products
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.DetailedUserControl.Selected">
            <summary>
            This user control is now displayed
            </summary>
            <remarks>This method is only called when AdminTabBehaviour is set to Individual</remarks>
        </member>
        <member name="M:VideoOS.Platform.Admin.DetailedUserControl.Deselected(System.Boolean)">
            <summary>
            This user control is now beging hidden or closed.
            The Validate method is called before this is called, when user wish to save the changes.
            </summary>
            <remarks>This method is only called when AdminTabBehaviour is set to Individual</remarks>
            <param name="saveDetails">Identify is the deselect occur on user chose save or discard</param>
        </member>
        <member name="M:VideoOS.Platform.Admin.DetailedUserControl.ValidateDetails">
            <summary>
            This method is called when the current user control tab needs to be validated.
            User control should display validation errrors as appropriate.
             </summary>
            <remarks>This method is only called when AdminTabBehaviour is set to Individual</remarks>
            <returns>true if all OK, false if need to stay on current user control</returns>
        </member>
        <member name="F:VideoOS.Platform.Admin.DetailedUserControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.DetailedUserControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VideoOS.Platform.Admin.DetailedUserControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Admin.ItemNode">
            <summary>
            An ItemNode contains all relevant information for a configuring and maintaining a specific kind of item. <br/>
            It has ItemKind, name and a reference to an ItemManager.  <br/>
            The ItemManager assist in managing individual items and the UI controls to be used for this task.
            This class is constructed and used in all Environments, either to manage Items, or to get lists of them via GetItems(...) or GetItem(...) methods.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemNode.#ctor">
            <summary>
            Initialization with no fields set.
            Can be used for complete override of all functions, in case one class can represent multiple ItemNode types.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemNode.#ctor(System.Guid,System.Guid,System.String,System.Drawing.Image,System.String,System.Drawing.Image,VideoOS.Platform.Admin.ItemsAllowed,VideoOS.Platform.Admin.Category,System.Boolean)">
            <summary>
            Construction with various set of field initialized.
            </summary>
            <param name="kind"></param>
            <param name="parentId"></param>
            <param name="nodeText"></param>
            <param name="image"></param>
            <param name="nodeTextMultiple"></param>
            <param name="imageMultiple"></param>
            <param name="itemsAllowed"></param>
            <param name="category"></param>
            <param name="selectable"></param>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemNode.#ctor(System.Guid,System.Guid,System.String,System.Drawing.Image,System.String,System.Drawing.Image,VideoOS.Platform.Admin.Category,System.Boolean,VideoOS.Platform.Admin.ItemsAllowed,VideoOS.Platform.Admin.ItemManager,System.Collections.Generic.List{VideoOS.Platform.Admin.ItemNode})">
            <summary>
            Construction with various set of field initialized.
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <param name="nodeText"></param>
            <param name="image"></param>
            <param name="nodeTextMultiple"></param>
            <param name="imageMultiple"></param>
            <param name="category"></param>
            <param name="selectable"></param>
            <param name="itemsAllowed"></param>
            <param name="itemManager"></param>
            <param name="itemNodes"></param>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemNode.#ctor(System.Guid,System.Guid,System.String,System.Drawing.Image,System.String,System.Drawing.Image,VideoOS.Platform.Admin.Category,System.Boolean,VideoOS.Platform.Admin.ItemsAllowed,VideoOS.Platform.Admin.ItemManager,System.Collections.Generic.List{VideoOS.Platform.Admin.ItemNode},System.Collections.Generic.List{VideoOS.Platform.Admin.SecurityAction})">
            <summary>
            Construction with various set of field initialized.
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <param name="nodeText"></param>
            <param name="image"></param>
            <param name="nodeTextMultiple"></param>
            <param name="imageMultiple"></param>
            <param name="category"></param>
            <param name="selectable"></param>
            <param name="itemsAllowed"></param>
            <param name="itemManager"></param>
            <param name="itemNodes"></param>
            <param name="securityActions"></param>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemNode.#ctor(System.Guid,System.Guid,System.String,System.Drawing.Image,System.String,System.Drawing.Image,VideoOS.Platform.Admin.Category,System.Boolean,VideoOS.Platform.Admin.ItemsAllowed,VideoOS.Platform.Admin.ItemManager,System.Collections.Generic.List{VideoOS.Platform.Admin.ItemNode},System.Collections.Generic.List{VideoOS.Platform.Admin.SecurityAction},System.Collections.ObjectModel.Collection{VideoOS.Platform.Admin.MapAlarmContextMenu})">
            <summary>
            Construction with various set of field initialized.
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <param name="nodeText"></param>
            <param name="image"></param>
            <param name="nodeTextMultiple"></param>
            <param name="imageMultiple"></param>
            <param name="category"></param>
            <param name="selectable"></param>
            <param name="itemsAllowed"></param>
            <param name="itemManager"></param>
            <param name="itemNodes"></param>
            <param name="securityActions"></param>
            <param name="contextMenu"></param>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemNode.#ctor(System.Guid,System.Guid,System.String,System.Drawing.Image,System.String,System.Drawing.Image,VideoOS.Platform.Admin.Category,System.Boolean,VideoOS.Platform.Admin.ItemsAllowed,VideoOS.Platform.Admin.ItemManager,System.Collections.Generic.List{VideoOS.Platform.Admin.ItemNode},System.Collections.Generic.List{VideoOS.Platform.Admin.SecurityAction},System.Collections.ObjectModel.Collection{VideoOS.Platform.Admin.MapAlarmContextMenu},System.Object)">
            <summary>
            Construction with various set of field initialized.
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <param name="nodeText"></param>
            <param name="image"></param>
            <param name="nodeTextMultiple"></param>
            <param name="imageMultiple"></param>
            <param name="category"></param>
            <param name="selectable"></param>
            <param name="itemsAllowed"></param>
            <param name="itemManager"></param>
            <param name="itemNodes"></param>
            <param name="securityActions"></param>
            <param name="contextMenu"></param>
            <param name="customData"></param>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemNode.#ctor(System.Guid,System.Guid,System.String,System.Drawing.Image,System.String,System.Drawing.Image,VideoOS.Platform.Admin.Category,System.Boolean,VideoOS.Platform.Admin.ItemsAllowed,VideoOS.Platform.Admin.ItemManager,System.Collections.Generic.List{VideoOS.Platform.Admin.ItemNode},System.Collections.Generic.List{VideoOS.Platform.Admin.SecurityAction},System.Collections.ObjectModel.Collection{VideoOS.Platform.Admin.MapAlarmContextMenu},System.Object,VideoOS.Platform.Admin.PlacementHint)">
            <summary>
            Construction with various set of field initialized.
            </summary>
            <param name="id"></param>
            <param name="parentId"></param>
            <param name="nodeText"></param>
            <param name="image"></param>
            <param name="nodeTextMultiple"></param>
            <param name="imageMultiple"></param>
            <param name="category"></param>
            <param name="selectable"></param>
            <param name="itemsAllowed"></param>
            <param name="itemManager"></param>
            <param name="itemNodes"></param>
            <param name="securityActions"></param>
            <param name="contextMenu"></param>
            <param name="customData"></param>
            <param name="placementHint"></param>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.ItemKind">
            <summary>
            The ItemKind of this ItemNode.  This becomes the Item.Kind for the Items created by this ItemNode.<br/>
            One ItemNode ONLY defines and is part of administration ONE Kind.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.ParentKind">
            <summary>
            The ParentKind of the ItemNode points to the parent ItemNode's ItemKind. <br/>
            If an ItemNode has a ParentKind equal to Guid.Empty it will be considered as a top level node from a configuration stand point. <br/>
            Items created on this ItemNode uses the ServerId as its identification and all Items created on sub-nodes to this ItemNode should have their ServerId set to the same as the top level Item they are children of.<br/>
            Regardless of the ParentKind value, the ItemNodes are populated in the administrators TreeView in the order they are defined.<br/>
            If a ParentKind is set to Guid.Empty and the ItemsAllowed is None, the TreeNode can function as a informational node to display status overview or help information. The UserControl will get all available space on the form, besides the left hand TreeView.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.Name">
            <summary>
            Name of this node / kind
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.Icon">
            <summary>
            The Icon representing this Kind
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.MapIcon">
            <summary>
            An Icon to be used for items of this kind by the Smart Client Map ViewItem.<br/>
            This icon must contain exactly 6 images of size 8x8, 16x16, 24x24, 32x32, 48x48, and 64x64 in that order.
            
            Please note that MIP items on Map is not supported for XProtect Express.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.MapIconDictionary">
            <summary>
            A dictionary used when the map need to change icons dynamically.<br/>
            This Dictionary is using a Guid as an identification, where the item's Kind will by default use the MapIcon, and this table can be used for any additional Icons to be displayed.<br/>
            When an Item needs to show another Icon, the MapIconKey on the Item is set to one of the Guid's in this dictionary to show a specific Icon or the item's Kind to get back to the default Icon.<br/>
            The Icon must contain all 6 different sizes, from 8x8, 16x16, 24x24, 32x32, 48x48, and 64x64 in that order.
            
            Please note that MIP items on Map is not supported for XProtect Express.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.NameMultiple">
            <summary>
            Name in plural. If not supplied, the Name property is used.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.PropertyHeading">
            <summary>
            An optional string to define what the heading text should be above
            the right hand side containing the property configuration.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.IconMultiple">
            <summary>
            Icon used when plural NameMultiple is used.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.Category">
            <summary>
            Identifies what Category the items created via this ItemNode belongs to.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.Selectable">
            <summary>
            Defines if the Items created by this ItemNode should appear in ItemPickers, when
            showing all types of items.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.ItemsAllowed">
            <summary>
            Defines how many Items can be created on this ItemNode.<br/>
            If set to None, then UI will be modified to avoid display of empty TreeView's
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.ItemManager">
            <summary>
            The Manager that manages access to configuration of this Kind of Item.<br/>
            Access to this class is done very often, and the the class should be created only once.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.ItemNodes">
            <summary>
            Any children ItemNodes of this ItemNode.  <br/>
            Usually the children ItemNodes will point to this one as parentKind.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.SecurityActions">
            <summary>
            Specifies the list of actions the administrator can manage.
            If the list is null, no authorization is done for this kind of item.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.ContextMenu">
            <summary>
            Defines a list of ContextMenu items relevant for this Kind.
            It is displayed when a user right click on a Map containing this Kind of Item.
            
            Please note that MIP items on Map is not supported for XProtect Express.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.CustomData">
            <summary>
            You can add any class or field as appropriate for your plug-in
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.SortKey">
            <summary>
            Defines the order in which the ItemNode names appear in the administrator UI.<br/>
            Default value is 1000.<br/>
            For ItemNodes with same SortKey they will be sorted alphabetically.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.PlacementHint">
            <summary>
            Defines where the item wants to be rendered. Default is under the plug-in's own root node.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemNode.GisMapEnabled">
            <summary>
            Set this to false if GIS Map support is not desired. Default is true.<br/>
            Please note that this only affects GIS Map support and not support for the old Map plugin, and also that only setting
            this to true will not enable the support - it is still also required to set or override the <see cref="P:VideoOS.Platform.Admin.ItemNode.Icon"/> property.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemNode.ToString">
            <summary>
            Use the name as ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Admin.ItemsAllowed">
            <summary>
            Defines how many items can exist of a specific type.<br/>
            Most often this should be set to Many, to allow the user to create a number of Items.<br/>
            When defined as None, then the UI is changed to avoid empty TreeViews.<br/>
            e.g. Corporate Management client will NOT have middle TreeView displayed when this is None or One.<br/>
            When One is specified, you have two options for implementation.  Either create the single Item in the ItemManager
            and then ensure the ContextMenu has disabled the "New..." by returning false on the ItemManager.IsContextMenuValid()
            method, or implement the Create and Delete methods in the ItemManager.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.ItemsAllowed.None">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.ItemsAllowed.One">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.ItemsAllowed.Many">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Admin.Category">
            <summary>
            The category enumeration is used to categorize the Items. The set of categories cannot be extended.
            This is generally used for improving the filtering of Items when
            selecting Items from a Picker dialog.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.Category.Server">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.Category.VideoIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.Category.VideoOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.Category.AudioIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.Category.AudioOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.Category.TriggerIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.Category.TriggerOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.Category.Text">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.Category.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.Category.Layout">
            <summary>
            All Smart Client items fall into this category.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Admin.PlacementHint">
            <summary>
            The placement enumeration is used to place the Items in the administrator UI. The set of categories may be extended.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.PlacementHint.Default">
            <summary>
            Plugin will be placed on the 'MIPPlugins' node.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.PlacementHint.Basics">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.PlacementHint.Servers">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.PlacementHint.Devices">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.PlacementHint.Client">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.PlacementHint.RulesEvents">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.PlacementHint.Security">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.PlacementHint.Dashboard">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.PlacementHint.Logs">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.PlacementHint.Hidden">
            <summary>
            Hide the plugin from the tree view.  The plugin is either a background plugin with no visible parts, or has a option plugin.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.PlacementHint.Root">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.PlacementHint.ParentItemTree">
            <summary>
            Places the items directly under the parent item in the middle tree view selection panel.
            
            The ItemNode will NOT be shown in the left hand side, if the node has a parent ItemNode.
            
            Special care needs to be taken for the 'Add' function - consider to support the GetTranslation Dictionary with an 'Add' content, to
            control the context menu.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Admin.ItemNodeUserControl">
            <summary>
            User control to display status panel for a configuration item, e.g. Connections on a server
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemNodeUserControl.Init(VideoOS.Platform.Item)">
            <summary>
            Display information from or about the Item selected.<br/>
            Note that the item parameter can be 'null' when used and selected on the
            main plug-in TreeNode.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemNodeUserControl.Close">
            <summary>
            Close any session and release any resources used.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Admin.MapAlarmContextMenu">
            <summary>
            Define a ContextMenu line to be displayed on the map when right clicking.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.MapAlarmContextMenu._enabled">
            <summary>
            A boolean indicating if the ContextMenu is enabled or disabled.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.MapAlarmContextMenu._isChecked">
            <summary>
            A boolean indicating if the ContextMenu is checked. Only useful if IsCheckable is true.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.MapAlarmContextMenu._isCheckable">
            <summary>
            A boolean indicating if the ContextMenu is checkable.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.MapAlarmContextMenu.#ctor(System.String,System.String,System.Drawing.Icon)">
            <summary>
            Constructor for the class.
            </summary>
            <param name="displayName"></param>
            <param name="command"></param>
            <param name="icon"></param>
        </member>
        <member name="P:VideoOS.Platform.Admin.MapAlarmContextMenu.Icon">
            <summary>
            The Icon shown on the ContextMenu.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.MapAlarmContextMenu.DisplayName">
            <summary>
            The text displayed on the ContextMenu. Can be localized by adding the <see cref="P:VideoOS.Platform.Admin.MapAlarmContextMenu.Command"/> to the dictionaries returned by <see cref="M:VideoOS.Platform.Admin.ItemManager.GetTranslationDictionary(System.Globalization.CultureInfo)"/>.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.MapAlarmContextMenu.Command">
            <summary>
            The command sent back to the Plug-in, when the user has selected the menu item.
            The plug-in will receive these via the Message: Control.TriggerCommand when subscribing to it.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.MapAlarmContextMenu.Enabled">
            <summary>
            A boolean indicating if the ContextMenu is enabled or disabled.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.MapAlarmContextMenu.IsChecked">
            <summary>
            A boolean indicating if the ContextMenu is checked. Only useful if IsCheckable is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.MapAlarmContextMenu.IsCheckable">
            <summary>
            A boolean indicating if the ContextMenu is checkable.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Admin.SecurityAction">
            <summary>
            Contains definition of a specific security action.
            An Action could be "MANAGE" or "VIEW".
            The DisplayName should be the translated version to be used on UI.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.SecurityAction.ActionId">
            <summary>
            The Id of the action.<br/>
            Remember that RENERIC_READ and GENERIC-WRITE must be available in the complete set of actions, but the display name can be modified to something more meaningful.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.SecurityAction.DisplayName">
            <summary>
            The label to display in the Management Client/Application during setup.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.SecurityAction.#ctor(System.String,System.String)">
            <summary>
            Constructor for the class.
            </summary>
            <param name="actionId"></param>
            <param name="displayName"></param>
        </member>
        <member name="T:VideoOS.Platform.Admin.ToolsOptionsDialogPlugin">
            <summary>
            A class specifying an OptionsDialog plug-in to the Administrator program.<br/>
            <br/>
            Each of the OptionsDialogPlugin’s will have a separate tab in the tools-options dialog.<br/>
            The plug-in should initialize the UI as part of the class construction.  <br/>
            The UserControl will be docked to fill the tab page.<br/>
            <br/>
            When the SaveChanges method is called, the plug-in can use the base method ‘SaveProperties’ to save the configuration, 
            if all configuration fields are saved in the Property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ToolsOptionsDialogPlugin.Id">
            <summary>
            Gets the unique id identifying this plug-in component
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ToolsOptionsDialogPlugin.OptionsEnabled">
            <summary>
            Gets whether the option dialog component in the tools-options dialog should be enabled or not.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ToolsOptionsDialogPlugin.Name">
            <summary>
            The name of this Options Dialog plug-in
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ToolsOptionsDialogPlugin.GenerateUserControl">
            <summary>
            Create a new UserControl to be displayed in a separate new tab in the Tools-Options dialog.
            It is not valid to reuse an instance created earlier, since it may have been disposed by the environment.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ToolsOptionsDialogPlugin.Init">
            <summary>
            This method is called every time the tools-options dialog is loaded.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ToolsOptionsDialogPlugin.Close">
            <summary>
            This method is called every time the tools-options dialog is unloaded.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ToolsOptionsDialogPlugin.LoadSettingsXml(System.Boolean)">
            <summary>
            Get the stored properties from the connected server. 
            </summary>
            <param name="userPrivate">set to true when properties are save for each user</param>
            <returns>true if Properties where found and false if this is a first time</returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ToolsOptionsDialogPlugin.SaveChanges">
            <summary>
            Saves any changes made in the options user control. If the save operation fails then use GetLastOptionsSaveError() to get a string describing the error.
            
            This method should be override by the plug-in to validate the entries, 
            and possibly call this.SaveProperties( true/false ) to have the properties stored on the login server. 
            (If the selected values are stored in the Properties by this plug-in)
            
            The settings are stored under the Id for this plugin.
            </summary>
            <returns>True if settings was successfully saved. False if not</returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ToolsOptionsDialogPlugin.SaveSettingsXml(System.Xml.XmlNode,System.Boolean)">
            <summary>
            Saves the values in the settings XML on the connected server.
            When userPrivate is true, the content is for own use only.
            When userPrivate is false, the content is shared for all users
            connected to a server.
            </summary>
            <param name="settings">The entire XmlNode to be saved.  Only one XmlNode can be saved under a given Id.</param>
            <param name="userPrivate">Identify if the settings is stored for current user only, or to be used for all users.</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ToolsOptionsDialogPlugin.GetLastSaveError">
            <summary>
            Returns the last save error. An empty string is returned if no error is available.
            </summary>
            <returns>The last save error</returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ToolsOptionsDialogPlugin.ShowHelp">
            <summary>
            Shows help specific for this options dialog component.
            </summary>
            <returns>True if show help was handled by this options dialog component otherwise false.</returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ToolsOptionsDialogPlugin.GetConfigurationReportSections">
            <summary>
            Gets the sections available for configuration reporting of this options dialog plugin.
            Override this method to provide custom properties for the MIP plug-in configuration report.
            GetConfigurationReportProperties will be called with each of the sections returned.
            </summary>
            <returns>A dictionary containing section ids and names.</returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ToolsOptionsDialogPlugin.GetConfigurationReportProperties(System.Guid)">
            <summary>
            Gets the configuration properties of a section.
            These properties are used for configuration reporting within the administration environment.
            Override this method to provide custom properties for the MIP plug-in configuration report.
            </summary>
            <param name="sectionId">The section id.</param>
            <returns>
            Dictionary of key-value pairs representing property name and value.
            </returns>
        </member>
        <member name="T:VideoOS.Platform.Admin.ToolsOptionsDialogUserControl">
            <summary>
            This UserControl is created by the PluginDefinition and placed in a new separate tab in the administrator's tools-options dialog.<br/>
            The UserControl will be added to the owning tab parent UserControl and docking set to Fill.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ToolsOptionsDialogUserControl.Init">
            <summary>
            Called when the UserControl should initialize the UI
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ToolsOptionsDialogUserControl.Close">
            <summary>
            Cleanup any resources or event registrations
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Admin.ItemManager">
            <summary>
            This class is created once for all Items of a specific Kind and is responsible for getting and saving configuration for 
            all Items of that Kind<br/>
            <br/>
            This class is also responsible for creating, filling and saving 
            UserControl and relevant fields changed by the user in the administrators.<br/>
            Normally there will be one ItemManager for each ItemNode.<br/>
            If the Items being managed are stored on another server, then this class can utilize
            the Init() and Close() methods to setup sessions to the remote server in anticipation 
            of calls to GetItems().<br/>
            <br/>
            <b>EventServer and Items on MAP</b><br/>
            This class is also involved in defining ContextMenu on the SmartClient MAP, because the plug-in 
            executing in the Event Server, are providing the Smart Client MAP ViewItem with 
            all relevant plug-ins and their definitions.<br/>
            As the Event Server uses authorization for Items, the ItemNode needs to define the SecurityActions
            relevant for the items being managed by the ItemManager. A minimum of two SecurityActions must always be defined
            for the Items to be available in the Smart Client.<br/>
            <br/>
            <b>Item Selection in the Administrators</b><br/>
            Selection of an Item can happen via mouse click on the TreeView or via ContentMenu Property selection in Enterprise.<br/>
            The user action will result in the following sequences of events:<br/>
            a)	ItemManager is accessed through the ItemNode<br/>
            b)	The GenerateUserControl() is called to allow ItemManager to create the User Control, setup the ConfigurationChangedByUserEvent, and return the UserControl to the caller.<br/>
            c)	The caller will add the UserControl to its relevant panel and set userControl.Dock = DockStyle.Fill to fill available area.<br/>
            d)	If executing in the enterprise administrator and the floating property window is opened, the size of the window is adjusted to a relevant size based on the UserControl.Size<br/>
            e)	Existing configuration is fetched by calling the ItemManager.GetItem(FQID)<br/>
            f)	The ItemManager.FillUserControl(item) method is called for let the ItemManager populate the UserControl.<br/>
            <br/>
            <br/>
            When de-selecting an item, the ItemManager.FillUserControl(null) is called to let the ItemManager clear the UserControl. 
            The parent UserControl will also have Enabled=false; set shortly after this call.<br/>
            Note: A ItemManager.ClearUserControl() is now defined - this is used when no items are selected to let the
            implementation clear all fields and disable the entire form.
            <br/>
            <b>Item edit and update</b><br/>
            After an Item is selected or created, the system needs to know if any updates have been done by the administrator.  
            Ensure the ConfigurationChangedByUserHandler is called whenever the administrator changes something on the UI.  
            This will allow the administration application to enable Save and Apply buttons as appropriate.<br/>
            When the administrator presses a Save or Apply button, the <see cref="M:VideoOS.Platform.Admin.ItemManager.ValidateAndSaveUserControl"/> is called to 
            let the ItemManager and the underlying UserControl validate the entered values. If fields are valid the method returns true.
            <br/>
            <br/>
            <b>TreeView name change</b><br/>
            On the TreeView itself, it is possible to press F2 and edit the name directly. In this case the updated name is passed to the ItemManager via the 
            SetItemName(name) method.<br/>
            The ItemManager should save the new name immediately.<br/>
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Admin.ItemManager.ConfigurationChangedByUser">
            <summary>
            An event that needs to fired when the user changes something on the 
            UserControl that requires a save at some point.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.#ctor">
            <summary>
            Construction of the ItemManager does not need any parameters.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.Init">
            <summary>
            The Init method is called when the Environment is up and running, and the Configuration.Instance can be used
            for getting specific Items from the Milestone servers, as well as calling the GetConfiguration() methods.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.Close">
            <summary>
            The Close() method is called when the user selected to log off or exit the application.<br/>
            After this call there may be a new session starting, in which case the Init() method is called again.
            If this happens please take notice the it might be towards another server, so no caching of anything should happened after the call to the Close() method.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.ConfigurationChangedByUserHandler(System.Object,System.EventArgs)">
            <summary>
            The UserControl needs to indicate when the user have changed any field, 
            and should call this event handler every time.
            The MIP environment will ensure that save or apply buttons are enabled.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.PushConfigurationChangedEventHandler">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.PopConfigurationChangedEventHandler">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemManager.CurrentItem">
            <summary>
            The Item currently being displayed and worked on
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GenerateDetailUserControl">
            <summary>
            Generate the UserControl for configuring the Kind of item that this ItemManager manages. <br/>
            Overwrite it with your own implementation returning your own UserControl derived object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GenerateDetailUserControlList">
            <summary>
            Generate a list of extra UserControls for configuring more pages of information this ItemManager manages.
            </summary>
            Note that this method will only be called if <see cref="M:VideoOS.Platform.Admin.ItemManager.GenerateDetailUserControl"/> returns null, so you will need to overwrite it with an implementation returning null for this method to be utilized.<br/>
            The ItemManager needs to keep track of all the UserControls it generates, e.g. passing on 
            the ItemManager class to each DetailedUserControl or implement relevant events for understanding 
            when the user changes the UI and when the ItemManager need to update the content.
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GenerateOverviewUserControl">
            <summary>
            A user control to display when the administrator clicks on the treeNode.
            This can be a help page or a status over of the configuration
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.ReleaseUserControl">
            <summary>
            This call is issued when the itemManager needs to remove any event registration or dispose of specific objects
            as the UserControl is no longer being used.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GenerateAddUserControl(VideoOS.Platform.Item,VideoOS.Platform.FQID)">
            <summary>
            Create a UserControl to be used for adding a new item.<br/>
            Just fill the user control with default content, but do NOT add it to your configuration yet.<br/>
            Implementation of this method will determine the flow of calls for creating new Items.<br/>
            When implemented, this UserControl is showed to the user, and upon OK pressed the ValidateAddUserControl is called
            for the plug-in to validate the entry, and a OK response will result in closing the form containing the AddUserControl and 
            a call the the Create() method including the AddUserControl.<br/>
            If not implementing this method, the Create() method WITHOUT the AddUserControl parameter is called, and a default
            Item is then created, stored (where ever this ItemManager stores it configuration), and displayed in the
            TreeView.<br/>
            Last step is that the new item node is selected and the ItemManager.FillUserControl is called
            to fill the large configuration form.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemManager.DisableUserControlWhenNoItemIsSelected">
            <summary>
            Override this in your ItemManager and return false if your Items' UserControl does not want to be disabled when no item is selected
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GetTranslationDictionary(System.Globalization.CultureInfo)">
            <summary>
            Returns a Dictionary used for fine tuning specific translations.<br/>
            This method is optional and does not have to be implemented or may return null.<br/>
            The current use is for these translations:<br/>
            - 'Add'. The heading used for the dialog showed when adding a new Item from the Management Client. The default text is combined "Add "+ItemNode.Name<br/>
            - Smart Map context menu items. The string that is used for the lookup will be the <see cref="P:VideoOS.Platform.Admin.MapAlarmContextMenu.Command"/>.<br/>
            - The kind. The string used for the lookup is the upper-case string representation of the kind GUID.<br/>
            </summary>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.ValidateAddUserControl(System.Windows.Forms.UserControl)">
            <summary>
            Validate the content of the AddUserControl generated by this class's GenerateAddUserControl.
            </summary>
            <param name="addUserControl"></param>
            <returns>True if the content is valid.</returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.FillUserControl(VideoOS.Platform.Item)">
            <summary>
            Fill the UserControl with the content of the Item or the data it represent.<br/>
            When the ItemNode.ItemsAllowed == ItemsAllowed.One, the item in this call will
            often be null, as the ItemManager itself will be in control of the single item.<br/>
            When the ItemNode.ItemsAllowed == ItemsAllowed.None, the item in this call will
            always be null, as the system does not know what kind of information the plugin like to display.
            </summary>
            <param name="item">The Item to work with</param>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.FillUserControl">
            <summary>
            This overloaded method is used when no Items are selected, e.g. for summary pages
            </summary>
            <remarks>Supported from MIP v4.5</remarks>
            <remarks>When not implemented, it will call the FillUserControl(null) and ignore any NullReferenceExceptions</remarks>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.ClearUserControl">
            <summary>
            Clear all user entries on the UserControl.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.SetItemName(System.String)">
            <summary>
            Set the name on current Item, used by TreeView edit via F2.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GetItemName">
            <summary>
            Get the name of the current Item.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GetItems">
            <summary>
            Returns a list of all Items on top level (e.g. no parents)
            </summary>
            <returns>A list of items.  Allowed to return null if no Items found.</returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GetItems(VideoOS.Platform.Item)">
            <summary>
            Returns a list of all Items of the Kind this ItemManager manages. 
            When no parentItem is provided, this ItemManager should be managing a server configuration.
            </summary>
            <param name="parentItem">The parent owning the items. </param>
            <returns>A list of items.  Allowed to return null if no Items found.</returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GetItem(VideoOS.Platform.FQID)">
            <summary>
            Returns the Item defined by the FQID. Will return null if not found.
            </summary>
            <param name="fqid">Fully Qualified ID of an Item</param>
            <returns>An Item</returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.ValidateAndSaveUserControl">
            <summary>
            Validate the user entry, and return true for OK.<br/>
            External configuration should be saved during this call.<br/>
            If any entry error exists, the field in error should get focus, and an error message should be displayed to the user or a ValidateAndSaveMIPException should be thrown.
            </summary>
            <exception cref="T:VideoOS.Platform.ValidateAndSaveMIPException">Can be thrown to provide a more specific error message.</exception>
            <returns>Indicates error in user entry.  True is a valid entry</returns>
        </member>
        <member name="T:VideoOS.Platform.Admin.ItemManager.ItemSummaryHeader">
            <summary>
            A structure which describes a column header in a summary pane
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.ItemManager.ItemSummaryHeader.Name">
            <summary>
            The text string to be displayed in the column header. It is the responsibility of the integration to provide localized strings.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.ItemManager.ItemSummaryHeader.Type">
            <summary>
            The type of the values in each row of this column. Types allowed are: string, int and bool.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.ItemManager.ItemSummaryHeader.ReadOnly">
            <summary>
            A flag telling if the UI should allow the values in the column to be edited.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.ValidateAndSaveItemSummary(VideoOS.Platform.Item,System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Int32},System.Int32@)">
            <summary>
            Validate the updated values from a row in a summary pane.<br/>
            Called by the admin client when the end user applies all changes to one row in the summary pane
            To be re-implemented in each integration's Integrationname_ItemManager<br/>
            External configuration should be saved during this call.<br/>
            If any entry error exists, the errIndex should be filled, and either an error message can be displayed or a ValidateAndSaveMIPException can be thrown.
            </summary>
            <exception cref="T:VideoOS.Platform.ValidateAndSaveMIPException">Can be thrown to provide a more specific error message.</exception>
            <param name="item">The item for which one or more of its property values has been changed</param>
            <param name="allValues">A list of values, changed as well as unaltered ones.</param>
            <param name="changedIndices">A list of 0-based indexes for those values which were changed.</param>
            <param name="errIndex">Returns the 0-based index of the most critical field, which has an invalid value. Returns -1 for no invalid fields.</param>
            <returns>True if all the changed value were accepted. If false is returned, the UI will set focus to the field given by errIndex.  </returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GetItemSummaryHeaders">
            <summary>
            Allows an integration to define the columns in a summary pane. This includes name, value type and read-only flag.
            The columns will be ordered as indexed in this list, the first index being 0.
            Called by the admin client when it is about to display a summary pane
            To be re-implemented in each integration's Integrationname_ItemManager
            </summary>
            <returns>A list of ItemSummaryHeaders defining the summary pane's column headers</returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GetItemSummary(VideoOS.Platform.Item)">
            <summary>
            Allows an integration to define the values to be presented in one row of a summary pane
            Called by the admin client when it is about to display one row of a summary pane
            To be re-implemented in each integration's Integrationname_ItemManager
            </summary>
            <param name="item">The Item which the pane is to display in a row</param>
            <returns>A list of objects. The order and type of each object must match the type returned in GetItemSummaryHeaders()</returns>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemManager.SummaryUpdateInterval">
            <summary>
            If the summary panel needs to be updated, set this property to the number of seconds inbetween updates.
            </summary>
            When set to 0, updates are disabled.
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GetConfigurationReportProperties(VideoOS.Platform.Item)">
            <summary>
            Gets the configuration properties of an item.
            These properties are used for configuration reporting within the administration environment.
            Override this method to provide custom properties for the MIP plug-in configuration report.
            </summary>
            <param name="item">The item.</param>
            <returns>Dictionary of key-value pairs representing property name and value.</returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.IsContextMenuValid(System.String)">
            <summary>
            Just before a context menu is displayed, each line on the context menu is checked for it should be enabled or disabled.
            This method is called with the following command (If allowed by the ItemNode definition)<br/>
              "ADD" - for the "Add new ..." <br/>
              "DELETE" - for the "Delete ..."<br/>
              "RENAME" - for rename<br/>
            If your plugin has the configuration stored on another server, and management is not possible
            via the ItemManager, then this method can be used to disable all ContextMenu actions.<br/>
            When this method is not implemented, the default value returned is true.
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GetContextMenu(VideoOS.Platform.Item)">
            <summary>
            List of contextmenu items to be displayed in the administrator
            
            When the item parameter is null, the administrator right clicked on the type node, while
            when the item contains a specific item, the administrator right clicked on an individual item.
            This also reflects the hierarchy of the ItemNode's - when the administrator clicks on an ItemNode 
            that does not have any parent ItemNode - the item will be null; while when the administrator clicks
            on an item (or its type) that has a parent ItemNode - the Item will be filled with the specific parent Item.
            
            This method needs to return immediately - no remote communication should be required.
            </summary>
            <param name="item">The item the contextmenu will be shown for</param>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.Admin.ItemManager.TabBehaviour">
            <summary>
            Describe how user selection of different tabs should be handled.
            <see cref="T:VideoOS.Platform.Admin.ItemManager.AdminTabBehaviour"/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Admin.ItemManager.AdminTabBehaviour">
            <summary>
            Describe how user selection of different tabs should be handled.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.ItemManager.AdminTabBehaviour.Group">
            <summary>
            This is default implementation for MIPSDK 4.0 - all tabs are called when new tabs are selected,
            e.g. FillUserControl is called at start of new tab selection, and ValidateAndSave are called 
            on every new tab de-selection.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.ItemManager.AdminTabBehaviour.Individual">
            <summary>
            The FillUserControl is only called once, and 3 new methods are used to 
            understand whar UserControl are currently displayed: <br/>
            - Selected(), ValidateDetails() Deselected()
            </summary>
            <remarks>
            The Selected() method is call on every tab that is selected.<br/>
            The Validate() is called when navigating away from a tab -  and plugin can return a "Cancel" tab deselection.<br/>
            The Deselected() is called after the Validate() method, if another tab is selected, or close/cancel is pressed.<br/>
            The ValidateAndSave() is called upon user pressing the OK button.<br/>
            If the Cancel butto is called, the the Deselected() method is called, ReleaseUserControl()
             </remarks>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.CreateItem(VideoOS.Platform.Item,VideoOS.Platform.FQID)">
             <summary>
             Create a new item. Insert default values.  <br/>
             The parentFQID can be null, when a top level node is created (e.g. no parent)<br/>
             The new fqid should be filled with ServerID, ParentId, ObjectId or ObjectIdString and Kind.
             <br/>
             <br/>
             When storing the configuration on the Milestone server, the following code can be used:<br/>
             <code>
             public override Item CreateItem(Item parentItem, FQID suggestedFQID)
             {
            	    CurrentItem = new Item(suggestedFQID, "Enter a name");		// Make a new Item, use the suggested FQID
            	    if (_userControl != null)									// If userControl visiable
            	    {
            		    _userControl.FillContent(CurrentItem);					//    show default content
            	    }
                 //Save initial configuration on server - so following GetItems() will include this on the list
            	    Configuration.Instance.SaveItemConfiguration(MyPluginId, CurrentItem);
            	    return CurrentItem;
            }
             </code>
             </summary>
             <param name="parentItem">Identifies the configuration parent to the new item.</param>
             <param name="suggestedFQID">A pre-generated fqid with above fields filled. 
             The ObjectId or ObjectIdString can be overridden.</param>
             <returns>A new Item, only the FQID and Name field are required to be filled.  The return valus is used to identify and select the item tree node</returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.CreateItem(VideoOS.Platform.Item,VideoOS.Platform.FQID,System.Windows.Forms.UserControl)">
            <summary>
            Create a new item. Insert values as user has entered on the AddUserControl.<br/>
            The parentFQID can be null, when a top level node is created (e.g. no parent)
            The new fqid should be filled with ServerID, ParentId, ObjectId or ObjectIdString and Kind.
            </summary>
            <param name="parentItem">Identifies the configuration parent to the new item.</param>
            <param name="suggestedFQID">A pre-generated fqid with above fields filled. 
            The ObjectId or ObjectIdString can be overridden.</param>
            <param name="addUserControl">A filled user control returned by the GeneratedAddUserControl method after it has been displayed and edited by the user</param>
            <returns>A new Item, only the FQID and Name field are required to be filled.  The return values is used to identify and select the item tree node</returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.DeleteItem(VideoOS.Platform.Item)">
            <summary>
            When an administrator selects the context menu Delete item, or press the DEL key, 
            a confirmation dialog is displayed and upon administrator confirms this method is called.<br/>
            <code>
            //For configurations saved on the video server, the following code can be used:
            if (item != null)
            {
                Configuration.Instance.DeleteItemConfiguration(MyPluginId, item);
            }
            </code>
            </summary>
            <param name="item">The Item to delete</param>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GetKnownEventTypes">
            <summary>
            Deprecated - see GetKnownEventTypes(CultureInfo culture).
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GetKnownEventTypes(System.Globalization.CultureInfo)">
            <summary>
            Return all the Event Types this Kind of Item can deliver to the Event Server.
            This list is used for configuring alarms.
            This method should always support at least the en-US culture, which is the expected culture
            of incoming events.
            </summary>
            <param name="culture">The requested culture in which the event type messages should be returned</param>
            <returns>The collection of known event types</returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GetKnownEventGroups(System.Globalization.CultureInfo)">
            <summary>
            Return all the Event Groups this Kind of Item can deliver to the Event Server.
            The list is used to group the Event Types.
            This method should always support at least the en-US culture.
            </summary>
            <param name="culture">The requested culture in which the group names should be returned</param>
            <returns>The collection of known event groups</returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GetOperationalState(VideoOS.Platform.Item)">
            <summary>
            Return the operational state of a specific Item.
            This is used by the Event Server.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GetItemStatusDetails(VideoOS.Platform.Item,System.String)">
            <summary>
            Can return an XML string with status details to be displayed via a ContextMenu on the Smart Client Map ViewItem.
            The return value is null if no status is available, or an XML string like:
            <code><![CDATA[
            <?xml version="1.0" encoding="utf-8"?>
               <details language="en-US">
                  <detail detailname="CPU Usage %">
                     <detail_int64 unit="percent">6</detail_int64>
                  </detail>
                  <detail detailname="Memory Free">
                     <detail_int64 unit="bytes">4067426304</detail_int64>
                  </detail>
               </details>
            </xml>
            ]]>
            </code>
            <br/>
            The valid 'detail' types are:<br/>
            - detail_string, detail_integer, detail_int64, detail_decimal, detail_datetime_start, detail_datetime_end<br/>
            The valid 'unit' types are:<br/>
            - bytes, percent, bitspersecond, bytespersecond<br/>
            </summary>
            <param name="item"></param>
            <param name="language">The language the Smart Client is using. The detailname and content should be translated to defined language.</param>
            <returns>null or an XML string</returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GetItemStatusDetails(VideoOS.Platform.Item)">
            <summary>
            Overloaded method when using default language ("en-US").<br/>
            Please make sure to implement the GetItemStatusDetails with 2 parameters, as that method is the one being called most of the time.
            </summary>
            <param name="item"></param>
            <returns>null or an XML string</returns>
        </member>
        <member name="M:VideoOS.Platform.Admin.ItemManager.GenerateAlarmPreviewUserControl(VideoOS.Platform.FQID,System.Object)">
            <summary>
            Deprecated! Use PluginDefinition.GenerateAlarmPreviewWpfUserControl() instead.
            
            For displaying detail information about an Alarm or an Event, this method can be implemented
            to return a UserControl to be displayed when the user selects an Alarm in the alarm list, or a Event in the event list, in the
            Smart Client.<br/>
            The returned UserControl will be placed together with other relevant information like CameraViewItem's within the AlarmPreview ViewItem.<br/>
            Note: the alarmOrBaseEvent need to be checked for type and type casted accordingly, e.g. to Alarm, BaseEvent or AnalyticsEvent.
            </summary>
            <returns>null if no relevant information to display, otherwise a filled UserControl</returns>
        </member>
        <member name="T:VideoOS.Platform.Admin.OperationalState">
            <summary>
            The operation state indicates how a specific Item is operating.
            This is used by the Event Server.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.OperationalState.Ok">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.OperationalState.Warning">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.OperationalState.Disabled">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.OperationalState.Error">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Admin.OperationalState.OkActive">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ClientControl">
            <summary>
            The class to access Client relevant methods.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.CreateImageViewerWpfControlInternal(VideoOS.Platform.Client.WindowInformation)">
            <summary>
            Internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.CreatePlaybackWpfUserControlInternal(VideoOS.Platform.Client.WindowInformation)">
            <summary>
            Internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="F:VideoOS.Platform.ClientControl.ExportTimeIntervals">
            <summary>
            Name of property describing the time intervals for the export of an item instance.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ClientControl.EmbeddedCameraFQIDProperty">
            <summary>
            Name of property that allows a MIP view item to specify which embedded camera it contains. Setting this property will ensure that the embedded camera is added to the timeline and can be exported.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ClientControl.LiveBuildInWorkSpaceId">
            <summary>
            Guid defining the object id of the build in live workspace item
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ClientControl.PlaybackBuildInWorkSpaceId">
            <summary>
            Guid defining the object id of the build in playback workspace item
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ClientControl.SequenceExplorerBuildInWorkSpaceId">
            <summary>
            Guid defining the object id of the build in sequence explorer workspace item
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ClientControl.SystemMonitorBuildInWorkSpaceId">
            <summary>
            Guid defining the object id of the build in system monitor workspace item
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ClientControl.AlarmManagementBuildInWorkSpaceId">
            <summary>
            Guid defining the object id of the build in alarm management workspace item
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ClientControl.AccessControlBuildInWorkSpaceId">
            <summary>
            Guid defining the object id of the build in access control workspace item
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ClientControl.TransactBuildInWorkSpaceId">
            <summary>
            Guid defining the object id of the build in transact workspace item
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ClientControl.PlaybackControllerBase">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ClientControl.Instance">
            <summary>
            This Singleton item of this class. 
            Only use the 'get' access method.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ClientControl.SelectedTimeZoneInfo">
            <summary>
            This field indicate what timezone the user has selected to work in.<br/>
            This will by default be the local timezone for the PC, but can be changed to another zone by the user.<br/>
            The effect is that all UI components should display date/time information in this selected TimeZone.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ClientControl.ShownWorkSpace">
            <summary>
            Gets or sets the current shown Smart Client work space.<br/>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ClientControl.WorkSpaceState">
            <summary>
            Gets or sets the current Smart Client work space state.<br/>
            The state can be Normal or Setup for the current workspace, what another workspace is selected, the current workspace will
            go out of Setup, and be returned to Normal work space state.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ClientControl.Theme">
            <summary>
            Return the currently select Theme details. <br/>
            This class is only useful for Smart Client plugins.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ClientControl.Initialized">
            <summary>
            Indicates if the ClientControl specific instance has been created for the executing Environment.<br/>
            When executing in the Smart Client, this is always initiated by the Smart Client, when executing as a standalone application, 
            you can choose to call the VideoOS.Platform.SDK.UI.Environment.Initialize() method yourself, or let the MIPSDK do this automatically (New in MIP SDK v3).
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.Init">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.RegisterReceivers">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.Close">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GenerateImageViewerControl">
            <summary>
            Creates a new instance of ImageViewerControl.
            This method is used within Smart Client and standalone plug-ins.
            </summary>
            <exception cref="T:System.IO.FileNotFoundException">Is thrown when one of the dependencies is not found.</exception>
            <returns>The new ImageViewerControl</returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GenerateImageViewerControl(VideoOS.Platform.Client.WindowInformation)">
            <summary>
            Creates a new instance of ImageViewerControl.<br/>
            This method is used within Smart Client.<br/>
            The WindowInformation class should be passed on from the ViewItemUserControl that this control will be added to.<br/>
            The main effect of adding the WindowInformation is that the ImageViewer will run in live and playback mode just like 
            the Smart Client usually do, e.g. flowing windows have different mode then the main window.
            </summary>
            <returns>The new ImageViewerControl</returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GenerateVideoControl">
            <summary>
            Generates an instance of the <see cref="T:VideoOS.Platform.Client.VideoControl"/> class.
            
            Only for use in Smart Client plugins.
            </summary>
            <returns>The new VideoControl</returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GenerateViewControl(System.Collections.Generic.List{VideoOS.Platform.Client.ViewControlItem},System.Collections.Generic.List{System.Drawing.Rectangle},VideoOS.Platform.Client.WindowInformation)">
            <summary>
            Generates an instance of the <see cref="T:VideoOS.Platform.Client.ViewControl"/> class.
            
            Only for use in Smart Client plugins.
            </summary>
            <param name="items">The view control items to show in the view layout</param>
            <param name="viewLayout">The layout to use</param>
            <param name="windowInformation">The window to show the view on</param>
            <returns>The new ViewControl</returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GenerateViewControl(System.Collections.Generic.List{VideoOS.Platform.Client.ViewControlItem},System.Collections.Generic.List{System.Drawing.Rectangle})">
            <summary>
            Generates an instance of the <see cref="T:VideoOS.Platform.Client.ViewControl"/> class.
            
            Only for use in Smart Client plugins.
            </summary>
            <param name="items">The view control items to show in the view layout</param>
            <param name="viewLayout">The layout to use</param>
            <returns>The new ViewControl</returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GenerateAudioPlayerControl">
            <summary>
            Creates a new instance of a AudioPlayerControl.
            This method is used for standalone application and Smart Client plugins.  
            Upon return the generated audio player need to be added to a UserControl.Control collection.
            </summary>
            <returns>The new AudioPlayerControl</returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GenerateAudioPlayerControl(VideoOS.Platform.Client.WindowInformation)">
            <summary>
            Creates a new instance of a AudioPlayerControl.<br/>
            This method is used for Smart Client plugins. <br/>
            Upon return the generated audio player need to be added to a UserControl.Control collection.<br/>
            The WindowInformation class should be passed on from the ViewItemUserControl that this control will be added to.<br/>
            The main effect of adding the WindowInformation is that the AudioPlayer will run in live and playback mode just like 
            the Smart Client usually do, e.g. flowing windows have different mode then the main window.
            </summary>
            <returns>The new AudioPlayerControl</returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GeneratePcAudioRecorder">
            <summary>
            Generate a AudioRecorder instance that pick up audio from the PCs microphone
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GenerateAdminImageViewerControl">
            <summary>
            Creates a new instance of a AdminImageViewerControl.
            
            This method is used within XProtect Corporate management client and XProtect Enterprise administrator applications.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GeneratePlaybackUserControl">
            <summary>
            Generates a new instance of a PlaybackUserControl.
            
            This works together with one or more ImageViewerControl(s) and one PlaybackController.
            For standalone applications, you can use the PlaybackController controller and control it via your own user interface,
            and issue Message's to have it navigate. 
            
            This method only works within Smart Client.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GetPlaybackController(VideoOS.Platform.Client.WindowInformation)">
            <summary>
            Get the default playback controller for a given window within the Smart Client.<br/>
            The ViewItemUserControl base class contains the WindowInformation to use as parameter.
            
            This method only works within Smart Client.
            </summary>
            <param name="windowInformation"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GeneratePlaybackUserControl(VideoOS.Platform.Client.WindowInformation)">
            <summary>
            Generates a new instance of a PlaybackUserControl.<br/>
            This is intended to work together with one or more ImageViewerControl(s) and a PlaybackController (In Smart Client or for standalone application in the MIPSDK .Net Library).<br/>
            </summary>
            <param name="windowInformation">Identifies that the returned UserControl will be placed on the window identified by the WindowInformation.</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GetViewGroupItems">
            <summary>
            Get top list of all accessible view groups for this user. Usually this will return a private group and one or more public groups.
            This method is used within the Smart Client.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GetSmartWallItems">
            <summary>
            Get top list of all video wall view groups for this user.  
            This method is used within the Smart Client.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GetWorkSpaceItems">
            <summary>
            Gets a list of all available work spaces.<br/>
            This method is used within the Smart Client.<br/>
            These items can be used for selecting the active workspace via this class or via messages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.CreateTemporaryGroupItem(System.String)">
            <summary>
            Create a new Temporary View Group on top level in the Tree structure.<br/>
            The returned GroupItem will exists as long as the Smart Client is logged in to a server.<br/>
            The created item will be visible to the operator, unless the following property is set:<br/>
            	groupItem.Properties["Visible"] = "False";<br/>
            <br/>
            The returned GroupItem is an instance of a ConfigItem and support the AddChild and RemoveChild methods for managing ViewGroups on the next level.
            This method is used within the smart client.
            </summary>
            <param name="name">Name of the View Group</param>
            <returns>The new ViewGroupItem just created, as a ConfigItem.</returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.DeleteTemporaryGroupItem(VideoOS.Platform.Item)">
            <summary>
            This method will delete a previously created GroupItem through the CreateTemporaryGroupItem method.<br/>
            This method is used within the smart client.
            </summary>
            <param name="groupItem">The GroupItem returned by the CreateTemporaryGroupItem</param>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.RegisterUIControlForAutoTheming(System.Object)">
            <summary>
            Register the provided UI control for auto theming. The SC theme will automatically 
            be applied to registered controls. The theme is applied to the registered control and 
            all child controls automatically. Current accepted controls are 
            System.Windows.Forms.Control (Windows Forms) and System.Windows.Controls.Control (WPF).<br/>
            All side panels, property panels and option configuration panels are automatically being 
            themed accordingly to the Theme definition. This method should be used for the main part of the 
            ViewItem and any pop Forms you may have.
            </summary>
            <param name="uiControl">The UI control to register</param>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.CallOnUiThread(System.Action)">
            <summary>
            Use this method to have a method executed on the UI thread.
            </summary>
            <example>
            The below line will call the MuFillTextBox method on the UI thread.
            <code>
               ClientControl.Instance.CallOnUiThread( () => MyFillTextBox("fill this text") );
            
            private void MyFillTextBox(String s)
            {
                _myTextBox.Text = s;
            }
            </code>
            </example>
            <param name="actionToBeInvoked"></param>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.ShowHelp(System.Windows.Forms.Control,System.Int32)">
            <summary>
            Reserved for internal use
            </summary>
            <param name="control"></param>
            <param name="id"></param>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.FireSignalKeyDownEvent(System.Windows.Forms.Keys)">
            <summary>
            Do not use this method. Use RaiseKeyDownEvent instead
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.RaiseKeyDownEvent(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raise key down events in the Smart Client. <br/>
            Use this method to pass key down events received in ElementHost hosted WPF controls in the plugin. For pure Winforms 
            plugins it should not be necessary to call this method.
            </summary>
            <param name="e">The winform event args</param>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.Print(System.Drawing.Bitmap,System.String,System.String)">
            <summary>
            Open a print dialog where user can enter a notes and issue preview and print.
            </summary>
            <param name="bitmap">A bitmap to be placed at the top of the report.</param>
            <param name="name">Name of the report</param>
            <param name="extraInformation">Multiple lines of text can be provided</param>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.Print(System.Drawing.Bitmap,System.String,System.String,System.String)">
            <summary>
            Open a print dialog where user can enter a notes and issue preview and print.
            </summary>
            <param name="bitmap">A bitmap to be placed at the top of the report.</param>
            <param name="name">Name of the report</param>
            <param name="extraInformation">Multiple lines of text can be provided</param>
            <param name="cameraName">The name to display for the label 'camera'</param>
        </member>
        <member name="E:VideoOS.Platform.ClientControl.NewImageViewerControlEvent">
            <summary>
            A background plug-in can subscribe to this event to be advised when a new ImageViewerControl has been created.
            The ImageViewerAddOn class passed as a parameter, can be used for controlling the ImageViewer's mode, and for
            adding overlay to the originators ImageViewerControl.<br/>
            This is intended for use by analytics overlay drawings and for retail text overlay.
            
            Note that the content of the ImageViewerAddOn may not be filled when this event is fired,
            and the receiving class should register on the ImageViewerAddOn's PropertyChangedEvent
            to keep the receiver in sync with the correct e.g. CameraId and other properties.
            </summary>        
        </member>
        <member name="E:VideoOS.Platform.ClientControl.ApplicationCloseEvent">
            <summary>
            Subscribe to this event to be notified when the application is about to be shut down.
            
            Generally it is a better idea to do cleanup in the Close() methods as these will be called
            whenever the application is no longer logged on to the VMS and thus configuration might no longer be valid,
            but if you have some cleanup that should only be done when the application is actually shutting down,
            this is the place to do it.
            
            Only do basic cleanup here. Don't attempt to access any UI or utilize MIP functionality in general here,
            as a lot of that will already be gone at this point.
            
            The event is only supported in Smart Client and Management Client.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ClientControl.NewImageViewerControlHandler">
            <summary>
            
            </summary>
            <param name="imageViewerAddOn"></param>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GeneratePlaybackController">
            <summary>
            This method can be called when a standalone application would like to have multiple
            PlaybackControllers active at the same time.<br/>
            One default PlaybackController is build-in and addressed by sending messages with receive FQID = null. <br/>
            Each PlaybackController is addressed by sending messages to it with the receiver FQID equal to the
            return value of this method.<br/>
            Each of the ImageViewerControl's have one (and only one) PlaybackController that controls it. The default is the build-in BrowserController, 
            but can be changed by setting the ImageViewerControl.PlaybackControllerFQID = result from this method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GetPlaybackController(VideoOS.Platform.FQID)">
            <summary>
            This method will lookup the actual class handling the playback. 
            Notice that not all methods are available for all Environments.
            </summary>
            <param name="fqid"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.ReleasePlaybackController(VideoOS.Platform.FQID)">
            <summary>
            This method will dispose of a PlaybackController previous created from the GeneratePlaybackController() method.
            </summary>
            <param name="fqid"></param>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GetSmartClientProfileSetting(System.Int32)">
             <summary>
             Gets the <see cref="T:VideoOS.Platform.Data.SmartClientProfileSetting"/> for the provided key.
            
             Only supported in Smart Client.
             </summary>
             <param name="smartClientProfileSettingKey">Key identifying which <see cref="T:VideoOS.Platform.Data.SmartClientProfileSetting"/> to fetch.</param>
             <returns><see cref="T:VideoOS.Platform.Data.SmartClientProfileSetting"/> instance associated with the provided key, or null if it does not exist.</returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.GetWindowState(VideoOS.Platform.FQID)">
            <summary>
            Gets the state of the provided window <see cref="T:VideoOS.Platform.FQID"/>.
            </summary>
            <param name="window">The window <see cref="T:VideoOS.Platform.FQID"/> to fetch the current state of.</param>
            <returns><see cref="T:System.Windows.WindowState"/> of the provided window.</returns>
            <exception cref="T:VideoOS.Platform.MIPException">Thrown if the method is not supported in the environment from where it is called.</exception>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.NewEventHandler(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            Send a new Event into the alarm handling of EventServer
            </summary>
            <param name="message"></param>
            <param name="dest"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.NewEventAsAlarmHandler(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            Send a new Event into the alarm handling of EventServer
            </summary>
            <param name="message"></param>
            <param name="dest"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ClientControl.NewAlarmHandler(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            Handles new alarm command
            </summary>
            <param name="message">Message containing the alarm data</param>
            <param name="dest">Destination fqid</param>
            <param name="sender">Sender fqid</param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Client.BitmapSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.BitmapSource.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.BitmapSource.Init">
            <summary>
            Initalizes the class and starts a background thread.
            
            This method may only be called once, until the Close() has been called.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.BitmapSource.Close(System.Boolean)">
            <summary>
            Close the initializaed class. The background thread is flagged to stop, and if the wait parameter is true
            the method will wait for it to finish, max wait time is 5 seconds.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.BitmapSource.IsInitialized">
            <summary>
            Returns true when Init() has been called, and false after the Close() has been called.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.BitmapSource.InstanceFQID">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.BitmapSource.Item">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.BitmapSource.StreamId">
            <summary>
            The id of the stream to be used for the live stream.
            
            Default value is Guid.Empty and will provide the default live stream.
            
            When changing the StreamId while a live stream is being shown, call LiveStop / LiveStart to utilize the new StreamId.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.BitmapSource.Selected">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.BitmapSource.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.BitmapSource.PlaybackFQID">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.BitmapSource.LiveStart">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.BitmapSource.LiveStop">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.BitmapSource.ShowError(System.String)">
            <summary>
            New code as from MIPSDK 4.0 - to handle connection issues
            </summary>
            <param name="errorText"></param>
        </member>
        <member name="T:VideoOS.Platform.Client.BitmapSource.NewBitmapEventHandler">
            <summary>
            
            </summary>
            <param name="bitmap"></param>
        </member>
        <member name="E:VideoOS.Platform.Client.BitmapSource.NewBitmapEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.DummyImageViewerWpfControlInternal.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.Export.ItemExtensions">
            <summary>
            Extension methods providing easy access to export related properties on view item items provided in the ViewItems property
            of <see cref="T:VideoOS.Platform.Client.ExportParameters"/> instance provided to <see cref="T:VideoOS.Platform.Client.ExportManager"/>.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.Export.ItemExtensions.GetExportIntervals(VideoOS.Platform.Item)">
            <summary>
            Provides access to the time intervals specified by the operator to be exported for the current view item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.Export.ItemExtensions.GetViewItemProperties(VideoOS.Platform.Item)">
            <summary>
            Provides access to the Properties collection containing the configuration for the current view item.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Client.ImageViewerWpfControl">
            <summary>
            This class is available in the Smart Client and the .Net Library.<br/>
            Supported from Smart Client 2017 R3
            It embeds and manages one ImageViewerWpfControl with the following key functions:<br/>
            - separates the display component and version from your implementation<br/>
            - has built-in handling of digital zoom<br/>
            - Playback can be obtained by creating PlaybackController and assign imageViewerControl.PlaybackControllerFQID = playbackController.FQID. to link these classes together (Created via the ClientControl class).<br/>
            - Playback user control can be used, check out PlaybackUserControl (Created via the ClientControl class).<br/>
            <br/>
            A simple implementation just need these lines for initialization:<br/>
            <code>
                imageViewerControl.CameraFQID = _selectedCameraItem.FQID;
            	imageViewerControl.Initialize();
            	imageViewerControl.Connect();
            </code>
            When the session is to be terminated, issue the following statement:<br/>
            <code>
                imageViewerControl.Disconnect();
            </code>
            After this you can connect again to the same or another camera. Once you are completely done with the image viewer call this:
            <code>
                imageViewerControl.Close();
                imageViewerControl.Dispose();
            </code>
            In the Smart Client and the .Net Library the default implementation will ensure that an ImageViewerWpfControl
            will follow the mode of the MIP Environment, e.g. change mode to Live/Browse/Setup as this mode
            is changed by the user.<br/>
            In the smart Client this means that it follows the normal rule for window it resides on, e.g. Smart Client mode in the main window and live mode in floating windows.<br/>
            In the .Net Library the mode is controlled by your application by setting the EnvironmentManager.Mode property.<br/>
            </summary>
            <summary>
            ImageViewerWpfControl
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.#ctor">
            <summary>
            Constructor.
            Can be used within Smart Client plug-ins and standalone application.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.#ctor(VideoOS.Platform.Client.WindowInformation)">
            <summary>
            Constructor. 
            Only to be used within Smart Client.<br/>
            The WindowInformation class should be passed on from the ViewItemUserControl that this control will be added to.<br/>
            The main effect of adding the WindowInformation is that the ImageViewer will run in live and playback mode just like 
            the Smart Client usually do, e.g. floating windows have different mode than the main window.
            </summary>
            <param name="windowInformation"></param>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.EnableBrowseMode">
            <summary>
            Defines if this ImageViewerControl should be enabled in Browse (Playback) mode.<br/>
            If this property is false, the UserControl becomes disabled during Browse (Playback) mode.<br/>
            Default is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.EnableSetupMode">
            <summary>
            Defines if this ImageViewerControl should be enabled in Setup mode.<br/>
            If this property is false, the UserControl becomes disabled during Setup mode.<br/>
            Default is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.AdaptiveStreaming">
            <summary>
            Determine the stream resolution should be adapted based on the view size.<br/>
            Only applicable in standalone SDK. In Smart Client adaptive streaming is controlled by the general Smart Client settings.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.EnableMouseControlledPtz">
            <summary>
            Defines if mouse controlled PTZ should be possible. When set to true, 
            the user can use click on video to do center-to-click and also right click and open a square of an area to zoom to.<br/>
            Default is true.
            <remarks>Related property: EnableMousePtzEmbeddedHandler</remarks>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.EnableMousePtzEmbeddedHandler">
            <summary>
            Defines if mouse controlled PTZ should be handled automatically by this component. <br/>
            When set to true, the user actions will be handled automatically and no Messages or events will be issued to this class, 
            but will be forwarded to the recording server that again will send to the camera.<br/>
            When set to false, the user selection will be send to the MIP Plugin or application via MIP Messages.
            Default is true. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.EnableDigitalZoom">
            <summary>
            Defines if this ImageViewerControl allow the user to perform digital zoom operations.<br/>
            
            Note: When this flag is set to true, the EnableMousePtzEmbeddedHandler should also be true.
            
            Default is false.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.MaintainImageAspectRatio">
            <summary>
            Flag to instruct the presentation of the video to be displayed with the original aspect ratio (Default), or to fill the entire viewable area.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.ImageSize">
            <summary>
            Contains the size of the original image before it was scaled to available display area.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.PaintSize">
            <summary>
            Contains the size of the areas used for video.
            
            Top line and black filler areas are not included in this size.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.PaintLocation">
            <summary>
            Contains the location of actual image within this usercontrol.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.EnableVisibleHeader">
            <summary>
            Defines if the blue header is displayed or not. Default is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.EnableVisibleCameraName">
            <summary>
            Defines if the name of the camera is displayed in the header line. Default is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.EnableVisibleLiveIndicator">
            <summary>
            Defines if the blinking green live indicator and the red motion indicator is visible. Default is true.
            		
            Note: This flag was set as Obsolite in 2016R3, but has been re-instated from 2017R1
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.EnableVisibleTimestamp">
            <summary>
            Defines if the timestamps should be shown in the top line during playback.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.SuppressUpdateOnMotionOnly">
            <summary>
            Defines whether the Update On Motion Only camera param is suppressed. 
            
            Only supported in Smart Client.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.SetRenderingOptions(System.String)">
             <summary>
             Sets specific options for how to render video. The xmlParameter is forwarded to the ImageViewer presentation control.<br/>
             The document must have as its top element "<![CDATA[<RenderingOptions>]]>".
            
             Example of a valid rendering options xml document:
              "<RenderingOptions><Deinterlacing><Method>BOB_TOP</Method></Deinterlacing></RenderingOptions>"
             
             Deinterlacing options supported:
             "<Deinterlacing><Method>...</Method></Deinterlacing>"
             Where ... is one of
            
             "DEFAULT": Set deinterlacing method to the legacy mode that may weave fields.
            
             "BOB_TOP": Set deinterlacing method to bob. Preferently bob the top field.
            
             "BOB_BOTTOM": Set deinterlacing method to bob. Preferently bob the bottom field.
            
             "CONTENT_ADAPTIVE_VERTICAL_TEMPORAL": Set deinterlacing to content adaptive veritcal temportal (CAVT). <br/>
             CAVT is a filter that suppresses interlacing artifacts by analysis of each frame (top + bottom field).<br/>
             The CAVT deinterlacing variant accept a Threshold parameter in the range 0..255, eg.
              "<RenderingOptions><Deinterlacing><Method>CONTENT_ADAPTIVE_VERTICAL_TEMPORAL</Method><Threshold>20</Threshold></Deinterlacing></RenderingOptions>"
             Threshold default (used if element is not present) is 12. The threshold determines the level of vertical variation that causes the filter to kick in.
             Furthermore CAVT accept a PreferredField parameter (either "TOP" (default) or "BOTTOM") that controls the field to bob for low resolution rendering, e.g.
             "<RenderingOptions><Deinterlacing><Method>CONTENT_ADAPTIVE_VERTICAL_TEMPORAL</Method><PreferredField>BOTTOM</PreferredField></Deinterlacing></RenderingOptions>"
            
             </summary>
             <param name="xmlParameters"></param>
             <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.Selected">
            <summary>
            Define if this ImageViewerControl is in the currently selected ViewItem.<br/>
            When set to true, the top bar of the ImageViewerControl will change color to a brighter color.<br/>
            This property cannot be used in the SMart Client to select your own ImageViewerControl, use a SendMessage for that.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.Hidden">
            <summary>
            When another ViewItem is maximized, this property is set to true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.Maximized">
            <summary>
            Defines if this ImageViewerControl is currently in a Maximized ViewItem.<br/>
            This property cannot be used to maximize a ViewItem, use a SendMessage for that.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.CameraFQID">
            <summary>
            Identifies the camera that is to be displayed in the control.<br/>
            This property needs to be set before the Initialize() method is called.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.StreamId">
            <summary>
            Identifies which stream to use.<br/>
            Use the StreamDataSource class to get a list of available streams.  Note that multiple stream support is obly available on some 
            Milestone products.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.PlaybackControllerFQID">
            <summary>
            Defines which PlaybackController is controlling this ImageViewer in Playback mode.
            The FQID used here is returned by the ClientControl.GeneratePlaybackController() method.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.UsingMulticast">
            <summary>
            Indicates if the video is received from the recording server via multicast.
            
            Supported from 2016
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.ShowImageViewer">
            <summary>
            This property can be used to control if the ImageViewer should be shown or not.<br/>
            This can for example be used to hide the ImageViewer when there is no camera defined yet.<br/>
            When the ImageViewer is not shown, the InfoText field is displayed instead.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControl.InfoText">
            <summary>
            Used for displaying a text when the ImageViewer ImageViewer is NOT shown. When the ShowImageViewer is set to false,
            the text stored in the InfoText field will be displayed.<br/>
            The text is displayed in Color.Black on a transparent background.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.SetOverlay(System.Drawing.Bitmap,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Windows.VerticalAlignment,System.Windows.HorizontalAlignment,System.Double,System.Double)">
            <summary>
            Place a Bitmap on top of the video being showed.<br/>
            Consider using <see cref="M:VideoOS.Platform.Client.ImageViewerWpfControl.ShapesOverlayAdd(System.Collections.Generic.List{System.Windows.Shapes.Shape},VideoOS.Platform.Client.ShapesOverlayRenderParameters)"/> and <see cref="M:VideoOS.Platform.Client.ImageViewerWpfControl.ShapesOverlayUpdate(System.Guid,System.Collections.Generic.List{System.Windows.Shapes.Shape})"/> instead as they have better performance.<br/>
            After the bitmap has been set, it will remain on top of all following displayed video.<br/>
            The size of the bitmap can be any size that makes sense, when taking the quality into
            consideration. If a bitmap of e.g. (320,280) is used for creating the overlay, it can via the
            parameters be scaled up to the actual size of the video being displayed.<br/>
            Note: It is invalid set scale to true, while placing an overlay with absolute positions. <br/>
            Note: SetOverlay does not dispose the bitmap. It is up to the caller to call dispose when appropiate.
            </summary>
            <param name="bitmap"></param>
            <param name="id"></param>
            <param name="keepAspectRatio"></param>
            <param name="scaleWithDigitalZoom"></param>
            <param name="scaleOverlay"></param>
            <param name="scaleFactor"></param>
            <param name="verticalAlignment"></param>
            <param name="horizontalAlignment"></param>
            <param name="absolutePositionX"></param>
            <param name="absolutePositionY"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.ClearOverlay(System.Int32)">
            <summary>
            Clear a specific overlay placed earlier. The id used during the SetOverlay() call is used in this method for clearing that overlay again.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.SetVideoQuality(System.Int32,System.Int32)">
            <summary>
            Configure how decoding and display should work. This call represent the same functionality as the VideoQuality slider setup for a CameraViewItem. <br/>
            The change will take effect the next time a camera session is established.
            The smoothBufferSize parameter should have value in the range 1..100, where 1 is the lowest allowable quality and 100 is the highest allowable quality. The value represent how much of the maximum allocated buffer is used.<br/>
            When the smoothBufferSize is 0 - buffering will be turned off, and values will be the original defaults.
            </summary>
            <param name="smoothBufferSize">The percent of buffer to utilize.  A number of 100 will use all available buffer, e.g. 4 seconds</param>
            <param name="cpusToUtilize">The number of CPU cores to use during decoding</param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.SetVideoResolutionAndFps(System.Windows.Size,System.Int32)">
            <summary>
            Smart Client only.
            Configure the server to transmit a specific resolution and frames per second.
            The specific values may not work on some products, and may therefor be ignored.
            Note:  The Server will use extensive amount of CPU to trans-code.  This method should ONLY be used for few video streams and when required.
            </summary>
            <param name="resolution">The target resolution to be sent from the server, default is the size coming from the camera itself.</param>
            <param name="fps">The target frame rate.  The actual frame rate will often be different then the target, 
            as H.264 and H.265 is either 1 or the full rate.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.SetVideoResolutionAndFps(System.Windows.Size,VideoOS.Platform.Client.ImageViewerWpfControl.FpsRate)">
            <summary>
            Standalone SDK only.
            The FPSRate will be used to tell the server what to transmit to this client.<br/>
            For H.264, values of Medium and Low will be key-frames only.<br/>
            For H.265, values of Medium and Low will be key-frames only.<br/>
            For JPEG, a normal framerate of 25, will give 25 for High, 4 or 5 for medium, and 1 for low
            </summary>
            <param name="resolution"></param>
            <param name="fpsRate"></param>
        </member>
        <member name="T:VideoOS.Platform.Client.ImageViewerWpfControl.FpsRate">
            <summary>
            Defines how recorder should transcode video frames.  Used on the SetVideoResolutionAndFPS method.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerWpfControl.FpsRate.High">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerWpfControl.FpsRate.Medium">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerWpfControl.FpsRate.Low">
            <summary>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.ConfigureOverlayTextAndImage(VideoOS.Platform.Client.OverlayTextId,System.Boolean,System.Boolean)">
            <summary>
            Controls how overlayed text is displayed for built-in messages. The textId identifies the text / message being configured.
            </summary>
            <param name="textId">Text id of the message to control, </param>
            <param name="enable">When set to true, the text is displayed; when set to false the etxt is suppressed.</param>
            <param name="blank">When set to false, the image is drawn; when set to true the image is not drawn.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.ConfigureOverlayTextAndImage(System.Boolean,System.Boolean)">
            <summary>
            Controls how overlayed text is displayed for built-in messages. All built-in text messages are configured.
            </summary>
            <param name="enable">When set to true, the text is displayed; when set to false the etxt is suppressed.</param>
            <param name="blank">When set to false, the image is drawn; when set to true the image is not drawn.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.ConfigureOverlayText(VideoOS.Platform.Client.OverlayTextId,System.Boolean)">
            <summary>
            Controls how overlayed text is displayed for built-in messages. The textId identifies the text / message being configured.
            </summary>
            <param name="textId">Text id of the message to control, </param>
            <param name="enable">When set to true, the text is displayed; when set to false the text is suppressed.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.ConfigureOverlayText(System.Boolean)">
            <summary>
            Controls how overlayed text is displayed for built-in messages. All built-in text messages are configured.
            </summary>
            <param name="enable">When set to true, the text is displayed; when set to false the text is suppressed.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.SetImageQuality(System.Int32)">
            <summary>
            Tell the Recording Server how much to compress each JPEG.<br/>		
            The value can be a number between 1..100.<br/>
            Or one of the special values:<br/>
            	SuperHigh = 101<br/>
            	High = 102<br/>
            	Medium = 103<br/>
            	Low = 104<br/>
            </summary>
            Note: Values below 100 are not supported by XProtect Corporate or Expert.
            <param name="percent"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.Initialize">
            <summary>
            Issue this method after the cameraFQID has been set to initialize the control.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.Connect">
            <summary>
            This method will connect the recording server owning the camera.<br/>
            The CameraFQID property must have been set, and the Initialize() method called before this method can be called.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.Disconnect">
            <summary>
            Disconnect current session to the recording server.<br/>
            Following this call, the CameraFQID can be changed and a new session be established by a call to the Connect() method.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.Close">
            <summary>
            Should be called for the underlaying controls to clean up entirely. 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.StartLive">
            <summary>
            This method is only valid for DVR attached devices, as the playback and Live function is controlled by the ImageViewer for those.<br/>
            In the Smart Client and the .Net Library the default implementation will ensure that a ImageViewerControl
            will follow the mode of the MIP Environment, e.g. change mode to Live/Browse as this mode
            is changed by the user.<br/>
            In the smart Client this means that it follow the normal rule for window it resides on, e.g. Smart Client mode in the main window and live mode in floating windows.<br/>
            In the .Net Library the mode is controlled by your application by setting the EnvironmentManager.Mode property.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.StartBrowse">
            <summary>
            This method is only valid for DVR attached devices, as the playback and Live function is controlled by the ImageViewer for those.<br/>
            In the Smart Client and the .Net Library the default implementation will ensure that a ImageViewerControl
            will follow the mode of the MIP Environment, e.g. change mode to Live/Browse/Setup as this mode
            is changed by the used.<br/>
            In the smart Client this means that it follow the normal rule for window it resides on, e.g. Smart Client mode in the main window and live mode in floating windows.<br/>
            In the .Net Library the mode is controlled by your application by setting the EnvironmentManager.Mode property, or by a PlaybackController assigned to this class via the PlaybackControllerFQID property.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.StartSetup">
            <summary>
            This will set the ImageViewer in setup mode.  Avoid using this, as it is normally controlled by the Mode set in the EnvironmentManager.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.UpdateStates">
            <summary>
            When some of the 'Enabled' properties have been changed, this method will check for any changes and carry them out on the UI.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerWpfControl.ImageOrPaintInfoChanged">
            <summary>
            Is fired when one of the these field has been changed: ImageSize, PaintSize, PaintLocation
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerWpfControl.ConnectResponseReceived">
            <summary>
            Register on this event to be called when a connection has completed.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerWpfControl.ImageDisplayed">
            <summary>
            Called for every image being displayed, exactly when it is presented to the operator.<br/>
            The method registered on this event MUST be VERY short.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerWpfControl.RecordedImageReceived">
            <summary>
            Register on this event to be called when a recorded image has been received.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerWpfControl.LiveStreamInformationReceived">
            <summary>
            Register on this event to be called when the live stream XML information is available.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.GetCurrentDisplayedImageAsBitmap">
            <summary>
            Get the latest displayed Image including the overlays and privacy mask.<br/>
            Note that if no image has been received from the server, a null is returned.<br/>
            Important: If the returned Bitmap is used in a UserControl, like a PictureBox, the control
            will hold to the original Bitmap.  This can cause issues when the original source of the Bitmap attempts to dispose it.<br/>
            Recommendation is to create another Bitmap directly upon calling this method, when passing it on to a PictureBox.
            <code>
                Bitmap bitmap = imageViewControl.GetCurrentDisplayedImageAsBitmap();
                if (bitmap!=null)
                {
                    myPictureBox.Image = newBitmap(bitmap, myPictureBox.Size());	// If you like to resize to picturebox size
            		bitmap.Dispose();
                } else
                {
            		// Clear the picturebox ...
                }
            </code>
            </summary>
            <returns>A bitmap or null or no image is available.</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.GetCurrentDisplayedImageAsBitmap(System.Boolean)">
            <summary>
            Overloaded method to control if the original or the digital zoomed image is requested.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.PtzCenter(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform PTZ Center in the current mode. Either Digital zoom, PanoramicLens (Fisheye), or physical camera move.
            </summary>
            The zoom parameter can be -1 for no change, or a range from 0..1000, where 0 will zoom out completely.
            The other values are can be in any size and does not relate to the real resolution of the image.<br/>
            <code>
            	_imageViewerControl1.PtzCenter(100, 100, 25, 50, 500);
            </code>
            Will zoom 50% and center around a point (25,50) to the left hand side of the image.
            <param name="refWidth">Reference width of center</param>
            <param name="refHeight">Reference height of center</param>
            <param name="centerX"></param>
            <param name="centerY"></param>
            <param name="zoom"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.ShapesOverlayAdd(System.Collections.Generic.List{System.Windows.Shapes.Shape},VideoOS.Platform.Client.ShapesOverlayRenderParameters)">
            <summary>
            Method to add overlay shapes.
            
            The returned Guid is used to later modify and remove the overlays.
            </summary>
            <param name="overlayShapes"></param>
            <param name="renderParameters"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.ShapesOverlayUpdate(System.Guid,System.Collections.Generic.List{System.Windows.Shapes.Shape})">
            <summary>
            Method to update existing overlay shapes.
            </summary>
            <param name="id"></param>
            <param name="overlayShapes"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.ShapesOverlayUpdate(System.Guid,VideoOS.Platform.Client.ShapesOverlayRenderParameters)">
            <summary>
            Method to update existing overlay shapes.
            </summary>
            <param name="id"></param>
            <param name="renderParameters"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.ShapesOverlayUpdate(System.Guid,System.Collections.Generic.List{System.Windows.Shapes.Shape},VideoOS.Platform.Client.ShapesOverlayRenderParameters)">
            <summary>
            Method to update existing overlay shapes.
            </summary>
            <param name="id"></param>
            <param name="overlayShapes"></param>
            <param name="renderParameters"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.ShapesOverlayRemove(System.Guid)">
            <summary>
            Method to remove existing overlay shapes.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ConnectResponseEventArgs">
            <summary>
            The argument filled on the ConnectResponse event.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ConnectResponseEventArgs.ConnectionGranted">
            <summary>
            Is set to true, if the connection is now established. While false indicates that the session could not be established.<br/>
            When not established, it could be one of these issues:<br/>
            - URL constructed incorrectly (e.g. port missing for XProtect Corporate Recording server)<br/>
            - The logged in user (Token), is not authorized to access the camera<br/>
            - Recording Server stopped, or network connection not available.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ConnectResponseEventArgs.#ctor(System.Boolean)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Client.LiveStreamInformationReceivedEventArgs">
            <summary>
            The argument filled on the LiveStreamInformationReceived event.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.LiveStreamInformationReceivedEventArgs.Information">
            <summary>
            The string contains the XML of the LiveStreamInformation.<br/>
            A sample of the XML looks like:
            <code>
            <livepackage>
              <status>
                <statustime>1287438296584</statustime>
                <statusitem id="1" value="1" description="Camera live feed started"/>
                <statusitem id="2" value="1" description="Live feed motion"/>
                <statusitem id="3" value="1" description="Camera recording"/>
                <statusitem id="4" value="0" description="Camera event notification"/>
                <statusitem id="5" value="0" description="Camera connection lost"/>
                <statusitem id="6" value="0" description="Database fail"/>
                <statusitem id="7" value="0" description="The server is running out of disk space"/>
              </status>
            </livepackage>
            </code>
            The statustime indicate the current time in milliseconds since 1970.01.01<br/>
            The other 7 fields have an id attribute to make it easy to identify, and a description that can be used as a default display text if so required.<br/>
            The values indicate if the statusitem is currently true or false, e.g. above is LiveFeedStarted, Motion Detected and video being Recording.
            <br/>
            As soon as one of the statusitems changes a new livestreaminformation is send out from the server.<br/>
            Right after initial connection, at least one livestreaminformation package is send out within 1 second.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.LiveStreamInformationReceivedEventArgs.#ctor(System.String)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Client.ImageOrPaintInfoChangedEventArgs">
            <summary>
            The argument filled on the ImageOrPaintInfoChanged event.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageOrPaintInfoChangedEventArgs.#ctor(System.Windows.Size,System.Windows.Size,System.Windows.Point)">
            <summary>
            
            </summary>
            <param name="imageSize"></param>
            <param name="paintSize"></param>
            <param name="paintLocation"></param>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageOrPaintInfoChangedEventArgs.ImageSize">
            <summary>
            Contains the size of the original image before it was scaled to available display area.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageOrPaintInfoChangedEventArgs.PaintSize">
            <summary>
            Contains the size of the areas used for video.
            
            Top line and black filler areas are not included in this size.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageOrPaintInfoChangedEventArgs.PaintLocation">
            <summary>
            Contains the location of actual image within this usercontrol.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ImageViewerWpfControlInternal">
            <summary>
            Internal use only. Use <see cref="T:VideoOS.Platform.Client.ImageViewerWpfControl"/> instead.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.#ctor(VideoOS.Platform.Client.WindowInformation)">
            <summary>
            Constructor. 
            </summary>
            <param name="windowInformation"></param>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.EnableBrowseMode">
            <summary>
            Defines if this ImageViewerControl should be enabled in Browse (Playback) mode.<br/>
            If this property is false, the UserControl becomes disabled during Browse (Playback) mode.<br/>
            Default is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.EnableSetupMode">
            <summary>
            Defines if this ImageViewerControl should be enabled in Setup mode.<br/>
            If this property is false, the UserControl becomes disabled during Setup mode.<br/>
            Default is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.EnableMouseControlledPtz">
            <summary>
            Defines if mouse controlled PTZ should be possible. When set to true, 
            the user can use click on video to do center-to-click, and the user can also right click and open a square of an area to zoom to.<br/>
            Default is false.
            <remarks>Related property: EnableMousePtzEmbeddedHandler</remarks>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.EnableMousePtzEmbeddedHandler">
            <summary>
            Defines if mouse controlled PTZ should be handled automatically by this component. <br/>
            When set to true,  the user actions will be handled automatically and no Messages or events will be issued to this class, 
            but will be forwarded to the recording server that again will send to the camera.<br/>
            When set to false, the user selection will be send to the MIP Plugin or application via MIP Messages.
            Default is true.  (Note: This default was false in 2014 version).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.EnableDigitalZoom">
            <summary>
            Defines if this ImageViewerControl allow the user to perform digital zoom operations.<br/>
            
            Note: When this flag is set to true, the EnableMousePtzEmbeddedHandler should also be true.
            
            Default is false.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.MaintainImageAspectRatio">
            <summary>
            Flag to instruct the presentation of the video to be displayed with the original aspect ratio (Default), or to fill the entire viewable area.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.ImageSize">
            <summary>
            Contains the size of the original image before it was scaled to available display area.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.PaintSize">
            <summary>
            Contains the size of the areas used for video.
            
            Top line and black filler areas are not included in this size.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.PaintLocation">
            <summary>
            Contains the location of actual image within this usercontrol.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.EnableVisibleHeader">
            <summary>
            Defines if the blue header is displayed or not. Default is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.EnableVisibleCameraName">
            <summary>
            Defines if the name of the camera is displayed in the header line. Default is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.EnableVisibleLiveIndicator">
            <summary>
            Defines if the blinking green live indicator and the red motion indicator is visible. Default is true.
            		
            Note: This flag was set as Obsolite in 2016R3, but has been re-instated from 2017R1
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.EnableVisibleTimestamp">
            <summary>
            Defines if the timestamps should be shown in the top line during playback.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.SuppressUpdateOnMotionOnly">
            <summary>
            Defines whether the Update On Motion Only camera param is suppressed. 
            
            Only supported in Smart Client.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.AdaptiveStreaming">
            <summary>
            Determine the stream resolution should be adapted based on the view size.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.SetRenderingOptions(System.String)">
             <summary>
             Sets specific options for how to render video. The xmlParameter is forwarded to the ImageViewer presentation control.<br/>
             The document must have as its top element "<![CDATA[<RenderingOptions>]]>".
            
             Example of a valid rendering options xml document:
              "<RenderingOptions><Deinterlacing><Method>BOB_TOP</Method></Deinterlacing></RenderingOptions>"
             
             Deinterlacing options supported:
             "<Deinterlacing><Method>...</Method></Deinterlacing>"
             Where ... is one of
            
             "DEFAULT": Set deinterlacing method to the legacy mode that may weave fields.
            
             "BOB_TOP": Set deinterlacing method to bob. Preferently bob the top field.
            
             "BOB_BOTTOM": Set deinterlacing method to bob. Preferently bob the bottom field.
            
             "CONTENT_ADAPTIVE_VERTICAL_TEMPORAL": Set deinterlacing to content adaptive veritcal temportal (CAVT). <br/>
             CAVT is a filter that suppresses interlacing artifacts by analysis of each frame (top + bottom field).<br/>
             The CAVT deinterlacing variant accept a Threshold parameter in the range 0..255, eg.
              "<RenderingOptions><Deinterlacing><Method>CONTENT_ADAPTIVE_VERTICAL_TEMPORAL</Method><Threshold>20</Threshold></Deinterlacing></RenderingOptions>"
             Threshold default (used if element is not present) is 12. The threshold determines the level of vertical variation that causes the filter to kick in.
             Furthermore CAVT accept a PreferredField parameter (either "TOP" (default) or "BOTTOM") that controls the field to bob for low resolution rendering, e.g.
             "<RenderingOptions><Deinterlacing><Method>CONTENT_ADAPTIVE_VERTICAL_TEMPORAL</Method><PreferredField>BOTTOM</PreferredField></Deinterlacing></RenderingOptions>"
            
             </summary>
             <param name="xmlParameters"></param>
             <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.Selected">
            <summary>
            Define if this ImageViewerControl is in the currently selected ViewItem.<br/>
            When set to true, the top bar of the ImageViewerControl will change color to a brighter color.<br/>
            This property cannot be used in the SMart Client to select your own ImageViewerControl, use a SendMessage for that.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.Hidden">
            <summary>
            When another ViewItem is maximized, this property is set to true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.Maximized">
            <summary>
            Defines if this ImageViewerControl is currently in a Maximized ViewItem.<br/>
            This property cannot be used to maximize a ViewItem, use a SendMessage for that.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.CameraFQID">
            <summary>
            Identifies the camera that is to be displayed in the control.<br/>
            This property needs to be set before the Initialize() method is called.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.StreamId">
            <summary>
            Identifies which stream to use.<br/>
            Use the StreamDataSource class to get a list of available streams.  Note that multiple stream support is obly available on some 
            Milestone products.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.PlaybackControllerFQID">
            <summary>
            Defines which PlaybackController is controlling this ImageViewer in Playback mode.
            The FQID used here is returned by the ClientControl.GeneratePlaybackController() method.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.UsingMulticast">
            <summary>
            Indicates if the video is received from the recording server via multicast.
            
            Supported from 2016
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.ShowImageViewer">
            <summary>
            This property can be used to control if the ImageViewer should be shown or not.<br/>
            This can for example be used to hide the ImageViewer when there is no camera defined yet.<br/>
            When the ImageViewer is not shown, the InfoText field is displayed instead.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerWpfControlInternal.InfoText">
            <summary>
            Used for displaying a text when the ImageViewer ImageViewer is NOT shown. When the ShowImageViewer is set to false,
            the text stored in the InfoText field will be displayed.<br/>
            The text is displayed in Color.Black on a transparent background.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.SetOverlay(System.Drawing.Bitmap,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Windows.VerticalAlignment,System.Windows.HorizontalAlignment,System.Double,System.Double)">
            <summary>
            Place a Bitmap on top of the video being showed.<br/>
            Consider using <see cref="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.ShapesOverlayAdd(System.Collections.Generic.List{System.Windows.Shapes.Shape},VideoOS.Platform.Client.ShapesOverlayRenderParameters)"/> and <see cref="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.ShapesOverlayUpdate(System.Guid,System.Collections.Generic.List{System.Windows.Shapes.Shape})"/> instead as they have better performance.<br/>
            After the bitmap has been set, it will remain on top of all following displayed video.<br/>
            The size of the bitmap can be any size that makes sense, when taking the quality into
            consideration. If a bitmap of e.g. (320,280) is used for creating the overlay, it can via the
            parameters be scaled up to the actual size of the video being displayed.<br/>
            Note: It is invalid set scale to true, while placing an overlay with absolute positions. <br/>
            Note: SetOverlay does not dispose the bitmap. It is up to the caller to call dispose when appropiate.
            </summary>
            <param name="bitmap"></param>
            <param name="id"></param>
            <param name="keepAspectRatio"></param>
            <param name="scaleWithDigitalZoom"></param>
            <param name="scaleOverlay"></param>
            <param name="scaleFactor"></param>
            <param name="verticalAlignment"></param>
            <param name="horizontalAlignment"></param>
            <param name="absolutePositionX"></param>
            <param name="absolutePositionY"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.ClearOverlay(System.Int32)">
            <summary>
            Clear a specific overlay placed earlier. The id used during the SetOverlay() call is used in this method for clearing that overlay again.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.SetVideoQuality(System.Int32,System.Int32)">
            <summary>
            Configure how decoding and display should work. This call represent the same functionality as the VideoQuality slider setup for a CameraViewItem. <br/>
            The change will take effect the next time a camera session is established.
            The smoothBufferSize parameter should have value in the range 1..100, where 1 is the lowest allowable quality and 100 is the highest allowable quality. The value represent how much of the maximum allocated buffer is used.<br/>
            When the smoothBufferSize is 0 - buffering will be turned off, and values will be the original defaults.
            </summary>
            <param name="smoothBufferSize">The percent of buffer to utilize.  A number of 100 will use all available buffer, e.g. 4 seconds</param>
            <param name="cpusToUtilize">The number of CPU cores to use during decoding</param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.SetVideoResolutionAndFps(System.Windows.Size,System.Int32)">
            <summary>
            Smart Client only.
            Configure the server to transmit a specific resolution and frames per second.
            The specific values may not work on some products, and may therefor be ignored.
            Note:  The Server will use extensive amount of CPU to trans-code.  This method should ONLY be used for few video streams and when required.
            </summary>
            <param name="resolution">The target resolution to be sent from the server, default is the size coming from the camera itself.</param>
            <param name="fps">The target frame rate.  The actual frame rate will often be different then the target, 
            as H.264 and H.265 is either 1 or the full rate.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.SetVideoResolutionAndFps(System.Windows.Size,VideoOS.Platform.Client.ImageViewerWpfControl.FpsRate)">
            <summary>
            Standalone SDK only.
            The FPSRate will be used to tell the server what to transmit to this client.<br/>
            For H.264, values of Medium and Low will be key-frames only.<br/>
            For H.265, values of Medium and Low will be key-frames only.<br/>
            For JPEG, a normal framerate of 25, will give 25 for High, 4 or 5 for medium, and 1 for low
            </summary>
            <param name="resolution"></param>
            <param name="fpsRate"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.ConfigureOverlayTextAndImage(VideoOS.Platform.Client.OverlayTextId,System.Boolean,System.Boolean)">
            <summary>
            Controls how overlayed text is displayed for built-in messages. The textId identifies the text / message being configured.
            </summary>
            <param name="textId">Text id of the message to control, </param>
            <param name="enable">When set to true, the text is displayed; when set to false the etxt is suppressed.</param>
            <param name="blank">When set to false, the image is drawn; when set to true the image is not drawn.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.ConfigureOverlayTextAndImage(System.Boolean,System.Boolean)">
            <summary>
            Controls how overlayed text is displayed for built-in messages. All built-in text messages are configured.
            </summary>
            <param name="enable">When set to true, the text is displayed; when set to false the etxt is suppressed.</param>
            <param name="blank">When set to false, the image is drawn; when set to true the image is not drawn.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.ConfigureOverlayText(VideoOS.Platform.Client.OverlayTextId,System.Boolean)">
            <summary>
            Controls how overlayed text is displayed for built-in messages. The textId identifies the text / message being configured.
            </summary>
            <param name="textId">Text id of the message to control, </param>
            <param name="enable">When set to true, the text is displayed; when set to false the text is suppressed.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.ConfigureOverlayText(System.Boolean)">
            <summary>
            Controls how overlayed text is displayed for built-in messages. All built-in text messages are configured.
            </summary>
            <param name="enable">When set to true, the text is displayed; when set to false the text is suppressed.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.SetImageQuality(System.Int32)">
            <summary>
            Tell the Recording Server how much to compress each JPEG.<br/>		
            The value can be a number between 1..100.<br/>
            Or one of the special values:<br/>
            	SuperHigh = 101<br/>
            	High = 102<br/>
            	Medium = 103<br/>
            	Low = 104<br/>
            </summary>
            Note: Values below 100 are not supported by XProtect Corporate or Expert.
            <param name="percent"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.Initialize">
            <summary>
            Issue this method after the cameraFQID has been set to initialize the control.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.Connect">
            <summary>
            This method will connect the recording server owning the camera.<br/>
            The CameraFQID property must have been set, and the Initialize() method called before this method can be called.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.Disconnect">
            <summary>
            Disconnect current session to the recording server.<br/>
            Following this call, the CameraFQID can be changed and a new session be established by a call to the Connect() method.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.Close">
            <summary>
            Should be called for the underlaying controls to clean up entirely. 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.StartLive">
            <summary>
            This method is only valid for DVR attached devices, as the playback and Live function is controlled by the ImageViewer for those.<br/>
            In the Smart Client and the .Net Library the default implementation will ensure that a ImageViewerControl
            will follow the mode of the MIP Environment, e.g. change mode to Live/Browse as this mode
            is changed by the user.<br/>
            In the smart Client this means that it follow the normal rule for window it resides on, e.g. Smart Client mode in the main window and live mode in floating windows.<br/>
            In the .Net Library the mode is controlled by your application by setting the EnvironmentManager.Mode property.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.StartBrowse">
            <summary>
            This method is only valid for DVR attached devices, as the playback and Live function is controlled by the ImageViewer for those.<br/>
            In the Smart Client and the .Net Library the default implementation will ensure that a ImageViewerControl
            will follow the mode of the MIP Environment, e.g. change mode to Live/Browse/Setup as this mode
            is changed by the used.<br/>
            In the smart Client this means that it follow the normal rule for window it resides on, e.g. Smart Client mode in the main window and live mode in floating windows.<br/>
            In the .Net Library the mode is controlled by your application by setting the EnvironmentManager.Mode property, or by a PlaybackController assigned to this class via the PlaybackControllerFQID property.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.StartSetup">
            <summary>
            This will set the ImageViewer in setup mode.  Avoid using this, as it is normally controlled by the Mode set in the EnvironmentManager.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.UpdateStates">
            <summary>
            When some of the 'Enabled' properties have been changed, this method will check for any changes and carry them out on the UI.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerWpfControlInternal.ImageOrPaintInfoChanged">
            <summary>
            Is fired when one of the these field has been changed: ImageSize, PaintSize, PaintLocation
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerWpfControlInternal.ConnectResponseReceived">
            <summary>
            Register on this event to be called when a connection has completed.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerWpfControlInternal.ImageDisplayed">
            <summary>
            Called for every image being displayed, exactly when it is presented to the operator.<br/>
            The method registered on this event MUST be VERY short.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerWpfControlInternal.RecordedImageReceived">
            <summary>
            Register on this event to be called when a recorded image has been received.<br/>
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerWpfControlInternal.LiveStreamInformationReceived">
            <summary>
            Register on this event to be called when the live stream XML information is available.<br/>
            Remember to also set the EnableLiveStreamInformation to true;
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.GetCurrentDisplayedImageAsBitmap">
            <summary>
            Get the latest displayed Image including the overlays and privacy mask.<br/>
            Note that if no image has been received from the server, a null is returned.<br/>
            Important: If the returned Bitmap is used in a UserControl, like a PictureBox, the control
            will hold to the original Bitmap.  This can cause issues when the original source of the Bitmap attempts to dispose it.<br/>
            Recommendation is to create another Bitmap directly upon calling this method, when passing it on to a PictureBox.
            <code>
                Bitmap bitmap = imageViewControl.GetCurrentDisplayedImageAsBitmap();
                if (bitmap!=null)
                {
                    myPictureBox.Image = newBitmap(bitmap, myPictureBox.Size());	// If you like to resize to picturebox size
            		bitmap.Dispose();
                } else
                {
            		// Clear the picturebox ...
                }
            </code>
            </summary>
            <returns>A bitmap or null or no image is available.</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.GetCurrentDisplayedImageAsBitmap(System.Boolean)">
            <summary>
            Overloaded method to control if the original or the digital zoomed image is requested.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.PtzCenter(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform PTZ Center in the current mode. Either Digital zoom, PanoramicLens (Fisheye), or physical camera move.
            </summary>
            The zoom parameter can be -1 for no change, or a range from 0..1000, where 0 will zoom out completely.
            The other values are can be in any size and does not relate to the real resolution of the image.<br/>
            <code>
            	_imageViewerControl1.PtzCenter(100, 100, 25, 50, 500);
            </code>
            Will zoom 50% and center around a point (25,50) to the left hand side of the image.
            <param name="refWidth">Reference width of center</param>
            <param name="refHeight">Reference height of center</param>
            <param name="centerX"></param>
            <param name="centerY"></param>
            <param name="zoom"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.ShapesOverlayAdd(System.Collections.Generic.List{System.Windows.Shapes.Shape},VideoOS.Platform.Client.ShapesOverlayRenderParameters)">
            <summary>
            Method to add overlay shapes.
            
            The returned Guid is used to later modify and remove the overlays.
            
            Note: Valid from 2016 R3 when using the hardware accellerared ImageViewerControl.
            </summary>
            <param name="overlayShapes"></param>
            <param name="renderParameters"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.ShapesOverlayUpdate(System.Guid,System.Collections.Generic.List{System.Windows.Shapes.Shape})">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="overlayShapes"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.ShapesOverlayUpdate(System.Guid,VideoOS.Platform.Client.ShapesOverlayRenderParameters)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="renderParameters"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.ShapesOverlayUpdate(System.Guid,System.Collections.Generic.List{System.Windows.Shapes.Shape},VideoOS.Platform.Client.ShapesOverlayRenderParameters)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="overlayShapes"></param>
            <param name="renderParameters"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.ShapesOverlayRemove(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerWpfControlInternal.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PlaybackControllerBase">
            <summary>
            The PlaybackControllerBase is used internally by the MIP Environment for controlling timing and commands
            around playback.  It is identified by a FQID.
            
            When using the ClientControl.Instance.GeneratePlaybackController() method for .Net library 
            applications, this class is generated.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.Init">
            <summary>
            Initialize PlaybackController
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.Close">
            <summary>
            Close PlaybackController
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackControllerBase.Mode">
            <summary>
            Indicate if this Controller is currently enabled, values can be ClientLive or ClientPlayback
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.PlaybackControllerBase.PlaybackModeChangedEvent">
            <summary>
            Signals that the playback mode is changed.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.FirePlaybackModeChangedEvent(VideoOS.Platform.Client.PlaybackController.PlaybackModeEventArgs)">
            <summary>
            Activates the PlaybackModeChangedEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.PlaybackControllerBase.PlaybackSpeedChangedEvent">
            <summary>
            Signals that the playback mode is changed.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.FirePlaybackSpeedChangedEvent(VideoOS.Platform.Client.PlaybackController.PlaybackSpeedEventArgs)">
            <summary>
            Activates the PlaybackSpeedChangedEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.PlaybackControllerBase.PlaybackForwardEvent">
            <summary>
            Signals that the current selected content handler should go to its previous information item (e.g. image).
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.FirePlaybackForwardEvent">
            <summary>
            Activates the PlaybackForwardEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.PlaybackControllerBase.CustomIgnoreSkipValueChangedEvent">
            <summary>
            Signals that the customIgnoreSkip value has changed.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.FireCustomIgnoreSkipValueChangedEvent">
            <summary>
            Activates the CustomIgnoreSkipValueChangedEvent
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.FireRecordedImageDisplayedEvent(System.DateTime)">
            <summary>
            Informs the listeners about a new frame displayed.
            </summary>
            <param name="displayedImageTime"></param>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackControllerBase.PlaybackTime">
            <summary>
            Gets the current time used for playback. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackControllerBase.BrowseTime">
            <summary>
            Included for backwards compatibility with older MIPSDK, same as PlaybackTime
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackControllerBase.PlaybackMode">
            <summary>
            Sets or gets the playback mode .
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackControllerBase.PlaybackSpeed">
            <summary>
            Sets or gets the playback speed. The maximum speed is 32.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackControllerBase.SkipGaps">
            <summary>
            Gets or sets whether gaps should be skipped when playing
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.SetSequence(System.DateTime,System.DateTime)">
            <summary>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.SetBrowseTime(System.DateTime,System.Boolean)">
            <summary>
            Use by Smart Client
            </summary>
            <param name="browseTime"></param>
            <param name="stopPlayback"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.SetPlaybackTime(System.DateTime,System.Boolean)">
            <summary>
            Sets the current application play time. 
            </summary>
            <param name="playbackTime">The new application play time</param>
            <param name="stopPlayback">Indicates whether playback in progress shall be stopped</param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.BrowseGoto(System.DateTime)">
            <summary>
            Request that the BrowseGotoEvent is activated
            </summary>
            <param name="gotoDateTime">The time to include in the BrowseGotoEvent, it is in local time zone</param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.BrowseNext">
            <summary>
            Request that the BrowseNextEvent is activated
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.BrowsePrevious">
            <summary>
            Request that the BrowsePreviousEvent is activated
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.BrowseNextSequence">
            <summary>
            Request that the BrowseNextSequenceEvent is activated
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.BrowsePreviousSequence">
            <summary>
            Request that the BrowsePreviousSequenceEvent is activated
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.BrowseBegin">
            <summary>
            Request that the BrowseBeginEvent is activated
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.BrowseEnd">
            <summary>
            Request that the BrowseEndEvent is activated
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.PlaybackControllerBase.PlaybackTimeChangedEvent">
            <summary>
            Signals that the browse time has changed
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.FireBrowseTimeChangedEvent">
            <summary>
            Activates the PlaybackTimeChangedEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.PlaybackControllerBase.BrowseGotoEvent">
            <summary>
            Signals that the current selected content handler should go to a specific time.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.FireBrowseGotoEvent(System.DateTime)">
            <summary>
            Activates the BrowseGotoEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.PlaybackControllerBase.BrowseNextEvent">
            <summary>
            Signals that the current selected content handler should go to its next information item (e.g. image).
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.FireBrowseNextEvent">
            <summary>
            Activates the BrowseNextEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.PlaybackControllerBase.BrowsePreviousEvent">
            <summary>
            Signals that the current selected content handler should go to its previous information item (e.g. image).
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.FireBrowsePreviousEvent">
            <summary>
            Activates the BrowsePreviousEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.PlaybackControllerBase.BrowseNextSequenceEvent">
            <summary>
            Signals that the current selected content handler should go to its next information item sequence (e.g. recording).
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.FireBrowseNextSequenceEvent">
            <summary>
            Activates the BrowseNextSequenceEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.PlaybackControllerBase.BrowsePreviousSequenceEvent">
            <summary>
            Signals that the current selected content handler should go to its previous information item sequence (e.g. recording).
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.FireBrowsePreviousSequenceEvent">
            <summary>
            Activates the BrowsePreviousSequenceEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.PlaybackControllerBase.BrowseBeginEvent">
            <summary>
            Signals that the current selected content handler should go to the first information item (e.g. first image in database).
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.FireBrowseBeginEvent">
            <summary>
            Activates the BrowseBeginEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.PlaybackControllerBase.BrowseEndEvent">
            <summary>
            Signals that the current selected content handler should go to the last information item (e.g. last image in database).
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.FireBrowseEndEvent">
            <summary>
            Activates the BrowseEndEvent
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.ClearBrowseImageTimes">
            <summary>
            Clear information cache
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.SetBrowseImageTime(System.Guid,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Included for backwadrs comp with older MIPSDK
            </summary>
            <param name="deviceId"></param>
            <param name="previousTime"></param>
            <param name="currentTime"></param>
            <param name="nextTime"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.SetPlaybackImageTime(System.Guid,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Store information about time stamps on surrounding frames.  Is used for calculating when skip is relevant.
            
            Normally updated by the message: PlaybackTimeInformation
            </summary>
            <param name="deviceId"></param>
            <param name="previousTime"></param>
            <param name="currentTime"></param>
            <param name="nextTime"></param>
        </member>
        <member name="E:VideoOS.Platform.Client.PlaybackControllerBase.SequenceProgressChanged">
            <summary>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.OnLoopProgressChanged(System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackControllerBase.GetNextGapSkippedBrowseTime(System.DateTime)">
            <summary>
            
            </summary>
            <param name="utcRequestedTime"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Client.PlaybackUserControlMini">
            <summary>
            An implementation of the PlaybackUserControl 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackUserControlMini.#ctor">
            <summary>
            Constructs an playback control for usage in standalone application or in the administrators
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackUserControlMini.Init(VideoOS.Platform.FQID)">
            <summary>
            Initialize this component, the playbackControllerFQID must be provided to understand the controller 
            that should be used in conjuction with this UI component.
            </summary>
            <param name="playbackControllerFQID">The identification of a PlaybackController, 
            as returned from the ClientControl.Instance.GeneratePlaybackController() method.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackUserControlMini.Close">
            <summary>
            Release resources
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackUserControlMini.ShowTallUserControl">
            <summary>
            When set to true, an extra set of controls become available<br/>
            The ideal height for this control is:<br/>
              - When ShowTallUserControl is set to false: 50 pixels<br/>
              - When ShowTallUserControl is set to true : 100 pixels<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackUserControlMini.ShowSpeedControl">
            <summary>
            When having a tall UserControl, this property controls if the speed slider is visible or not.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackUserControlMini.ShowTimeSpanControl">
            <summary>
            When having a tall UserControl, this property controls if the time scale slider is visible or not.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackUserControlMini.SelectionFromTime">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackUserControlMini.SelectionToTime">
            <summary>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackUserControlMini.SetSequence(System.DateTime,System.DateTime)">
            <summary>
            
            </summary>
            <param name="startTime"></param>
            <param name="endTime"></param>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackUserControlMini.TimeSpan">
            <summary>
            Represent the time span that is currently viewed. 
            The control will set the closest supported TimeSpan when the value is not on the scale of the TimeSpan track bar
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackUserControlMini.SetCameras(System.Collections.Generic.List{VideoOS.Platform.FQID})">
            <summary>
            Set the identification of the item to control the timeline.
            </summary>
            <param name="sources"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackUserControlMini.SetEnabled(System.Boolean)">
            <summary>
            Define if the control is current useful.
            
            Should usually be set to true, when operating in playback mode, and set to false when operating in live mode.
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackUserControlMini.RefreshAll">
            <summary>
            Refresh timeline.
            
            If the SetCameras has been called with a new camera, or a null - this method will update the timeline
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.PlaybackUserControlMini.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackUserControlMini.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackUserControlMini.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PlaybackWpfUserControl">
            <summary>
            Interaction logic for PlaybackWpfControl.xaml
            </summary>
            <summary>
            PlaybackWpfUserControl
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControl.#ctor">
            <summary>
            Constructor.
            Can be used within Smart Client plug-ins and standalone application.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControl.#ctor(VideoOS.Platform.Client.WindowInformation)">
            <summary>
            Constructor. 
            Only to be used within Smart Client.<br/>
            The WindowInformation class should be passed on from the ViewItemUserControl that this control will be added to.<br/>
            The main effect of adding the WindowInformation is that the ImageViewer will run in live and playback mode just like 
            the Smart Client usually do, e.g. floating windows have different mode than the main window.
            </summary>
            <param name="windowInformation"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControl.Init(VideoOS.Platform.FQID)">
            <summary>
            Initialize and define what playback controller to coordinate with
            </summary>
            <param name="playbackControllerFQID"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControl.Close">
            <summary>
            Close and dispose 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControl.SetCameras(System.Collections.Generic.List{VideoOS.Platform.FQID})">
            <summary>
            Define what cameras are controlled by this class
            </summary>
            <param name="sources"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControl.SetEnabled(System.Boolean)">
            <summary>
            Controls if the control is enabled or not. Can be used to disable control when live is shown
            or other cases where the playback userontrol is not usable.
            </summary>
            <param name="enable"></param>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControl.ShowTallUserControl">
            <summary>
            When set to true, an extra set of controls become available<br/>
            The ideal height for this control is:<br/>
              - When ShowTallUserControl is set to false: 50 pixels<br/>
              - When ShowTallUserControl is set to true : 100 pixels<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControl.ShowSpeedControl">
            <summary>
            When having a tall UserControl, this property controls if the speed slider is visible or not.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControl.ShowTimeSpanControl">
            <summary>
            When having a tall UserControl, this property controls if the time scale slider is visible or not.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControl.SelectionFromTime">
            <summary>
            Defines the start time of the selected interval.
            
            Note: Only valid for Smart Client plug-ins
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControl.SelectionToTime">
            <summary>
            Defines the end time of the selected interval.
            
            Note: Only valid for Smart Client plug-ins
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControl.SetSequence(System.DateTime,System.DateTime)">
            <summary>
            Sets the start and end time for a looping playback
            </summary>
            <param name="startTime"></param>
            <param name="endTime"></param>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControl.TimeSpan">
            <summary>
            Represents the time span that is currently viewed in the Smart Client.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PlaybackWpfUserControlInternal">
            <summary>
            Internal use only. Use <see cref="T:VideoOS.Platform.Client.PlaybackWpfUserControl"/> instead.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControlInternal.Init(VideoOS.Platform.FQID)">
            <summary>
            Initialize and define what playback controller to coordinate with
            </summary>
            <param name="playbackControllerFQID"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControlInternal.Close">
            <summary>
            Close and dispose 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControlInternal.SetCameras(System.Collections.Generic.List{VideoOS.Platform.FQID})">
            <summary>
            Define what cameras are controlled by this class
            </summary>
            <param name="sources"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControlInternal.SetEnabled(System.Boolean)">
            <summary>
            Controls if the control is enabled or not. Can be used to disable control when live is shown
            or other cases where the playback userontrol is not usable.
            </summary>
            <param name="enable"></param>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControlInternal.ShowTallUserControl">
            <summary>
            When set to true, an extra set of controls become available<br/>
            The ideal height for this control is:<br/>
              - When ShowTallUserControl is set to false: 50 pixels<br/>
              - When ShowTallUserControl is set to true : 100 pixels<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControlInternal.ShowSpeedControl">
            <summary>
            When having a tall UserControl, this property controls if the speed slider is visible or not.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControlInternal.ShowTimeSpanControl">
            <summary>
            When having a tall UserControl, this property controls if the time scale slider is visible or not.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControlInternal.SelectionFromTime">
            <summary>
            Defines the start time of the selected interval.
            
            Note: Only valid for Smart Client plug-ins
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControlInternal.SelectionToTime">
            <summary>
            Defines the end time of the selected interval.
            
            Note: Only valid for Smart Client plug-ins
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControlInternal.SetSequence(System.DateTime,System.DateTime)">
            <summary>
            Sets the start and end time for a looping playback
            </summary>
            <param name="startTime"></param>
            <param name="endTime"></param>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControlInternal.TimeSpan">
            <summary>
            Represents the time span that is currently viewed in the Smart Client.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PlaybackWpfUserControlMini">
            <summary>
            Interaction logic for PlatformPlaybackWpfControl.xaml
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControlMini.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            For interal usage
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControlMini.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            For interal usage
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControlMini.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            For interal usage
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControlMini.Init(VideoOS.Platform.FQID)">
            <summary>
            Initialize this component, the playbackControllerFQID must be provided to understand 
            the controller that should be used in conjuction with this UI component. 
            </summary>
            <param name="playbackControllerFQID"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControlMini.Close">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControlMini.SetCameras(System.Collections.Generic.List{VideoOS.Platform.FQID})">
            <summary>
            Set the identification of the item to control the timeline. 
            </summary>
            <param name="sources"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControlMini.SetEnabled(System.Boolean)">
            <summary>
            Controls if the control is enabled or not. Can be used to disable control when live is shown
            or other cases where the playback userontrol is not usable.
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControlMini.SetSequence(System.DateTime,System.DateTime)">
            <summary>
            Sets the start and end time for a looping playback
            </summary>
            <param name="startTime"></param>
            <param name="endTime"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControlMini.Refresh">
            <summary>
            Refresh timeline.
            
            If the SetCameras has been called with a new camera, or a null - this method will update the timeline
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControlMini.ShowTallUserControl">
            <summary>
            When set to true, an extra set of controls become available<br/>
            The ideal height for this control is:<br/>
              - When ShowTallUserControl is set to false: 50 pixels<br/>
              - When ShowTallUserControl is set to true : 100 pixels<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControlMini.ShowSpeedControl">
            <summary>
            When having a tall UserControl, this property controls if the speed slider is visible or not.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControlMini.ShowTimeSpanControl">
            <summary>
            When having a tall UserControl, this property controls if the time scale slider is visible or not.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControlMini.SelectionFromTime">
            <summary>
            Defines the start time of the selected interval.
            
            Note: Only valid for Smart Client plug-ins
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControlMini.SelectionToTime">
            <summary>
            Defines the end time of the selected interval.
            
            Note: Only valid for Smart Client plug-ins
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackWpfUserControlMini.TimeSpan">
            <summary>
            Represents the time span that is currently viewed in the Smart Client.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackWpfUserControlMini.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.SpeedSliderValueConvertor.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Internal use, convert speed slider value to playback speed.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.SpeedSliderValueConvertor.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.TimeSpanSliderTextConvertor.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Internal usage: Convert from timespan in minutes to the text under timespan slider.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.TimeSpanSliderTextConvertor.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.TimeSpanSliderValueConvertor.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Internal usage: convert from timespan in minutes to timespan slider value.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.TimeSpanSliderValueConvertor.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Internal usage: reverse operation of the Convert(...), convert from timespan slider value to timespan in minutes.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertiesUserControlWpfWrapper.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PropertiesWpfUserControl">
            <summary>
            This UserControl contains the visible part of the Property panel during Setup mode. <br/>
            If no properties is required by this ViewItemPlugin, the GeneratePropertiesWpfUserControl() method on the ViewItemManager can return a value of null.
            <br/>
            When changing properties the ViewItemManager should continuously be updated with the changes to ensure correct saving of the changes.
            <br/>
            As the user click on different ViewItem, the displayed property UserControl will be disposed, and a new one created for the newly selected ViewItem.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertiesWpfUserControl.Init">
            <summary>
            Called right after construction.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertiesWpfUserControl.Close">
            <summary>
            Called just before the class is disposed.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.PropertiesWpfUserControlWinFormsWrapper.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertiesWpfUserControlWinFormsWrapper.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertiesWpfUserControlWinFormsWrapper.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.SequenceCache">
            <summary>
            Very simple cache that can hold SequenceData objects.
            
            It cannot handle holes in data and the data is stored in the order it is provided, so it is entirely up to the consumer to ensure it is used in the right way.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.SidePanelUserControlWpfWrapper.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.SidePanelWpfUserControl">
            <summary>
            The WPF UserControl to be displayed in a side panel in the Smart Client.<br/>
            Generated by a plug-ins SidePanelPlugin.<br/>
            The width of the SidePanel is approximately 280 pixels wide.<br/>
            Please note that SidePanels are being created and disposed when the user navigates from one workspace to another, and the Init() and Close() methods will therefor be called many times during a Smart Client session.
            If your plugin need to perform CPU heavy operations during the Init() call, or get access to a remote server - consider to develop a BackgroundPlugin to maintain the remote session or any resources that may make sense to keep created.<br/>
            The height of this UserControl can be as large as you think makes sense.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.SidePanelWpfUserControl.Init">
            <summary>
            Called when environment is ready for initialization.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.SidePanelWpfUserControl.Close">
            <summary>
            Called when a user logs out, user selects another workspace or application is about to exit.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.SidePanelWpfUserControlWinFormsWrapper.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.SidePanelWpfUserControlWinFormsWrapper.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.SidePanelWpfUserControlWinFormsWrapper.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.TimelineMode">
            <summary>
            Timeline mode used in conjunction with the <see cref="T:VideoOS.Platform.Client.VideoControl"/> to manipulate the displayed timeline.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.TimelineMode.Minimal">
            <summary>
            Mode showing only minimal controls for the selected camera only.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.TimelineMode.Full">
            <summary>
            Mode showing controls similar to Smart Client.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.TimelineDataArea">
            <summary>
            Class representing one interval to be marked on the timeline. <br/>
            If this is used with a <see cref="T:VideoOS.Platform.Client.TimelineSequenceSource"/> of type <see cref="F:VideoOS.Platform.Client.TimelineSequenceSource.TimelineSequenceSourceType.Marker"/>
            only the begin time of the interval is used.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.TimelineDataArea.#ctor">
            <summary>
            Default constructor. Will set the interval to a single point at current time.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.TimelineDataArea.#ctor(VideoOS.Platform.Util.TimeInterval)">
            <summary>
            Constructor.
            </summary>
            <param name="interval">The interval that should be marked on the timeline.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.TimelineDataArea.#ctor(System.Object,VideoOS.Platform.Util.TimeInterval)">
            <summary>
            Constructor.
            </summary>
            <param name="id">The id of this piece of data.</param>
            <param name="interval">The interval that should be marked on the timeline.</param>
        </member>
        <member name="P:VideoOS.Platform.Client.TimelineDataArea.Id">
            <summary>
            The id of this piece of data - will be used for identifying the specific data piece when notifying the plugin of user interaction.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.TimelineDataArea.Interval">
            <summary>
            The interval that should be marked on the timeline - provide timestamps in UTC time. <br/>
            If this is used with a <see cref="T:VideoOS.Platform.Client.TimelineSequenceSource"/> of type <see cref="F:VideoOS.Platform.Client.TimelineSequenceSource.TimelineSequenceSourceType.Marker"/>
            the begin and end time should be the same.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.TimelineSourceQueryResult">
            <summary>
            Class for holding timeline data from a source for one interval
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.TimelineSourceQueryResult.#ctor(VideoOS.Platform.Util.TimeInterval)">
            <summary>
            Constructor.
            </summary>
            <param name="interval">The interval this instance contains data for</param>
        </member>
        <member name="P:VideoOS.Platform.Client.TimelineSourceQueryResult.TimeInterval">
            <summary>
            The interval this instance contains data for.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.TimelineSourceQueryResult.Sequences">
            <summary>
            The sequences or data points that are to be displayed on the timeline. <br/>
            Must be sorted by time in ascending order.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.TimelineSequencesEventArgs">
            <summary>
            EventArgs class to be used with the <see cref="E:VideoOS.Platform.Client.TimelineSequenceSource.SequencesRetrieved"/> event.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.TimelineSequencesEventArgs.#ctor(System.Collections.Generic.IEnumerable{VideoOS.Platform.Client.TimelineSourceQueryResult})">
            <summary>
            Constructor.
            </summary>
            <param name="results">The results to be returned</param>
        </member>
        <member name="M:VideoOS.Platform.Client.TimelineSequencesEventArgs.#ctor(VideoOS.Platform.Client.TimelineSourceQueryResult)">
            <summary>
            Constructor.
            </summary>
            <param name="result">The result to be returned - sorted by time in ascending order</param>
        </member>
        <member name="P:VideoOS.Platform.Client.TimelineSequencesEventArgs.Results">
            <summary>
            Property for getting the result.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.TimelineSequenceSource">
            <summary>
            Implement derived class capable of delivering information about when data is available for a
            source and return instances in the TimelineSequenceSources property of the <see cref="T:VideoOS.Platform.Client.ViewItemManager"/>.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.TimelineSequenceSource.StartGetSequences(System.Collections.Generic.IEnumerable{VideoOS.Platform.Util.TimeInterval})">
            <summary>
            This method is called in order to get timeline information from this source. The implementation should 
            return immediately and the result should then be returned in the event <see cref="E:VideoOS.Platform.Client.TimelineSequenceSource.SequencesRetrieved"/>. 
            Be aware that multiple calls to GetSequences can be made without waiting for the event response, so the
            implementation must be able to run multiple requests concurrently.
            </summary>
            <param name="intervals">The intervals for which data should be returned</param>
        </member>
        <member name="E:VideoOS.Platform.Client.TimelineSequenceSource.SequencesRetrieved">
            <summary>
            The client will subscribe to this event in order to be notified when results are ready.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.TimelineSequenceSource.Id">
            <summary>
            Unique identifier for this source - used by the Smart Client to uniquely identify each source.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.TimelineSequenceSource.Title">
            <summary>
            Short (preferably one or two words) describing this source. Used for the timeline legend.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.TimelineSequenceSource.TimelineSequenceSourceType">
            <summary>
            Enumeration used for specifying the type of a given <see cref="T:VideoOS.Platform.Client.TimelineSequenceSource"/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.TimelineSequenceSource.TimelineSequenceSourceType.Ribbon">
            <summary>
            Sources of this type will be used for populating the custom data ribbon of the timeline.
            Sources of this type must return a valid color in the <see cref="P:VideoOS.Platform.Client.TimelineSequenceSource.RibbonContentColor"/> property.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.TimelineSequenceSource.TimelineSequenceSourceType.Marker">
            <summary>
            Sources of this type will be used for adding markers to the timeline.
            Sources of this type must return a valid image in the <see cref="P:VideoOS.Platform.Client.TimelineSequenceSource.MarkerIcon"/> property.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.TimelineSequenceSource.SourceType">
            <summary>
            Tells whether this source will provide data for populating the custom data ribbon or adding markers to the timeline.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.TimelineSequenceSource.RibbonContentColor">
            <summary>
            Tells the color to use for the data added to the custom data ribbon on the timeline. 
            Only used if <see cref="P:VideoOS.Platform.Client.TimelineSequenceSource.SourceType"/> returns <see cref="F:VideoOS.Platform.Client.TimelineSequenceSource.TimelineSequenceSourceType.Ribbon"/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.TimelineSequenceSource.MarkerIcon">
            <summary>
            Should provide the image that is used for markers on the timeline. <br/>
            Only used if <see cref="P:VideoOS.Platform.Client.TimelineSequenceSource.SourceType"/> returns <see cref="F:VideoOS.Platform.Client.TimelineSequenceSource.TimelineSequenceSourceType.Marker"/>. <br/>
            Recommended size is 5x9 pixels - if it is larger it will be downscaled.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.TimelineSequenceSource.GetPreviewUserControl(System.Object)">
            <summary>
            If supported by the plugin this method should be overridden to return a UserControl displaying a preview
            of data corresponding to the given data area ID (the ID previously provided in <see cref="P:VideoOS.Platform.Client.TimelineDataArea.Id"/>).
            </summary>
            <param name="dataId">Id from <see cref="T:VideoOS.Platform.Client.TimelineDataArea"/> and thus identifying the area of data to be previewed.</param>
            <returns>UserControl showing the data</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.TimelineSequenceSource.OnSequencesRetrieved(System.Collections.Generic.IEnumerable{VideoOS.Platform.Client.TimelineSourceQueryResult})">
            <summary>
            The derived class should call this method once results for a <see cref="M:VideoOS.Platform.Client.TimelineSequenceSource.StartGetSequences(System.Collections.Generic.IEnumerable{VideoOS.Platform.Util.TimeInterval})"/>
            request is ready.
            </summary>
            <param name="results">The list of results - sorted by time in ascending order</param>
        </member>
        <member name="T:VideoOS.Platform.Client.SettingsPanelPlugin">
            <summary>
            Represents a plug-in that can be integrated into the Settings panel. <br/>
            
            A tab with given Title will be available in the Settings panel navigation list. 
            When selected, the <see cref="M:VideoOS.Platform.Client.SettingsPanelPlugin.GenerateUserControl"/> method will be called to create a Windows Presentation Foundation (WPF) user control for this plug-in. <br/>
            
            When the <see cref="M:VideoOS.Platform.Client.SettingsPanelPlugin.TrySaveChanges(System.String@)"/> method is called, the plug-in can use the method <see cref="M:VideoOS.Platform.Client.SettingsPanelPlugin.SaveProperties(System.Boolean)"/> to save the configuration that has been set using the <see cref="M:VideoOS.Platform.Client.PropertyClass.SetProperty(System.String,System.String)"/>. <br/> 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.SettingsPanelPlugin.Id">
            <summary>
            Should return unique id identifying this plug-in.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.SettingsPanelPlugin.Title">
            <summary>
            Should return the title of this plug-in. It will be displayed in the Settings panel navigation list.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.SettingsPanelPlugin.GenerateUserControl">
            <summary>
            Should create a Windows Presentation Foundation (WPF) user control which represents the user interface (UI) of this plug-in.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.SettingsPanelPlugin.CloseUserControl">
            <summary>
            Should close the user control and clean up any resources or event registrations. <br/>
            It's called when a user navigates away from this plug-in - either when selecting different component in the navigation list or when closing the Settings panel.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.SettingsPanelPlugin.Init">
            <summary>
            This method is called when the Settings panel is loaded. <br/>
            It should be used for accessing configuration items if needed.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.SettingsPanelPlugin.Close">
            <summary>
            This method is called just before the Settings panel is closed.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.SettingsPanelPlugin.LoadProperties(System.Boolean)">
            <summary>
            Gets the stored properties from the server. 
            </summary>
            <param name="userPrivate">Set this to true if the user specific set of properties are to be loaded.</param>
            <returns>True if properties were found, otherwise false.</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.SettingsPanelPlugin.TrySaveChanges(System.String@)">
            <summary>
            Should save any changes made in the user control. If the save operation fails, use errorMessage to provide a string describing the error. <br/>
            This method should be overridden by the plug-in to validate the entries and possibly call <see cref="M:VideoOS.Platform.Client.SettingsPanelPlugin.SaveProperties(System.Boolean)"/> to have the properties stored on the server. 
            (If the values have been set using <see cref="M:VideoOS.Platform.Client.PropertyClass.SetProperty(System.String,System.String)"/>)
            </summary>
            <param name="errorMessage">The error description if saving failed. An empty string if successfully saved.</param>
            <returns>True if settings were successfully saved, otherwise false.</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.SettingsPanelPlugin.SaveProperties(System.Boolean)">
            <summary>
            Saves the values set using <see cref="M:VideoOS.Platform.Client.PropertyClass.SetProperty(System.String,System.String)"/> on the server.
            </summary>
            <param name="userPrivate">If true, the content is persisted for current user only. Otherwise content is persisted for all users connected to a server.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.SettingsPanelPlugin.ShowHelp">
            <summary>
            Should show help specific for this plug-in (if available).
            </summary>
            <returns>True if show help was handled, otherwise false.</returns>
        </member>
        <member name="T:VideoOS.Platform.Client.TimeLineUserControl">
            <summary>
            This call is intended for internal use together with the PlaybackUserControl implementations.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.TimeLineUserControl._timeLine">
            <summary>
            Precision is 5 pixels wide and 1000 for the timeinterval
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.TimeLineUserControl.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.TimeLineUserControl.CurrentTime">
            <summary>
            Local time
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.TimeLineUserControl.Item">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.TimeLineUserControl.TimeSpan">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.TimeLineUserControl.TimeEventHandler">
            <summary>
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.TimeLineUserControl.MouseSetTimeEvent">
            <summary>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.TimeLineUserControl.SetShowTime(System.DateTime)">
            <summary>
            DateTime is asumed to be local time 
            </summary>
            <param name="newCenter"></param>
        </member>
        <member name="F:VideoOS.Platform.Client.TimeLineUserControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.TimeLineUserControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.TimeLineUserControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.TimeEventArgs">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Client.TimeEventArgs.Time">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Client.ViewControl">
            <summary>
            ViewControl is an easy to use UI component for showing a collection of viewitems in a MIP plugin UI.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewControl.#ctor(System.Collections.Generic.List{VideoOS.Platform.Client.ViewControlItem},System.Collections.Generic.List{System.Drawing.Rectangle})">
            <summary>
            Creates a ViewControl
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewControl.#ctor(System.Collections.Generic.List{VideoOS.Platform.Client.ViewControlItem},System.Collections.Generic.List{System.Drawing.Rectangle},VideoOS.Platform.Client.WindowInformation)">
            <summary>
            Use this constructor to create a ViewControl that is linked to the mode and playback of the window referenced in the windowInformation.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewControl.ViewLayout">
            <summary>
            Gets or sets the layout of the view.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewControl.Items">
            <summary>
            Gets or sets the list of ViewControlItems that belongs to the ViewControl.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewControl.ParentWindowInformation">
            <summary>
            Gets the WindowInformation of the window that should control the playback mode and time of the ViewControl. 
            If this is not set, the ViewControl will ignore the playback mode and playback events in the view that it is part of.
            Obtain the WindowInformation from the ViewItemUserControl, where it will be set before Init is called.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewControl.Live">
            <summary>
            Gets or sets whether the control is in live mode or not. If set to false then the control is in playback mode.
            If ParentWindowInformation is set, the mode of the whole window is affected. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewControl.PlaybackTime">
            <summary>
            Gets or sets the current playback time. 
            If ParentWindowInformation is not set, the playback time of the whole window is affected. 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewControl.Close">
            <summary>
            Closes the ViewControl. Call this method when it is removed from the UI.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ViewControl.SelectedItemChanged">
            <summary>
            Event that is fired when the selected viewItem is changed.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ViewControlItemArgs">
            <summary>
            Event argument for SelectedItemChanged.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewControlItemArgs.ViewControlItem">
            <summary>
               The newly selected item in the ViewControl
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ViewControlItem">
            <summary>
            Base class for all ViewControlItems
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewControlItem.#ctor(System.Int32)">
            <summary>
            Base constructor of all ViewControlItems
            </summary>
            <param name="indexInViewLayout"></param>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewControlItem.ViewItemTypeId">
            <summary>
            View Item Type Guid
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewControlItem.IndexInViewLayout">
            <summary>
            Describes where in the view layout this view item should be positioned. 
            Numbers start from top left corner and ends in bottom right.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.CustomViewControlItem">
            <summary>
            Use this class to represent any viewitem that should be part of the ViewControl.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.CustomViewControlItem.#ctor(System.Guid,System.Int32)">
            <summary>
            Constructs a CustomViewControlItem
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.CustomViewControlItem.Properties">
            <summary>
            Dictionary of key value pairs that can be used to describe some initial properties of the view item. 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.CameraViewControlItem">
            <summary>
            Use this class to represent a camera view item that should be part of the ViewControl.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.CameraViewControlItem.#ctor(System.Int32,VideoOS.Platform.FQID)">
            <summary>
            Constructs a CameraViewControlItem
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.CameraViewControlItem.CameraId">
            <summary>
            Gets the camera shown by the control. 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.MapViewControlItem">
            <summary>
            Use this class to represent a map view item that should be part of the ViewControl.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.MapViewControlItem.#ctor(System.Int32,System.Guid)">
            <summary>
            Constructs a MapViewControlItem
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.MapViewControlItem.MapId">
            <summary>
            Gets the initial map shown by the map view item. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.MapViewControlItem.AlarmAutoChange">
            <summary>
            If true this Map will change when an alarm is selected, if the alarm has a related Map.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.MapViewControlItem.IsInitialized">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.MapViewControlItem.IsAutoMaximize">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.MapViewControlItem.TimeoutSeconds">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.MapViewControlItem.IconSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.MapViewControlItem.ShowPreview">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.MapViewControlItem.ShowStatus">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.MapViewControlItem.ShowStatusDetails">
            <summary>
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ViewItemWpfUserControl">
            <summary>
            The ViewItemWpfUserControl is the WPF version of the ViewItemUserControl. It is instantiated for every position it is created on the current visible view. When a user select another View or ViewLayout, this class will be disposed.  No permanent settings can be saved in this class.
            The Init() method is called when the class is initiated and handle has been created for the UserControl. Please perform resource initialization in this method.
            <br/>
            If Message communication is performed, register the MessageReceivers during the Init() method and UnRegister the receivers during the Close() method.
            <br/>
            The Close() method can be used to Dispose resources in a controlled manor.
            <br/>
            Mouse events not used by this control, should be passed on to the Smart Client by issuing the following methods:<br/>
            FireClickEvent() for single click<br/>
            FireDoubleClickEvent() for double click<br/>
            The single click will be interpreted by the Smart Client as a selection of the item, and the double click will be interpreted to expand the current viewitem to fill the entire View.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ViewItemWpfUserControl.SelectRequestEvent">
            <summary>
            Signals that the content holder requests to be selected
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemWpfUserControl.FireSelectRequestEvent">
            <summary>
            Activates the SelectRequestEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ViewItemWpfUserControl.DeselectRequestEvent">
            <summary>
            Signals that the content holder requests to be deselected
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemWpfUserControl.FireDeselectRequestEvent">
            <summary>
            Activates the DeselectRequestEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ViewItemWpfUserControl.MaximizeRequestEvent">
            <summary>
            Signals that the content holder requests to be maximized
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemWpfUserControl.FireMaximizeRequestEvent">
            <summary>
            Activates the MaximizeRequestEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ViewItemWpfUserControl.RestoreRequestEvent">
            <summary>
            Signals that the content holder requests to be restored
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemWpfUserControl.FireRestoreRequestEvent">
            <summary>
            Activates the RestoreRequestEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ViewItemWpfUserControl.ClickEvent">
            <summary>
            Signals that the content holder is clicked
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemWpfUserControl.FireClickEvent">
            <summary>
            Activates the ClickEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ViewItemWpfUserControl.DoubleClickEvent">
            <summary>
            Signals that the content holder is double clicked clicked
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemWpfUserControl.FireDoubleClickEvent">
            <summary>
            Activates the DoubleClickEvent
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemWpfUserControl.Selected">
            <summary>
            Gets or sets the selected status on the content holder. This status 
            should never be set directly by the content holder, but instead the content holder 
            should request to be selected by using the SelectRequestEvent event.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemWpfUserControl.Maximized">
            <summary>
            Gets or sets the maximized status on the content holder. This status 
            should never be set directly by the content holder, but instead the content holder 
            should request to be maximized and restored by using the MaximizeRequestEvent and RestoreRequestEvent events.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemWpfUserControl.Hidden">
            <summary>
            Gets or sets the hidden status on the content holder (e.g. the view item is set to be hidden when another view item is maximized). 
            This status should never be set by the content holder.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemWpfUserControl.Selectable">
            <summary>
            Gets boolean indicating whether the content holder can be selectable or not. The Selected property of a 
            non-selectable content holder will never be set to true. The content holder should implement the click and 
            double click events even if it is not selectable
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemWpfUserControl.Maximizable">
            <summary>
            Gets boolean indicating whether the content holder can be maximized or not. The Maximized property of a 
            non-maximizable content holder will never be set to true. The content holder should implement the click and 
            double click events even if it is not maximizable. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemWpfUserControl.ShowToolbar">
            <summary>
            Tells the Smart Client if the toolbar should pop up over the ViewItem, when the mouse hover over this ViewItem.<br/>
            For MIP Plugins the default toolbar contains a print button.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemWpfUserControl.CalculateHeaderHeight">
            <summary>
            Calculate the height of a Camera View Item.
            This can used to make a similar header in own ViewItem.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemWpfUserControl.CalculateHeaderFontSize">
            <summary>
            Calculate what font size is used in the header for a Camera View Item.
            This can used to make a similar header in own ViewItem.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemWpfUserControl.Init">
            <summary>
            Method that is called immediately after the view item is displayed.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemWpfUserControl.Close">
            <summary>
            Method that is called when the view item is closed. The view item should free all resources when the method is called.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemWpfUserControl.WindowInformation">
            <summary>
            Gives some basic information about the Window holding this UserControl.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemWpfUserControl.Print(System.String,System.String,System.String)">
            <summary>
            Method that is called when print is activated while the content holder is selected.
            
            Base implementation does it as shown below:
            
            <code>
                Rect bounds = VisualTreeHelper.GetDescendantBounds(this);
                RenderTargetBitmap renderTarget = new RenderTargetBitmap((Int32)bounds.Width, (Int32)bounds.Height, 96, 96, PixelFormats.Pbgra32);
                DrawingVisual visual = new DrawingVisual();
                
                using (DrawingContext context = visual.RenderOpen())
                {
                    VisualBrush visualBrush = new VisualBrush(this);
                    context.DrawRectangle(visualBrush, null, new Rect(new Point(), bounds.Size));
                }
                renderTarget.Render(visual);
                
                using (MemoryStream outStream = new MemoryStream())
                {
                    BmpBitmapEncoder bitmapEncoder = new BmpBitmapEncoder();
                    bitmapEncoder.Frames.Add(BitmapFrame.Create(renderTarget));
                    bitmapEncoder.Save(outStream);
                    ClientControl.Instance.Print(new System.Drawing.Bitmap(outStream), name, information, cameraName);
                }
            </code>
            </summary>
            <param name="name">The name of this viewItem</param>
            <param name="information">Information being shown in a multi-line box</param>
            <param name="cameraName">Blank or name of a camera</param>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemWpfUserControl.Print(System.String,System.String)">
            <summary>
            Same as overloaded Print method, with cameraName empty.
            </summary>
            <param name="name">The name of this viewItem</param>
            <param name="information">Information being shown in a multi-line box</param>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemWpfUserControl.Print">
            <summary>
            Overloaded method of Print, where the information parameter is blank.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewItemWpfUserControlWinFormsWrapper.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemWpfUserControlWinFormsWrapper.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemWpfUserControlWinFormsWrapper.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.AudioPlayerControl">
            <summary>
            This class is available in the Smart Client and the .Net Library.<br/>
            It supports playing live and recorded audio from an XProtect server or from an export in XProtect format.<br/>
            <br/>
            A simple implementation just need these lines for initialization:<br/>
            <code>
                audioPlayerControl.MicrophoneFQID = _selectedMicrophoneItem.FQID;
            	audioPlayerControl.Initialize();
            	audioPlayerControl.Connect();
            </code>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.AudioPlayerControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.AudioPlayerControl.MicrophoneFQID">
            <summary>
            Identifies the microphone that is to be listened to in the control.<br/>
            Only one of <see cref="P:VideoOS.Platform.Client.AudioPlayerControl.SpeakerFQID"/> and this can be set - not both. Setting both will throw exception.<br/>
            This property or <see cref="P:VideoOS.Platform.Client.AudioPlayerControl.SpeakerFQID"/> needs to be set before the Initialize() method is called.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.AudioPlayerControl.SpeakerFQID">
            <summary>
            Identifies the speaker that is to be listened to in the control.<br/>
            Only one of <see cref="P:VideoOS.Platform.Client.AudioPlayerControl.MicrophoneFQID"/> and this can be set - not both. Setting both will throw exception.<br/>
            This property or <see cref="P:VideoOS.Platform.Client.AudioPlayerControl.MicrophoneFQID"/> needs to be set before the Initialize() method is called.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.AudioPlayerControl.PlaybackControllerFQID">
            <summary>
            Defines which PlaybackController is controlling this AudioPlayerControl in Playback mode.
            The FQID used here is returned by the ClientControl.GeneratePlaybackController() method.<br/>
            In Smart Client if set to null the playback will follow either the main playback controller or the one of the window the control is running in (if WindowInformation was provided when generating).
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.AudioPlayerControl.Initialize">
            <summary>
            Call this method to initialize internal event registration.  MicrophoneFQID does not have to be defined at this point.<br/>
            This method should only be called once.<br/>
            This method should first be called when this control has been added to the parents Controls, and all construction is complete.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.AudioPlayerControl.Connect">
            <summary>
            This method will connect the recording server owning the microphone.<br/>
            The MicrophoneFQID property must have been set, and the Initialize() method called before this method can be called.<br/>
            This method can be called multiple times when changing to another microphone.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.AudioPlayerControl.Disconnect">
            <summary>
            Disconnect current session to the recording server.<br/>
            Following this call, the MicrophoneFQID can be changed and a new session be established by a call to the Connect() method.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.AudioPlayerControl.Close">
            <summary>
            Should be called for the underlaying controls to clean up entirely. 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.AudioPlayerControl.StartLive">
            <summary>
            This method should not be used.  For standalone applications please use the PlaybackController.<br/>
            In the Smart Client and the .Net Library the default implementation will ensure that a AudioPlayerControl
            will follow the mode of the MIP Environment, e.g. change mode to Live/Browse/Setup as this mode
            is changed by the user.<br/>
            In the Smart Client this means that it follow the normal rule for window it resides on, e.g. Smart Client mode in the main window and live mode in floating windows.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.AudioPlayerControl.StartBrowse">
            <summary>
            This method should not be used.  For standalone applications please use the PlaybackController.<br/>
            In the Smart Client and the .Net Library the default implementation will ensure that a AudioPlayerControl
            will follow the mode of the MIP Environment, e.g. change mode to Live/Browse/Setup as this mode
            is changed by the used.<br/>
            In the Smart Client this means that it follow the normal rule for window it resides on, e.g. Smart Client mode in the main window and live mode in floating windows.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.AudioPlayerControl.StartSetup">
            <summary>
            This method should not be used.  For standalone applications please use the PlaybackController.<br/>
            In the Smart Client and the .Net Library the default implementation will ensure that a AudioPlayerControl
            will follow the mode of the MIP Environment, e.g. change mode to Live/Browse/Setup as this mode
            is changed by the used.<br/>
            In the Smart Client this means that it follow the normal rule for window it resides on, e.g. Smart Client mode in the main window and live mode in floating windows.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.AudioPlayerControl.Volume">
            <summary>
            Gets or sets the volume.
            </summary>
            <value>The volume is a number from 0 to 1.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The value have to be between 0 and 1</exception>
        </member>
        <member name="P:VideoOS.Platform.Client.AudioPlayerControl.Mute">
            <summary>
            Gets or sets a value indicating whether this microphone is muted.
            </summary>
            <value><c>true</c> if mute; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:VideoOS.Platform.Client.AudioPlayerControl.ConnectResponseEvent">
            <summary>
            Register on this event to be called when a connection has completed.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.AudioPlayerControl.ConnectionStateChangedEvent">
            <summary>
            This event is fired when the connection state changes, e.g. a connection is established or terminated.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.AudioPlayerControl.ConnectionStateChangedHandler">
            <summary>
            This delegate is used when the connection state changes, and the ConnectionStateChangedEvent is called.
            </summary>
            <param name="sender"></param>
            <param name="connectionState"></param>
        </member>
        <member name="P:VideoOS.Platform.Client.AudioPlayerControl.ConnectionState">
            <summary>
            Indicates current state of the connection<br/>
            0x00 - Connected
            0x01 - Not connected.<br/>
            0x03 - Trying to logon<br/>
            0x05 - Failed to logon<br/>
            0x09 - Fail to connect<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.AudioPlayerControl.SetAudioXml(VideoOS.Platform.UserContext,System.String)">
            <summary>
            Can be used for directly setting the audio device XML to be used for connecting. 
            Instead of using FQID in the cases where configuration load is not desired.
            Only supported in standalone.
            </summary>
            <param name="userContext"></param>
            <param name="xml">The XML describing the audio device.</param>
        </member>
        <member name="F:VideoOS.Platform.Client.AudioPlayerControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.AudioPlayerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.AudioPlayerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ConnectionState">
            <summary>
            Current state information for a session 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ConnectionState.Connected">
            <summary>
            True if a session is established. False if not - and the NotConnectedState indicates the state.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ConnectionState.NotConnectedState">
            <summary>
            Indicates why a session is not established.<br/>
            0x01 - Not connected.<br/>
            0x03 - Trying to logon<br/>
            0x05 - Failed to logon<br/>
            0x09 - Fail to connect<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ConnectionState.#ctor(System.Boolean,System.Int32)">
            <summary>
            The constructor is used internally.
            </summary>
            <param name="connected"></param>
            <param name="notConnectedState"></param>
        </member>
        <member name="T:VideoOS.Platform.Client.LoginPlugin">
            <summary>
            A class specifying an Login plug-in.
            <br/>
            Login plugin are called during the smart client 
            login process. It can choose to be called as part of the normal login flow of the 
            smart client and/or after the normal login flow. In the latter case the plugin can 
            define a user interface to be shown in the login dialog.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.LoginPlugin.Id">
            <summary>
            Gets the unique id identifying this plug-in component
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.LoginPlugin.Name">
            <summary>
            The name of this plug-in
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.LoginPlugin.Icon">
            <summary>
            The icon representing this login plug-in.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.LoginPlugin.IncludeInLoginFlow">
            <summary>
            Indicated whether or not this plugin should be called (LoginFlowExecute()) 
            during the normal Smart Client login flow.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.LoginPlugin.LoginFlowExecute">
            <summary>
            Called during the last step in the normal Smart Client login flow. Only called 
            if the IncludeInLoginFlow is set to true. Note that this method is called on a 
            non-UI thread in order to prevent that the execution blocks the UI thread.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.LoginPlugin.GenerateCustomLoginUserControl">
            <summary>
            Create a custom login page UserControl to be displayed in the Smart Client 
            login dialog after the normal Smart Client login flow. Return null to indicated that 
            no custom login page should be displayed. The custom login page could e.g. be used 
            to obtain user login credentials to a third party service that the MIP plugin 
            interacts with. Note that it is important that the usercontrols does not block the 
            Smart Client UI thread and thus all work must be done on a separate thread.
            </summary>
            <returns>A custom login page user control.</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.LoginPlugin.Init(System.String)">
            <summary>
            This method is called during the Smart Client login when the configuration is accessible.
            If a user logs out and in again, this method will be called at every login.
            </summary>
            <param name="surveilanceUsername">The username that was used to log in to the surveillance system.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.LoginPlugin.Close">
            <summary>
            Called by the Environment when the user log's off.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.LoginUserControl">
            <summary>
            Base class for the usercontrol returned by LoginPlugin.GenerateCustomLoginUserControl(). 
            The user control is displayed in the Smart Client login dialog after the normal Smart 
            Client login flow. Note that it is important that the usercontrols does not block the 
            Smart Client UI thread and thus all work must be done on a separate thread.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.LoginUserControl.Completed">
            <summary>
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.LoginUserControl.ProgressChanged">
            <summary>
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.LoginUserControl.ProgressMessageChanged">
            <summary>
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.LoginUserControl.ErrorMessageChanged">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.LoginUserControl.ProgressProperty">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.LoginUserControl.ProgressMessageProperty">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.LoginUserControl.ErrorMessageProperty">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.LoginUserControl.Progress">
            <summary>
            Set this property to update the progress indication in the Smart 
            Client login dialog. The value should be between 0 and 1.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.LoginUserControl.ProgressMessage">
            <summary>
            Set this property to update the progress message shown in the Smart 
            Client login dialog. The progress message is only shown if the
            ErrorMessage is empty.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.LoginUserControl.ErrorMessage">
            <summary>
            Set this property to update the error message shown in the Smart 
            Client login dialog.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.LoginUserControl.SignalCompleted">
            <summary>
            Call this method to indicate to the Smart Client login dialog that the operation 
            handled by this user control is completed.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.LoginUserControl.Init">
            <summary>
            Called when the login user control is shown in the login dialog 
            and ready to be used. Use this method and not the UserControl.Loaded
            event to do the final user control initialization.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.VideoControl">
            <summary>
            VideoControl is an easy to use UI component for showing a camera view in MIP plugin UI.
            The control creates a view of cameras having the same functionality as a normal view in the Smart Client.
            This means that features like live mode, playback mode, playback synchronization, camera selection,
            camera maximization, PTZ, independent playback, camera toolbar, timeline etc. is handled automatically by the control. 
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.VideoControl.SelectedCameraChanged">
            <summary>
            Event that is fired when the selected camera is changed. The new selected camera can be accessed through the SelectedCamera property.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.VideoControl.PlaybackTimeChanged">
            <summary>
            Event that is fired when the playback time changed. The new playback time can be accessed through the PlaybackTime property.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.VideoControl.AutoSelectFirstCamera">
            <summary>
            Gets or sets whether the first camera should be auto selected by the control when the camera view is loaded.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.VideoControl.Live">
            <summary>
            Gets or sets whether the control is in live mode or not. If set to false then the control is in playback mode.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.VideoControl.PlaybackTime">
            <summary>
            Gets or sets the current playback time.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.VideoControl.SelectedCamera">
            <summary>
            Gets or sets the current selected camera.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.VideoControl.Cameras">
            <summary>
            Gets or sets the list of cameras shown by the control. 
            When set a layout matching the numbers of cameras will automatically be created.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.VideoControl.TimelineMode">
            <summary>
            Gets or sets the timeline mode shown by the control.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.VideoControl.TimelineSpan">
            <summary>
            Gets or sets the timeline span.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.VideoControl.GetPaintSize(System.Int32)">
            <summary>
            Get the paint size of the image viewer control at the specified index.
            Use this for generating overlay of the correct dimensions.
            </summary>
            <param name="cameraIndex">The index of the camera in Cameras</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.VideoControl.SetOverlay(System.Int32,System.Drawing.Bitmap,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Windows.Forms.DockStyle,System.Windows.Forms.DockStyle,System.Double,System.Double)">
            <summary>
            Set an overlay on top of the video being displayed.
            </summary>
            <param name="cameraIndex">The index of the camera in Cameras that the overlay should be applied on</param>
            <param name="bitmap"></param>
            <param name="id"></param>
            <param name="keepAspectRatio"></param>
            <param name="scaleWithDigitalZoom"></param>
            <param name="scaleOverlay"></param>
            <param name="scaleFactor"></param>
            <param name="verticalDock"></param>
            <param name="horizontalDock"></param>
            <param name="absolutePosX"></param>
            <param name="absolutePosY"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.VideoControl.ClearOverlay(System.Int32,System.Int32)">
            <summary>
            Clear a specific overlay placed earlier. The id used during the SetOverlay() call is used in this method for clearing that overlay again.
            </summary>
            <param name="cameraIndex">The index of the camera in Cameras that the overlay should be applied on</param>
            <param name="id"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.VideoControl.ShapesOverlayAdd(System.Int32,System.Collections.Generic.List{System.Windows.Shapes.Shape},VideoOS.Platform.Client.ShapesOverlayRenderParameters)">
            <summary>
            Set an overlay on top of the video being displayed.
            The returned id is used for updating and removing the overlay.
            If the specified cameraIndex is invalid, Guid.Empty will be retuned.
            </summary>
            <param name="cameraIndex">The index of the camera in Cameras that the overlay should be applied on</param>
            <param name="overlayShapes"></param>
            <param name="renderParameters"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.VideoControl.ShapesOverlayRemove(System.Int32,System.Guid)">
            <summary>
            Clear a specific overlay placed earlier. The id used during the ShapesOverlayAdd() call is used in this method for clearing that overlay again.
            </summary>
            <param name="cameraIndex">The index of the camera in Cameras that the overlay should be applied on</param>
            <param name="id">Id of the overlay to remove</param>
        </member>
        <member name="M:VideoOS.Platform.Client.VideoControl.ShapesOverlayUpdate(System.Int32,System.Guid,System.Collections.Generic.List{System.Windows.Shapes.Shape},VideoOS.Platform.Client.ShapesOverlayRenderParameters)">
            <summary>
            Update a specific overlay placed earlier. The id used during the ShapesOverlayAdd() call is used in this method for updating that overlay.
            </summary>
            <param name="cameraIndex">The index of the camera in Cameras that the overlay should be applied on</param>
            <param name="id">Id of the overlay to update</param>
            <param name="overlayShapes"></param>
            <param name="renderParameters"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.VideoControl.SetTimelineSelection(System.DateTime,System.DateTime)">
            <summary>
            Enables time selection mode and applies the provided selection times.
            </summary>
            <param name="from">The beginning of the selection.</param>
            <param name="to">The end of the selection.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.VideoControl.Close">
            <summary>
            Closes the VideoControl. Call this method when it is removed from the UI.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.VideoControl.OnPlaybackTimeChanged">
            <summary>
            Internally used to call on event PlaybackTimeChanged
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ViewLayout">
            <summary>
            The Layout represent a specific Smart Client view layout without content.
            This class is provided by the PluginDefinition
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewLayout.#ctor(System.String,System.Drawing.Rectangle[])">
            <summary>
            Create a new ViewLayout with a specific name and defined layout. 
            The Rectangle's defines each of the view items on the ViewLayout. The coordinates on these should
            be from (0,0) to (999,999), where (0,0) is the top left corner.<br/>
            </summary>
            <param name="name"></param>
            <param name="layoutArray"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewLayout.#ctor">
            <summary>
            Create a ViewLayout, Name and Layout is defined via properties.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewLayout.Icon">
            <summary>
            Image illustrating the view layout
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewLayout.Rectangles">
            <summary>
            The Rectangles defining the Layout.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewLayout.Id">
            <summary>
            Gets the unique id identifying this layout
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewLayout.DisplayName">
            <summary>
            The name to display for the user.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.WorkSpaceToolbarPlaceDefinition">
            <summary>
            Defines work space toolbar placement information. Used in WorkSpaceToolbarPlugin.WorkSpaceToolbarPlaceDefinition
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WorkSpaceToolbarPlaceDefinition.WorkSpaceIds">
            <summary>
            List of WorkSpace ids that the toolbar plugin shall be shown for. An empty list results in the toolbar item being shown for all work spaces.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WorkSpaceToolbarPlaceDefinition.WorkSpaceStates">
            <summary>
            List of work space states that the toolbar plugin shall be shown for. An empty list results in the toolbar item being shown for all work space states.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.WorkSpaceToolbarPluginInstance">
            <summary>
            Represents an actual work space toolbar plugin instance. An instance of this class will be created for each toolbar plugin that is added to the Smart Client UI.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.WorkSpaceToolbarPluginInstance.PropertyNameTitle">
            <summary>
            The title property name. Used in the ToolbarPropertyChanged event.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.WorkSpaceToolbarPluginInstance.PropertyNameVisible">
            <summary>
            The visible property name. Used in the ToolbarPropertyChanged event.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.WorkSpaceToolbarPluginInstance.PropertyNameEnabled">
            <summary>
            The enabled property name. Used in the ToolbarPropertyChanged event.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.WorkSpaceToolbarPluginInstance.ToolbarPropertyChanged">
            <summary>
            Event indicating that one of the properties has changed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WorkSpaceToolbarPluginInstance.Title">
            <summary>
            Gets or sets the toolbar item title.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WorkSpaceToolbarPluginInstance.Visible">
            <summary>
            Gets or sets the toolbar item visible state.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WorkSpaceToolbarPluginInstance.Enabled">
            <summary>
            Gets or sets the toolbar item enabled state.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.WorkSpaceToolbarPluginInstance.Init(VideoOS.Platform.Item)">
            <summary>
            Called when the toolbar item instance is added to the UI
            </summary>
            <param name="window">The window item of the window that the toolbar is shown in.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.WorkSpaceToolbarPluginInstance.Activate">
            <summary>
            Called when the user activates the toolbar plugin.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.WorkSpaceToolbarPluginInstance.Close">
            <summary>
            Called when the toolbar item instance is removed from the UI. 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.WorkSpaceToolbarPlugin">
            <summary>
            The WorkSpaceToolbarPlugin defines a plug-in that resides in the work space toolbar in the Smart Client.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WorkSpaceToolbarPlugin.Id">
            <summary>
            Gets the unique id identifying this plug-in component
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WorkSpaceToolbarPlugin.Name">
            <summary>
            The plugin name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WorkSpaceToolbarPlugin.WorkSpaceToolbarPlaceDefinition">
            <summary>
            WorkSpaceToolbarPlaceDefinition defining the combination of work space work space state that must be fulfilled in order for this work space toolbar plugin to be shown.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.WorkSpaceToolbarPlugin.Init">
            <summary>
            Is method is called when the user has logged in and configuration is accessible.<br/>
            If a user logs out and in again, this method will be called at every login.<br/>
            This should be used if the plug-in is accessing configuration items.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.WorkSpaceToolbarPlugin.Close">
            <summary>
            Called by the Environment when the user log's off.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.WorkSpaceToolbarPlugin.GenerateWorkSpaceToolbarPluginInstance">
            <summary>
            Called for every instance of this toolbar plugin that is added to the UI. 
            </summary>
            <returns>A work space toolbar plugin instance</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.WorkSpaceToolbarPlugin.LoadProperties(System.Boolean)">
            <summary>
            Get the stored properties from the connected server. 
            </summary>
            <param name="userPrivate">set to true when properties are save for each user</param>
            <returns>true if Properties where found and false if this is a first time</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.WorkSpaceToolbarPlugin.SaveProperties(System.Boolean)">
            <summary>
            Saves the values in the Properties on the connected server.<br/>
            When userPrivate is true, the content is for own use only.<br/>
            When userPrivate is false, the content is shared for all users
            connected to a server.
            </summary>
            <param name="userPrivate"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Client.ToolbarPluginOverflowMode">
            <summary>
            Defines the overflow behavior of toolbar plugins. <br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ToolbarPluginOverflowMode.NeverInOverflow">
            <summary>
            Never visible in the overflow menu (Always visible in the toolbar area)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ToolbarPluginOverflowMode.AlwaysInOverflow">
            <summary>
            Always visible in the overflow menu (Never visible in the main toolbar area)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ToolbarPluginOverflowMode.AsNeeded">
            <summary>
            Visible in the main toolbar area - if space, otherwise visible in the overflow menu
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ViewItemToolbarPlaceDefinition">
            <summary>
            Defines view item toolbar placement information. Used in ViewItemToolbarPlugin.ViewItemToolbarPlaceDefinition
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemToolbarPlaceDefinition.ViewItemIds">
            <summary>
            List of ViewItem ids that the toolbar plugin shall be shown for. An empty list results in the toolbar item being shown for all view items.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemToolbarPlaceDefinition.WorkSpaceIds">
            <summary>
            List of WorkSpace ids that the toolbar plugin shall be shown for. An empty list results in the toolbar item being shown for all work spaces.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemToolbarPlaceDefinition.WorkSpaceStates">
            <summary>
            List of work space states that the toolbar plugin shall be shown for. An empty list results in the toolbar item being shown for all work space states.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ViewItemToolbarPluginInstance">
            <summary>
            Represents an actual view item toolbar plugin instance. An instance of this class will be created for each toolbar plugin that is added to the Smart Client UI.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewItemToolbarPluginInstance.PropertyNameTitle">
            <summary>
            The title property name. Used in the ToolbarPropertyChanged event.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewItemToolbarPluginInstance.PropertyNameTooltip">
            <summary>
            The tooltip property name. Used in the ToolbarPropertyChanged event.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewItemToolbarPluginInstance.PropertyNameIcon">
            <summary>
            The icon property name. Used in the ToolbarPropertyChanged event.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewItemToolbarPluginInstance.PropertyNameVisible">
            <summary>
            The visible property name. Used in the ToolbarPropertyChanged event.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewItemToolbarPluginInstance.PropertyNameEnabled">
            <summary>
            The enabled property name. Used in the ToolbarPropertyChanged event.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ViewItemToolbarPluginInstance.ToolbarPropertyChanged">
            <summary>
            Event indicating that one of the properties has changed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemToolbarPluginInstance.Title">
            <summary>
            Gets or sets the toolbar item title.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemToolbarPluginInstance.Tooltip">
            <summary>
            Gets or sets the toolbar item tooltip.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemToolbarPluginInstance.Icon">
            <summary>
            Gets or sets the toolbar item icon.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemToolbarPluginInstance.Visible">
            <summary>
            Gets or sets the toolbar item visible state.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemToolbarPluginInstance.Enabled">
            <summary>
            Gets or sets the toolbar item enabled state.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemToolbarPluginInstance.Init(VideoOS.Platform.Item,VideoOS.Platform.Item)">
            <summary>
            Called when the toolbar item instance is added to the UI
            </summary>
            <param name="viewItemInstance">The view item instance of the view item that the toolbar is related to.</param>
            <param name="window">The window item of the window that the toolbar is shown in.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemToolbarPluginInstance.Activate">
            <summary>
            Called when the user activates the toolbar plugin.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemToolbarPluginInstance.Close">
            <summary>
            Called when the toolbar item instance is removed from the UI. 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ViewItemToolbarPlugin">
            <summary>
            The ViewItemToolbarPlugin defines a plug-in that resides in the view item toolbar in the Smart Client.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemToolbarPlugin.Id">
            <summary>
            Gets the unique id identifying this plug-in component
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemToolbarPlugin.Name">
            <summary>
            The plugin name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemToolbarPlugin.ViewItemToolbarPlaceDefinition">
            <summary>
            ViewItemToolbarPlaceDefinition defining the combination of view item, work space work space state that must be fulfilled in order for this view item toolbar plugin to be shown.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemToolbarPlugin.ToolbarPluginOverflowMode">
            <summary>
            ToolbarPluginOverflowMode defines the overflow behaviour of this view item toolbar plugin.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemToolbarPlugin.Init">
            <summary>
            Is method is called when the user has logged in and configuration is accessible.
            If a user logs out and in again, this method will be called at every login.
            This should be used if the plug-in is accessing configuration items.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemToolbarPlugin.Close">
            <summary>
            Called by the Environment when the user log's off.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemToolbarPlugin.GenerateViewItemToolbarPluginInstance">
            <summary>
            Called for every instance of this toolbar plugin that is added to the UI. 
            </summary>
            <returns>A view item toolbar plugin instance</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemToolbarPlugin.LoadProperties(System.Boolean)">
            <summary>
            Get the stored properties from the connected server. 
            </summary>
            <param name="userPrivate">set to true when properties are save for each user</param>
            <returns>true if Properties where found and false if this is a first time</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemToolbarPlugin.SaveProperties(System.Boolean)">
            <summary>
            Saves the values in the Properties on the connected server.<br/>
            When userPrivate is true, the content is for own use only.<br/>
            When userPrivate is false, the content is shared for all users
            connected to a server.
            </summary>
            <param name="userPrivate"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Client.PlaybackController">
            <summary>
            Build-in controller containing playback information and events, e.g. current play time, 
            goto, prev, next etc. 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PlaybackController.PlaybackModeType">
            <summary>
            Enum specifying the playback modes
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.PlaybackController.PlaybackModeType.Forward">
            <summary>
            Value indicating that forward playback is in progress 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.PlaybackController.PlaybackModeType.Stop">
            <summary>
            Value indicating that no playback is in progress 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.PlaybackController.PlaybackModeType.Reverse">
            <summary>
            Value indicating that reverse playback is in progress 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.PlaybackController.PlaybackModeType.Custom">
            <summary>
            Value indicating that custom playback is in progress,
            Direction and speed is unknown.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PlaybackController.BrowseTimeChangedEventHandler">
            <summary>
            Represents the method that will handle browse time changed events
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PlaybackController.BrowseGotoChangedEventHandler">
            <summary>
            Represents the method that will handle browse goto events
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PlaybackController.PlaybackModeChangedEventHandler">
            <summary>
            Represents the method that will handle playback mode change events
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackController.FQID">
            <summary>
            A given PlaybackController is identified by a FQID. This is used when linking ImageViewerControl and AudioPlayerControl to PlaybackController.
            And it is also used in messages, where messages send FROM the PlaybackController contains the FQID as the 'sender', and used when sending
            messages - where the MIP plugin sender needs to set the Destination FQID to the correct FQID.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackController.Init">
            <summary>
            Init() will initialize this component
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackController.Close">
            <summary>
            Close and release any reserved objects.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackController.PlaybackMode">
            <summary>
            Sets or gets the playback mode, e.g. play forward, backwards or stop.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackController.PlaybackTime">
            <summary>
            Gets the current time used for playback. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackController.PlaybackSpeed">
            <summary>
            Sets or gets the playback speed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackController.SkipGaps">
            <summary>
            Gets or sets whether gaps should be skipped when playing
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackController.SetSequence(System.DateTime,System.DateTime)">
            <summary>
            For showing video in a loop, set the start and end time.
            The SequenceProgressChanged event can be used to get information about the progress of each loop.
            </summary>
            <param name="startTime"></param>
            <param name="endTime"></param>
        </member>
        <member name="E:VideoOS.Platform.Client.PlaybackController.SequenceProgressChanged">
            <summary>
            Register on this event to be notified on how far the current loop is displaying.
            Used when the SetSequence method has been called.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackController.OnSequenceProgressChanged(VideoOS.Platform.Client.PlaybackController.ProgressChangedEventArgs)">
            <summary>
            Internally used to call on event SequenceProgressChanged
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PlaybackController.TimeEventArgs">
            <summary>
            Implements the class that contains the event args for various time related events
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.PlaybackController.TimeEventArgs._time">
            <summary>
            The time parameter of the event args
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackController.TimeEventArgs.#ctor(System.DateTime)">
            <summary>
            Constructs a TimeEventArgs instance
            </summary>
            <param name="time">The time parameter of the event args</param>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackController.TimeEventArgs.Time">
            <summary>
            Gets or sets the time parameter of the event args
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PlaybackController.PlaybackModeEventArgs">
            <summary>
            Implements the class that contains the event args for playback mode changed events
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.PlaybackController.PlaybackModeEventArgs._playbackMode">
            <summary>
            The playback mode parameter of the event args
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackController.PlaybackModeEventArgs.#ctor(VideoOS.Platform.Client.PlaybackController.PlaybackModeType)">
            <summary>
            Constructs a TimeEventArgs instance
            </summary>
            <param name="playbackMode">The playback mode parameter of the event args</param>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackController.PlaybackModeEventArgs.PlaybackMode">
            <summary>
            Gets or sets the playback mode parameter of the event args
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PlaybackController.PlaybackSpeedEventArgs">
            <summary>
            Implements the class that contains the EventArgs for playback speed changed events
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.PlaybackController.PlaybackSpeedEventArgs._speed">
            <summary>
            The playback mode parameter of the event args
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackController.PlaybackSpeedEventArgs.#ctor(System.Double)">
            <summary>
            Constructs a PlaybackSpeedEventArgs instance
            </summary>
            <param name="speed">The speed to play</param>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackController.PlaybackSpeedEventArgs.Speed">
            <summary>
            Gets or sets the playback mode parameter of the event args
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PlaybackController.ProgressChangedEventArgs">
            <summary>
            Is used when playback is in a loop. This EventArgs is fired to show how far the current loop is progressing.
            The Progress is between 0.0 and 1.0
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackController.ProgressChangedEventArgs.Progress">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PlaybackController.BrowseTimeInfo">
            <summary>
            Use by application to inform the PlaybackController about previous and next time stamps.
            The PlaybackController uses these to navigate when the device with this deviceId is selected, and a 'Next'
            or 'Previous' is requested (via UI or command).
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackController.BrowseTimeInfo.#ctor(System.Guid,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Provide times in UTC 
            </summary>
            <param name="deviceId"></param>
            <param name="previousTime"></param>
            <param name="currentTime"></param>
            <param name="nextTime"></param>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackController.BrowseTimeInfo.DeviceId">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackController.BrowseTimeInfo.PreviousTime">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackController.BrowseTimeInfo.CurrentTime">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackController.BrowseTimeInfo.NextTime">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PlaybackUserControl">
            <summary>
            A virtual class for actual usercontrols implemented in each environment.
            Current implementations exists for Smart Client, .Net Components and Management Client / Administrator.
            
            The implementation in the management clients only has the small height (50 pixels)
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackUserControl.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackUserControl.Init(VideoOS.Platform.FQID)">
            <summary>
            Initialize and defined what playback controller to cordinate with
            </summary>
            <param name="playbackControllerFQID"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackUserControl.Close">
            <summary>
            Close and dispose 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackUserControl.SetCameras(System.Collections.Generic.List{VideoOS.Platform.FQID})">
            <summary>
            Define what cameras are controlled by this class
            </summary>
            <param name="sources"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackUserControl.SetEnabled(System.Boolean)">
            <summary>
            Controls if the control is enabled or not. Can be used to disable control when live is shown
            or other cases where the playback userontrol is not usable.
            </summary>
            <param name="enable"></param>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackUserControl.ShowTallUserControl">
            <summary>
            When set to true, an extra set of controls become available<br/>
            The ideal height for this control is:<br/>
              - When ShowTallUserControl is set to false: 50 pixels<br/>
              - When ShowTallUserControl is set to true : 100 pixels<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackUserControl.ShowSpeedControl">
            <summary>
            When having a tall UserControl, this property controls if the speed slider is visible or not.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackUserControl.ShowTimeSpanControl">
            <summary>
            When having a tall UserControl, this property controls if the time scale slider is visible or not.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackUserControl.SelectionFromTime">
            <summary>
            Defines the start time of the selected interval.
            
            Note: Only valid for Smart Client plug-ins
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackUserControl.SelectionToTime">
            <summary>
            Defines the end time of the selected interval.
            
            Note: Only valid for Smart Client plug-ins
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackUserControl.SetSequence(System.DateTime,System.DateTime)">
            <summary>
            Set the start and end time for a looping playback
            </summary>
            <param name="startTime"></param>
            <param name="endTime"></param>
        </member>
        <member name="P:VideoOS.Platform.Client.PlaybackUserControl.TimeSpan">
            <summary>
            Represent the time span that is currently viewed in the Smart Client.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.PlaybackUserControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackUserControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.PlaybackUserControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ThemeType">
            <summary>
            The available Smart Client themes.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ThemeType.Dark">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ThemeType.Light">
            <summary>
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.Theme">
            <summary>
            Contains a set of Colors to describe the current selected Theme.<br/>
            The ThemeType can be used for further selecting matching icons or buttons.<br/>
            For simply applying these colors to your UserControl, use the ClientControl.Instance.RegisterUIControlForAutoTheming( userControl ),
            where the userControl should be the main part of your ViewItem.  The titlebar can afterwards be updated depending on the selection state with
            the 4 properties starting with the letters 'ViewItem'.<br/>
            Notice that side panels, property panel and option configuration panels are automatically themed.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.Theme.#ctor">
            <summary>
            This class is constructed by the Smart Client.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.Theme.ThemeType">
            <summary>
            Gets or sets the current Smart Client theme
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.Theme.BorderColor">
            <summary>
            Color for border lines and group box lines
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.Theme.BackgroundColor">
            <summary>
            Background color for all controls
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.Theme.GradientStartColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.Theme.GradientStopColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.Theme.TitleBarGradientStartColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.Theme.TitleBarGradientStopColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.Theme.TitleBarTextColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.Theme.TextColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.Theme.ViewItemHeaderColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.Theme.ViewItemSelectedHeaderColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.Theme.ViewItemHeaderTextColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.Theme.ViewItemSelectedHeaderTextColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.Theme.SeparatorLinesColor">
            <summary>
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.WorkSpaceNotification">
            <summary>
            Class defining a works space notification. 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.WorkSpaceNotification.SEVERITY_LOW">
            <summary>
            Low severity.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.WorkSpaceNotification.SEVERITY_MEDIUM">
            <summary>
            Medium severity.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.WorkSpaceNotification.SEVERITY_HIGH">
            <summary>
            High severity.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.WorkSpaceNotification.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Constructs a works space notification object.
            </summary>
            <param name="severity">The severity value of the notification. Use one of the defined severity 
            values; SEVERITY_LOW, SEVERITY_MEDIUM or SEVERITY_HIGH. This value will be control how explicit 
            the notification is shown in the Smart Client</param>
            <param name="count">The count value of the notification. Can e.g. be used to indicate the current 
            number of unhandled alarms.</param>
            <param name="text">A text describing the notification.</param>
        </member>
        <member name="P:VideoOS.Platform.Client.WorkSpaceNotification.Severity">
            <summary>
            The Severity value of the notification. See the constructor documentation for more details.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WorkSpaceNotification.Count">
            <summary>
            The Count value of the notification. See the constructor documentation for more details.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WorkSpaceNotification.Text">
            <summary>
            The Text value of the notification. See the constructor documentation for more details.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.WorkSpacePlugin">
            <summary>
            The abstract base class a MIP plugin can implement for having a WorkSpace tab available in the Smart Client.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.WorkSpacePlugin.NotificationChangedEvent">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WorkSpacePlugin.Id">
            <summary>
            Gets the unique id identifying this plug-in component. This property is accessed from WorkSpacePlugin constructor. So ensure that it returns the valid ID even though the constructor of the derived implementation has not been called.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WorkSpacePlugin.Name">
            <summary>
            The name of this plug-in
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WorkSpacePlugin.Icon">
            <summary>
            The icon representing this workspace.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WorkSpacePlugin.IsSetupStateSupported">
            <summary>
            Indicates whether this work space plugin supports setup state or not.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WorkSpacePlugin.ViewAndLayoutItem">
            <summary>
            The ViewAndLayoutItem shown in the WorkSpace
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WorkSpacePlugin.Notification">
            <summary>
            The current work space notification. The work space implementation sets this to a new instance of 
            WorkSpaceNotification every time its notification state changes. Set to null to indicate that no 
            notification should be shown for the work space plugin.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.WorkSpacePlugin.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.WorkSpacePlugin.Init">
            <summary>
            Is method is called when the user has logged in and configuration is accessible.
            If a user logs out and in again, this method will be called at every login.
            This should be used if the plug-in is accessing configuration items.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.WorkSpacePlugin.Close">
            <summary>
            Called by the Environment when the user log's off.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.WorkSpacePlugin.ViewItemConfigurationModified(System.Int32)">
            <summary>
            Called when a view item configuration for one of the view items in the workspace view has been modified.
            </summary>
            <param name="index">The index of the modified view item</param>
        </member>
        <member name="M:VideoOS.Platform.Client.WorkSpacePlugin.LoadProperties(System.Boolean)">
            <summary>
            Get the stored properties from the connected server. 
            </summary>
            <param name="userPrivate">set to true when properties are save for each user</param>
            <returns>true if Properties where found and false if this is a first time</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.WorkSpacePlugin.SaveProperties(System.Boolean)">
            <summary>
            Saves the values in the Properties on the connected server.<br/>
            When userPrivate is true, the content is for own use only.<br/>
            When userPrivate is false, the content is shared for all users
            connected to a server.
            </summary>
            <param name="userPrivate"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Client.ExportManager">
            <summary>
            This class contains information and methods used when the user exports something in the Smart Client.
            The ExportManager needs to copy all relevant data to the defined folder, so when it starts in Offline
            mode the plug-in can get hold of all relevant data.<br/>
            The plug-ins configuration is automatically included in the exported material.<br/>
            See the PluginDefinition.GenerateExportManager(...) for how the Smart Client creates your implementation of this class.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ExportManager.#ctor(VideoOS.Platform.Client.ExportParameters)">
            <summary>
            During construction of the class, the exportParameters should be saved and later used for determining what data is required be included in the export.
            The BeginTime and EndTime is the most important to check, but the ViewAndLayoutItem could also instruct if any relevant plug-ins
            are part of the export.<br/>
            You may chose to export even if there are no relevant ViewItems displayed right now, as the user might change layout when looking at the exported material.<br/>
            If you just want the DLLs to be included in the export but do not have any data, 
            implement this class with empty entries except for the Progress (that needs to return 100), and the LastErrorMessage (should be "").
            </summary>
            <param name="exportParameters"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ExportManager.ExportStarting">
            <summary>
            Is called by the Smart Client Environment when it is this plug-ins turn to perform the export.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ExportManager.ExportFailed">
            <summary>
            Is called when something failed elsewhere in the export process, and this export should stop as fast as possible.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ExportManager.ExportCancelled">
            <summary>
            Is called when the operator presses the Cancel button
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ExportManager.ExportComplete">
            <summary>
            Is called when the entire export is complete, and any allocated resources can be disposed.
            </summary>
            <remarks>Use the ExportComplete( int ) to get a more detailed result.</remarks>
        </member>
        <member name="M:VideoOS.Platform.Client.ExportManager.ExportComplete(System.Int32)">
            <summary>
            Is called when the entire export is complete, and any allocated resources can be disposed.<br/>
            The result parameter can be used to determine how the exported completed.
            </summary>
            <param name="result">
            -1 = Failed: Export cannot be used.<br/>
             0 = Completed without issues.<br/>
             Other = Completed with a correct and usefil result, but not all has been exported.<br/>
            </param>
        </member>
        <member name="P:VideoOS.Platform.Client.ExportManager.Progress">
            <summary>
            This property is access continuously to report the progress to the operator.<br/>
            The return value must be a value between 0 and 100.<br/>
            When 100 is returned, the LastErrorMessage must be available.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ExportManager.LastErrorMessage">
            <summary>
            If any errors have occurred during the export process, this method can be used to explain the issue in more detail to the operator.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ExportManager.IncludePluginFilesInExport">
            <summary>
            Identify if this plug-in should be included in an export process, e.g. the DLLs, plugin.def and ViewItems.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ExportManager.EstimateSizeOfExport">
            <summary>
            Is called during configuration of an export in order to get the estimated size of the export.
            </summary>
            <returns>Estimated size of the export in bytes. Return null if plugin does not support size estimation.</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ExportManager.EstimationCancelled">
            <summary>
            Called if the operator decides to cancel the export configuration while estimation is ongoing.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ExportManager.ExportPerformed">
            <summary>
            Called after succesful export and will decide whether plugin is included in export summary. 
            Should indicate whether the plugin was intended to be included in the export (e.g. had view items included)
            and not necessarily whether any data were available in the specified period.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ExportParameters">
            <summary>
            Contains all relevant parameters selected by the user or environment used for an export.
            The class is build by the Environment.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ExportParameters.BeginTime">
            <summary>
            The user selected start time for the export. This is the earliest export begin time of all the items in the export.<br/>
            The plug-in should only export relevant data within this time span.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ExportParameters.EndTime">
            <summary>
            The user selected end time for the export. This is the latest export end time of all the items in the export.<br/>
            The plug-in should only export relevant data within this time span.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ExportParameters.ViewItems">
            <summary>
            The list of ViewItems that where displayed in the Smart Client and selected by the user.<br/>
            A plug-in should not export any data, if the plug-in does not have any relevant data to show with these ViewItems.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ExportParameters.DestinationDirectory">
            <summary>
            A path to the location on disk where the plug-in can write its data.  This folder location will be available when the Smart Client 
            starts in off-line mode, and the plug-in can then read its exported data.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ExportParameters.Parameters">
            <summary>
            Dictionary with extra parameters.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ExportParameters.CameraItems">
            <summary>
            The list of camera devices included in the export.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ExportParameters.AudioItems">
            <summary>
            The list of audio devices included in the export - this may be microphone or speaker devices.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ExportParameters.MetadataItems">
            <summary>
            The list of metadata sources included in the export.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ExportParameters.ExportingDatabase">
            <summary>
            True if media databases are included as part of the export
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ExportParameters.ExportingVideoClip">
            <summary>
            True if movie clips (AVI's) are included as part of the export
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ExportParameters.ExportingStillImages">
            <summary>
            True if still images (JPEG's) are included as part of the export
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ViewGroupInfo">
            <summary>
            Contains the header information for a Smart Client view group.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewGroupInfo.Id">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewGroupInfo.LastModifiedTime">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewGroupInfo.LastModifiedUser">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewGroupInfo.Name">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewGroupInfo.ReadOnly">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewGroupInfo.ViewGroupType">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ViewGroupType">
            <summary>
            Identifies the type of ViewGroup begin returne.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewGroupType.Normal">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ViewGroup">
            <summary>
            The content of a ViewGroup: Data and Info
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewGroup.ViewGroupData">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewGroup.ViewGroupInfo">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ViewGroupData">
            <summary>
            The XML content of a ViewGroup
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewGroupData.DataVersion">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewGroupData.ViewGroupDataXml">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewGroupData.XmlVersion">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ImageViewerAddOn">
            <summary>
            This class is created and send as a parameter on the ClientControl.NewImageViewerControlEvent event<br/>
            The fields and properties on this class is mostly in a 'listen' mode, as another ImageViewerControl will
            control the actual video as usually.<br/>
            This class can then be used for applying overlay in the form of analytics graphics or text.<br/>
            By registering on the StartLive and StopLive events, the CloseEvent and the PropertyChanged event, a plug-in
            can ensure to follow the modes and states that may change in the underlaying ImageViewerControl.<br/>
            <br/>
            Note: If using a background thread to retrieve and format overlays, a Invoke is required before calling UserControl related methods like SetOverlay and ClearOverlay.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerAddOn.CameraFQID">
            <summary>
            Get the FQID of the camera being displayed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerAddOn.Location">
            <summary>
            Get the location of the displayed ImageViewerControl. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerAddOn.Size">
            <summary>
            Get the size of the displayed ImageViewerControl.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerAddOn.UserControlSizeOrLocationChangedEvent">
            <summary>
            Can be used to register an event whenever the location or size changes. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerAddOn.CameraName">
            <summary>
            The name of the camera currently being displayed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerAddOn.InLiveMode">
            <summary>
            Indicate if ImageViewer is currently in Live mode. If the Smart Client is in Live mode, 
            one specific CameraViewItem can be in instant playback mode.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerAddOn.PlaybackImageDateTime">
            <summary>
            If ImageViewerControl is in playback mode, this indicates the DateTime currently being displayed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerAddOn.ImageViewerType">
            <summary>
            Indicates what type contains the ImageViewerControl.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerAddOn.IsSelected">
            <summary>
            Indicates if this ImageViewer is selected indirectly via select of a ViewItem
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerAddOn.ShowMetadataOverlay">
            <summary>
            Tells is the built-in metadata overlay is shown.<br/>
            Set this to false, if you have another overlay handling and display.<br/>
            Note: Implemented in the Smart Client.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.ClearOverlay(System.Int32)">
            <summary>
            Clear a specific overlay placed earlier. The id used during the SetOverlay() call is used in this method for clearing that overlay again.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.SetOverlay(System.Drawing.Bitmap,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Windows.Forms.DockStyle,System.Windows.Forms.DockStyle,System.Double,System.Double)">
            <summary>
            Place a Bitmap on top of the video being showed.<br/>
            After the bitmap has been set, it will remain on top of all following displayed video.<br/>
            The size of the bitmap can be any size that makes sense, when taking the quality into
            consideration. If a bitmap of e.g. (320,280) is used for creating the overlay, it can via the
            parameters be scaled up to the actual size of the video being displayed.<br/>
            Note: It is invalid set scale to true, while placing an overlay with absolute positions. <br/>
            Note: SetOverlay does not dispose the bitmap. It is up to the caller to call dispose when appropiate.
            </summary>
            <param name="bitmap"></param>
            <param name="id"></param>
            <param name="keepAspectRatio"></param>
            <param name="scaleWithDigitalZoom"></param>
            <param name="scaleOverlay"></param>
            <param name="scaleFactor"></param>
            <param name="verticalDock"></param>
            <param name="horizontalDock"></param>
            <param name="absolutePosX"></param>
            <param name="absolutePosY"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.ShapesOverlayAdd(System.Collections.Generic.List{System.Windows.Shapes.Shape},VideoOS.Platform.Client.ShapesOverlayRenderParameters)">
            <summary>
            Method to add overlay shapes.
            
            The returned Guid is used to later modify and remove the overlays.
            
            Note: Valid from 2016 R3 when using the hardware accellerared ImageViewerControl.
            </summary>
            <param name="overlayShapes"></param>
            <param name="renderParameters"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.ShapesOverlayUpdate(System.Guid,System.Collections.Generic.List{System.Windows.Shapes.Shape})">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="overlayShapes"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.ShapesOverlayUpdate(System.Guid,VideoOS.Platform.Client.ShapesOverlayRenderParameters)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="renderParameters"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.ShapesOverlayUpdate(System.Guid,System.Collections.Generic.List{System.Windows.Shapes.Shape},VideoOS.Platform.Client.ShapesOverlayRenderParameters)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="overlayShapes"></param>
            <param name="renderParameters"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.ShapesOverlayRemove(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.ActiveElementsOverlayAdd(System.Collections.Generic.IEnumerable{System.Windows.FrameworkElement},VideoOS.Platform.Client.ActiveElementsOverlayRenderParameters)">
            <summary>
            Allows you to add WPF FrameworkElements (e.g. UserControls, Buttons and TextBlocks) that will be shown as an interactive overlay on top of the camera video stream
            
            Positioning of the active elements can be done using either the Margin, VerticalAlignment and HorizontalAlignment properties on the FrameworkElement or by using these 
            static WPF methods:
            <code>
            Canvas.SetLeft(myControl, 250);
            Canvas.SetTop(myControl, 250);
            </code>
            </summary>
            <param name="activeElements">List of FrameworkElements to show on top of the camera view item.</param>
            <param name="renderParameters">Parameters defining how the FrameworkElements will be shown on the view item.</param>
            <returns>Guid to be used in later update and remove requests.</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.ActiveElementsOverlayUpdate(System.Guid,System.Collections.Generic.IEnumerable{System.Windows.FrameworkElement},VideoOS.Platform.Client.ActiveElementsOverlayRenderParameters)">
            <summary>
            Will update the FrameworkElements (existing ones will be replaced with the new ones) related to the specified id.
            </summary>
            <param name="id">The id received when <see cref="M:VideoOS.Platform.Client.ImageViewerAddOn.ActiveElementsOverlayAdd(System.Collections.Generic.IEnumerable{System.Windows.FrameworkElement},VideoOS.Platform.Client.ActiveElementsOverlayRenderParameters)"/> was called.</param>
            <param name="activeElements">List of new FrameworkElements to use for replacing the existing ones.</param>
            <param name="renderParameters">Parameters defining how the FrameworkElements will be shown on the view item.</param>
            <returns>True if the update succeeded.</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.ActiveElementsOverlayUpdate(System.Guid,System.Collections.Generic.IEnumerable{System.Windows.FrameworkElement})">
            <summary>
            Will update the FrameworkElements (existing ones will be replaced with the new ones) related to the specified id.
            </summary>
            <param name="id">The id received when <see cref="M:VideoOS.Platform.Client.ImageViewerAddOn.ActiveElementsOverlayAdd(System.Collections.Generic.IEnumerable{System.Windows.FrameworkElement},VideoOS.Platform.Client.ActiveElementsOverlayRenderParameters)"/> was called.</param>
            <param name="activeElements">List of new FrameworkElements to use for replacing the existing ones.</param>
            <returns>True if the update succeeded.</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.ActiveElementsOverlayUpdate(System.Guid,VideoOS.Platform.Client.ActiveElementsOverlayRenderParameters)">
            <summary>
            Will update the render parameters for the FrameworkElements related to the specified id.
            </summary>
            <param name="id">The id received when <see cref="M:VideoOS.Platform.Client.ImageViewerAddOn.ActiveElementsOverlayAdd(System.Collections.Generic.IEnumerable{System.Windows.FrameworkElement},VideoOS.Platform.Client.ActiveElementsOverlayRenderParameters)"/> was called.</param>
            <param name="renderParameters">Parameters defining how the FrameworkElements will be shown on the view item.</param>
            <returns>True if the update succeeded.</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.ActiveElementsOverlayRemove(System.Guid)">
            <summary>
            Will remove the FrameworkElements related to the specified id.
            </summary>
            <param name="id">The id received when <see cref="M:VideoOS.Platform.Client.ImageViewerAddOn.ActiveElementsOverlayAdd(System.Collections.Generic.IEnumerable{System.Windows.FrameworkElement},VideoOS.Platform.Client.ActiveElementsOverlayRenderParameters)"/> was called.</param>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerAddOn.LiveStreamInformationEvent">
            <summary>
            Event to receive the LiveStream XML packages. See the ImageViewerControl for details.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.GetCurrentDisplayedImageAsBitmap">
            <summary>
            Get the latest displayed Image including the overlays and privacy mask.<br/>
            Important: If the returned Bitmap is used in a UserControl, like a PictureBox, the control
            will hold on to the original Bitmap. This can cause issues when the original source of the Bitmap attempts to dispose it.<br/>
            Recommendation is to create another Bitmap directly upon calling this method, when passing it on to a PictureBox.
            <code>
                Bitmap bitmap = imageViewControl.GetCurrentDisplayedImageAsBitmap();
                if (bitmap!=null)
                {
                    myPictureBox.Image = newBitmap(bitmap, myPictureBox.Size());	// If you like to resize to picturebox size
            		bitmap.Dispose();
                } else
                {
            		// Clear the picturebox ...
                }
            </code>
            </summary>
            <returns>A bitmap or null or no image is available.</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.GetCurrentDisplayedImageAsBitmap(System.Boolean)">
            <summary>
            Overloaded method to control if the original or the digital zoomed image is requested.
            </summary>
            <param name="digitalZoomOnly">Tells whether the original (false) or digitally zoomed (true) image should be returned.</param>
            <returns>A bitmap or null if no image is available.</returns>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerAddOn.StartLiveEvent">
            <summary>
            Fires when the underlaying control changes mode to Live.<br/>
            The arguments contains an option for your plug-in to instruct the ImageViewerControl NOT pass this request to the underlaying presentation control.<br/>
            This can be used when alternative decoding is available via your plug-in.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerAddOn.StopLiveEvent">
            <summary>
            Fires when the underlaying control changes mode to playback or setup.<br/>
            The arguments contains an option for your plug-in to instruct the ImageViewerControl NOT pass this request to the underlaying presentation control.<br/>
            This can be used when alternative decoding is available via your plug-in.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerAddOn.PropertyChangedEvent">
            <summary>
            Fires when the underlaying control have modified its properties.  Could be the camera FQID.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerAddOn.CloseEvent">
            <summary>
            Fires when the underlaying is about to close, please unregister all event handlers and release resources.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerAddOn.ImageDisplayedEvent">
            <summary>
            Called for evenry image being displayed, exactly when it is presented to the operator.<br/>
            The method registered on this event MUST be VERY short.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.FireImageDisplayed(VideoOS.Platform.Client.ImageDisplayedEventArgs)">
            <summary>
            Reserved for use by MIP layer
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerAddOn.RecordedImageReceivedEvent">
            <summary>
            Fired when a recorded image has been received, the parameter will contain the DateTime of the image being displayed.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerAddOn.MouseClickEvent">
            <summary>
            Is fired when mouse is left clicked.  The X,Y contains coordinates from inside the UserControl (not the Image)
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerAddOn.MouseDoubleClickEvent">
            <summary>
            Is fired when right mousebutton is clicled.The X,Y contains coordinates from inside the UserControl (not the Image)
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerAddOn.MouseRightClickEvent">
            <summary>
            Is fired when left button is double clicked.The X,Y contains coordinates from inside the UserControl (not the Image)
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerAddOn.MouseMoveEvent">
            <summary>
            Is fired when mouse is moving around. The X,Y contains coordinates from inside the UserControl (not the Image)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerAddOn.ImageSize">
            <summary>
            Contains the size of the original image before it was scaled to available display area.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerAddOn.PaintSize">
            <summary>
            Contains the size of the areas used for video.
            
            Top line and black filler areas are not included in this size.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerAddOn.PaintLocation">
            <summary>
            Contains the location of actual image within this usercontrol.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerAddOn.WindowInformation">
            <summary>
            Identify the Window this ImageViewer is located on.<br/>
            NOTE: It can be null for non-standard Smart Client Windows
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.ConvertUserControlToImagePoint(System.Drawing.Point)">
            <summary>
            Convert from UserControl coordinates into coordinates in top of the Image
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.ConvertUserControlToRelativeImagePosition(System.Drawing.Point)">
            <summary>
            Convert from UserControl coordinates into relative position of the image, e.g. Point(32,24) => Tuple<![CDATA[<0.1, 0.1>]]> on a display of 320,240 pixels.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.RegisterTimelineSequenceSource(VideoOS.Platform.Client.TimelineSequenceSource)">
            <summary>
            Call this to register a timeline sequence source that will be queried for data for populating the time line
            for the view item holding the underlying <see cref="T:VideoOS.Platform.Client.ImageViewerControl"/>.
            Only works for standard camera view items.
            You can later unregister using <see cref="M:VideoOS.Platform.Client.ImageViewerAddOn.UnregisterTimelineSequenceSource(VideoOS.Platform.Client.TimelineSequenceSource)"/>. Otherwise the 
            registration will be automatically unregistered once the underlying control is closed.
            </summary>
            <remarks>Supported from Smart Client 2017 R1.</remarks>
            <param name="timelineSequenceSource">The timeline sequence source to register.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.UnregisterTimelineSequenceSource(VideoOS.Platform.Client.TimelineSequenceSource)">
            <summary>
            Call this to unregister a timeline sequence source that has previously been registered using <see cref="M:VideoOS.Platform.Client.ImageViewerAddOn.RegisterTimelineSequenceSource(VideoOS.Platform.Client.TimelineSequenceSource)"/>.
            </summary>
            <remarks>Supported from Smart Client 2017 R1.</remarks>
            <param name="timelineSequenceSource">The timeline sequence source to unregister.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.FireClickEvent(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Reserved for internal use
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.FireDoubleClickEvent(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Reserved for internal use
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.FireRightClickEvent(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Reserved for internal use
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerAddOn.FireMouseMoveEvent(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Reserved for internal use
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:VideoOS.Platform.Client.PassRequestEventHandler">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PassRequestEventArgs">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.PassRequestEventArgs.PassToNewImageViewer">
            <summary>
            Pass all commands on to the normal ImageViewerControl, and let it run normally
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.RecordedImageReceivedHandler">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.RecordedImageReceivedEventArgs">
            <summary>
            For each recorded image being displayed that argument is filled with the Image time, and passed to this class via the RecordedImageReceivedEvent.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.RecordedImageReceivedEventArgs.DateTime">
            <summary>
            DateTime of the Image just being displayed.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ImageDisplayedHandler">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ImageDisplayedEventArgs">
            <summary>
            For each image being displayed that argument is filled with the Image time, and passed to this class via the ImageDisplayedEvent.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageDisplayedEventArgs.ImageTime">
            <summary>
            DateTime of the Image just being displayed. (In UTC format)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageDisplayedEventArgs.PreviousImageTime">
            <summary>
            The previous image (In UTC format)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageDisplayedEventArgs.NextImageTime">
            <summary>
            The next image (In UTC format)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageDisplayedEventArgs.IsFlippedHorizontally">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageDisplayedEventArgs.IsFlippedVertically">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageDisplayedEventArgs.OriginalImageSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageDisplayedEventArgs.WindowSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ImageViewerType">
            <summary>
            The type of ViewItem containing the ImageViewerControl.<br/>
            You can e.g. decide to not place any overlay on a CarouselViewItem, as it changes too often.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerType.Unspecified">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerType.CameraViewItem">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerType.HotspotViewItem">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerType.CarouselViewItem">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerType.MatrixViewItem">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerType.MIP">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerType.BookmarkEditDialog">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerType.RecordingPreview">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerType.SequenceExplorerPreview">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerType.CameraNavigationViewItem">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerType.CameraNavigationViewItemPreview">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.OptionsDialogUserControl">
            <summary>
            This UserControl is created by the PluginDefinition and placed on the Smart Client's options dialog when the user selects the options icon.<br/>
            The UserControl will be added to the owning parent UserControl and docking set to Fill.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.OptionsDialogUserControl.Init">
            <summary>
            Called when the UserControl should initialize the UI
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.OptionsDialogUserControl.Close">
            <summary>
            Cleanup any resources or event registrations
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.SidePanelPlaceDefinition">
            <summary>
            Defines a side panel placement. Used in SidePanelPlugin.SidePanelPlaceDefinitions
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.SidePanelPlaceDefinition.WorkSpaceId">
            <summary>
            The Id of the WorkSpace that the side panel shall be shown for.
            Built-in workspace ID is defined as constants on the VideoOS.Platform.ClientControl class.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.SidePanelPlaceDefinition.WorkSpaceStates">
            <summary>
            The state that the the Work Space shall be in on order for the side panel to be shown
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.SidePanelPlugin">
            <summary>
            The SidePanelPlugin defines a plug-in that resides in the live or playback side panel in the Smart Client.
            Is it only created once during startup/login and never disposed.
            This class can be Instantiated directly without making your own inherited class
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.SidePanelPlugin.Id">
            <summary>
            Gets the unique id identifying this plug-in component
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.SidePanelPlugin.Name">
            <summary>
            The name of this plug-in
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.SidePanelPlugin.Icon">
            <summary>
            The icon representing this side panel plug-in.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.SidePanelPlugin.GenerateUserControl">
            <summary>
            Generate the UserControl to be displayed on the panel.
            
            For new plugins it is recommended to use the WPF version, GenerateWpfUserControl(), instead.
            
            If you are implementing GenerateWpfUserControl() you should not implement this one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.SidePanelPlugin.GenerateWpfUserControl">
            <summary>
            Generate the WPF UserControl to be displayed on the panel.
            
            Supported from XProtect Smart Client 2017 R3. If you need your plugin to work with older versions you will have to implement GenerateUserControl() instead.
            
            If this is not implemented GenerateUserControl() will be called.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.Client.SidePanelPlugin.SidePanelPluginPlace">
            <summary>
            Defines which side panel should host this plug-in
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.SidePanelPlugin.SidePanelPlaceDefinitions">
            <summary>
            List of SidePanelPlaceDifinition defining in which work spaces that this side panel plugin should be shown.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.SidePanelPlugin.Init">
            <summary>
            Is method is called when the user has logged in and configuration is accessible.
            If a user logs out and in again, this method will be called at every login.
            This should be used if the plug-in is accessing configuration items.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.SidePanelPlugin.Close">
            <summary>
            Called by the Environment when the user log's off.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.SidePanelPlugin.LoadProperties(System.Boolean)">
            <summary>
            Get the stored properties from the connected server. 
            </summary>
            <param name="userPrivate">set to true when properties are save for each user</param>
            <returns>true if Properties where found and false if this is a first time</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.SidePanelPlugin.SaveProperties(System.Boolean)">
            <summary>
            Saves the values in the Properties on the connected server.<br/>
            When userPrivate is true, the content is for own use only.<br/>
            When userPrivate is false, the content is shared for all users
            connected to a server.
            </summary>
            <param name="userPrivate"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Client.SidePanelPluginPlace">
            <summary>
            Defines which side panel should host a plug-in
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.SidePanelPluginPlace.LivePanel">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Client.SidePanelPluginPlace.PlaybackPanel">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Client.SidePanelPluginPlace.SetupPanel">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Client.SidePanelPluginPlace.Undefined">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Client.SidePanelUserControl">
            <summary>
            For new plugins it is recommended to implement SidePanelWpfUserControl instead.<br/>
            The UserControl to be displayed in a side panel in the Smart Client.<br/>
            Generated by a plug-ins SidePanelPlugin.<br/>
            The width of the SidePanel is approximately 280 pixels wide. It is suggested to set the Anchor for wide fields to Left, Top, Right.<br/>
            Please note that SidePanels are being created and disposed when the user navigates from one workspace to another, and the Init() and Close() methods will therefor be called many times during a Smart Client session.
            If your plugin need to perform CPU heavy operations during the Init() call, or get access to a remote server - consider to develop a BackgroundPlugin to maintain the remote session or any resources that may make sense to keep created.<br/>
            The height of this UserControl can be as large as you think makes sense.  Consider setting the AutoScaleMode = None, as the height may not include all your inner Controls otherwise.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.SidePanelUserControl.Init">
            <summary>
            Called when environment is ready for initialization.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.SidePanelUserControl.Close">
            <summary>
            Called when a user logs out, user selects another workspace or application is about to exit.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.WindowInformation">
            <summary>
            This class provide information of the currently executing window.
            It is accessed from the ViewItemUserControl.WindowInformation
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WindowInformation.Mode">
            <summary>
            Gives information of the Mode the window is executing in.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WindowInformation.ViewAndLayoutItem">
            <summary>
            Access to the ViewAndLayoutItem that this UserControl is executing in right now.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WindowInformation.Window">
            <summary>
            The Item representing the Window.  The ObjectId part of The FQID is the same as the WindowId.
            </summary>
            <remarks>
            This Item and it's FQID can be used to identify when sending and receiving messages that are only relevant for the current window. 
            E.g. window commands, mode changes and playback commands/indications.
            </remarks>
        </member>
        <member name="P:VideoOS.Platform.Client.WindowInformation.WindowId">
            <summary>
            The Guid identifying the Window and the PlaybackController in their respective FQID's ObjectId.
            
            The Main Window is identified by WindowId = Kind.Window, while detached windows are identified by their individual GUIDs.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.WindowInformation.PlaybackControllerFQID">
            <summary>
            Get the FQID for the default PlaybackController for the window identified by this class.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.WindowInformation.IsSentFromMyWindow(VideoOS.Platform.FQID)">
            <summary>
            This method can be used to check if a received message is relevant for a ViewItemUserControl.
            </summary>
            <remarks>
            To support multiple open windows at the same time, this method can assist in only reacting on the relevant messages.
            E.g. window commands, mode changes and playback commands/indications.
            </remarks>
            <param name="sender">The sender parameter of a just received message</param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Client.ViewItemPlugin">
            <summary>
            Class defining one Smart Client ViewItem.<br/>
            The ViewItemPlugin is only constructed one time.  
            For each ViewItem defined on any view layout, a call to GenerateViewItemManager is performed to create a ViewItemManager. 
            This instance of the ViewItemManager is then responsible for the configuration in relation to one viewitem.<br/>
            The ViewItemManager will again generate ViewItemUserControl and PropertiesUserControl as appropriate for this viewitem.<br/>
            e.g. if a given ViewLayout is shown once, then only one ViewItemUserControl is generated, and only one PropertiesUserControl
            is generated when selected in setup mode.<br/>
            Now, if multiple floating windows are opened with SAME ViewLayout, and thereby same configuration of a ViewItem's,
            then multiple ViewItemUserControl's may be requested via the same ViewItemManager.<br/>
            The properties part of the class is used to build the tree node in the Smart Client.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemPlugin.Id">
            <summary>
            Gets the unique id identifying this ViewItem
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemPlugin.Icon">
            <summary>
            The icon used for a single ViewItem
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemPlugin.Name">
            <summary>
            The text used for a single ViewItem
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemPlugin.HideSetupItem">
            <summary>
            Indicates if the setup item should be hidden. If true then the view item will not be shown in Smart client setup mode and 
            thus not allow the SC user to add the view item to views. It will then only be possible to add the view item to views 
            programatically in a MIP plugins. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemPlugin.IsPrintEnabled">
            <summary>
            Indicates if print is enabled, and if the relevant controls should be shown. You can override the print method in the implementation of the ViewItemUserControl to control what is printed.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemPlugin.GenerateViewItemManager">
            <summary>
            Generates a ViewItemManager for managing one ViewItem. A ViewItemManager is generated for each ViewItem defined.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemPlugin.Init">
            <summary>
            Called by the Environment when the user has logged in and have received configuration from the server.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemPlugin.Close">
            <summary>
            Called by the Environment when the user log's out.
            You should close all remote sessions and flush cache information, as the
            user might logon to another server next time.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.OptionsDialogPlugin">
            <summary>
            A class specifying an Application options plug-in.<br/>
            <br/>
            Each of the OptionsDialogPlugin’s will have a tab in the Application options of Settings panel with the Name defined.<br/>
            When the Name is selected, the CreateUserControl method is called to create the UserControl for this plug-in. 
            The plug-in should initialize the UI as part of the class construction.  <br/>
            The UserControl contains the entire right hand side of the panel, and will be resized to current available size.  <br/>
            <br/>
            When the SaveChanges method is called, the plug-in can use the base method ‘SaveProperties’ to save the configuration, 
            if all configuration fields are saved in the Property dictionary. <br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.OptionsDialogPlugin.Id">
            <summary>
            Gets the unique id identifying this plug-in component
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.OptionsDialogPlugin.OptionsEnabled">
            <summary>
            Gets whether the option dialog component in the options dialog should be enabled or not.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.OptionsDialogPlugin.Name">
            <summary>
            The name of this Options Dialog plug-in
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.OptionsDialogPlugin.GenerateUserControl">
            <summary>
            Create a UserControl to be displayed in the Application options.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.OptionsDialogPlugin.Init">
            <summary>
            This method is called when the Application options are loaded.<br/>
            This should be used if the plug-in is accessing configuration items.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.OptionsDialogPlugin.Close">
            <summary>
            Called when the Application options are unloaded
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.OptionsDialogPlugin.LoadProperties(System.Boolean)">
            <summary>
            Get the stored properties from the connected server. 
            </summary>
            <param name="userPrivate">set to true when properties are save for each user</param>
            <returns>true if Properties where found and false if this is a first time</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.OptionsDialogPlugin.SaveChanges">
            <summary>
            Saves any changes made in the options user control. If the save operation fails then use GetLastOptionsSaveError() to get a string describing the error.
            
            This method should be override by the plug-in in to validate the entries, 
            and possibly call this.SaveProperties( true/false ) to have the properties stored on the login server. 
            (If the selected values are stored in the Properties by this plug-in)
            </summary>
            <returns>True if settings was successfully saved. False if not</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.OptionsDialogPlugin.SaveProperties(System.Boolean)">
            <summary>
            Saves the values in the Properties on the connected server.
            When userPrivate is true, the content is for own use only.
            When userPrivate is false, the content is shared for all users
            connected to a server.
            </summary>
            <param name="userPrivate"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.OptionsDialogPlugin.GetLastSaveError">
            <summary>
            Returns the last save error. An empty string is returned if no error is available.
            </summary>
            <returns>The last save error</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.OptionsDialogPlugin.ShowHelp">
            <summary>
            Shows help specific for this options dialog component.
            </summary>
            <returns>True if show help was handled by this options dialog component otherwise false.</returns>
        </member>
        <member name="T:VideoOS.Platform.Client.ImageViewerControl">
            <summary>
            This class is available in the Smart Client and the .Net Library.<br/>
            It embeds and manages one ImageViewerControl with the following key functions:<br/>
            - separates the display component and version from your implementation<br/>
            - has built-in handling of digital zoom<br/>
            - Playback can be obtained by creating PlaybackController and assign imageViewerControl.PlaybackControllerFQID = playbackController.FQID. to link these classes together (Created via the ClientControl class).<br/>
            - From Smart Client 7.0 a Playback user control can be used, check out PlaybackUserControl (Created via the ClientControl class).<br/>
            <br/>
            A simple implementation just need these lines for initialization:<br/>
            <code>
                imageViewerControl = VideoOS.Platform.ClientControl.GenerateImageViewerControl();
                imageViewerControl.CameraFQID = _selectedCameraItem.FQID;
            	imageViewerControl.Initialize();
            	imageViewerControl.Connect();
            </code>
            When the session is to terminated, issue the following statements:<br/>
            <code>
                imageViewerControl.Disconnect();
                imageViewerControl.Close();
            </code>
            In the Smart Client and the .Net Library the default implementation will ensure that a ImageViewerControl
            will follow the mode of the MIP Environment, e.g. change mode to Live/Browse/Setup as this mode
            is changed by the user.<br/>
            In the smart Client this means that it follow the normal rule for window it resides on, e.g. Smart Client mode in the main window and live mode in floating windows.<br/>
            In the .Net Library the mode is controlled by your application by setting the EnvironmentManager.Mode property.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.EnableBrowseMode">
            <summary>
            Defines if this ImageViewerControl should be enabled in Browse (Playback) mode.<br/>
            If this property is false, the UserControl becomes disabled during Browse (Playback) mode.<br/>
            Default is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.EnableSetupMode">
            <summary>
            Defines if this ImageViewerControl should be enabled in Setup mode.<br/>
            If this property is false, the UserControl becomes disabled during Setup mode.<br/>
            Default is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.SuppressUpdateOnMotionOnly">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.EnableRecordedImageDisplayedEvent">
            <summary>
            If you want to receive an event when a recorded image is received, set the RecordedImageReceivedEvent correctly and set this property to true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.EnableLiveStreamInformation">
            <summary>
            If you wish to receive the live stream XML information packages, set the LiveStreamInformationEvent up correctly and set this property to true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.EnableNextImageReceivedEvent">
            <summary>
            Not implemented, see ImageDisplayedEvent
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.EnableSmartSearch">
            <summary>
            Deprecated. Do not use.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.EnableMouseControlledPtz">
            <summary>
            Defines if mouse controlled PTZ should be possible. When set to true, 
            the user can use click on video to do center-to-click, and the user can also right click and open a square of an area to zoom to.<br/>
            Default is false.
            <remarks>Related property: EnableMousePtzEmbeddedHandler</remarks>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.EnableMousePtzEmbeddedHandler">
            <summary>
            Defines if mouse controlled PTZ should be handled automatically by this component. <br/>
            When set to true,  the user actions will be handled automatically and no Messages or events will be issued to this class, 
            but will be forwarded to the recording server that again will send to the camera.<br/>
            When set to false, the user selection will be send to the MIP Plugin or application via MIP Messages.
            Default is true.  (Note: This default was false in 2014 version).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.EnableScrollWheel">
            <summary>
            Defines is mouse wheel can control the zoom level for the camera.<br/>
            Default is false.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.EnableMiddleButtonClick">
            <summary>
            Defines if a 3-button mouse can use the middle button as a zoom out completely command.<br/>
            Default is false.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.EnableDigitalZoom">
            <summary>
            Defines if this ImageViewerControl allow the user to perform digital zoom operations.<br/>
            
            Note: When this flag is set to true, the EnableMousePtzEmbeddedHandler should also be true.
            
            Default is false.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.MaintainImageAspectRatio">
            <summary>
            Flag to instruct the presentation of the video to be displayed with the original aspect ratio (Default), or to fill the entire viewable area.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.ImageSize">
            <summary>
            Contains the size of the original image before it was scaled to available display area.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.PaintSize">
            <summary>
            Contains the size of the areas used for video.
            
            Top line and black filler areas are not included in this size.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.PaintLocation">
            <summary>
            Contains the location of actual image within this usercontrol.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerControl.ImageOrPaintInfoChanged">
            <summary>
            Is fired when one of the these field has been changed: ImageSize, PaintSize, PaintLocation
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.FireImageOrMaintInfoChanged">
            <summary>
            Reserved for internal use.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.EnableVisibleHeader">
            <summary>
            Defines if the blue header is displayed or not. Default is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.EnableVisibleCameraName">
            <summary>
            Defines if the name of the camera is displayed in the header line. Default is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.EnableVisibleLiveIndicator">
            <summary>
            Defines if the blinking green live indicator and the red motion indicator is visible. Default is true.
            		
            Note: This flag was set as Obsolite in 2016R3, but has been re-instated from 2017R1
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.EnableVisibleTimeStamp">
            <summary>
            Defines if the timestamps should be shown in the top line during playback.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.AdaptiveStreaming">
            <summary>
            Determine the stream resolution should be adapted based on the view size. <br/>
            Only applicable in standalone SDK. In Smart Client adaptive streaming is controlled by the general Smart Client settings.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.SetPlaybackFadeImageTime(System.Int32)">
            <summary>
            Sets the minimum millisecond distance to the closest image (at-or-before) before the displayed image is faded in browse mode.<br/>
            Default value is 0, e.g. no fading.
            </summary>
            <param name="msBeforeFading">Number of milliseconds from the previous image, before the displayed image is faded. 0 disables image fading. Negative numbers are ignored and make the function return 0</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.SetRenderingOptions(System.String)">
             <summary>
             Sets specific options for how to render video. The xmlParameter is forwarded to the ImageViewer presentation control.<br/>
             The document must have as its top element "&lt;RenderingOptions>".
            
             Example of a valid rendering options xml document:
             <code>
              "&lt;RenderingOptions>&lt;Deinterlacing>&lt;Method>BOB_TOP&lt;/Method>&lt;/Deinterlacing>&lt;/RenderingOptions>"
              </code>
             
             Deinterlacing options supported:
             <code>
             "&lt;Deinterlacing>&lt;Method>...&lt;/Method>&lt;/Deinterlacing>"
              </code>
             Where ... is one of
            
             "DEFAULT": Set deinterlacing method to the legacy mode that may weave fields.
            
             "BOB_TOP": Set deinterlacing method to bob. Preferently bob the top field.
            
             "BOB_BOTTOM": Set deinterlacing method to bob. Preferently bob the bottom field.
            
             "CONTENT_ADAPTIVE_VERTICAL_TEMPORAL": Set deinterlacing to content adaptive veritcal temportal (CAVT). <br/>
             CAVT is a filter that suppresses interlacing artifacts by analysis of each frame (top + bottom field).<br/>
             The CAVT deinterlacing variant accept a Threshold parameter in the range 0..255, eg.
             <code>
              "&lt;RenderingOptions>&lt;Deinterlacing>&lt;Method>CONTENT_ADAPTIVE_VERTICAL_TEMPORAL&lt;/Method>&lt;Threshold>20&lt;/Threshold>&lt;/Deinterlacing>&lt;/RenderingOptions>"
              </code>
             Threshold default (used if element is not present) is 12. The threshold determines the level of vertical variation that causes the filter to kick in.
             Furthermore CAVT accept a PreferredField parameter (either "TOP" (default) or "BOTTOM") that controls the field to bob for low resolution rendering, e.g.
             <code>
             "&lt;RenderingOptions>&lt;Deinterlacing>&lt;Method>CONTENT_ADAPTIVE_VERTICAL_TEMPORAL&lt;/Method>&lt;PreferredField>BOTTOM&lt;/PreferredField>&lt;/Deinterlacing>&lt;/RenderingOptions>"
              </code>
            
             </summary>
             <param name="xmlParameters"></param>
             <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.Selected">
            <summary>
            Define if this ImageViewerControl is in the currently selected ViewItem.<br/>
            When set to true, the top bar of the ImageViewerControl will change color to a brighter color.<br/>
            This property cannot be used in the SMart Client to select your own ImageViewerControl, use a SendMessage for that.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.Hidden">
            <summary>
            When another ViewItem is maximized, this property is set to true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.Maximized">
            <summary>
            Defines if this ImageViewerControl is currently in a Maximized ViewItem.<br/>
            This property cannot be used to maximize a ViewItem, use a SendMessage for that.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.CameraFQID">
            <summary>
            Identifies the camera that is to be displayed in the control.<br/>
            This property needs to be set before the Initialize() method is called.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.StreamId">
            <summary>
            Identifies which stream to use.<br/>
            Use the StreamDataSource class to get a list of available streams.  Note that multiple stream support is obly available on some 
            Milestone products.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.PlaybackControllerFQID">
            <summary>
            Defines which PlaybackController is controlling this ImageViewer in Playback mode.
            The FQID used here is returned by the ClientControl.GeneratePlaybackController() method.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.UsingMulticast">
            <summary>
            Indicates if the video is received from the recording server via multicast.
            
            Supported from 2016
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.ShowImageViewer">
            <summary>
            This property can be used to control if the ImageViewer should be shown or not.<br/>
            This can for example be used to hide the ImageViewer when there is no camera defined yet.<br/>
            When the ImageViewer is not shown, the InfoText field is displayed instead.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ImageViewerControl.InfoText">
            <summary>
            Used for displaying a text when the ImageViewer ImageViewer is NOT shown. When the ShowImageViewer is set to false,
            the text stored in the InfoText field will be displayed.<br/>
            The text is displayed in Color.Black on a transparent background.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.SetOverlay(System.Drawing.Bitmap,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Windows.Forms.DockStyle,System.Windows.Forms.DockStyle,System.Double,System.Double)">
            <summary>
            Place a Bitmap on top of the video being showed.<br/>
            After the bitmap has been set, it will remain on top of all following displayed video.<br/>
            The size of the bitmap can be any size that makes sense, when taking the quality into
            consideration. If a bitmap of e.g. (320,280) is used for creating the overlay, it can via the
            parameters be scaled up to the actual size of the video being displayed.<br/>
            Note: It is invalid set scale to true, while placing an overlay with absolute positions. <br/>
            Note: SetOverlay does not dispose the bitmap. It is up to the caller to call dispose when appropiate.
            </summary>
            <param name="bitmap"></param>
            <param name="id"></param>
            <param name="keepAspectRatio"></param>
            <param name="scaleWithDigitalZoom"></param>
            <param name="scaleOverlay"></param>
            <param name="scaleFactor"></param>
            <param name="verticalDock"></param>
            <param name="horizontalDock"></param>
            <param name="absolutePosX"></param>
            <param name="absolutePosY"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.ClearOverlay(System.Int32)">
            <summary>
            Clear a specific overlay placed earlier. The id used during the SetOverlay() call is used in this method for clearing that overlay again.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.SetVideoQuality(System.Int32,System.Int32)">
            <summary>
            Configure how decoding and display should work. This call represent the same functionality as the VideoQuality slider setup for a CameraViewItem. <br/>
            The change will take effect the next time a camera session is established.
            The smoothBufferSize parameter should have value in the range 1..100, where 1 is the lowest allowable quality and 100 is the highest allowable quality. The value represent how much of the maximum allocated buffer is used.<br/>
            When the smoothBufferSize is 0 - buffering will be turned off, and values will be the original defaults.
            </summary>
            <param name="smoothBufferSize">The percent of buffer to utilize.  A number of 100 will use all available buffer, e.g. 4 seconds</param>
            <param name="CPUsToUtilize">The number of CPU cores to use during decoding</param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.SetVideoResolutionAndFPS(System.Drawing.Size,System.Int32)">
            <summary>
            Smart Client only.
            Configure the server to transmit a specific resolution and frames per second.
            The specific values may not work on some products, and may therefor be ignored.
            Note:  The Server will use extensive amount of CPU to trans-code.  This method should ONLY be used for few video streams and when required.
            </summary>
            <param name="resolution">The target resolution to be sent from the server, default is the size coming from the camera itself.</param>
            <param name="FPS">The target frame rate.  The actual frame rate will often be different then the target, 
            as H.264 and H.265 is either 1 or the full rate.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.SetVideoResolutionAndFPS(System.Drawing.Size,VideoOS.Platform.Client.ImageViewerControl.FPSRate)">
            <summary>
            Standalone SDK only.
            The FPSRate will be used to tell the server what to transmit to this client.<br/>
            For H.264, values of Medium and Low will be key-frames only.<br/>
            For H.265, values of Medium and Low will be key-frames only.<br/>
            For JPEG, a normal framerate of 25, will give 25 for High, 4 or 5 for medium, and 1 for low
            </summary>
            <param name="resolution"></param>
            <param name="fpsRate"></param>
        </member>
        <member name="T:VideoOS.Platform.Client.ImageViewerControl.FPSRate">
            <summary>
            Defines how recorder should transcode video frames.  Used on the SetVideoResolutionAndFPS method.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerControl.FPSRate.High">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerControl.FPSRate.Medium">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerControl.FPSRate.Low">
            <summary>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.ConfigureOverlayTextAndImage(VideoOS.Platform.Client.OverlayTextId,System.Boolean,System.Boolean)">
            <summary>
            Controls how overleyed text is displayed for built-in messages. The textId identifies the text / message being configured.
            </summary>
            <param name="textId">Text id of the message to control, </param>
            <param name="enable">When set to true, the text is displayed; when set to false the etxt is suppressed.</param>
            <param name="blank">When set to false, the image is drawn; when set to true the image is not drawn.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.ConfigureOverlayTextAndImage(System.Boolean,System.Boolean)">
            <summary>
            Controls how overleyed text is displayed for built-in messages. All built-in text messages are configured.
            </summary>
            <param name="enable">When set to true, the text is displayed; when set to false the etxt is suppressed.</param>
            <param name="blank">When set to false, the image is drawn; when set to true the image is not drawn.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.ConfigureOverlayText(VideoOS.Platform.Client.OverlayTextId,System.Boolean)">
            <summary>
            Controls how overleyed text is displayed for built-in messages. The textId identifies the text / message being configured.
            </summary>
            <param name="textId">Text id of the message to control, </param>
            <param name="enable">When set to true, the text is displayed; when set to false the etxt is suppressed.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.ConfigureOverlayText(System.Boolean)">
            <summary>
            Controls how overlayed text is displayed for built-in messages. All built-in text messages are configured.
            </summary>
            <param name="enable">When set to true, the text is displayed; when set to false the text is suppressed.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.SetImageQuality(System.Int32)">
            <summary>
            Tell the Recording Server how much to compress each JPEG.<br/>		
            The value can be a number between 1..100.<br/>
            Or one of the special values:<br/>
            	SuperHigh = 101<br/>
            	High = 102<br/>
            	Medium = 103<br/>
            	Low = 104<br/>
            </summary>
            Note: Values below 100 are not supported by XProtect Corporate or Expert.
            <param name="percent"></param>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerControl.InQualityMethod">
            <summary>
            This implementation has been made as we have two version 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.SetVideoQuality(System.Int32)">
            <summary>
            Please use SetImageQuality
            </summary>
            <param name="percent"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.Initialize">
            <summary>
            Issue this method after the cameraFQID has been set to initialize the control.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.Connect">
            <summary>
            This method will connect the recording server owning the camera.<br/>
            The CameraFQID property must have been set, and the Initialize() method called before this method can be called.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.Disconnect">
            <summary>
            Disconnect current session to the recording server.<br/>
            Following this call, the CameraFQID can be changed and a new session be established by a call to the Connect() method.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.Close">
            <summary>
            Should be called for the underlaying controls to clean up entirely. 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.StartLive">
            <summary>
            In the Smart Client and the .Net Library the default implementation will ensure that a ImageViewerControl
            will follow the mode of the MIP Environment, e.g. change mode to Live/Browse as this mode
            is changed by the user.<br/>
            In the smart Client this means that it follow the normal rule for window it resides on, e.g. Smart Client mode in the main window and live mode in floating windows.<br/>
            In the .Net Library the mode is controlled by your application by setting the EnvironmentManager.Mode property.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.StartBrowse">
            <summary>
            In the Smart Client and the .Net Library the default implementation will ensure that a ImageViewerControl
            will follow the mode of the MIP Environment, e.g. change mode to Live/Browse/Setup as this mode
            is changed by the used.<br/>
            In the smart Client this means that it follow the normal rule for window it resides on, e.g. Smart Client mode in the main window and live mode in floating windows.<br/>
            In the .Net Library the mode is controlled by your application by setting the EnvironmentManager.Mode property, or by a PlaybackController assigned to this class via the PlaybackControllerFQID property.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.StartSetup">
            <summary>
            This will set the ImageViewer in setup mode.  Avoid using this, as it is normally controlled by the Mode set in the EnvironmentManager.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.UpdateStates">
            <summary>
            When some of the 'Enabled' properties have been changed, this method will check for any changes and carry them out on the UI.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerControl.ClickEvent">
            <summary>
            Register here to receive unused click events 
            The args is MouseEventArgs (from version MIPSDK 5.1.1)
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerControl.DoubleClickEvent">
            <summary>
            Register here to receive unused double click events 
            The args is MouseEventArgs (from version MIPSDK 5.1.1)
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerControl.RightClickEvent">
            <summary>
            Register here to receive unused right click events 
            The args is MouseEventArgs (from version MIPSDK 5.1.1)
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerControl.MiddleClickEvent">
            <summary>
            Register here to receive unused middle click events 
            The args is MouseEventArgs (from version MIPSDK 5.1.1)
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerControl.KeyUpEvent">
            <summary>
            Get the KeyUpEvent.
            </summary>
            <remarks>Only implemented in .Net Library (as of MIPSDK v4.0b)</remarks>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerControl.MouseLeaveEvent">
            <summary>
            Is called when mouse is leaving the control
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerControl.MouseHoverEvent">
            <summary>
            Is called when mouse is hovering over the control
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerControl.MouseMoveEvent">
            <summary>
            Called continuously when mouse is over control and moving.
            The args is MouseEventArgs
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerControl.MouseScrollWheelEvent">
            <summary>
            Called continuously when mouse scroll wheel is used.
            Remember to set <see cref="P:VideoOS.Platform.Client.ImageViewerControl.EnableScrollWheel"/> to true.
            The args is MouseEventArgs
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerControl.ConnectResponseEvent">
            <summary>
            Register on this event to be called when a connection has completed.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerControl.ImageReceivedEvent">
            <summary>
            Not implemented, see ImageDisplayedEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerControl.ImageDisplayedEvent">
            <summary>
            Called for every image being displayed, exactly when it is presented to the operator.<br/>
            The method registered on this event MUST be VERY short.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.FireImageDisplayed(VideoOS.Platform.Client.ImageDisplayedEventArgs)">
            <summary>
            Reserved for use by MIP layer
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerControl.RecordedImageReceivedEvent">
            <summary>
            Register on this event to be called when a recorded image has been received.<br/>
            Remember to also set the EnableRecordedImageDisplayedEvent to true;
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ImageViewerControl.LiveStreamInformationEvent">
            <summary>
            Register on this event to be called when the live stream XML information is available.<br/>
            Remember to also set the EnableLiveStreamInformation to true;
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.FireRecordedImageReceivedEvent(VideoOS.Platform.Client.RecordedImageReceivedEventArgs)">
            <summary>
            Internally used to call on event RecordedImageReceivedEvent
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.FireLiveStreamInformationEvent(VideoOS.Platform.Client.LiveStreamInformationEventArgs)">
            <summary>
            Internally used to call on event LiveStreamInformationEvent
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.OnKeyUpEvent(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Internally used to call on event KeyUpEvent
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.OnMiddleClickEvent(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internally used to call on event MiddleClickEvent
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.OnMouseMoveEvent(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internally used to call on event MouseMoveEvent
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.OnMouseHoverEvent">
            <summary>
            Internally used to call on event MouseHoverEvent
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.OnMouseLeaveEvent">
            <summary>
            Internally used to call on event MouseLeaveEvent
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.OnMouseScrollWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internally used to call on event MouseScrollWheel
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.GetCurrentDisplayedImageAsBitmap">
            <summary>
            Get the latest displayed Image including the overlays and privacy mask.<br/>
            Note that if no image has been received from the server, a null is returned.<br/>
            Important: If the returned Bitmap is used in a UserControl, like a PictureBox, the control
            will hold to the original Bitmap.  This can cause issues when the original source of the Bitmap attempts to dispose it.<br/>
            Recommendation is to create another Bitmap directly upon calling this method, when passing it on to a PictureBox.
            <code>
                Bitmap bitmap = imageViewControl.GetCurrentDisplayedImageAsBitmap();
                if (bitmap!=null)
                {
                    myPictureBox.Image = newBitmap(bitmap, myPictureBox.Size());	// If you like to resize to picturebox size
            		bitmap.Dispose();
                } else
                {
            		// Clear the picturebox ...
                }
            </code>
            </summary>
            <returns>A bitmap or null or no image is available.</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.GetCurrentDisplayedImageAsBitmap(System.Boolean)">
            <summary>
            Overloaded method to control if the original or the digital zoomed image is requested.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.PtzCenter(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform PTZ Center in the current mode. Either Digital zoom, PanoramicLens (Fisheye), or physical camera move.
            </summary>
            The zoom parameter can be -1 for no change, or a range from 0..1000, where 0 will zoom out completely.
            The other values are can be in any size and does not relate to the real resolution of the image.<br/>
            <code>
            	_imageViewerControl1.PtzCenter(100, 100, 25, 50, 500);
            </code>
            Will zoom 50% and center around a point (25,50) to the left hand side of the image.
            <param name="refWidth">Reference width of center</param>
            <param name="refHeight">Reference height of center</param>
            <param name="centerX"></param>
            <param name="centerY"></param>
            <param name="zoom"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.ShapesOverlayAdd(System.Collections.Generic.List{System.Windows.Shapes.Shape},VideoOS.Platform.Client.ShapesOverlayRenderParameters)">
            <summary>
            Method to add overlay shapes.
            
            The returned Guid is used to later modify and remove the overlays.
            
            Note: Valid from 2016 R3 when using the hardware accellerared ImageViewerControl.
            </summary>
            <param name="overlayShapes"></param>
            <param name="renderParameters"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.ShapesOverlayUpdate(System.Guid,System.Collections.Generic.List{System.Windows.Shapes.Shape})">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="overlayShapes"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.ShapesOverlayUpdate(System.Guid,VideoOS.Platform.Client.ShapesOverlayRenderParameters)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="renderParameters"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.ShapesOverlayUpdate(System.Guid,System.Collections.Generic.List{System.Windows.Shapes.Shape},VideoOS.Platform.Client.ShapesOverlayRenderParameters)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="overlayShapes"></param>
            <param name="renderParameters"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.ShapesOverlayRemove(System.Guid)">
            <summary>
            
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.SetCameraXml(VideoOS.Platform.UserContext,System.String)">
            <summary>
            Can be used for directly setting the camera XML to be used for connecting. 
            Instead of using FQID in the cases where configuration load is not desired.
            Only supported in standalone.
            </summary>
            <param name="userContext"></param>
            <param name="xml">The XML describing the camera.</param>
        </member>
        <member name="F:VideoOS.Platform.Client.ImageViewerControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VideoOS.Platform.Client.ImageViewerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ShapesOverlayRenderParameters">
            <summary>
            Defines how WPF shapes is placed on top of video. Used by ImageViewerControl.ShapesOverlay methods.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ShapesOverlayRenderParameters.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ShapesOverlayRenderParameters.FollowDigitalZoom">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ShapesOverlayRenderParameters.ZOrder">
            <summary>
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ActiveElementsOverlayRenderParameters">
            <summary>
            Defines how WPF UIElements are placed on top of video. Used by ImageViewerAddOn.ActiveElementsOverlay methods.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ActiveElementsOverlayRenderParameters.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ActiveElementsOverlayRenderParameters.FollowDigitalZoom">
            <summary>
            Tells whether the elements should adjust size and position according to digital zoom or not.
            
            Default is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ActiveElementsOverlayRenderParameters.ZOrder">
            <summary>
            The Z-order of the elements on the user interface.
            
            Default is 0.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ActiveElementsOverlayRenderParameters.ShowAlways">
            <summary>
            Tells whether the elements will be shown always or only when the operator holds the mouse over the view item.
            
            Default is false.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.LiveStreamInformationHandler">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Client.LiveStreamInformationEventArgs">
            <summary>
            The argument filled on the LiveStreamInformationEvent.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.LiveStreamInformationEventArgs.Information">
            <summary>
            The string contains the XML of the LiveStreamInformation.<br/>
            A sample of the XML looks like:
            <code>
            <livepackage>
              <status>
                <statustime>1287438296584</statustime>
                <statusitem id="1" value="1" description="Camera live feed started"/>
                <statusitem id="2" value="1" description="Live feed motion"/>
                <statusitem id="3" value="1" description="Camera recording"/>
                <statusitem id="4" value="0" description="Camera event notification"/>
                <statusitem id="5" value="0" description="Camera connection lost"/>
                <statusitem id="6" value="0" description="Database fail"/>
                <statusitem id="7" value="0" description="The server is running out of disk space"/>
              </status>
            </livepackage>
            </code>
            The statustime indicate the current time in milliseconds since 1970.01.01<br/>
            The other 7 fields have an id attribute to make it easy to identify, and a description that can be used as a default display text if so required.<br/>
            The values indicate if the statusitem is currently true or false, e.g. above is LiveFeedStarted, Motion Detected and video being Recording.
            <br/><br/>
            As soon as one of the statusitems changes a new livestreaminformation is send out from the server.<br/>
            Right after initial connection, at least one livestreaminformation package is send out within 1 second.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.LiveStreamInformationEventArgs.#ctor(System.String)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Client.ConnectResponseEventHandler">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Client.ConnectResponseEventEventArgs">
            <summary>
            The argument filled on the ConnectResponseEvent.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ConnectResponseEventEventArgs.ConnectionGranted">
            <summary>
            Is set to 1, if the connection is now established. While a 0 indicates that the session could not be established.<br/>
            When not established, it could be one of these issues:<br/>
            - URL constructed incorrectly (e.g. port missing for XProtect Corporate Recording server)<br/>
            - The logged in user (Token), is not authorized to access the camera<br/>
            - Recording Server stopped, or network connection not available.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ConnectResponseEventEventArgs.#ctor(System.Int16)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Client.OverlayTextId">
            <summary>
            Defines the available built-in text messages.  The value is used to control how to display text via the EnableOverlayedText method.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ViewAndLayoutItem">
            <summary>
            The ViewAndLayoutItem represent a specific view with all its content for a View in the Smart Client.<br/>
            This class is a ConfigItem, where child to be configured can be added and removed.<br/>
            The child in this context are individual View Items, either the built-in ones like Camera View Item or
            any of the ones provided in a MIP Plug-in.<br/>
            The FQID of this item can be used for some of the Messages, e.g. MultiWindowCommand with its MultiWindowCommandData.View field
            for selecting a view on a specific Window.<br/>
            For accessing the Groups, View groups and View Layouts, the ClientControl provides access through the methods
            GetViewGroupItems, GetSmartWallItems and CreateTemporaryGroupItem.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewAndLayoutItem.#ctor(System.String,System.Drawing.Rectangle[])">
            <summary>
            Create a new ViewLayout with a specific name and defined layout. 
            The Rectangle's defines each of the view items on the ViewLayout. The coordinates on these should
            be from (0,0) to (999,999), where (0,0) is the top left corner.<br/>
            </summary>
            <param name="name"></param>
            <param name="layoutArray"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewAndLayoutItem.#ctor(System.String)">
            <summary>
            Create a new ViewLayout with just a name.  The Layout Rectangle is defined via the ViewLayout property.
            </summary>
            <param name="layoutName"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewAndLayoutItem.#ctor">
            <summary>
            Create a ViewLayout, Name and Layout is defined via properties.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewAndLayoutItem.Layout">
            <summary>
            The Rectangle defining the Layout.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewAndLayoutItem.InsertViewItemPlugin(System.Int32,VideoOS.Platform.Client.ViewItemPlugin,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method inserts a MIP Plug-in defined ViewItem in a specific position on the Layout. 
            </summary>
            <param name="index">Index into the Layout Array of View Items</param>
            <param name="viewItemPlugin">The ViewItemPlugin to insert</param>
            <param name="properties">Any properties the View Item should be using</param>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewAndLayoutItem.InsertBuiltinViewItem(System.Int32,System.Guid,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method inserts one of the built-in defined ViewItems in a specific position on the Layout.<br/>
            The type of View Item is identified by the builtinId, that refers to one of the definitions within this class.  E.g. a CameraBuiltinId.<br/>
            The properties to be defined for each of these are different, please check the notes for each definition.
            </summary>
            <param name="index"></param>
            <param name="builtinId"></param>
            <param name="properties"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewAndLayoutItem.InsertViewItem(System.Int32,System.String)">
            <summary>
            This method inserts a view item based on a 
            </summary>
            <param name="index"></param>
            <param name="configurationString"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewAndLayoutItem.ViewItemId(System.Int32)">
            <summary>
            Return the type of ViewItem that is located on a specific index in the Layout.<br/>
            When about to insert a specific cameraId on a ViewLayout, it should be considered to just
            insert the cameraId on a temporary basis, as no server communication is required for such a change.
            This can be done if the current ViewItem is already a CameraViewItem, and the change does not
            have to be permanent.  Check the SetCameraInViewCommand message for this operation.
            </summary>
            <param name="index">Index of the View Item you need the type of</param>
            <returns>The view item type</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewAndLayoutItem.ViewItemConfigurationString(System.Int32)">
            <summary>
            Returns the view item configuration for the item at the specified index.<br/>
            Use this configuration string together with InsertViewItem to respore or clone an existing view item.
            </summary>
            <param name="index">Index of the View Item you need the configuration for</param>
            <returns>The view item configuration</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewAndLayoutItem.Save">
            <summary>
            Call this method when change is completed and the changes should be saved on the server. 
            No further changes can be done on this ViewLayout, if it is a Temporary Group.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewAndLayoutItem.EmptyBuiltinId">
            <summary>
            Identify an Empty ViewItem.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewAndLayoutItem.CameraBuiltinId">
            <summary>
            Identify a CameraViewItem. A property with key "CameraId" should be filled with the FQID.ObjectId.ToString() identifying the camera to show.
            If the property "StreamId" id defined, it will define the Id of a specific stream.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewAndLayoutItem.HotspotBuiltinId">
            <summary>
            Identifying a hotspot ViewItem, no properties used.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewAndLayoutItem.CarrouselBuiltinId">
            <summary>
            A Carrousel View Item. No properties used. The Smart Client use will have to configure the content afterwards.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewAndLayoutItem.MatrixBuiltinId">
            <summary>
            A Matrix View Item. No properties used. The Smart Client use will have to configure the content afterwards.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewAndLayoutItem.HTMLBuiltinId">
            <summary>
            A ViewItem that contains a HTML page. The following properties can be used:<br/>
            "URL" = the url to be used, e.g. www.google.com<br/>
            "Scaling" = an integer for how the entire HTML page should be scaled:<br/>
              "0" = no scaling<br/>
              "1" = scale until the visible area contains 1280x1024 pixels<br/>
              "2" = scale until the visible area contains 1024x768 pixels<br/>
              "3" = scale until the visible area contains 800x600 pixels<br/>
              "4" = scale until the visible area contains 640x480 pixels<br/>
              "5" = scale until the visible area contains 320x200 pixels<br/>
            <br/>
            "HideNavigationBar" = "true" or "false" - to defined if the top line navigation bar should be displayed or not.<br/>
            "Addscript" = "true" or "false" - to defined if scripting is allowed.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewAndLayoutItem.MapBuiltinId">
            <summary>
            Identification for a Map ViewItem.<br/>
            Available properties to set on this ViewItem:<br/>
            <br/>
            "mapguid" = the id of the map to show.  A Guid in string format.<br/>
            "mapServerId" = Guid.Empty for current MFA site, or the Guid from ServerId.Id of the MFA site that holds the map to be displayed.
            <br/>
            The rest are optional, the default values are as follows:<br/>
            "mapServerId" = Guid.Empty.ToString()<br/>
            "isInitialized" = "false"<br/>
            "isZoomAllowed" = "true"<br/>
            "isAutoMaximize" = "true"<br/>
            "timeoutSeconds" = "30"<br/>
            "iconSize" = "0"<br/>
            "showPreview" = "true"<br/>
            "showStatus" = "true"<br/>
            "showStatusDetails" = "true"<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewAndLayoutItem.GisMapBuiltinId">
            <summary>
            Identification for a Smart Map ViewItem.<br/>
            Available properties to set on this ViewItem:<br/>
            <br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewAndLayoutItem.SystemMonitorBuiltinId">
            <summary>
            Identification for a System Monitor ViewItem.<br/>
            Available properties to set on this ViewItem:<br/>
            "siteId" = the id of the master server on the relevant site. A Guid in string format.<br/>
            "path" = relative path of Uri to show<br/>
            "showSiteTree" = show site selection tree for systems with federated architecture<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewAndLayoutItem.ImageBuiltInId">
            <summary>
            Is used to insert an IMageViewItem.
            
            At this point, the file selection dialog will appear to select what file to view.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewAndLayoutItem.TextBuiltInId">
            <summary>
            Identifies a text viewitem that is used to display a text string in the Smart Client.
            
            Needs a property for the text string:<br/>
            Key           Value<br/>
            "Text"        The text string to insert
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ConfigurationItemBase">
            <summary>
            Abstract base class for specialized configuration item classes
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ConfigurationItemBase._Id">
            <summary>
            Unique id identifying this configuration item
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ConfigurationItemBase.Update(System.Xml.XmlNode,System.Collections.Generic.List{System.Guid},System.Boolean)">
            <summary>
            Updates the the item based on the xml node
            </summary>
            <returns>Returns true if the display name was updated</returns>
        </member>
        <member name="E:VideoOS.Platform.Client.ConfigurationItemBase.PropertyChangedEvent">
            <summary>
            Signals that a property on the configuration item has changed
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ConfigurationItemBase.SaveProperties">
            <summary>
            Save changed properties and fire the PropertyChangedEvent.
            If the plug-in want to save properties on the login server, there is no
            need to override this method.  The base implementation will save all properties together with the View as a whole.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ConfigurationItemBase.Id">
            <summary>
            For internal use only.  Please use The FQID or FQID.ObjectId on the ViewItemManager as a unique identification for a ViewItem within a View.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ConfigurationItemBase.SerializeTypeString">
            <summary>
            Gets the serialization type string.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.ViewItemUserControl">
            <summary>
            The ViewItemUserControl is instantiated for every position it is created on the current visible view. When a user select another View or ViewLayout, this class will be disposed.  No permanent settings can be saved in this class.
            The Init() method is called when the class is initiated and handle has been created for the UserControl. Please perform resource initialization in this method.
            <br/>
            If Message communication is performed, register the MessageReceivers during the Init() method and UnRegister the receivers during the Close() method.
            <br/>
            The Close() method can be used to Dispose resources in a controlled manor.
            <br/>
            Mouse events not used by this control, should be passed on to the Smart Client by issuing the following methods:<br/>
            FireClickEvent() for single click<br/>
            FireDoubleClickEvent() for double click<br/>
            The single click will be interpreted by the Smart Client as a selection of the item, and the double click will be interpreted to expand the current viewitem to fill the entire View.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewItemUserControl._selected">
            <summary>
            boolean indicating whether the view item is currently selected or not. This status 
            should never be set directly by the content holder, but instead the content holder 
            should request to be selected by using the SelectRequestEvent event.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewItemUserControl._maximized">
            <summary>
            boolean indicating whether the view item is currently maximized or not. This status 
            should never be set directly by the content holder, but instead the content holder 
            should request to be maximized and restored by using the MaximizeRequestEvent and RestoreRequestEvent events.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewItemUserControl._hidden">
            <summary>
            boolean indicating whether the view item is currently hidden or not (e.g. the view item is hidden when another view item is maximized).
            This status should never be set by the content holder.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ViewItemUserControl.SelectRequestEvent">
            <summary>
            Signals that the content holder requests to be selected
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemUserControl.FireSelectRequestEvent">
            <summary>
            Activates the SelectRequestEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ViewItemUserControl.DeselectRequestEvent">
            <summary>
            Signals that the content holder requests to be deselected
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemUserControl.FireDeselectRequestEvent">
            <summary>
            Activates the DeselectRequestEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ViewItemUserControl.MaximizeRequestEvent">
            <summary>
            Signals that the content holder requests to be maximized
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemUserControl.FireMaximizeRequestEvent">
            <summary>
            Activates the MaximizeRequestEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ViewItemUserControl.RestoreRequestEvent">
            <summary>
            Signals that the content holder requests to be restored
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemUserControl.FireRestoreRequestEvent">
            <summary>
            Activates the RestoreRequestEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ViewItemUserControl.ClickEvent">
            <summary>
            Signals that the content holder is clicked
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemUserControl.FireClickEvent">
            <summary>
            Activates the ClickEvent
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Client.ViewItemUserControl.DoubleClickEvent">
            <summary>
            Signals that the content holder is double clicked clicked
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemUserControl.FireDoubleClickEvent">
            <summary>
            Activates the DoubleClickEvent
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemUserControl.Selected">
            <summary>
            Gets or sets the selected status on the content holder. This status 
            should never be set directly by the content holder, but instead the content holder 
            should request to be selected by using the SelectRequestEvent event.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemUserControl.Maximized">
            <summary>
            Gets or sets the maximized status on the content holder. This status 
            should never be set directly by the content holder, but instead the content holder 
            should request to be maximized and restored by using the MaximizeRequestEvent and RestoreRequestEvent events.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemUserControl.Hidden">
            <summary>
            Gets or sets the hidden status on the content holder (e.g. the view item is set to be hidden when another view item is maximized). 
            This status should never be set by the content holder.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemUserControl.Selectable">
            <summary>
            Gets boolean indicating whether the content holder can be selectable or not. The Selected property of a 
            non-selectable content holder will never be set to true. The content holder should implement the click and 
            double click events even if it is not selectable
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemUserControl.Maximizable">
            <summary>
            Gets boolean indicating whether the content holder can be maximized or not. The Maximized property of a 
            non-maximizable content holder will never be set to true. The content holder should implement the click and 
            double click events even if it is not maximizable. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemUserControl.ShowToolbar">
            <summary>
            Tells the Smart Client if the toolbar should pop up over the ViewItem, when the mouse hover over this ViewItem.<br/>
            For MIP Plugins the default toolbar contains a print button.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemUserControl.CalculateHeaderHeight">
            <summary>
            Calculate the height of a Camera View Item.
            This can used to make a similar header in own ViewItem.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemUserControl.CalculateHeaderFont">
            <summary>
            Calculate what font is used in the header for a Camera View Item.
            This can used to make a similar header in own ViewItem.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemUserControl.Init">
            <summary>
            Method that is called immediately after the view item is displayed.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemUserControl.Close">
            <summary>
            Method that is called when the view item is closed. The view item should free all resources when the method is called.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemUserControl.WindowInformation">
            <summary>
            Gives some basic information about the Window holding the this UserControl.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemUserControl.Print(System.String,System.String,System.String)">
            <summary>
            Method that is called when print is activated while the view item is selected.<br/>
            Base implementation calls 'DrawToBitmap' to get a bitmap from the entire UserControl,
            and pass on to Print method.
            <code>
            Bitmap bitmap = new Bitmap(this.Width, this.Height);
            this.DrawToBitmap(bitmap, new Rectangle(0, 0, this.Width, this.Height));
            ClientControl.Instance.Print(bitmap, this.Name, cameraName);
            bitmap.Dispose();
            </code>
            </summary>
            <param name="name">The name of this viewItem</param>
            <param name="information">Information being shown in a multi-line box</param>
            <param name="cameraName">Blank or name of a camera</param>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemUserControl.Print(System.String,System.String)">
            <summary>
            Method that is called when print is activated while the view item is selected.<br/>
            Base implementation calls 'DrawToBitmap' to get a bitmap from the entire UserControl,
            and pass on to Print method.
            <code>
            Bitmap bitmap = new Bitmap(this.Width, this.Height);
            this.DrawToBitmap(bitmap, new Rectangle(0, 0, this.Width, this.Height));
            ClientControl.Instance.Print(bitmap, this.Name, "");
            bitmap.Dispose();
            </code>
            This implementation does not work for UserControls with embedded ImageViewerControl.cs
            </summary>
            <param name="name">The name of this viewItem</param>
            <param name="information">Information being shown in a multi-line box</param>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemUserControl.Print">
            <summary>
            Overloaded method of Print, where the information parameter is blank.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PropertiesUserControl">
            <summary>
            This UserControl contains the visible part of the Property panel during Setup mode. <br/>
            If no properties is required by this ViewItemPlugin, the GeneratePropertiesUserControl() method on the ViewItemManager can return a value of null.
            <br/>
            When changing properties the ViewItemManager should continuously be updated with the changes to ensure correct saving of the changes.
            <br/>
            As the user click on different ViewItem, the displayed property UserControl will be disposed, and a new one created for the newly selected ViewItem.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertiesUserControl.Init">
            <summary>
            Called right after construction.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertiesUserControl.Close">
            <summary>
            Called just before the class is disposed.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Client.PropertyClass">
            <summary>
            Abstract class incapsulating a key-value based property list.  
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.PropertyClass._properties">
            <summary>
            The key-value collection holding the properties
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.PropertyClass._temporaryProperties">
            <summary>
            The key-value collection holding the temporary properties. Temporary will not be serialized (stored)
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertyClass.#ctor">
            <summary>
            Constructs a PropertyClass item
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertyClass.Update(System.Xml.XmlNode,System.Collections.Generic.List{System.Guid},System.Boolean)">
            <summary>
            Updates the properties
            </summary>
            <returns>Returns true if updated</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertyClass.CompareContent(VideoOS.Platform.Client.PropertyClass)">
            <summary>
            Compares properties
            </summary>
            <param name="property">Property to compare</param>
            <returns>Returns true if equal</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertyClass.ClearProperties">
            <summary>
            Clear property table
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertyClass.SetProperty(System.String,System.String)">
            <summary>
            Sets a named (key) property value in the property list. The property value is updated if the property exists
            </summary>
            <param name="key">The key of the property to set</param>
            <param name="value">The value of the property to set</param>
            Setting a value of null will remove the setting from the dictionary
        </member>
        <member name="M:VideoOS.Platform.Client.PropertyClass.GetProperty(System.String)">
            <summary>
            Gets a named (key) property value from the property list. Null is returned of the property does not exists.
            </summary>
            <param name="key">The key of the property to get</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertyClass.GetPropertyKeys">
            <summary>
            Gets all the keys in the property collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertyClass.SetTemporaryProperty(System.String,System.Object)">
            <summary>
            Sets a named (key) temporary property value in the property list. The property value is updated if the property exists. Temporary will not be serialized (stored)
            </summary>
            <param name="key">The key of the temporary property to set</param>
            <param name="value">The value of the temporary property to set</param>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertyClass.GetTemporaryProperty(System.String)">
            <summary>
            Gets a named (key) temporary property value from the property list. Null is returned of the property does not exists.
            </summary>
            <param name="key">The key of the temporary property to get</param>
            <returns>The value of the temporary property</returns>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertyClass.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the class item into xml format
            </summary>
            <param name="xmlTextWriter">XmlTextWriter that the class item is serialized to</param>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertyClass.SerializeToString">
            <summary>
            Create a XmlNode containing the property dictionary, returned as a String
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertyClass.SerializeToXmlNode">
            <summary>
            Create a XmlNode containing the property dictionary, returned as a String
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.PropertyClass.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the class item from xml format
            </summary>
            <param name="xmlNode">XmlNode containing the initialization xml</param>
        </member>
        <member name="T:VideoOS.Platform.Client.ViewItemManager">
            <summary>
            The ViewItemManager contains the configuration for the ViewItem. <br/>
            When the class is initiated it will automatically recreate relevant ViewItem configuration saved in the properties collection from earlier.
            Also, when the ViewLayout is saved the ViewItemManager will supply current configuration to the SmartClient to be saved on the server.<br/>
            This class is only relevant when executing in the Smart Client.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Client.ViewItemManager._uniqueIdentifier">
            <summary>
            This Guid uniquely identifies this object.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemManager.#ctor(System.String)">
            <summary>
            Initialize the configuration with default settings for new item
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemManager.FQID">
            <summary>
            Contains the id representing a ViewItem instance within a specific View.<br/>
            Multiple windows containing the same View will have the same FQIDs for each view item - located on this ItemManager.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemManager.GeneratePropertiesUserControl">
            <summary>
            Generate the UserControl containing the property configuration.
            
            For new plugins it is recommended to use the WPF version, GeneratePropertiesWpfUserControl(), instead.
            
            If you are implementing GeneratePropertiesWpfUserControl() you should not implement this one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemManager.GeneratePropertiesWpfUserControl">
            <summary>
            Generate the WPF UserControl containing the property configuration.
            
            Supported from XProtect Smart Client 2017 R3. If you need your plugin to work with older versions you will have to implement GeneratePropertiesUserControl() instead.
            
            If this is not implemented GeneratePropertiesUserControl() will be called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemManager.GenerateViewItemUserControl">
            <summary>
            Generate the UserControl containing the actual ViewItem content.
            
            For new plugins it is recommended to use the WPF version, GenerateViewItemWpfUserControl(), instead.
            
            If you are implementing GenerateViewItemWpfUserControl() you should not implement this one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemManager.GenerateViewItemWpfUserControl">
            <summary>
            Generate WPF UserControl containing the actual ViewItem content.
            
            Supported from XProtect Smart Client 2017 R3. If you need your plugin to work with older versions you will have to implement GenerateViewItemUserControl() instead.
            
            If this is not implemented GenerateViewItemUserControl() will be called.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemManager.DisplayName">
            <summary>
            Contains the name describing a ViewItem instance within a specific View.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemManager.RelatedCameraIds">
            <summary>
            Should return a list of related cameras used by this view item.<br/>
            These will automatically be included when the view item is added to an export.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemManager.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Save current configuration in XML Writer.<br/>
            Please do not override or new this method.
            </summary>
            <param name="xmlTextWriter"></param>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemManager.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the class item from xml format
            </summary>
            <param name="xmlNode">XmlNode containing the initialization xml</param>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemManager.UniqueIdentifier">
            <summary>
            Used to uniquely identify the ViewItem
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemManager.UpdateProperties(System.Xml.XmlNode,System.Collections.Generic.List{System.Guid},System.Boolean)">
            <summary>
            Ensure updated properties is updated in live mode, e.g. on a video wall
            </summary>
            <param name="xmlNode"></param>
            <param name="idUpdateForChanges"></param>
            <param name="force"></param>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.Client.ViewItemManager.TimelineSequenceSources">
            <summary>
            Override this property from derived class to return timeline sequence sources 
            for the current source if the view item want to support populating the Smart Client timeline control.
            </summary>
            <remarks>Supported from Smart Client 2017 R1</remarks>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemManager.PropertiesLoaded">
            <summary>
            The properties for this ViewItem is now loaded into the base class and can be accessed via 
            GetProperty(key) and SetProperty(key,value) methods
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemManager.Init">
            <summary>
            Do not use - rename to :PropertiesLoaded
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Client.ViewItemManager.Close">
            <summary>
            Do not use
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AccessControlSystem">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AccessControlSystem.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="accessControlSystem">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AccessControlSystem.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AccessControlSystem.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AccessControlSystem.AccessControlUnitFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AccessControlSystem.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AccessControlSystem.RuleGroup">
            <summary>
            Rule group path
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AccessControlSystem.GetInternalUnitPath(System.String)">
            <summary>
            Get internal unit path
            </summary>
            <param name="externalId">External ID</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AccessControlSystem.GetInternalUnitPath">
            <summary>
            Get internal unit path
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.GetInternalUnitPathServerTask">
            <summary>
            Get internal unit path
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GetInternalUnitPathServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GetInternalUnitPathServerTask.ExternalId">
            <summary>
            External ID
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AccessControlSystemFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AccessControlSystemFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="accessControlSystemFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AccessControlSystemFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AccessControlSystemFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AccessControlSystemFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AccessControlSystemFolder.AccessControlSystems">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AccessControlSystemFolder.RuleGroup">
            <summary>
            Rule group path
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AccessControlUnit">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AccessControlUnit.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="accessControlUnit">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AccessControlUnit.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AccessControlUnit.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AccessControlUnit.AccessControlUnitFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AccessControlUnit.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AccessControlUnit.RuleGroup">
            <summary>
            Rule group path
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AccessControlUnitFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AccessControlUnitFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="accessControlUnitFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AccessControlUnitFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AccessControlUnitFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AccessControlUnitFolder.AccessControlUnits">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AlarmDefinition">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AlarmDefinition.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="alarmDefinition">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AlarmDefinition.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AlarmDefinition.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.Enabled">
            <summary>
            Indicate if this item is active in the VMS system, e.g. enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.EventTypeGroupValues">
            <summary>
            A list of valid names/values for the EventTypeGroup property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.EventTypeGroup">
            <summary>
            Triggering event group. Defines a group of events in the same area. Valid values are available in the EventTypeGroupValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.EventTypeValues">
            <summary>
            A list of valid names/values for the EventType property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.EventType">
            <summary>
            Triggering event type. Defines the type of event that should trigger an alarm, when received from the source defined.. Valid values are available in the EventTypeValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.SourceList">
            <summary>
            Sources. Defines the source(s) the event is coming from. To define that all sources of a given type will trigger the alarm, use the folder format like: '/CameraFolder'
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.EnableRuleValues">
            <summary>
            A list of valid names/values for the EnableRule property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.EnableRule">
            <summary>
            Enable rule. Defines when the alarm can be triggered. Options are: Always, by TimeProfile or by events.  When TimeProfile is defined the TimeProfile property must contain a valid TimeProfile path, when enabled by events then both EnablingEvents and DisablingEvents must be defined.. Valid values are available in the EnableRuleValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.TimeProfile">
            <summary>
            Time profile. Defines what TimeProfile to be used when checking when the alarm is enabled.  Property is only valid when EnableRule is set to TimeProfile.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.EnableEventList">
            <summary>
            Enabling events. When enable rule is 'by events', then this property contains the events that will enable the alarm (but does not create any alarm).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.DisableEventList">
            <summary>
            Disabling events. When enable rule is 'by events', then this property contains the events that will disable the alarm.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.ManagementTimeoutTime">
            <summary>
            Operator action time limit. If operator action is required within a specific time, the time is defined here.  Format is like: HH:mm.ss. Valid values are the same as defined in the Management Client, e.g. 1 minute, 5 minutes etc.  Default is 1 minute.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.ManagementTimeoutEventList">
            <summary>
            Operator timeout events triggered. If operator action is required within a specific time, this property defines what event to fire if no action was taken within the time specified in the ManagementTimeoutTime property.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.RelatedCameraList">
            <summary>
            Related cameras. The list of additional cameras to associate with the alarm. The list is a comma separated set of Paths.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.RelatedMapValues">
            <summary>
            A list of valid names/values for the RelatedMap property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.RelatedMap">
            <summary>
            Related map. Defines what map to show in the alarm manager, when alarm is selected.. Valid values are available in the RelatedMapValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.Owner">
            <summary>
            Owner. Defines the initial owner. Should be formatted as Identity.ToString() does, like 'John Doe (Acme/JD)'
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.PriorityValues">
            <summary>
            A list of valid names/values for the Priority property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.Priority">
            <summary>
            Priority. Sets the priority. Can be High, Medium, Low. Valid values are available in the PriorityValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.CategoryValues">
            <summary>
            A list of valid names/values for the Category property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.Category">
            <summary>
            Alarm category. Sets the category of the alarm. Valid options are defined in the Management Client.. Valid values are available in the CategoryValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.TriggerEventlist">
            <summary>
            Events triggered by alarm. Defines a list of events to trigger when alarm is created.  List is a comma separated set of Paths.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinition.AutoClose">
            <summary>
            Auto-close alarm: Motion Stopped. Defines if an alarm should be closed automatically upon reception of a specific message from save source.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AlarmDefinitionFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AlarmDefinitionFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="alarmDefinitionFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AlarmDefinitionFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AlarmDefinitionFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AlarmDefinitionFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AlarmDefinitionFolder.AlarmDefinitions">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AlarmDefinitionFolder.AddAlarmDefinition(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add alarm definition
            </summary>
            <param name="name">Name</param>
            <param name="description">Description</param>
            <param name="eventTypeGroup">Triggering event group</param>
            <param name="eventType">Triggering event type</param>
            <param name="sourceList">Sources</param>
            <param name="enableRule">Enable rule</param>
            <param name="timeProfile">Time profile</param>
            <param name="enableEventList">Enabling events</param>
            <param name="disableEventList">Disabling events</param>
            <param name="managementTimeoutTime">Operator action time limit</param>
            <param name="managementTimeoutEventList">Operator timeout events triggered</param>
            <param name="relatedCameraList">Related cameras</param>
            <param name="relatedMap">Related map</param>
            <param name="owner">Owner</param>
            <param name="priority">Priority</param>
            <param name="category">Alarm category</param>
            <param name="triggerEventlist">Events triggered by alarm</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AlarmDefinitionFolder.AddAlarmDefinition">
            <summary>
            Add alarm definition
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AlarmDefinitionFolder.RemoveAlarmDefinition(System.String)">
            <summary>
            Remove alarm definition
            </summary>
            <param name="itemSelection">Alarm definition to remove</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AlarmDefinitionFolder.RemoveAlarmDefinition">
            <summary>
            Remove alarm definition
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask">
            <summary>
            Add alarm definition
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.EventTypeGroupValues">
            <summary>
            A list of valid names/values for the EventTypeGroup property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.EventTypeGroup">
            <summary>
            Triggering event group. Defines a group of events in the same area. Valid values are available in the EventTypeGroupValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.EventTypeValues">
            <summary>
            A list of valid names/values for the EventType property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.EventType">
            <summary>
            Triggering event type. Defines the type of event that should trigger an alarm, when received from the source defined.. Valid values are available in the EventTypeValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.SourceList">
            <summary>
            Sources. Defines the source(s) the event is coming from. To define that all sources of a given type will trigger the alarm, use the folder format like: '/CameraFolder'
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.EnableRuleValues">
            <summary>
            A list of valid names/values for the EnableRule property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.EnableRule">
            <summary>
            Enable rule. Defines when the alarm can be triggered. Options are: Always, by TimeProfile or by events.  When TimeProfile is defined the TimeProfile property must contain a valid TimeProfile path, when enabled by events then both EnablingEvents and DisablingEvents must be defined.. Valid values are available in the EnableRuleValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.TimeProfile">
            <summary>
            Time profile. Defines what TimeProfile to be used when checking when the alarm is enabled.  Property is only valid when EnableRule is set to TimeProfile.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.EnableEventList">
            <summary>
            Enabling events. When enable rule is 'by events', then this property contains the events that will enable the alarm (but does not create any alarm).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.DisableEventList">
            <summary>
            Disabling events. When enable rule is 'by events', then this property contains the events that will disable the alarm.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.ManagementTimeoutTime">
            <summary>
            Operator action time limit. If operator action is required within a specific time, the time is defined here.  Format is like: HH:mm.ss. Valid values are the same as defined in the Management Client, e.g. 1 minute, 5 minutes etc.  Default is 1 minute.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.ManagementTimeoutEventList">
            <summary>
            Operator timeout events triggered. If operator action is required within a specific time, this property defines what event to fire if no action was taken within the time specified in the ManagementTimeoutTime property.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.RelatedCameraList">
            <summary>
            Related cameras. The list of additional cameras to associate with the alarm. The list is a comma separated set of Paths.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.RelatedMapValues">
            <summary>
            A list of valid names/values for the RelatedMap property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.RelatedMap">
            <summary>
            Related map. Defines what map to show in the alarm manager, when alarm is selected.. Valid values are available in the RelatedMapValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.Owner">
            <summary>
            Owner. Defines the initial owner. Should be formatted as Identity.ToString() does, like 'John Doe (Acme/JD)'
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.PriorityValues">
            <summary>
            A list of valid names/values for the Priority property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.Priority">
            <summary>
            Priority. Sets the priority. Can be High, Medium, Low. Valid values are available in the PriorityValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.CategoryValues">
            <summary>
            A list of valid names/values for the Category property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.Category">
            <summary>
            Alarm category. Sets the category of the alarm. Valid options are defined in the Management Client.. Valid values are available in the CategoryValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAlarmDefinitionServerTask.TriggerEventlist">
            <summary>
            Events triggered by alarm. Defines a list of events to trigger when alarm is created.  List is a comma separated set of Paths.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveAlarmDefinitionServerTask">
            <summary>
            Remove alarm definition
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveAlarmDefinitionServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveAlarmDefinitionServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveAlarmDefinitionServerTask.ItemSelection">
            <summary>
            Alarm definition to remove. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AnalyticsEvent">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AnalyticsEvent.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="analyticsEvent">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AnalyticsEvent.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AnalyticsEvent.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AnalyticsEvent.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AnalyticsEvent.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AnalyticsEventFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AnalyticsEventFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="analyticsEventFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AnalyticsEventFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AnalyticsEventFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AnalyticsEventFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AnalyticsEventFolder.AnalyticsEvents">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AnalyticsEventFolder.AddAnalyticsEvent(System.String)">
            <summary>
            Add analytics event
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AnalyticsEventFolder.AddAnalyticsEvent">
            <summary>
            Add analytics event
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AnalyticsEventFolder.RemoveAnalyticsEvent(System.String)">
            <summary>
            Remove analytics event
            </summary>
            <param name="itemSelection">Select analytics event to remove</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AnalyticsEventFolder.RemoveAnalyticsEvent">
            <summary>
            Remove analytics event
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddAnalyticsEventServerTask">
            <summary>
            Add analytics event
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddAnalyticsEventServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAnalyticsEventServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveAnalyticsEventServerTask">
            <summary>
            Remove analytics event
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveAnalyticsEventServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveAnalyticsEventServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveAnalyticsEventServerTask.ItemSelection">
            <summary>
            Select analytics event to remove. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ArchiveScheduleChildItem">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ArchiveScheduleChildItem.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem,VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="archiveSchedule">The ConfigurationItem returned from elsewhere</param>
            <param name="parentWrapper"></param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ArchiveScheduleChildItem.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ArchiveScheduleChildItem.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveScheduleChildItem.FrequencyTypeValues">
            <summary>
            A list of valid names/values for the FrequencyType property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveScheduleChildItem.FrequencyType">
            <summary>
            Recurrence pattern. Sets the recurrence pattern to daily, weekly or monthly.. Valid values are available in the FrequencyTypeValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveScheduleChildItem.FrequencyRecurrenceFactor">
            <summary>
            Recurrence pattern on weeks/months. Sets the recurrence pattern to daily, weekly or monthly.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveScheduleChildItem.FrequencyInterval">
            <summary>
            Recurrence pattern on days. Defines the ‘Recurrence pattern on days’, which determines how often the archiving is scheduled to run. This property is always interpreted relative to the value of the ‘Recurrence pattern’ property.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveScheduleChildItem.FrequencyRelativeIntervalValues">
            <summary>
            A list of valid names/values for the FrequencyRelativeInterval property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveScheduleChildItem.FrequencyRelativeInterval">
            <summary>
            Recurrence pattern on relative weekday. Defines the ordinal value of a day relative to the first day of the month, such as first, second or last.. Valid values are available in the FrequencyRelativeIntervalValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveScheduleChildItem.FrequencySubDayTypeValues">
            <summary>
            A list of valid names/values for the FrequencySubDayType property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveScheduleChildItem.FrequencySubDayType">
            <summary>
            Daily recurrence range type. Defines how often the archiving reoccurs on the same day.. Valid values are available in the FrequencySubDayTypeValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveScheduleChildItem.FrequencySubDayInterval">
            <summary>
            Hourly recurrence range type. Defines the interval between scheduled archiving that run during the day.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveScheduleChildItem.ActiveStartTimeOfDay">
            <summary>
            Recurrence range start time. Defines the time when the archiving schedule starts for the day in seconds. The value have to be between 0 and 86399.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveScheduleChildItem.ActiveEndTimeOfDay">
            <summary>
            Recurrence range end time. Defines the time when the archiving schedule ends for the day in seconds. The value have to be between 0 and 86399.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ArchiveStorage">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ArchiveStorage.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="archiveStorage">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ArchiveStorage.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ArchiveStorage.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveStorage.ArchiveScheduleChildItems">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveStorage.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveStorage.CreatedDate">
            <summary>
            Created date
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveStorage.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveStorage.DiskPath">
            <summary>
            Path. The path to the archive
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveStorage.RetainMinutes">
            <summary>
            Retention time. The number of minutes that must elapse before data are deleted or archived. The default value is 1 day
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveStorage.MaxSize">
            <summary>
            Maximum size. The maximum size of the archive storage in MB. The default value is 1 GB
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveStorage.FramerateReductionEnabled">
            <summary>
            Frame reduction enabled. Specifies if frame rate reduction is enabled or not on the archive
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveStorage.TargetFramerate">
            <summary>
            Frame rate. The frame rate reduction of media data in frames per second
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ArchiveStorage.ReadArchiveStorageInformation">
            <summary>
            Read archive storage information
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ArchiveStorage.SetFramerateReductionArchiveStorage">
            <summary>
            Enable/disable frame rate reduction on archive
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ArchiveStorage.MoveArchiveStorage(System.String)">
            <summary>
            Move archive
            </summary>
            <param name="diskPath">Path</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ArchiveStorage.MoveArchiveStorage">
            <summary>
            Move archive
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MoveArchiveStorageServerTask">
            <summary>
            Move archive
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MoveArchiveStorageServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MoveArchiveStorageServerTask.DiskPath">
            <summary>
            Path. The path to the archive
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ArchiveStorageFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ArchiveStorageFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="archiveStorageFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ArchiveStorageFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ArchiveStorageFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ArchiveStorageFolder.ArchiveStorages">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ArchiveStorageFolder.AddArchiveStorage(System.String,System.String,System.String,System.Double,System.Int32,System.Int32)">
            <summary>
            Add archive
            </summary>
            <param name="name">Name</param>
            <param name="description">Description</param>
            <param name="diskPath">Path</param>
            <param name="targetFramerate">Frame rate</param>
            <param name="retainMinutes">Retention time</param>
            <param name="maxSize">Maximum size</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ArchiveStorageFolder.AddArchiveStorage">
            <summary>
            Add archive
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ArchiveStorageFolder.RemoveArchiveStorage(System.String)">
            <summary>
            Remove archive
            </summary>
            <param name="itemSelection">Remove archive</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ArchiveStorageFolder.RemoveArchiveStorage">
            <summary>
            Remove archive
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddArchiveStorageServerTask">
            <summary>
            Add archive
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddArchiveStorageServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddArchiveStorageServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddArchiveStorageServerTask.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddArchiveStorageServerTask.DiskPath">
            <summary>
            Path. The path to the archive
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddArchiveStorageServerTask.TargetFramerate">
            <summary>
            Frame rate. The frame rate reduction of media data in frames per second
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddArchiveStorageServerTask.RetainMinutes">
            <summary>
            Retention time. The number of minutes that must elapse before data are deleted or archived. The default value is 1 day
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddArchiveStorageServerTask.MaxSize">
            <summary>
            Maximum size. The maximum size of the archive storage in MB. The default value is 1 GB
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveArchiveStorageServerTask">
            <summary>
            Remove archive
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveArchiveStorageServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveArchiveStorageServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveArchiveStorageServerTask.ItemSelection">
            <summary>
            Remove archive. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AutoDetectConfiguration">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AutoDetectConfiguration.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="autoDetectConfiguration">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AutoDetectConfiguration.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AutoDetectConfiguration.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AutoDetectConfiguration.DetectedDeviceCredentialsFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AutoDetectConfiguration.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AutoDetectConfiguration.Enabled">
            <summary>
            Automatic Detection Enabled. Specifies whether the automatic hardware detection is enabled.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AutoDetectConfigurationFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AutoDetectConfigurationFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="autoDetectConfigurationFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AutoDetectConfigurationFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AutoDetectConfigurationFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AutoDetectConfigurationFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AutoDetectConfigurationFolder.AutoDetectConfigurations">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.BasicUser">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.BasicUser.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="basicUser">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.BasicUser.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.BasicUser.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.BasicUser.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.BasicUser.CreatedDate">
            <summary>
            Created date
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.BasicUser.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.BasicUser.Sid">
            <summary>
            SID
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.BasicUser.CanChangePassword">
            <summary>
            Can change password
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.BasicUser.ChangePasswordBasicUser(System.Security.SecureString)">
            <summary>
            Change basic user password
            </summary>
            <param name="password">Password</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.BasicUser.ChangePasswordBasicUser">
            <summary>
            Change basic user password
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.BasicUser.ChangePasswordBasicUser(System.String)">
            <summary>
            Change basic user password <br />
            Please consider using secure version taking SecureString instead
            </summary>
            <param name="password">Password</param>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ChangePasswordBasicUserServerTask">
            <summary>
            Change basic user password
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ChangePasswordBasicUserServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ChangePasswordBasicUserServerTask.SecurePassword">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ChangePasswordBasicUserServerTask.Password">
            <summary>
            Password <br />
            Please consider using secure version <see cref="P:VideoOS.Platform.ConfigurationItems.ChangePasswordBasicUserServerTask.SecurePassword"/> instead
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.BasicUserFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.BasicUserFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="basicUserFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.BasicUserFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.BasicUserFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.BasicUserFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.BasicUserFolder.BasicUsers">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.BasicUserFolder.AddBasicUser(System.String,System.String,System.Security.SecureString)">
            <summary>
            Add new basic user
            </summary>
            <param name="name">Name</param>
            <param name="description">Description</param>
            <param name="password">Password</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.BasicUserFolder.AddBasicUser">
            <summary>
            Add new basic user
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.BasicUserFolder.RemoveBasicUser(System.String)">
            <summary>
            Remove basic user
            </summary>
            <param name="itemSelection">Remove basic user</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.BasicUserFolder.RemoveBasicUser">
            <summary>
            Remove basic user
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.BasicUserFolder.AddBasicUser(System.String,System.String,System.String)">
            <summary>
            Add new basic user <br />
            Please consider using secure version taking SecureString instead
            </summary>
            <param name="name">Name</param>
            <param name="description">Description</param>
            <param name="password">Password</param>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddBasicUserServerTask">
            <summary>
            Add new basic user
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddBasicUserServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddBasicUserServerTask.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddBasicUserServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddBasicUserServerTask.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddBasicUserServerTask.CanChangePassword">
            <summary>
            Can change password
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddBasicUserServerTask.SecurePassword">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddBasicUserServerTask.Password">
            <summary>
            Password <br />
            Please consider using secure version <see cref="P:VideoOS.Platform.ConfigurationItems.AddBasicUserServerTask.SecurePassword"/> instead
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveBasicUserServerTask">
            <summary>
            Remove basic user
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveBasicUserServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveBasicUserServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveBasicUserServerTask.ItemSelection">
            <summary>
            Remove basic user. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.Camera">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Camera.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="camera">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Camera.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Camera.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.ClientSettingsFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.CustomPropertiesFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.DeviceDriverSettingsFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.MotionDetectionFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.PrivacyProtectionFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.PtzPresetFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.StreamFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.Enabled">
            <summary>
            Indicate if this item is active in the VMS system, e.g. enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.Channel">
            <summary>
            Channel
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.CreatedDate">
            <summary>
            Created date
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.GisPoint">
            <summary>
            Device position. Position of device in latitude, longitude and altitude.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.ShortName">
            <summary>
            Short name. Used as name in the user interface where appropriate.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.Icon">
            <summary>
            Icon identifier. The relevant device icon to show.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.CoverageDirection">
            <summary>
            Direction. Indicate the viewing direction of the device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.CoverageDepth">
            <summary>
            Depth. Indicate the viewing depth of the device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.CoverageFieldOfView">
            <summary>
            Field of view. Indicate the field of view of the device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.RecordingFramerate">
            <summary>
            Recording frame rate
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.RecordKeyframesOnly">
            <summary>
            Record keyframes only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.RecordOnRelatedDevices">
            <summary>
            Record on related devices
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.RecordingEnabled">
            <summary>
            Recording enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.PrebufferEnabled">
            <summary>
            Prebuffer enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.PrebufferInMemory">
            <summary>
            Prebuffer in memory
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.PrebufferSeconds">
            <summary>
            Prebuffer seconds
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.EdgeStorageEnabled">
            <summary>
            Remote recording enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.EdgeStoragePlaybackEnabled">
            <summary>
            Remote recording playback
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.ManualRecordingTimeoutEnabled">
            <summary>
            Manual recording timeout enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.ManualRecordingTimeoutMinutes">
            <summary>
            Manual recording timeout in minutes
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Camera.RecordingStorage">
            <summary>
            Path. Contains the path to the related recording storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Camera.GetOtherRecordingServersWithMedia">
            <summary>
            Get recording servers with media
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Camera.GetOtherRecordingStoragesWithMedia">
            <summary>
            Get recording storages with media
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Camera.RetrieveEdgeStorage(System.DateTime,System.DateTime)">
            <summary>
            Retrieve recordings from edge storage
            </summary>
            <param name="startTime">Start time</param>
            <param name="endTime">End time</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Camera.RetrieveEdgeStorage">
            <summary>
            Retrieve recordings from edge storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Camera.TruncateStorage">
            <summary>
            Delete all recordings for device on storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Camera.TruncateStorageOnOtherRecordingServer(System.String)">
            <summary>
            Delete all recordings for device on another recording server
            </summary>
            <param name="itemSelection">Select recording server</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Camera.TruncateStorageOnOtherRecordingServer">
            <summary>
            Delete all recordings for device on another recording server
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Camera.ChangeDeviceRecordingStorage(System.String,System.Boolean)">
            <summary>
            Change storage for device
            </summary>
            <param name="itemSelection">Select a storage to move to</param>
            <param name="moveData">Move data on device</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Camera.ChangeDeviceRecordingStorage">
            <summary>
            Change storage for device
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Camera.ChangeSecurityPermissions(System.String)">
            <summary>
            Edit permissions
            </summary>
            <param name="userPath">User path</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Camera.ChangeSecurityPermissions">
            <summary>
            Edit permissions
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RetrieveEdgeStorageServerTask">
            <summary>
            Retrieve recordings from edge storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RetrieveEdgeStorageServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RetrieveEdgeStorageServerTask.StartTime">
            <summary>
            Start time
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RetrieveEdgeStorageServerTask.EndTime">
            <summary>
            End time
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.TruncateStorageOnOtherRecordingServerServerTask">
            <summary>
            Delete all recordings for device on another recording server
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TruncateStorageOnOtherRecordingServerServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TruncateStorageOnOtherRecordingServerServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TruncateStorageOnOtherRecordingServerServerTask.ItemSelection">
            <summary>
            Select recording server. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ChangeDeviceRecordingStorageServerTask">
            <summary>
            Change storage for device
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ChangeDeviceRecordingStorageServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ChangeDeviceRecordingStorageServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ChangeDeviceRecordingStorageServerTask.ItemSelection">
            <summary>
            Select a storage to move to. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ChangeDeviceRecordingStorageServerTask.MoveData">
            <summary>
            Move data on device
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ChangeSecurityPermissionsServerTask">
            <summary>
            Edit permissions
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ChangeSecurityPermissionsServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ChangeSecurityPermissionsServerTask.UserPath">
            <summary>
            User path. User path format: /User[SID]. 'SID' can contain role ID.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.CameraFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="cameraFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.CameraFolder.Cameras">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraFolder.AddDeviceGroupMember(System.String)">
            <summary>
            Add device
            </summary>
            <param name="itemSelection">Select Camera</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraFolder.AddDeviceGroupMember">
            <summary>
            Add device
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraFolder.RemoveDeviceGroupMember(System.String)">
            <summary>
            Remove device
            </summary>
            <param name="itemSelection">Select device or group to remove</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraFolder.RemoveDeviceGroupMember">
            <summary>
            Remove device
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddDeviceGroupMemberServerTask">
            <summary>
            Add device
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddDeviceGroupMemberServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddDeviceGroupMemberServerTask.ItemSelection">
            <summary>
            Select Camera
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveDeviceGroupMemberServerTask">
            <summary>
            Remove device
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveDeviceGroupMemberServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveDeviceGroupMemberServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveDeviceGroupMemberServerTask.ItemSelection">
            <summary>
            Select device or group to remove. Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.CameraGroup">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraGroup.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="cameraGroup">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraGroup.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraGroup.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.CameraGroup.CameraFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.CameraGroup.CameraGroupFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.CameraGroup.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.CameraGroup.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.CameraGroup.BuiltIn">
            <summary>
            Built-in group
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.CameraGroupFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraGroupFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="cameraGroupFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraGroupFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraGroupFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraGroupFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.CameraGroupFolder.CameraGroups">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraGroupFolder.AddDeviceGroup(System.String,System.String)">
            <summary>
            Create new group
            </summary>
            <param name="groupName">Group name</param>
            <param name="groupDescription">Group description</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraGroupFolder.AddDeviceGroup">
            <summary>
            Create new group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraGroupFolder.RemoveDeviceGroup(System.Boolean,System.String)">
            <summary>
            Delete group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraGroupFolder.RemoveDeviceGroup">
            <summary>
            Delete group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CameraGroupFolder.RemoveDeviceGroup(System.String)">
            <summary>
            Delete group
            </summary>
            <param name="itemSelection">Select device or group to remove</param>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddDeviceGroupServerTask">
            <summary>
            Create new group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddDeviceGroupServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddDeviceGroupServerTask.GroupName">
            <summary>
            Group name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddDeviceGroupServerTask.GroupDescription">
            <summary>
            Group description
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveDeviceGroupServerTask">
            <summary>
            Delete group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveDeviceGroupServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveDeviceGroupServerTask.RemoveMembers">
            <summary>
            Remove all members
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveDeviceGroupServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveDeviceGroupServerTask.ItemSelection">
            <summary>
            Select device or group to remove. Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ClientSettings">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ClientSettings.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="clientSettings">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ClientSettings.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ClientSettings.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ClientSettings.Related">
            <summary>
            Related device paths. Comma separated list of device paths
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ClientSettings.Shortcut">
            <summary>
            Shortcut. Shortcut number to be used in clients
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ClientSettingsFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ClientSettingsFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="clientSettingsFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ClientSettingsFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ClientSettingsFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ClientSettingsFolder.ClientSettings">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ConfigurationService">
            <summary>
            Class used to call methods on the ConfigurationAPI
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ConfigurationService.GetItem(VideoOS.Platform.ServerId,System.String)">
            <summary>
            
            </summary>
            <param name="serverId"></param>
            <param name="path"></param>
            <exception cref="T:System.ArgumentException">When no LoginSettings exists for the ServerId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ConfigurationService.GetChildren(VideoOS.Platform.ServerId,System.String)">
            <summary>
            Get the child items to the ConfigurationItem identified with the path.
            </summary>
            <param name="serverId"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ConfigurationService.GetTranslations(VideoOS.Platform.ServerId,System.String)">
            <summary>
            Return all translations for a given language
            </summary>
            <param name="serverId"></param>
            <param name="languageId"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.CustomProperties">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CustomProperties.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="customProperties">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CustomProperties.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CustomProperties.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.CustomPropertiesFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CustomPropertiesFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="customPropertiesFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CustomPropertiesFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CustomPropertiesFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.CustomPropertiesFolder.CustomProperties">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.DetectedDeviceCredentials">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DetectedDeviceCredentials.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            Construct the class from serverId of the Management owning the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server owning the configuration</param>
            <param name="detectedDeviceCredentials">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DetectedDeviceCredentials.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
            
             Construct the class from serverId of the Management owning the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server owning the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represent a number of possible exceptions, possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.DetectedDeviceCredentials.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.DetectedDeviceCredentials.UserName">
            <summary>
            Device user name, User name with which to attempt connection to the detected devices
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.DetectedDeviceCredentials.Password">
            <summary>
            Device password, Password with which to attempt connection to the detected devices
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.DetectedDeviceCredentialsFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DetectedDeviceCredentialsFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="detectedDeviceCredentialsFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DetectedDeviceCredentialsFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DetectedDeviceCredentialsFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DetectedDeviceCredentialsFolder.AddDetectedDeviceCredential(System.String,System.Security.SecureString)">
            <summary>
            Add new credentials to the auto-detect configuration
            </summary>
            <param name="userName">Device user name</param>
            <param name="password">Device password</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DetectedDeviceCredentialsFolder.AddDetectedDeviceCredential">
            <summary>
            Add new credentials to the auto-detect configuration
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DetectedDeviceCredentialsFolder.RemoveDetectedDeviceCredential(System.String)">
            <summary>
            Remove the selected credential from the auto-detect configuration
            </summary>
            <param name="itemSelection">Remove credential</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DetectedDeviceCredentialsFolder.RemoveDetectedDeviceCredential">
            <summary>
            Remove the selected credential from the auto-detect configuration
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DetectedDeviceCredentialsFolder.AddDetectedDeviceCredential(System.String,System.String)">
            <summary>
            Add new credentials to the auto-detect configuration <br />
            Please consider using secure version taking SecureString instead
            </summary>
            <param name="userName">Device user name</param>
            <param name="password">Device password</param>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddDetectedDeviceCredentialServerTask">
            <summary>
            Add new credentials to the auto-detect configuration
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddDetectedDeviceCredentialServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddDetectedDeviceCredentialServerTask.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddDetectedDeviceCredentialServerTask.UserName">
            <summary>
            Device user name. User name with which to attempt connection to the detected devices
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddDetectedDeviceCredentialServerTask.SecurePassword">
            <summary>
            Device password. Password with which to attempt connection to the detected devices
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddDetectedDeviceCredentialServerTask.Password">
            <summary>
            Device password. Password with which to attempt connection to the detected devices <br />
            Please consider using secure version <see cref="P:VideoOS.Platform.ConfigurationItems.AddDetectedDeviceCredentialServerTask.SecurePassword"/> instead
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveDetectedDeviceCredentialServerTask">
            <summary>
            Remove the selected credential from the auto-detect configuration
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveDetectedDeviceCredentialServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveDetectedDeviceCredentialServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveDetectedDeviceCredentialServerTask.ItemSelection">
            <summary>
            Remove credential. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.DeviceDriverSettings">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DeviceDriverSettings.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="deviceDriverSettings">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DeviceDriverSettings.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DeviceDriverSettings.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.DeviceDriverSettings.DeviceDriverSettingsChildItem">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.DeviceDriverSettings.PTZChildItem">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.DeviceDriverSettings.StreamChildItems">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.DeviceDriverSettingsChildItem">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DeviceDriverSettingsChildItem.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem,VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="deviceDriverSettings">The ConfigurationItem returned from elsewhere</param>
            <param name="parentWrapper"></param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DeviceDriverSettingsChildItem.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DeviceDriverSettingsChildItem.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.DeviceDriverSettingsChildItem.Properties">
            <summary>
            Contains a variable set of properties.<br/>
            All properties are returned as string, and set as strings.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.DeviceDriverSettingsFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DeviceDriverSettingsFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="deviceDriverSettingsFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DeviceDriverSettingsFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DeviceDriverSettingsFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.DeviceDriverSettingsFolder.DeviceDriverSettings">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.Factory">
            <summary>
            Contains a set of methods for creating paths and conversions
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ConfigurationItems.Factory.KindToItemType">
            <summary>
            Table converting from Kind to configurationAPI ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Factory.TraceCommunication">
            <summary>
            Set this to true to trace calls to the server, or configure MIPSettings.xml file
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Factory.CreatePath(System.String)">
            <summary>
            Create path for top level ItemTypes
            </summary>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Factory.CreatePath(System.String,System.Guid)">
            <summary>
            Creates a path for an individual ConfigurationItem
            
            This path can be used to call the GetItem and GetChildren methods
            </summary>
            <param name="itemType"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Factory.CreatePath(System.String,System.String)">
            <summary>
            Creates a path for an individual ConfigurationItem
            
            This path can be used to call the GetItem and GetChildren methods
            </summary>
            <param name="itemType"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Factory.CreateFolderPath(System.String,System.Guid,System.String)">
            <summary>
            Creates a path for a child folder for a given itemtype
            </summary>
            <param name="itemType"></param>
            <param name="id"></param>
            <param name="folderItemType"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Factory.CreateFolderPath(System.String,System.String,System.String)">
            <summary>
            Creates a path for a child folder for a given itemtype
            </summary>
            <param name="itemType"></param>
            <param name="id"></param>
            <param name="folderItemType"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Factory.CreatePath(VideoOS.Platform.FQID)">
            <summary>
            Creates a path from the FQID of an item.  
            Notice that several Item's does not exists as ConfigurationItem, and will return null.
            </summary>
            <param name="fqid"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Factory.GetItemTypeFromKind(System.Guid)">
            <summary>
            Gets the ItemType from a Kind
            </summary>
            <param name="kind">The Kind</param>
            <returns>The ItemType - null if no type exists</returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Factory.GetIdFromPath(System.String)">
            <summary>
            Will return the ID specified in the provided path or null if path is not valid
            </summary>
            <param name="path">The path from which to get the ID</param>
            <returns>ID specified in the provided path or null if path is not valid</returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Factory.ConvertMIPItemToItem(VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            Convert a MIPItem to an Item
            </summary>
            <param name="configItem"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Factory.FillMIPItemInItem(VideoOS.Platform.ConfigurationItems.MIPItem,VideoOS.Platform.Item)">
            <summary>
            Fill in content of a MIPItem into existing Item
            </summary>
            <param name="mipItem"></param>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Factory.IsConfigurationAPISupported(VideoOS.Platform.ServerId)">
            <summary>
            Return true if connnected VMS system supported the ConfigurationAPI
            </summary>
            <param name="serverId"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Factory.IsLoginEstablished(VideoOS.Platform.ServerId)">
            <summary>
            Check to see if a Login to the VMS server has been performed with success.
            </summary>
            <param name="serverId"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Factory.IsItemTypeSupported(VideoOS.Platform.ServerId,System.String)">
            <summary>
            Helper function to identify if a given VMS server supports a given ItemType.
            </summary>
            <param name="serverId"></param>
            <param name="itemType"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.GenericEvent">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEvent.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="genericEvent">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEvent.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEvent.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEvent.Enabled">
            <summary>
            Indicate if this item is active in the VMS system, e.g. enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEvent.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEvent.DataSourceValues">
            <summary>
            A list of valid names/values for the DataSource property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEvent.DataSource">
            <summary>
            Data source. Valid values are available in the DataSourceValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEvent.Expression">
            <summary>
            Expression
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEvent.ExpressionTypeValues">
            <summary>
            A list of valid names/values for the ExpressionType property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEvent.ExpressionType">
            <summary>
            Expression type. Valid values are available in the ExpressionTypeValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEvent.Priority">
            <summary>
            Priority
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEvent.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.GenericEventDataSource">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventDataSource.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="genericEventDataSource">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventDataSource.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventDataSource.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEventDataSource.Enabled">
            <summary>
            Indicate if this item is active in the VMS system, e.g. enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEventDataSource.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEventDataSource.DataSourcePort">
            <summary>
            Port
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEventDataSource.DataSourceSeparator">
            <summary>
            Separator bytes
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEventDataSource.DataSourceEncoding">
            <summary>
            Encoding (code page)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEventDataSource.DataSourceLog">
            <summary>
            Write to log
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEventDataSource.DataSourceEchoValues">
            <summary>
            A list of valid names/values for the DataSourceEcho property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEventDataSource.DataSourceEcho">
            <summary>
            Echo type selector. Valid values are available in the DataSourceEchoValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEventDataSource.DataSourceAllowed">
            <summary>
            Allowed external IPv4 addresses
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEventDataSource.DataSourceAllowed6">
            <summary>
            Allowed external IPv6 addresses
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEventDataSource.DataSourceProtocolValues">
            <summary>
            A list of valid names/values for the DataSourceProtocol property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEventDataSource.DataSourceProtocol">
            <summary>
            Protocol type(s). Valid values are available in the DataSourceProtocolValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEventDataSource.DataSourceAddressFamilyValues">
            <summary>
            A list of valid names/values for the DataSourceAddressFamily property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEventDataSource.DataSourceAddressFamily">
            <summary>
            IP address family. Valid values are available in the DataSourceAddressFamilyValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.GenericEventDataSourceFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventDataSourceFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="genericEventDataSourceFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventDataSourceFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventDataSourceFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventDataSourceFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEventDataSourceFolder.GenericEventDataSources">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventDataSourceFolder.AddGenericEventDataSource(System.String,System.Int32,System.String,System.Int32,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add generic event data source
            </summary>
            <param name="name">Name</param>
            <param name="dataSourcePort">Port</param>
            <param name="dataSourceSeparator">Separator bytes</param>
            <param name="dataSourceEncoding">Encoding (code page)</param>
            <param name="dataSourceLog">Write to log</param>
            <param name="dataSourceEcho">Echo type selector</param>
            <param name="dataSourceAllowed">Allowed external IPv4 addresses</param>
            <param name="dataSourceAllowed6">Allowed external IPv6 addresses</param>
            <param name="dataSourceProtocol">Protocol type(s)</param>
            <param name="dataSourceAddressFamily">IP address family</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventDataSourceFolder.AddGenericEventDataSource">
            <summary>
            Add generic event data source
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventDataSourceFolder.RemoveGenericEventDataSource(System.String)">
            <summary>
            Remove generic event data source
            </summary>
            <param name="itemSelection">Select data source to remove</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventDataSourceFolder.RemoveGenericEventDataSource">
            <summary>
            Remove generic event data source
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddGenericEventDataSourceServerTask">
            <summary>
            Add generic event data source
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddGenericEventDataSourceServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventDataSourceServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventDataSourceServerTask.DataSourcePort">
            <summary>
            Port
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventDataSourceServerTask.DataSourceSeparator">
            <summary>
            Separator bytes
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventDataSourceServerTask.DataSourceEncoding">
            <summary>
            Encoding (code page)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventDataSourceServerTask.DataSourceLog">
            <summary>
            Write to log
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventDataSourceServerTask.DataSourceEchoValues">
            <summary>
            A list of valid names/values for the DataSourceEcho property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventDataSourceServerTask.DataSourceEcho">
            <summary>
            Echo type selector. Valid values are available in the DataSourceEchoValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventDataSourceServerTask.DataSourceAllowed">
            <summary>
            Allowed external IPv4 addresses
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventDataSourceServerTask.DataSourceAllowed6">
            <summary>
            Allowed external IPv6 addresses
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventDataSourceServerTask.DataSourceProtocolValues">
            <summary>
            A list of valid names/values for the DataSourceProtocol property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventDataSourceServerTask.DataSourceProtocol">
            <summary>
            Protocol type(s). Valid values are available in the DataSourceProtocolValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventDataSourceServerTask.DataSourceAddressFamilyValues">
            <summary>
            A list of valid names/values for the DataSourceAddressFamily property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventDataSourceServerTask.DataSourceAddressFamily">
            <summary>
            IP address family. Valid values are available in the DataSourceAddressFamilyValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveGenericEventDataSourceServerTask">
            <summary>
            Remove generic event data source
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveGenericEventDataSourceServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveGenericEventDataSourceServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveGenericEventDataSourceServerTask.ItemSelection">
            <summary>
            Select data source to remove. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.GenericEventFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="genericEventFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GenericEventFolder.GenericEvents">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventFolder.AddGenericEvent(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Add generic event
            </summary>
            <param name="name">Name</param>
            <param name="dataSource">Data source</param>
            <param name="expression">Expression</param>
            <param name="expressionType">Expression type</param>
            <param name="priority">Priority</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventFolder.AddGenericEvent">
            <summary>
            Add generic event
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventFolder.RemoveGenericEvent(System.String)">
            <summary>
            Remove generic event
            </summary>
            <param name="itemSelection">Select generic event to remove</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GenericEventFolder.RemoveGenericEvent">
            <summary>
            Remove generic event
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddGenericEventServerTask">
            <summary>
            Add generic event
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddGenericEventServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventServerTask.DataSourceValues">
            <summary>
            A list of valid names/values for the DataSource property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventServerTask.DataSource">
            <summary>
            Data source. Valid values are available in the DataSourceValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventServerTask.Expression">
            <summary>
            Expression
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventServerTask.ExpressionTypeValues">
            <summary>
            A list of valid names/values for the ExpressionType property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventServerTask.ExpressionType">
            <summary>
            Expression type. Valid values are available in the ExpressionTypeValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGenericEventServerTask.Priority">
            <summary>
            Priority
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveGenericEventServerTask">
            <summary>
            Remove generic event
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveGenericEventServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveGenericEventServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveGenericEventServerTask.ItemSelection">
            <summary>
            Select generic event to remove. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.GisMapLocation">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GisMapLocation.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="gisMapLocation">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GisMapLocation.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GisMapLocation.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GisMapLocation.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GisMapLocation.Scale">
            <summary>
            Scale. Defines how to scale map when going to this location. A value of 2 million will show approximately an area of 300x300 kilometers / 200x200 miles.  A value of 2000 will show approximately a city block.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GisMapLocation.Color">
            <summary>
            Color. Define the color of the marker. Value is a string formatted with a leading hash sign. Default value is a red marked with value #FFFF5611
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GisMapLocation.PositionX">
            <summary>
            Longitude. Contains the longitude value as a double, e.g. -74.0 for New York and is culture invariant always using decimal point.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GisMapLocation.PositionY">
            <summary>
            Latitude. Contains the latitude value as a double, e.g. 40.716 for New York, and is culture invariant always using decimal point.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.GisMapLocationFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GisMapLocationFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="gisMapLocationFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GisMapLocationFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GisMapLocationFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GisMapLocationFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GisMapLocationFolder.GisMapLocations">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GisMapLocationFolder.AddGisMapLocation(System.String,System.Double,System.String,System.Double,System.Double)">
            <summary>
            Add GIS map location
            </summary>
            <param name="name">Name</param>
            <param name="scale">Scale</param>
            <param name="color">Color</param>
            <param name="positionX">Longitude</param>
            <param name="positionY">Latitude</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GisMapLocationFolder.AddGisMapLocation">
            <summary>
            Add GIS map location
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GisMapLocationFolder.RemoveGisMapLocation(System.String)">
            <summary>
            Remove GIS map location
            </summary>
            <param name="itemSelection">GIS map location to remove</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.GisMapLocationFolder.RemoveGisMapLocation">
            <summary>
            Remove GIS map location
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddGisMapLocationServerTask">
            <summary>
            Add GIS map location
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddGisMapLocationServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGisMapLocationServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGisMapLocationServerTask.Scale">
            <summary>
            Scale. Defines how to scale map when going to this location. A value of 2 million will show approximately an area of 300x300 kilometers / 200x200 miles.  A value of 2000 will show approximately a city block.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGisMapLocationServerTask.Color">
            <summary>
            Color. Define the color of the marker. Value is a string formatted with a leading hash sign. Default value is a red marked with value #FFFF5611
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGisMapLocationServerTask.PositionX">
            <summary>
            Longitude. Contains the longitude value as a double, e.g. -74.0 for New York and is culture invariant always using decimal point.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddGisMapLocationServerTask.PositionY">
            <summary>
            Latitude. Contains the latitude value as a double, e.g. 40.716 for New York, and is culture invariant always using decimal point.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveGisMapLocationServerTask">
            <summary>
            Remove GIS map location
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveGisMapLocationServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveGisMapLocationServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveGisMapLocationServerTask.ItemSelection">
            <summary>
            GIS map location to remove. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.Hardware">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Hardware.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="hardware">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Hardware.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Hardware.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Hardware.CameraFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Hardware.CustomPropertiesFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Hardware.HardwareDriverSettingsFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Hardware.InputEventFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Hardware.MetadataFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Hardware.MicrophoneFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Hardware.OutputFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Hardware.SpeakerFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Hardware.Enabled">
            <summary>
            Indicate if this item is active in the VMS system, e.g. enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Hardware.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Hardware.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Hardware.UserName">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Hardware.Model">
            <summary>
            Model
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Hardware.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Hardware.HardwareDriverPath">
            <summary>
            Path. Contains the name of the device driver
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Hardware.ReadPasswordHardware">
            <summary>
            Read hardware password
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Hardware.ChangePasswordHardware(System.Security.SecureString)">
            <summary>
            Change hardware password
            </summary>
            <param name="password">Password</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Hardware.ChangePasswordHardware">
            <summary>
            Change hardware password
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Hardware.MoveHardware(System.String)">
            <summary>
            Move hardware
            </summary>
            <param name="destinationRecordingServer">Destination recording server</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Hardware.MoveHardware">
            <summary>
            Move hardware
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Hardware.ChangePasswordHardware(System.String)">
            <summary>
            Change hardware password <br />
            Please consider using secure version taking SecureString instead
            </summary>
            <param name="password">Password</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Hardware.UpdateHardware">
            <summary>
            Update hardware - detection step
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Hardware.UpdateHardware(System.Int64)">
            <summary>
            Update hardware. When sessionDataId is zero - performs a detection, 
            otherwise the sessionDataId is set to the value returned in detection step - and will apply the detected changes.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ChangePasswordHardwareServerTask">
            <summary>
            Change hardware password
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ChangePasswordHardwareServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ChangePasswordHardwareServerTask.SecurePassword">
            <summary>
            Password. Password
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ChangePasswordHardwareServerTask.Password">
            <summary>
            Password <br />
            Please consider using secure version <see cref="P:VideoOS.Platform.ConfigurationItems.ChangePasswordHardwareServerTask.SecurePassword"/> instead
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MoveHardwareServerTask">
            <summary>
            Move hardware
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MoveHardwareServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MoveHardwareServerTask.DestinationRecordingServerValues">
            <summary>
            A list of valid names/values for the DestinationRecordingServer property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MoveHardwareServerTask.DestinationRecordingServer">
            <summary>
            Destination recording server. The recording server that the hardware device is moved to.. Valid values are available in the DestinationRecordingServerValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.UpdateHardwareServerTask">
            <summary>
            Contains the result from a Hardware.UpdateHardware() call.
            
            Return value from the detection step will be a dataSessionId and a list of devices with detected changes
            Notice that Path value is incorrect for ADDED devices in this step. (Contains Guid.Empty)
            
            Return value from the apply step will be a list of the changed devices/items
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UpdateHardwareServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.UpdateHardwareServerTask.SessionDataId">
            <summary>
            The ID is returned as result for 1. time call, and need to be used for 2. time call (The apply step)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.UpdateHardwareServerTask.HardwarePath">
            <summary>
            Path of hardware beging updated
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.UpdateHardwareServerTask.HardwareName">
            <summary>
            Name of hardware being updated
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.UpdateHardwareServerTask.AnyEventsUpdated">
            <summary>
            Indicate if any events on the hardware has changed
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.UpdateHardwareServerTask.UpdateHardwareDetails">
            <summary>
            Contains details for each device/item on the hardware
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.UpdateHardwareDetail">
            <summary>
            Contains the details for each device/item on the hardware, about what has changed
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UpdateHardwareDetail.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Internal constructor
            </summary>
            <param name="path"></param>
            <param name="name"></param>
            <param name="itemType"></param>
            <param name="change"></param>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.UpdateHardwareDetail.Path">
            <summary>
            Path for item
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.UpdateHardwareDetail.Name">
            <summary>
            Name of the item
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.UpdateHardwareDetail.ItemType">
            <summary>
            The ItemType of the item, e.g. "Camera"
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.UpdateHardwareDetail.Change">
            <summary>
            Contains what happpened for this item: UNCHANGED, DELETED, ADDED, UPDATED
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.HardwareDriver">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareDriver.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="hardwareDriver">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareDriver.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareDriver.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareDriver.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareDriver.GroupName">
            <summary>
            Driver group name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareDriver.Number">
            <summary>
            Driver number
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareDriver.UseCount">
            <summary>
            Number of hardware using driver
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareDriver.DriverVersion">
            <summary>
            Version
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareDriver.DriverRevision">
            <summary>
            Revision
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareDriver.DriverTypeValues">
            <summary>
            A list of valid names/values for the DriverType property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareDriver.DriverType">
            <summary>
            Driver type. Valid values are available in the DriverTypeValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.HardwareDriverFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareDriverFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="hardwareDriverFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareDriverFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareDriverFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareDriverFolder.HardwareDrivers">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.HardwareDriverSettings">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareDriverSettings.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="hardwareDriverSettings">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareDriverSettings.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareDriverSettings.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareDriverSettings.HardwareDriverSettingsChildItems">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareDriverSettings.PTZChildItems">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.HardwareDriverSettingsChildItem">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareDriverSettingsChildItem.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem,VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="hardwareDriverSettings">The ConfigurationItem returned from elsewhere</param>
            <param name="parentWrapper"></param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareDriverSettingsChildItem.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareDriverSettingsChildItem.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareDriverSettingsChildItem.Properties">
            <summary>
            Contains a variable set of properties.<br/>
            All properties are returned as string, and set as strings.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.HardwareDriverSettingsFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareDriverSettingsFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="hardwareDriverSettingsFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareDriverSettingsFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareDriverSettingsFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareDriverSettingsFolder.HardwareDriverSettings">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.HardwareFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="hardwareFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareFolder.Hardwares">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareFolder.DeleteHardware(System.String)">
            <summary>
            Delete hardware
            </summary>
            <param name="itemSelection">Delete hardware</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareFolder.DeleteHardware">
            <summary>
            Delete hardware
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.DeleteHardwareServerTask">
            <summary>
            Delete hardware
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DeleteHardwareServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.DeleteHardwareServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.DeleteHardwareServerTask.ItemSelection">
            <summary>
            Delete hardware. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.IConfigurationChildItem">
            <summary>
            Contains fields relevant for a ConfiguratonItem with category = "ChildItem"
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.IConfigurationChildItem.#ctor(VideoOS.Platform.ServerId,System.String)">
            <summary>
            
            </summary>
            <param name="serverId"></param>
            <param name="path"></param>
            <exception cref="T:System.ArgumentException">When LoginSettings not found for serverId</exception>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When server not found for serverId because null or incorrect server type</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.IConfigurationChildItem.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem,VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper)">
            <summary>
            
            </summary>
            <param name="serverId"></param>
            <param name="configurationItem"></param>
            <param name="parentWrapper"></param>
            <exception cref="T:System.ArgumentException">When LoginSettings not found for serverId</exception>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When server not found for serverId because null or incorrect server type</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.IConfigurationChildItem.ServerId">
            <summary>
            Contains the ServerId of the Management Server holding this item
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.IConfigurationChildItem.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.IConfigurationChildItem.DisplayName">
            <summary>
            Name of this ConfigurationItem in user readable format.  Usually the same as property with key = "Name".
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.IConfigurationChildItem.Path">
            <summary>
            The identification of this item.  <br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.IConfigurationChildItem.ParentPath">
            <summary>
            The path for the parent of this ConfigurationItem
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.IConfigurationChildItem.ItemCategory">
            <summary>
            Return the item category for this item. This can be used to understand how multiple items are fetched and saved together.
            Only ItemCategory == 'Item' can be saved.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.IConfigurationChildItem.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.IConfigurationChildItem.GetProperty(System.String)">
            <summary>
            Return a property value as string, if key is not found the return value will be null.
            </summary>
            <param name="key"></param>
            <returns>value or null</returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.IConfigurationChildItem.SetProperty(System.String,System.String)">
            <summary>
            Sets the value of a property (all is string format here)
            </summary>
            <param name="key"></param>
            <param name="content"></param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.IConfigurationChildItem.GetPropertyKeys">
            <summary>
            Get a collection of all available property keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.IConfigurationChildItem.GetValueTypeInfoList(System.String)">
            <summary>
            Get defined ValueTypeInfo for a given property.  If no ValueTypeInfo is available, an empty list is returned.
            </summary>
            <param name="propertyKey"></param>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.IConfigurationChildItem.ParentItemPath">
            <summary>
            Get hold of the next real parent path, e.g. skip any 'Folder' type parent.
            
            When called on a Camera, this method will return the path for the Hardware that contains the camera.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.IConfigurationChildItem.ToString">
            <summary>
            Display the 'DisplayName' is the default ToString() 
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.IConfigurationChildItem.EnsureManagementServerId(VideoOS.Platform.ServerId)">
            <summary>
            Get hold of the managerement Server's ServerId, when e.g. a cameras serverId is provided.
            </summary>
            <param name="serverId"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Utility.TryGetPropertyValue(System.Collections.Generic.IEnumerable{VideoOS.ConfigurationApi.ClientService.Property},System.String,System.String@)">
            <summary>
            Find the <see cref="T:VideoOS.ConfigurationApi.ClientService.Property"/> with the specified name .
            </summary>
            <param name="properties">The properties collection.</param>
            <param name="propertyName">The name of the property to find in the collection.</param>
            <param name="value">When this method returns, contains the value of the requested property, if the property is found; otherwise null.</param>
            <returns>true if the property collection contains an property with the specified name; otherwise, false.</returns>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.IConfigurationItem">
            <summary>
            Contains a wrapped instance of a ConfigurationItem 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.IConfigurationItem.Methods">
            <summary>
            The available methods for this class.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.IConfigurationItem.ExecuteMethod(System.String)">
            <summary>
            Execute the provided method.  The method id must be one of the defined values in the <see cref="P:VideoOS.Platform.ConfigurationItems.IConfigurationItem.Methods"/> property.
            </summary>
            <param name="methodId"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.IConfigurationItem.ClearChildrenCache">
            <summary>
            Clear the internal cache of children.  Can be used to force a new set of children to be 
            fetched from the server at next access.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.IConfigurationItem.ValidateItem">
            <summary>
            Validate the current content 
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.IConfigurationItem.Save">
            <summary>
            Will save all updated values to server.
            
            Can throw exception is values are invalid.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.IMIPItem">
            <summary>
            Interface for the MIPItem typed Configuration API
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.IMIPItem.Enabled">
            <summary>
            Indicate if this item is active in the VMS system, e.g. enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.IMIPItem.GisPoint">
            <summary>
            Gis Point
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.IMIPItem.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.IMIPItem.LastModified">
            <summary>
            LastModified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.IMIPItem.MIPItemFolder">
            <summary>
            Return the single folder item, that contains all child Items, regardless of Kind
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.IMIPItem.Properties">
            <summary>
            Contains a variable set of properties.<br /> 
            All properties are returned as string, and set as strings.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.IMIPItem.Save">
            <summary>
            Save the modifications to the server
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.InputEvent">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEvent.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="inputEvent">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEvent.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEvent.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEvent.CustomPropertiesFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEvent.DeviceDriverSettingsFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEvent.Enabled">
            <summary>
            Indicate if this item is active in the VMS system, e.g. enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEvent.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEvent.Channel">
            <summary>
            Channel
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEvent.CreatedDate">
            <summary>
            Created date
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEvent.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEvent.GisPoint">
            <summary>
            Device position. Position of device in latitude, longitude and altitude.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEvent.ShortName">
            <summary>
            Short name. Used as name in the user interface where appropriate.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEvent.Icon">
            <summary>
            Icon identifier. The relevant device icon to show.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEvent.CoverageDirection">
            <summary>
            Direction. Indicate the viewing direction of the device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEvent.CoverageDepth">
            <summary>
            Depth. Indicate the viewing depth of the device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEvent.CoverageFieldOfView">
            <summary>
            Field of view. Indicate the field of view of the device.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEvent.ChangeSecurityPermissions(System.String)">
            <summary>
            Edit permissions
            </summary>
            <param name="userPath">User path</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEvent.ChangeSecurityPermissions">
            <summary>
            Edit permissions
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.InputEventFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="inputEventFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEventFolder.InputEvents">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventFolder.AddDeviceGroupMember(System.String)">
            <summary>
            Add device
            </summary>
            <param name="itemSelection">Select Input</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventFolder.AddDeviceGroupMember">
            <summary>
            Add device
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventFolder.RemoveDeviceGroupMember(System.String)">
            <summary>
            Remove device
            </summary>
            <param name="itemSelection">Select device or group to remove</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventFolder.RemoveDeviceGroupMember">
            <summary>
            Remove device
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.InputEventGroup">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventGroup.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="inputEventGroup">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventGroup.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventGroup.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEventGroup.InputEventFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEventGroup.InputEventGroupFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEventGroup.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEventGroup.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEventGroup.BuiltIn">
            <summary>
            Built-in group
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.InputEventGroupFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventGroupFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="inputEventGroupFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventGroupFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventGroupFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventGroupFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.InputEventGroupFolder.InputEventGroups">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventGroupFolder.AddDeviceGroup(System.String,System.String)">
            <summary>
            Create new group
            </summary>
            <param name="groupName">Group name</param>
            <param name="groupDescription">Group description</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventGroupFolder.AddDeviceGroup">
            <summary>
            Create new group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventGroupFolder.RemoveDeviceGroup(System.Boolean,System.String)">
            <summary>
            Delete group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventGroupFolder.RemoveDeviceGroup">
            <summary>
            Delete group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.InputEventGroupFolder.RemoveDeviceGroup(System.String)">
            <summary>
            Delete group
            </summary>
            <param name="itemSelection">Select device or group to remove</param>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.Layout">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Layout.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="layout">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Layout.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Layout.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Layout.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Layout.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Layout.CreatedDate">
            <summary>
            Created date
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Layout.DefinitionXml">
            <summary>
            Definition (XML). XML defining the layout
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.LayoutFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LayoutFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="layoutFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LayoutFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LayoutFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.LayoutFolder.Layouts">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LayoutFolder.AddLayout(System.String,System.String,System.String)">
            <summary>
            Add layout
            </summary>
            <param name="name">Name</param>
            <param name="description">Description</param>
            <param name="definitionXml">Definition (XML)</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LayoutFolder.AddLayout">
            <summary>
            Add layout
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LayoutFolder.RemoveLayout(System.String)">
            <summary>
            Remove layout
            </summary>
            <param name="itemSelection">Layout to remove:</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LayoutFolder.RemoveLayout">
            <summary>
            Remove layout
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddLayoutServerTask">
            <summary>
            Add layout
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddLayoutServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddLayoutServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddLayoutServerTask.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddLayoutServerTask.DefinitionXml">
            <summary>
            Definition (XML). XML defining the layout
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveLayoutServerTask">
            <summary>
            Remove layout
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveLayoutServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveLayoutServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveLayoutServerTask.ItemSelection">
            <summary>
            Layout to remove:. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.LayoutGroupFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LayoutGroupFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="layoutGroupFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LayoutGroupFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LayoutGroupFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LayoutGroupFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.LayoutGroupFolder.LayoutGroups">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.LprMatchList">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="lprMatchList">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.LprMatchList.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.LprMatchList.TriggerEventList">
            <summary>
            The list of triggered events. Defines a list of events to trigger when match is detected. List is a comma separated set of Paths
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.LprMatchList.CustomFields">
            <summary>
            The semicolon separated list of names of custom fields
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.LprMatchList.RegistrationNumbers">
            <summary>
            The semicolon separated list of registration numbers
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdAddLprMatchList(System.String)">
            <summary>
            Add LPR match list
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdAddLprMatchList">
            <summary>
            Add LPR match list
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdRemoveLprMatchList(System.String)">
            <summary>
            Remove LPR match list
            </summary>
            <param name="id">Id</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdRemoveLprMatchList">
            <summary>
            Remove LPR match list
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdGetCustomFieldsForRegistrationNumber(System.String)">
            <summary>
            Get custom fields
            </summary>
            <param name="registrationNumber">Registration number</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdGetCustomFieldsForRegistrationNumber">
            <summary>
            Get custom fields
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdGetRegistrationNumbersInfo">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdAddOrEditRegistrationNumbersInfo(System.String)">
            <summary>
            Add or edit data for registration numbers
            </summary>
            <param name="registrationNumbers">Semicolon separated list of lists of data for registration numbers. Custom fields are separated with a comma</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdAddOrEditRegistrationNumbersInfo">
            <summary>
            Add or edit data for registration numbers
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdDeleteRegistrationNumbers(System.String)">
            <summary>
            Delete registration numbers
            </summary>
            <param name="registrationNumbers">Semicolon separated list of registration numbers</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdDeleteRegistrationNumbers">
            <summary>
            Delete registration numbers
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdDeleteAllRegistrationNumbers">
            <summary/>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.LprMatchList.CustomFieldsList">
            <summary>
            Gets or sets the list of names of custom fields.
            
            Always use setter to apply your changes, because just changing the collection obtained from the getter will not have any impact.
            
            Use this instead of <see cref="P:VideoOS.Platform.ConfigurationItems.LprMatchList.CustomFields"/> property, because it will escape/unescape the strings automatically
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.LprMatchList.RegistrationNumbersList">
            <summary>
            Gets all the registration numbers for this match list. This is not intended for any modification.
            
            Use this instead of <see cref="P:VideoOS.Platform.ConfigurationItems.LprMatchList.RegistrationNumbers"/> property, because it will unescape the strings automatically
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdGetRegistrationNumbersInfoWithResult">
            <summary>
            Gets all registration numbers data, including custom fields data. 
            </summary>
            <returns>Strongly typed result <see cref="T:VideoOS.Platform.ConfigurationItems.MethodIdGetRegistrationNumbersInfoResult" /></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdGetCustomFieldsForRegistrationNumberWithResult(System.String)">
            <summary>
            Gets the list of all custom fields data for a given registration number
            </summary>
            <param name="registrationNumber">Registration number</param>
            <returns>Strongly typed result <see cref="T:VideoOS.Platform.ConfigurationItems.MethodIdGetCustomFieldsForRegistrationNumberResult" /></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdAddOrEditRegistrationNumbersInfo(System.Collections.Generic.ICollection{System.Collections.Generic.ICollection{System.String}})">
            <summary>
            Adds or edits the registration numbers and custom fields data
            </summary>
            <param name="registrationNumbers">Contains collection of collections. 
            Each of the latter should be a collection of strings, that contains the registration number as the first element, and custom fields data for this registration number in the corresponding order in the next elements.
            
            If an existing registration number is provided, the info for it is being changed.
            
            If a new registration number is provided, it's added to the database
            </param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdDeleteRegistrationNumbers(System.Collections.Generic.ICollection{System.String})">
            <summary>
            Deletes the specified registration numbers.
            
            Use this instead of <see cref="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdDeleteRegistrationNumbers(System.String)"/> method, because it will escape and join the strings automatically
            </summary>
            <param name="registrationNumbers">
            The collection of registration numbers to delete
            </param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MethodIdAddLprMatchListServerTask">
            <summary>
            Add LPR match list
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MethodIdAddLprMatchListServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MethodIdAddLprMatchListServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MethodIdRemoveLprMatchListServerTask">
            <summary>
            Remove LPR match list
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MethodIdRemoveLprMatchListServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MethodIdRemoveLprMatchListServerTask.IdValues">
            <summary>
            A list of valid names/values for the Id property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MethodIdRemoveLprMatchListServerTask.Id">
            <summary>
            Id. . Valid values are available in the IdValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MethodIdGetCustomFieldsForRegistrationNumberServerTask">
            <summary>
            Get custom fields
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MethodIdGetCustomFieldsForRegistrationNumberServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MethodIdGetCustomFieldsForRegistrationNumberServerTask.RegistrationNumber">
            <summary>
            Registration number
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MethodIdGetCustomFieldsForRegistrationNumberServerTask.ExecuteWithResult">
            <summary>
            Executes the method with returning strongly-typed result <see cref="T:VideoOS.Platform.ConfigurationItems.MethodIdGetCustomFieldsForRegistrationNumberResult"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MethodIdAddOrEditRegistrationNumbersInfoServerTask">
            <summary>
            Add or edit data for registration numbers
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MethodIdAddOrEditRegistrationNumbersInfoServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MethodIdAddOrEditRegistrationNumbersInfoServerTask.RegistrationNumbers">
            <summary>
            Semicolon separated list of lists of data for registration numbers. Custom fields are separated with a comma
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MethodIdAddOrEditRegistrationNumbersInfoServerTask.RegistrationNumbersWithCustomFields">
            <summary>
            Sets the list of all the registration numbers with custom field names.
            
            Use this instead of <see cref="P:VideoOS.Platform.ConfigurationItems.MethodIdAddOrEditRegistrationNumbersInfoServerTask.RegistrationNumbers"/> property, because it will escape/unescape and format the strings automatically.
            
            For more information about the expected data format in this property <see cref="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdAddOrEditRegistrationNumbersInfo(System.Collections.Generic.ICollection{System.Collections.Generic.ICollection{System.String}})"/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MethodIdDeleteRegistrationNumbersServerTask">
            <summary>
            Delete registration numbers
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MethodIdDeleteRegistrationNumbersServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MethodIdDeleteRegistrationNumbersServerTask.RegistrationNumbers">
            <summary>
            Semicolon separated list of registration numbers
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MethodIdDeleteRegistrationNumbersServerTask.RegistrationNumbersList">
            <summary>
            Sets the list of all the registration numbers you wish to delete.
            
            Use this instead of <see cref="P:VideoOS.Platform.ConfigurationItems.MethodIdDeleteRegistrationNumbersServerTask.RegistrationNumbers"/> property, because it will escape/unescape and format the strings automatically
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.LprMatchListFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchListFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="lprMatchListFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchListFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchListFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchListFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.LprMatchListFolder.LprMatchLists">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchListFolder.MethodIdAddLprMatchList(System.String)">
            <summary>
            Add LPR match list
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchListFolder.MethodIdAddLprMatchList">
            <summary>
            Add LPR match list
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchListFolder.MethodIdRemoveLprMatchList(System.String)">
            <summary>
            Remove LPR match list
            </summary>
            <param name="id">Id</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LprMatchListFolder.MethodIdRemoveLprMatchList">
            <summary>
            Remove LPR match list
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MethodIdGetRegistrationNumbersInfoResult">
            <summary>
            The strongly typed result for <see cref="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdGetRegistrationNumbersInfoWithResult" />
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MethodIdGetRegistrationNumbersInfoResult.RegistrationNumbersWithCustomFields">
            <summary>
            Each inner list in this list contains a registration number as first element, and the related custom fields values as next elements.
            
            Can be null if the method call result is unsuccessfull
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MethodIdGetCustomFieldsForRegistrationNumberResult">
            <summary>
            The strongly typed result for <see cref="M:VideoOS.Platform.ConfigurationItems.LprMatchList.MethodIdGetCustomFieldsForRegistrationNumberWithResult(System.String)" />
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MethodIdGetCustomFieldsForRegistrationNumberResult.CustomFields">
            <summary>
            Contains the list of custom fields data
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.Metadata">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Metadata.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="metadata">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Metadata.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Metadata.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.ClientSettingsFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.CustomPropertiesFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.DeviceDriverSettingsFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.Enabled">
            <summary>
            Indicate if this item is active in the VMS system, e.g. enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.Channel">
            <summary>
            Channel
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.CreatedDate">
            <summary>
            Created date
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.GisPoint">
            <summary>
            Device position. Position of device in latitude, longitude and altitude.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.ShortName">
            <summary>
            Short name. Used as name in the user interface where appropriate.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.Icon">
            <summary>
            Icon identifier. The relevant device icon to show.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.CoverageDirection">
            <summary>
            Direction. Indicate the viewing direction of the device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.CoverageDepth">
            <summary>
            Depth. Indicate the viewing depth of the device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.CoverageFieldOfView">
            <summary>
            Field of view. Indicate the field of view of the device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.RecordingEnabled">
            <summary>
            Recording enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.PrebufferEnabled">
            <summary>
            Prebuffer enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.PrebufferInMemory">
            <summary>
            Prebuffer in memory
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.PrebufferSeconds">
            <summary>
            Prebuffer seconds
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.EdgeStorageEnabled">
            <summary>
            Remote recording enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.EdgeStoragePlaybackEnabled">
            <summary>
            Remote recording playback
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.ManualRecordingTimeoutEnabled">
            <summary>
            Manual recording timeout enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.ManualRecordingTimeoutMinutes">
            <summary>
            Manual recording timeout in minutes
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Metadata.RecordingStorage">
            <summary>
            Path. Contains the path to the related recording storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Metadata.GetOtherRecordingServersWithMedia">
            <summary>
            Get recording servers with media
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Metadata.GetOtherRecordingStoragesWithMedia">
            <summary>
            Get recording storages with media
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Metadata.RetrieveEdgeStorage(System.DateTime,System.DateTime)">
            <summary>
            Retrieve recordings from edge storage
            </summary>
            <param name="startTime">Start time</param>
            <param name="endTime">End time</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Metadata.RetrieveEdgeStorage">
            <summary>
            Retrieve recordings from edge storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Metadata.TruncateStorage">
            <summary>
            Delete all recordings for device on storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Metadata.TruncateStorageOnOtherRecordingServer(System.String)">
            <summary>
            Delete all recordings for device on another recording server
            </summary>
            <param name="itemSelection">Select recording server</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Metadata.TruncateStorageOnOtherRecordingServer">
            <summary>
            Delete all recordings for device on another recording server
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Metadata.ChangeDeviceRecordingStorage(System.String,System.Boolean)">
            <summary>
            Change storage for device
            </summary>
            <param name="itemSelection">Select a storage to move to</param>
            <param name="moveData">Move data on device</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Metadata.ChangeDeviceRecordingStorage">
            <summary>
            Change storage for device
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Metadata.ChangeSecurityPermissions(System.String)">
            <summary>
            Edit permissions
            </summary>
            <param name="userPath">User path</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Metadata.ChangeSecurityPermissions">
            <summary>
            Edit permissions
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MetadataFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="metadataFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MetadataFolder.Metadatas">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataFolder.AddDeviceGroupMember(System.String)">
            <summary>
            Add device
            </summary>
            <param name="itemSelection">Select Metadata</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataFolder.AddDeviceGroupMember">
            <summary>
            Add device
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataFolder.RemoveDeviceGroupMember(System.String)">
            <summary>
            Remove device
            </summary>
            <param name="itemSelection">Select device or group to remove</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataFolder.RemoveDeviceGroupMember">
            <summary>
            Remove device
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MetadataGroup">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataGroup.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="metadataGroup">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataGroup.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataGroup.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MetadataGroup.MetadataFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MetadataGroup.MetadataGroupFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MetadataGroup.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MetadataGroup.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MetadataGroup.BuiltIn">
            <summary>
            Built-in group
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MetadataGroupFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataGroupFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="metadataGroupFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataGroupFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataGroupFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataGroupFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MetadataGroupFolder.MetadataGroups">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataGroupFolder.AddDeviceGroup(System.String,System.String)">
            <summary>
            Create new group
            </summary>
            <param name="groupName">Group name</param>
            <param name="groupDescription">Group description</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataGroupFolder.AddDeviceGroup">
            <summary>
            Create new group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataGroupFolder.RemoveDeviceGroup(System.Boolean,System.String)">
            <summary>
            Delete group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataGroupFolder.RemoveDeviceGroup">
            <summary>
            Delete group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MetadataGroupFolder.RemoveDeviceGroup(System.String)">
            <summary>
            Delete group
            </summary>
            <param name="itemSelection">Select device or group to remove</param>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.Microphone">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Microphone.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="microphone">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Microphone.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Microphone.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.ClientSettingsFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.CustomPropertiesFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.DeviceDriverSettingsFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.Enabled">
            <summary>
            Indicate if this item is active in the VMS system, e.g. enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.Channel">
            <summary>
            Channel
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.CreatedDate">
            <summary>
            Created date
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.GisPoint">
            <summary>
            Device position. Position of device in latitude, longitude and altitude.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.ShortName">
            <summary>
            Short name. Used as name in the user interface where appropriate.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.Icon">
            <summary>
            Icon identifier. The relevant device icon to show.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.CoverageDirection">
            <summary>
            Direction. Indicate the viewing direction of the device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.CoverageDepth">
            <summary>
            Depth. Indicate the viewing depth of the device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.CoverageFieldOfView">
            <summary>
            Field of view. Indicate the field of view of the device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.RecordingEnabled">
            <summary>
            Recording enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.PrebufferEnabled">
            <summary>
            Prebuffer enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.PrebufferInMemory">
            <summary>
            Prebuffer in memory
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.PrebufferSeconds">
            <summary>
            Prebuffer seconds
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.EdgeStorageEnabled">
            <summary>
            Remote recording enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.EdgeStoragePlaybackEnabled">
            <summary>
            Remote recording playback
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.ManualRecordingTimeoutEnabled">
            <summary>
            Manual recording timeout enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.ManualRecordingTimeoutMinutes">
            <summary>
            Manual recording timeout in minutes
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Microphone.RecordingStorage">
            <summary>
            Path. Contains the path to the related recording storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Microphone.GetOtherRecordingServersWithMedia">
            <summary>
            Get recording servers with media
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Microphone.GetOtherRecordingStoragesWithMedia">
            <summary>
            Get recording storages with media
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Microphone.RetrieveEdgeStorage(System.DateTime,System.DateTime)">
            <summary>
            Retrieve recordings from edge storage
            </summary>
            <param name="startTime">Start time</param>
            <param name="endTime">End time</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Microphone.RetrieveEdgeStorage">
            <summary>
            Retrieve recordings from edge storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Microphone.TruncateStorage">
            <summary>
            Delete all recordings for device on storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Microphone.TruncateStorageOnOtherRecordingServer(System.String)">
            <summary>
            Delete all recordings for device on another recording server
            </summary>
            <param name="itemSelection">Select recording server</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Microphone.TruncateStorageOnOtherRecordingServer">
            <summary>
            Delete all recordings for device on another recording server
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Microphone.ChangeDeviceRecordingStorage(System.String,System.Boolean)">
            <summary>
            Change storage for device
            </summary>
            <param name="itemSelection">Select a storage to move to</param>
            <param name="moveData">Move data on device</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Microphone.ChangeDeviceRecordingStorage">
            <summary>
            Change storage for device
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Microphone.ChangeSecurityPermissions(System.String)">
            <summary>
            Edit permissions
            </summary>
            <param name="userPath">User path</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Microphone.ChangeSecurityPermissions">
            <summary>
            Edit permissions
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MicrophoneFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="microphoneFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MicrophoneFolder.Microphones">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneFolder.AddDeviceGroupMember(System.String)">
            <summary>
            Add device
            </summary>
            <param name="itemSelection">Select Microphone</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneFolder.AddDeviceGroupMember">
            <summary>
            Add device
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneFolder.RemoveDeviceGroupMember(System.String)">
            <summary>
            Remove device
            </summary>
            <param name="itemSelection">Select device or group to remove</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneFolder.RemoveDeviceGroupMember">
            <summary>
            Remove device
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MicrophoneGroup">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneGroup.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="microphoneGroup">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneGroup.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneGroup.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MicrophoneGroup.MicrophoneFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MicrophoneGroup.MicrophoneGroupFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MicrophoneGroup.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MicrophoneGroup.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MicrophoneGroup.BuiltIn">
            <summary>
            Built-in group
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MicrophoneGroupFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneGroupFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="microphoneGroupFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneGroupFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneGroupFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneGroupFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MicrophoneGroupFolder.MicrophoneGroups">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneGroupFolder.AddDeviceGroup(System.String,System.String)">
            <summary>
            Create new group
            </summary>
            <param name="groupName">Group name</param>
            <param name="groupDescription">Group description</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneGroupFolder.AddDeviceGroup">
            <summary>
            Create new group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneGroupFolder.RemoveDeviceGroup(System.Boolean,System.String)">
            <summary>
            Delete group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneGroupFolder.RemoveDeviceGroup">
            <summary>
            Delete group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MicrophoneGroupFolder.RemoveDeviceGroup(System.String)">
            <summary>
            Delete group
            </summary>
            <param name="itemSelection">Select device or group to remove</param>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MIPItem">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPItem.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            Construct the class from serverId of the Management owning the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server owning the configuration</param>
            <param name="mipItem">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPItem.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
            
             Construct the class from serverId of the Management owning the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server owning the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represent a number of possible exceptions, possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPItem.#ctor(VideoOS.Platform.ServerId,System.Guid)">
             <summary>
             Construct the class from a MIP ObjectId - only relevant for MIP plugin Items.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server owning the configuration</param>
             <param name="objectId">Identify the FQID.ObjectId of the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represent a number of possible exceptions, possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPItem.MIPItemFolder">
            <summary>
            Return the single folder item, that contains all child Items, regardless of Kind
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPItem.Enabled">
            <summary>
            Indicate if this item is active in the VMS system, e.g. enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPItem.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPItem.GisPoint">
            <summary>
            Gis point
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPItem.LastModified">
            <summary>
            LastModified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPItem.Properties">
            <summary>
            Contains a variable set of properties.<br/>
            All properties are returned as string, and set as strings.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MIPItemFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPItemFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            Construct the class from serverId of the Management owning the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server owning the configuration</param>
            <param name="mipItemFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPItemFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
            
             Construct the class from serverId of the Management owning the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server owning the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represent a number of possible exceptions, possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPItemFolder.GetMIPItem(System.Guid)">
            <summary>
            Get one specific child Item with given objectId.
            </summary>
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPItemFolder.MIPItems">
            <summary>
            Return a list of MIPItem's of this Kind
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPItemFolder.RegisterThisFolderCached">
            <summary>
            Will ensure that the current MIPItemFolder is registered for cache cleanup (if configuration changes)
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPItemFolder.ClearAllCaches">
            <summary>
            Will ensure that all MIPItemFolders will have their children cache cleared
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPItemFolder.ClearCaches(System.Guid)">
            <summary>
            Will ensure that any current MIPItemFolders for the provided kind will have their children cache cleared
            </summary>
            <param name="itemKind">Kind for which to clear caches</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPItemFolder.AddMIPItem(System.String)">
            <summary>
            Add MIPItem
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPItemFolder.AddMIPItem">
            <summary>
            Add MIPItem
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPItemFolder.RemoveMIPItem(System.String)">
            <summary>
            Remove MIPItem event
            </summary>
            <param name="itemSelection">Select MIPItem to remove</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPItemFolder.RemoveMIPItem">
            <summary>
            Remove MIPItem
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPItemFolder.GetItem(System.Guid)">
            <summary>
            Get one specific child Item with given objectId.
            </summary>
            <param name="objectId"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPItemFolder.UpdateItem(VideoOS.Platform.Item)">
            <summary>
            Update an existing Item
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPItemFolder.AddItem(VideoOS.Platform.Item)">
            <summary>
            Add Item
            </summary>
            <param name="item">Item</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPItemFolder.RemoveMIPItem(VideoOS.Platform.Item)">
            <summary>
            Remove MIP item
            </summary>
            <param name="item">Select MIP item to remove</param>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddMIPItemServerTask">
            <summary>
            Add MIPItem task
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddMIPItemServerTask.Execute">
            <summary>
            Call this method when the properties has been updated, to let the server execute.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddMIPItemServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveMIPItemServerTask">
            <summary>
            Remove MIPItem
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveMIPItemServerTask.Execute">
            <summary>
            Call this method when the properties has been updated, to let the server execute.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveMIPItemServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveMIPItemServerTask.ItemSelection">
            <summary>
            Select MIPItem to remove, . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MIPKind">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPKind.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            Construct the class from serverId of the Management owning the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server owning the configuration</param>
            <param name="mipKind">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPKind.#ctor(VideoOS.Platform.ServerId,System.Guid)">
             <summary>
             Construct the class from serverId of the Management owning the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server owning the configuration</param>
             <param name="kind">The Kind</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represent a number of possible exceptions, possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPKind.MIPItemFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPKind.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPKind.Guid">
            <summary>
            Returns the Id as a Guid
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPKind.PluginId">
            <summary>
            Plugin id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPKind.PluginName">
            <summary>
            Plugin name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPKind.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPKind.DataVersion">
            <summary>
            The DataVersion indicating what version any of this Kind's children has
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPKind.KindType">
            <summary>
            The KindType indicating what type of plugin data this represent. Can be ITEM or OPTION
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPKind.DisplayOnGisMap">
            <summary>
            Defines if items of this kind is displayed on the map.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPKind.ParentKindId">
            <summary>
            Kind of parent. Must be same valu as defined on the ItemNode.ParentKind in the specific plugin.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPKind.SecurityAction">
            <summary>
            The SecurityAction contains a comma seperated list of ActionId's (DisplayName will come from the plugin when running in the Management Client)
            
            If security is not to be used, this field should be set to String.Empty.
            Note that when used, the 'GENERIC_READ' and 'GENERIC_WRITE' actionId's should always be available.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MIPKindFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPKindFolder.#ctor(VideoOS.Platform.ServerId)">
             <summary>
             
            
             Construct the class from serverId of the Management owning the configuration.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server owning the configuration</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represent a number of possible exceptions, possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPKindFolder.MIPKinds">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPKindFolder.AddMIPKind(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Guid,System.String)">
            <summary>
            Add MIP kind
            </summary>
            <param name="id">Id</param>
            <param name="name">Name</param>
            <param name="pluginId">Plugin id</param>
            <param name="pluginName">Plugin name</param>
            <param name="displayOnGisMap">Indicate if this Kind is displayed in the map</param>
            <param name="parentKind">The Id of the Parent Kind, or Guid.Empty for top-level kinds</param>
            <param name="kindType"></param>
            <param name="securityAction">Comma separated list of ActionIds (or empty if not used)</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPKindFolder.RemoveMIPKind(System.String)">
            <summary>
            Remove MIP kind
            </summary>
            <param name="itemSelection">Select MIP kind to remove</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPKindFolder.GetMipOptionProperties(System.Guid)">
            <summary>
            Get XML string defining the properties for option menu with id = optionId
            </summary>
            <param name="optionId"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPKindFolder.SetMipOptionProperties(VideoOS.Platform.ConfigurationItems.MIPOptionProperties)">
            <summary>
            Set / update properties XML for option menu with id = OptionId.
            
            Note: Always call the 'Get' method when starting to edit, to sync correctly with the stored DataVersion
            </summary>
            <param name="mipOptionProperties"></param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MIPKindFolder.GetDataVersionSum">
            <summary>
            Returns the sum of all DataVersions of the saved MIPItems and Option data.
            
            This is used to identify if any MIP item configuration has changed since last call,
            and if so - all the MIPKinds can be fetched to identify which one has changed.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MIPOptionProperties">
            <summary>
            Contains settings used on the Management Clients option menu.
            
            Used internally by GetOptionsConfiguration and SaveOptionsConfiguration.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPOptionProperties.OptionId">
            <summary>
            The id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPOptionProperties.DataVersion">
            <summary>
            Current DataVersion - do not changes this
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MIPOptionProperties.PropertiesXml">
            <summary>
            The xml content
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.Monitor">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Monitor.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="monitor">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Monitor.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Monitor.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Monitor.MonitorPresetFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Monitor.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Monitor.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Monitor.CreatedDate">
            <summary>
            Created date
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Monitor.AspectRatioValues">
            <summary>
            A list of valid names/values for the AspectRatio property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Monitor.AspectRatio">
            <summary>
            Aspect ratio. Valid values are available in the AspectRatioValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Monitor.EmptyViewItemsValues">
            <summary>
            A list of valid names/values for the EmptyViewItems property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Monitor.EmptyViewItems">
            <summary>
            Empty preset item. What to show in an empty preset layout item. Valid values are available in the EmptyViewItemsValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Monitor.InsertionMethodValues">
            <summary>
            A list of valid names/values for the InsertionMethod property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Monitor.InsertionMethod">
            <summary>
            Element insertion. Valid values are available in the InsertionMethodValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Monitor.LocationX">
            <summary>
            Location X coordinate. X coordinate of monitor upper left corner
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Monitor.LocationY">
            <summary>
            Location Y coordinate. Y coordinate of monitor upper left corner
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Monitor.MonitorSize">
            <summary>
            Size. Size of monitor in inches
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Monitor.NoLayoutValues">
            <summary>
            A list of valid names/values for the NoLayout property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Monitor.NoLayout">
            <summary>
            Empty preset. What to show in an empty preset layout. Valid values are available in the NoLayoutValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Monitor.MonitorState">
            <summary>
            Monitor state. Current monitor state
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Monitor.ApplyCameras(System.String,System.String,System.Int32)">
            <summary>
            Apply cameras
            </summary>
            <param name="cameraPaths">Camera paths</param>
            <param name="cameraGroupPaths">Camera group paths</param>
            <param name="beginPosition">Insert from position</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Monitor.ApplyCameras">
            <summary>
            Apply cameras
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Monitor.ApplyCamerasAndLayout(System.String,System.String,System.Int32,System.String)">
            <summary>
            Apply cameras and layout
            </summary>
            <param name="cameraPaths">Camera paths</param>
            <param name="cameraGroupPaths">Camera group paths</param>
            <param name="beginPosition">Insert from position</param>
            <param name="layoutPath">Layout path</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Monitor.ApplyCamerasAndLayout">
            <summary>
            Apply cameras and layout
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Monitor.RemoveCameras(System.String,System.String)">
            <summary>
            Remove cameras
            </summary>
            <param name="cameraPaths">Camera paths</param>
            <param name="cameraGroupPaths">Camera group paths</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Monitor.RemoveCameras">
            <summary>
            Remove cameras
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Monitor.ApplyViewItemsXml(System.String,System.Int32)">
            <summary>
            Apply view items XML
            </summary>
            <param name="viewItemsXml">View items (XML)</param>
            <param name="beginPosition">Insert from position</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Monitor.ApplyViewItemsXml">
            <summary>
            Apply view items XML
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Monitor.ApplyMonitorState(System.String)">
            <summary>
            Apply monitor state
            </summary>
            <param name="monitorState">Monitor state</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Monitor.ApplyMonitorState">
            <summary>
            Apply monitor state
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Monitor.ApplyLayout(System.String)">
            <summary>
            Apply layout
            </summary>
            <param name="layoutPath">Layout path</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Monitor.ApplyLayout">
            <summary>
            Apply layout
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Monitor.ApplyTextAndLayout(System.String,System.Int32,System.String)">
            <summary>
            Apply text and layout
            </summary>
            <param name="textMessage">Text message</param>
            <param name="beginPosition">Insert from position</param>
            <param name="layoutPath">Layout path</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Monitor.ApplyTextAndLayout">
            <summary>
            Apply text and layout
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ApplyCamerasServerTask">
            <summary>
            Apply cameras
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ApplyCamerasServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ApplyCamerasServerTask.CameraPaths">
            <summary>
            Camera paths. Paths of cameras to insert in view
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ApplyCamerasServerTask.CameraGroupPaths">
            <summary>
            Camera group paths. Paths of camera groups to insert in view
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ApplyCamerasServerTask.BeginPosition">
            <summary>
            Insert from position. Index in view to insert from
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ApplyCamerasAndLayoutServerTask">
            <summary>
            Apply cameras and layout
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ApplyCamerasAndLayoutServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ApplyCamerasAndLayoutServerTask.CameraPaths">
            <summary>
            Camera paths. Paths of cameras to insert in view
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ApplyCamerasAndLayoutServerTask.CameraGroupPaths">
            <summary>
            Camera group paths. Paths of camera groups to insert in view
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ApplyCamerasAndLayoutServerTask.BeginPosition">
            <summary>
            Insert from position. Index in view to insert from
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ApplyCamerasAndLayoutServerTask.LayoutPath">
            <summary>
            Layout path. Path of layout to apply to monitor
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveCamerasServerTask">
            <summary>
            Remove cameras
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveCamerasServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveCamerasServerTask.CameraPaths">
            <summary>
            Camera paths. Paths of cameras to insert in view
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveCamerasServerTask.CameraGroupPaths">
            <summary>
            Camera group paths. Paths of camera groups to insert in view
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ApplyViewItemsXmlServerTask">
            <summary>
            Apply view items XML
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ApplyViewItemsXmlServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ApplyViewItemsXmlServerTask.ViewItemsXml">
            <summary>
            View items (XML). XML-formatted &lt;viewitems&gt; node containing one or more view items
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ApplyViewItemsXmlServerTask.BeginPosition">
            <summary>
            Insert from position. Index in view to insert from
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ApplyMonitorStateServerTask">
            <summary>
            Apply monitor state
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ApplyMonitorStateServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ApplyMonitorStateServerTask.MonitorState">
            <summary>
            Monitor state. Current monitor state
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ApplyLayoutServerTask">
            <summary>
            Apply layout
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ApplyLayoutServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ApplyLayoutServerTask.LayoutPath">
            <summary>
            Layout path. Path of layout to apply to monitor
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ApplyTextAndLayoutServerTask">
            <summary>
            Apply text and layout
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ApplyTextAndLayoutServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ApplyTextAndLayoutServerTask.TextMessage">
            <summary>
            Text message. The text message to be shown in the view item
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ApplyTextAndLayoutServerTask.BeginPosition">
            <summary>
            Insert from position. Index in view to insert from
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ApplyTextAndLayoutServerTask.LayoutPath">
            <summary>
            Layout path. Path of layout to apply to monitor
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MonitorFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MonitorFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="monitorFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MonitorFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MonitorFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MonitorFolder.Monitors">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MonitorFolder.AddMonitor(System.String,System.String,System.String,System.String,System.String,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Add new monitor
            </summary>
            <param name="name">Name</param>
            <param name="description">Description</param>
            <param name="aspectRatio">Aspect ratio</param>
            <param name="emptyViewItems">Empty preset item</param>
            <param name="insertionMethod">Element insertion</param>
            <param name="locationX">Location X coordinate</param>
            <param name="locationY">Location Y coordinate</param>
            <param name="monitorSize">Size</param>
            <param name="noLayout">Empty preset</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MonitorFolder.AddMonitor">
            <summary>
            Add new monitor
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MonitorFolder.RemoveMonitor(System.String)">
            <summary>
            Remove monitor
            </summary>
            <param name="itemSelection">Remove monitor</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MonitorFolder.RemoveMonitor">
            <summary>
            Remove monitor
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddMonitorServerTask">
            <summary>
            Add new monitor
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddMonitorServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddMonitorServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddMonitorServerTask.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddMonitorServerTask.AspectRatioValues">
            <summary>
            A list of valid names/values for the AspectRatio property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddMonitorServerTask.AspectRatio">
            <summary>
            Aspect ratio. Valid values are available in the AspectRatioValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddMonitorServerTask.EmptyViewItemsValues">
            <summary>
            A list of valid names/values for the EmptyViewItems property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddMonitorServerTask.EmptyViewItems">
            <summary>
            Empty preset item. What to show in an empty preset layout item. Valid values are available in the EmptyViewItemsValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddMonitorServerTask.InsertionMethodValues">
            <summary>
            A list of valid names/values for the InsertionMethod property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddMonitorServerTask.InsertionMethod">
            <summary>
            Element insertion. Valid values are available in the InsertionMethodValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddMonitorServerTask.LocationX">
            <summary>
            Location X coordinate. X coordinate of monitor upper left corner
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddMonitorServerTask.LocationY">
            <summary>
            Location Y coordinate. Y coordinate of monitor upper left corner
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddMonitorServerTask.MonitorSize">
            <summary>
            Size. Size of monitor in inches
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddMonitorServerTask.NoLayoutValues">
            <summary>
            A list of valid names/values for the NoLayout property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddMonitorServerTask.NoLayout">
            <summary>
            Empty preset. What to show in an empty preset layout. Valid values are available in the NoLayoutValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveMonitorServerTask">
            <summary>
            Remove monitor
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveMonitorServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveMonitorServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveMonitorServerTask.ItemSelection">
            <summary>
            Remove monitor. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MonitorPreset">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MonitorPreset.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="monitorPreset">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MonitorPreset.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MonitorPreset.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MonitorPreset.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MonitorPreset.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MonitorPreset.DefinitionXml">
            <summary>
            Definition XML. XML defining the monitor preset
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MonitorPresetFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MonitorPresetFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="monitorPresetFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MonitorPresetFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MonitorPresetFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MonitorPresetFolder.MonitorPresets">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MotionDetection">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MotionDetection.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="motionDetection">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MotionDetection.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MotionDetection.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetection.Enabled">
            <summary>
            Indicate if this item is active in the VMS system, e.g. enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetection.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetection.ManualSensitivityEnabled">
            <summary>
            Enable manual motion sensitivity. Disable to let the system dynamically calculate the optimal level
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetection.ManualSensitivity">
            <summary>
            Motion detection sensitivity. Specify the minimum change required before counting as motion. Value in range 0 - 765
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetection.Threshold">
            <summary>
            Motion detection threshold. Specify the level of motion required for an event. Value in range 0 - 10000
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetection.KeyframesOnly">
            <summary>
            Enable motion detection on keyframes only. Optimize the performance on MPEG-4/H.264/H.265 by detecting motion on keyframes only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetection.ProcessTimeValues">
            <summary>
            A list of valid names/values for the ProcessTime property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetection.ProcessTime">
            <summary>
            Motion detection check interval. Interval for how often to check for motion. Valid values are available in the ProcessTimeValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetection.DetectionMethodValues">
            <summary>
            A list of valid names/values for the DetectionMethod property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetection.DetectionMethod">
            <summary>
            Motion detection method. Optimize motion detection by analyzing only a percentage of the image.. Valid values are available in the DetectionMethodValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetection.GenerateMotionMetadata">
            <summary>
            Generate motion metadata. Generate motion metadata for smart search function
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetection.UseExcludeRegions">
            <summary>
            Use exclude regions. Enable exclude regions in the motion detection
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetection.GridSizeValues">
            <summary>
            A list of valid names/values for the GridSize property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetection.GridSize">
            <summary>
            Grid size. The grid divides the image into selectable regions. If None is selected, exclude regions are disabled.. Valid values are available in the GridSizeValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetection.ExcludeRegions">
            <summary>
            Exclude regions. Disable motion detection in specific regions. If you use an 8x8 grid, the string should have a length of 64. If you specify 0 or 1, regions are included or excluded respectively from top left region and going left to right.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetection.HardwareAccelerationModeValues">
            <summary>
            A list of valid names/values for the HardwareAccelerationMode property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetection.HardwareAccelerationMode">
            <summary>
            Hardware acceleration mode. Defines if the motion detection resolution uses automatic or no hardware acceleration.. Valid values are available in the HardwareAccelerationModeValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MotionDetectionFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MotionDetectionFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="motionDetectionFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MotionDetectionFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MotionDetectionFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MotionDetectionFolder.MotionDetections">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.Output">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Output.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="output">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Output.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Output.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Output.CustomPropertiesFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Output.DeviceDriverSettingsFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Output.Enabled">
            <summary>
            Indicate if this item is active in the VMS system, e.g. enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Output.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Output.Channel">
            <summary>
            Channel
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Output.CreatedDate">
            <summary>
            Created date
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Output.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Output.GisPoint">
            <summary>
            Device position. Position of device in latitude, longitude and altitude.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Output.ShortName">
            <summary>
            Short name. Used as name in the user interface where appropriate.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Output.Icon">
            <summary>
            Icon identifier. The relevant device icon to show.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Output.CoverageDirection">
            <summary>
            Direction. Indicate the viewing direction of the device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Output.CoverageDepth">
            <summary>
            Depth. Indicate the viewing depth of the device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Output.CoverageFieldOfView">
            <summary>
            Field of view. Indicate the field of view of the device.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Output.ChangeSecurityPermissions(System.String)">
            <summary>
            Edit permissions
            </summary>
            <param name="userPath">User path</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Output.ChangeSecurityPermissions">
            <summary>
            Edit permissions
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.OutputFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="outputFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.OutputFolder.Outputs">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputFolder.AddDeviceGroupMember(System.String)">
            <summary>
            Add device
            </summary>
            <param name="itemSelection">Select Output</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputFolder.AddDeviceGroupMember">
            <summary>
            Add device
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputFolder.RemoveDeviceGroupMember(System.String)">
            <summary>
            Remove device
            </summary>
            <param name="itemSelection">Select device or group to remove</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputFolder.RemoveDeviceGroupMember">
            <summary>
            Remove device
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.OutputGroup">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputGroup.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="outputGroup">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputGroup.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputGroup.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.OutputGroup.OutputFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.OutputGroup.OutputGroupFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.OutputGroup.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.OutputGroup.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.OutputGroup.BuiltIn">
            <summary>
            Built-in group
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.OutputGroupFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputGroupFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="outputGroupFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputGroupFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputGroupFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputGroupFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.OutputGroupFolder.OutputGroups">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputGroupFolder.AddDeviceGroup(System.String,System.String)">
            <summary>
            Create new group
            </summary>
            <param name="groupName">Group name</param>
            <param name="groupDescription">Group description</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputGroupFolder.AddDeviceGroup">
            <summary>
            Create new group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputGroupFolder.RemoveDeviceGroup(System.Boolean,System.String)">
            <summary>
            Delete group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputGroupFolder.RemoveDeviceGroup">
            <summary>
            Delete group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.OutputGroupFolder.RemoveDeviceGroup(System.String)">
            <summary>
            Delete group
            </summary>
            <param name="itemSelection">Select device or group to remove</param>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.PrivacyMask">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PrivacyMask.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            Construct the class from serverId of the Management owning the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server owning the configuration</param>
            <param name="privacyMask">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PrivacyMask.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
            
             Construct the class from serverId of the Management owning the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server owning the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represent a number of possible exceptions, possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PrivacyMask.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
            
             Construct the class from a MIP FQID - note that not all configuration items has a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represent a number of possible exceptions, possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PrivacyMask.Enabled">
            <summary>
            Indicate if this item is active in the VMS system, e.g. enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PrivacyMask.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PrivacyMask.GridSizeValues">
            <summary>
            A list of valid names/values for the GridSize property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PrivacyMask.GridSize">
            <summary>
            Grid size, Size of privacy grid. Valid values are available in the GridSizeValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PrivacyMask.PrivacyMaskRegions">
            <summary>
            Privacy mask regions, Regions that defines the privacy mask
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.PrivacyMaskFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PrivacyMaskFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
             <summary>
             
            
             Construct the class from serverId of the Management owning the configuration, and the already returned ConfigurationItem.
             </summary>
             <param name="serverId">Identify the Management Server owning the configuration</param>
             <param name="privacyMaskFolder">The ConfigurationItem returned from elsewhere</param>
             <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PrivacyMaskFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
            
             Construct the class from serverId of the Management owning the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server owning the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represent a number of possible exceptions, possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PrivacyMaskFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
            
             Construct the class from a MIP FQID - note that not all configuration items has a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represent a number of possible exceptions, possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PrivacyMaskFolder.PrivacyMasks">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.PrivacyProtection">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PrivacyProtection.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="privacyProtection">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PrivacyProtection.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PrivacyProtection.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PrivacyProtection.Enabled">
            <summary>
            Indicate if this item is active in the VMS system, e.g. enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PrivacyProtection.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PrivacyProtection.PrivacyMaskXml">
            <summary>
            Privacy mask xml. Xml that defines the privacy mask
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.PrivacyProtectionFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PrivacyProtectionFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="privacyProtectionFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PrivacyProtectionFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PrivacyProtectionFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PrivacyProtectionFolder.PrivacyProtections">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.PTZChildItem">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PTZChildItem.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem,VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="ptz">The ConfigurationItem returned from elsewhere</param>
            <param name="parentWrapper"></param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PTZChildItem.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PTZChildItem.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PTZChildItem.Properties">
            <summary>
            Contains a variable set of properties.<br/>
            All properties are returned as string, and set as strings.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.PtzPreset">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PtzPreset.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="ptzPreset">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PtzPreset.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PtzPreset.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PtzPreset.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PtzPreset.DevicePreset">
            <summary>
            PTZ preset
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PtzPreset.DevicePresetInternalId">
            <summary>
            Internal ID for PTZ preset
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PtzPreset.DefaultPreset">
            <summary>
            Default PTZ preset
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PtzPreset.Pan">
            <summary>
            Pan
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PtzPreset.Tilt">
            <summary>
            Tilt
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PtzPreset.Zoom">
            <summary>
            Zoom
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.PtzPresetFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PtzPresetFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="ptzPresetFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PtzPresetFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PtzPresetFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.PtzPresetFolder.PtzPresets">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PtzPresetFolder.AddPtzPreset(System.String,System.String,System.Double,System.Double,System.Double)">
            <summary>
            Add PTZ preset
            </summary>
            <param name="name">Name</param>
            <param name="description">Description</param>
            <param name="pan">Pan</param>
            <param name="tilt">Tilt</param>
            <param name="zoom">Zoom</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PtzPresetFolder.AddPtzPreset">
            <summary>
            Add PTZ preset
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PtzPresetFolder.RemovePtzPreset(System.String)">
            <summary>
            Remove PTZ preset
            </summary>
            <param name="itemSelection">Remove PTZ preset</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PtzPresetFolder.RemovePtzPreset">
            <summary>
            Remove PTZ preset
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PtzPresetFolder.DefaultPtzPreset(System.String)">
            <summary>
            Set default PTZ preset
            </summary>
            <param name="itemSelection">Default PTZ preset</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.PtzPresetFolder.DefaultPtzPreset">
            <summary>
            Set default PTZ preset
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddPtzPresetServerTask">
            <summary>
            Add PTZ preset
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddPtzPresetServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddPtzPresetServerTask.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddPtzPresetServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddPtzPresetServerTask.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddPtzPresetServerTask.Pan">
            <summary>
            Pan
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddPtzPresetServerTask.Tilt">
            <summary>
            Tilt
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddPtzPresetServerTask.Zoom">
            <summary>
            Zoom
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemovePtzPresetServerTask">
            <summary>
            Remove PTZ preset
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemovePtzPresetServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemovePtzPresetServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemovePtzPresetServerTask.ItemSelection">
            <summary>
            Remove PTZ preset. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.DefaultPtzPresetServerTask">
            <summary>
            Set default PTZ preset
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.DefaultPtzPresetServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.DefaultPtzPresetServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.DefaultPtzPresetServerTask.ItemSelection">
            <summary>
            Default PTZ preset. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RecordingServer">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RecordingServer.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="recordingServer">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RecordingServer.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RecordingServer.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RecordingServer.HardwareDriverFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RecordingServer.HardwareFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RecordingServer.StorageFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RecordingServer.Enabled">
            <summary>
            Indicate if this item is active in the VMS system, e.g. enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RecordingServer.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RecordingServer.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RecordingServer.SynchronizationTime">
            <summary>
            Synchronization time. Defines when the configuration is synchronized with the hardware. Define when to start the synchronization by entering a number of minutes after midnight (local time of recording server). The default value is -1, which means no synchronization.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RecordingServer.TimeZoneName">
            <summary>
            Time zone
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RecordingServer.HostName">
            <summary>
            Host name. Host name  of the recording server (deprecated, use 'Web Server Uri')
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RecordingServer.PortNumber">
            <summary>
            Port number. Port number of the recording server (deprecated, use 'Web Server Uri')
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RecordingServer.WebServerUri">
            <summary>
            Web Server Uri. Web Server Uri of the recording server
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RecordingServer.AddHardware(System.String,System.String,System.String,System.Security.SecureString)">
            <summary>
            Add new hardware
            </summary>
            <param name="hardwareAddress">Address</param>
            <param name="hardwareDriverPath">Hardware driver</param>
            <param name="userName">User name</param>
            <param name="password">Password</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RecordingServer.AddHardware">
            <summary>
            Add new hardware
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RecordingServer.GetOtherDevicesWithMediaOnRecorder">
            <summary>
            Get devices with media on recording server
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RecordingServer.HardwareScan(System.String,System.String,System.String,System.Security.SecureString,System.Boolean)">
            <summary>
            Detect hardware driver
            </summary>
            <param name="hardwareAddress">Address</param>
            <param name="hardwareDriverIds">Hardware driver IDs</param>
            <param name="userName">User name</param>
            <param name="password">Password</param>
            <param name="useDefaultCredentials">Use default credentials</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RecordingServer.HardwareScan">
            <summary>
            Detect hardware driver
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RecordingServer.HardwareScanExpress(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Detect hardware
            </summary>
            <param name="primaryUserName">User name</param>
            <param name="primaryPassword">Password</param>
            <param name="secondaryUserName">User name</param>
            <param name="secondaryPassword">Password</param>
            <param name="tertiaryUserName">User name</param>
            <param name="tertiaryPassword">Password</param>
            <param name="useDefaultCredentials">Use default credentials</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RecordingServer.HardwareScanExpress">
            <summary>
            Detect hardware
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RecordingServer.LoadTasks">
            <summary>
            Load the tasks existing on the server
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RecordingServer.AddHardware(System.String,System.String,System.String,System.String)">
            <summary>
            Add new hardware <br />
            Please consider using secure version taking SecureString instead
            </summary>
            <param name="hardwareAddress">Address</param>
            <param name="hardwareDriverPath">Hardware driver</param>
            <param name="userName">User name</param>
            <param name="password">Password</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RecordingServer.HardwareScan(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Detect hardware driver <br />
            Please consider using secure version taking SecureString instead
            </summary>
            <param name="hardwareAddress">Address</param>
            <param name="hardwareDriverIds">Hardware driver IDs</param>
            <param name="userName">User name</param>
            <param name="password">Password</param>
            <param name="useDefaultCredentials">Use default credentials</param>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddHardwareServerTask">
            <summary>
            Add new hardware
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddHardwareServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddHardwareServerTask.HardwareAddress">
            <summary>
            Address. Contains the IP address of a piece of hardware
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddHardwareServerTask.HardwareDriverPath">
            <summary>
            Hardware driver
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddHardwareServerTask.UserName">
            <summary>
            User name. User name for the hardware
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddHardwareServerTask.SecurePassword">
            <summary>
            Password. Password for hardware
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddHardwareServerTask.Password">
            <summary>
            Password. Password for hardware <br />
            Please consider using secure version <see cref="P:VideoOS.Platform.ConfigurationItems.AddHardwareServerTask.SecurePassword"/> instead
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.HardwareScanServerTask">
            <summary>
            Detect hardware driver
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareScanServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareScanServerTask.HardwareAddress">
            <summary>
            Address. Contains the IP address of a piece of hardware
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareScanServerTask.HardwareDriverIds">
            <summary>
            Hardware driver IDs. Hardware driver IDs separated by ';'. Example: "48;13;25". Specify an empty string to include all drivers.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareScanServerTask.UserName">
            <summary>
            User name. User name for the hardware
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareScanServerTask.SecurePassword">
            <summary>
            Password. Password for hardware
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareScanServerTask.UseDefaultCredentials">
            <summary>
            Use default credentials. Specify if you want to use the default hardware credentials or use another one.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareScanServerTask.Password">
            <summary>
            Password. Password for hardware <br />
            Please consider using secure version <see cref="P:VideoOS.Platform.ConfigurationItems.HardwareScanServerTask.SecurePassword"/> instead
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.HardwareScanExpressServerTask">
            <summary>
            Detect hardware
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.HardwareScanExpressServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareScanExpressServerTask.PrimaryUserName">
            <summary>
            User name. User name for the hardware
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareScanExpressServerTask.PrimaryPassword">
            <summary>
            Password. Password for hardware
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareScanExpressServerTask.SecondaryUserName">
            <summary>
            User name. User name for the hardware
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareScanExpressServerTask.SecondaryPassword">
            <summary>
            Password. Password for hardware
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareScanExpressServerTask.TertiaryUserName">
            <summary>
            User name. User name for the hardware
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareScanExpressServerTask.TertiaryPassword">
            <summary>
            Password. Password for hardware
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.HardwareScanExpressServerTask.UseDefaultCredentials">
            <summary>
            Use default credentials. Specify if you want to use the default hardware credentials or use another one.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RecordingServerFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RecordingServerFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="recordingServerFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RecordingServerFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RecordingServerFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RecordingServerFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RecordingServerFolder.RecordingServers">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.Role">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Role.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="role">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Role.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Role.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Role.UserFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Role.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Role.RoleTypeValues">
            <summary>
            A list of valid names/values for the RoleType property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Role.RoleType">
            <summary>
            Type of role. Valid values are available in the RoleTypeValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Role.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Role.DualAuthorizationRequired">
            <summary>
            Login authorization required
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Role.MakeUsersAnonymousDuringPTZSession">
            <summary>
            Make users anonymous during PTZ session
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Role.AllowMobileClientLogOn">
            <summary>
            Allow Mobile Client login. Allow members of the role to log in from a Mobile Client
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Role.AllowSmartClientLogOn">
            <summary>
            Allow Smart Client login. Allow members of the role to log in from a Smart Client
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Role.AllowWebClientLogOn">
            <summary>
            Allow Web Client login. Allow members of the role to log in from a Web Client
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Role.SetClientTimeProfile(System.String)">
            <summary>
            Set client login time profile
            </summary>
            <param name="itemSelection">Client login time profile</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Role.SetClientTimeProfile">
            <summary>
            Set client login time profile
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Role.GetClientTimeProfile">
            <summary>
            Get client login time profile
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Role.ChangeOverallSecurityPermissions(System.String)">
            <summary>
            Edit overall security permissions
            </summary>
            <param name="securityNamespace">Namespace</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Role.ChangeOverallSecurityPermissions">
            <summary>
            Edit overall security permissions
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.SetClientTimeProfileServerTask">
            <summary>
            Set client login time profile
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SetClientTimeProfileServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.SetClientTimeProfileServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.SetClientTimeProfileServerTask.ItemSelection">
            <summary>
            Client login time profile. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ChangeOverallSecurityPermissionsServerTask">
            <summary>
            Edit overall security permissions
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ChangeOverallSecurityPermissionsServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ChangeOverallSecurityPermissionsServerTask.SecurityNamespaceValues">
            <summary>
            A list of valid names/values for the SecurityNamespace property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ChangeOverallSecurityPermissionsServerTask.SecurityNamespace">
            <summary>
            Namespace. Security namespace specifies a group of security settings associated to the same area. Valid values are available in the SecurityNamespaceValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RoleFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RoleFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="roleFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RoleFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RoleFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RoleFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RoleFolder.Roles">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RoleFolder.AddRole(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Add new role
            </summary>
            <param name="name">Name</param>
            <param name="description">Description</param>
            <param name="dualAuthorizationRequired">Login authorization required</param>
            <param name="makeUsersAnonymousDuringPTZSession">Make users anonymous during PTZ session</param>
            <param name="allowMobileClientLogOn">Allow Mobile Client login</param>
            <param name="allowSmartClientLogOn">Allow Smart Client login</param>
            <param name="allowWebClientLogOn">Allow Web Client login</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RoleFolder.AddRole">
            <summary>
            Add new role
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RoleFolder.RemoveRole(System.String)">
            <summary>
            Remove role
            </summary>
            <param name="itemSelection">Remove role</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RoleFolder.RemoveRole">
            <summary>
            Remove role
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RoleFolder.CopyRole(System.String,System.String,System.String)">
            <summary>
            Copy role
            </summary>
            <param name="itemSelection">Copy role</param>
            <param name="name">Name</param>
            <param name="description">Description</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RoleFolder.CopyRole">
            <summary>
            Copy role
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddRoleServerTask">
            <summary>
            Add new role
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddRoleServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRoleServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRoleServerTask.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRoleServerTask.DualAuthorizationRequired">
            <summary>
            Login authorization required
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRoleServerTask.MakeUsersAnonymousDuringPTZSession">
            <summary>
            Make users anonymous during PTZ session
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRoleServerTask.AllowMobileClientLogOn">
            <summary>
            Allow Mobile Client login. Allow members of the role to log in from a Mobile Client
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRoleServerTask.AllowSmartClientLogOn">
            <summary>
            Allow Smart Client login. Allow members of the role to log in from a Smart Client
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRoleServerTask.AllowWebClientLogOn">
            <summary>
            Allow Web Client login. Allow members of the role to log in from a Web Client
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveRoleServerTask">
            <summary>
            Remove role
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveRoleServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveRoleServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveRoleServerTask.ItemSelection">
            <summary>
            Remove role. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.CopyRoleServerTask">
            <summary>
            Copy role
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.CopyRoleServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.CopyRoleServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.CopyRoleServerTask.ItemSelection">
            <summary>
            Copy role. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.CopyRoleServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.CopyRoleServerTask.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.SaveSearches">
            <summary>
            A single saved search.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.SaveSearches.SaveSearchAvailability">
            <summary>
            The availability of the saved search.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ConfigurationItems.SaveSearches.SaveSearchAvailability.Private">
            <summary>
            The search is visible to the user who created it.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ConfigurationItems.SaveSearches.SaveSearchAvailability.Public">
            <summary>
            The search visible to all users.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SaveSearches.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="item">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SaveSearches.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SaveSearches.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.SaveSearches.Id">
            <summary>
            Id of the search.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.SaveSearches.SearchQuery">
            <summary>
            The SearchQuery in the search.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.SaveSearches.Availability">
            <summary>
            The avilibility of the search.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.SaveSearches.IncludesScopeItems">
            <summary>
            Gets or sets whether search query includes the items in the scope.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddSaveSearchServerTask">
            <summary>
            Server task for adding a search.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddSaveSearchServerTask.Item">
            <summary>
            The item that was added.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.UpdateSaveSearchServerTask">
            <summary>
            Server task for updating a search.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.UpdateSaveSearchServerTask.Item">
            <summary>
            The item that was updated.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.GetSaveSearchServerTask">
            <summary>
            Server task for getting a search.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.GetSaveSearchServerTask.Item">
            <summary>
            The retrieved item.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.FindSaveSearches">
            <summary>
            A find save search configuration item.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.FindSaveSearches.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="item">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.FindSaveSearches.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.FindSaveSearches.#ctor(VideoOS.Platform.FQID)">
             <summary>
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.FindSaveSearches.Count">
            <summary>
            The number of save searches to find.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.FindSaveSearches.StartIndex">
            <summary>
            The number of items to skip when finding save searches.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.FindSaveSearches.KeywordFilter">
            <summary>
            The filter to use when finding save searches.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.FindSaveSearches.PrivateOnly">
            <summary>
            Whether to only find private or all save searches.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.FindSaveSearches.SaveSearches">
            <summary>
            All the save searches found matching the keyword filter.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.FindSaveSearchesServerTask">
            <summary>
            Server tasks for finding save searches based on filters.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.FindSaveSearchesServerTask.Item">
            <summary>
            The item for find save searches operation.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.SaveSearchesFolder">
            <summary>
            A overall folder where all save searches methods are present.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SaveSearchesFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="item">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SaveSearchesFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SaveSearchesFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SaveSearchesFolder.#ctor">
             <summary>
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SaveSearchesFolder.AddSaveSearch(System.String,System.String,System.String,VideoOS.Platform.ConfigurationItems.SaveSearches.SaveSearchAvailability,System.Boolean)">
            <summary>
            Add new save search.
            </summary>
            <param name="name">Name</param>
            <param name="description">Description</param>
            <param name="searchQuery"></param>
            <param name="availability"></param>
            <param name="includesScopeItems">Obsolete, do not use</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SaveSearchesFolder.UpdateSaveSearch(System.Guid,System.String,System.String,System.String,VideoOS.Platform.ConfigurationItems.SaveSearches.SaveSearchAvailability,System.Boolean)">
            <summary>
            Update existing save search.
            </summary>
            <param name="id">Id</param>
            <param name="name">Name</param>
            <param name="description">Description</param>
            <param name="searchQuery"></param>
            <param name="availability"></param>
            <param name="includesScopeItems">Obsolete, do not use</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SaveSearchesFolder.RemoveSaveSearch(System.Guid)">
            <summary>
            Remove a save search.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SaveSearchesFolder.GetSaveSearch(System.Guid)">
            <summary>
            Get a save search.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SaveSearchesFolder.FindSaveSearches(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Find a list of save searches based on a filter.
            </summary>
            <param name="count">The number of results to return (Can be used for paging)</param>
            <param name="startIndex">The start index to start the search (Can be used for paging)</param>
            <param name="keywordFilter">The filter to use when find save searches.</param>
            <param name="privateOnly">Whether to only find private or all.</param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ServerTaskResult">
            <summary>
            Abstract wrapper for the ServerTask, allowing to init strongly typed properties for the result
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ServerTaskResult.ServerTask">
            <summary>
            The original ServerTask result
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.Speaker">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Speaker.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="speaker">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Speaker.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Speaker.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.ClientSettingsFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.CustomPropertiesFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.DeviceDriverSettingsFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.Enabled">
            <summary>
            Indicate if this item is active in the VMS system, e.g. enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.Channel">
            <summary>
            Channel
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.CreatedDate">
            <summary>
            Created date
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.GisPoint">
            <summary>
            Device position. Position of device in latitude, longitude and altitude.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.ShortName">
            <summary>
            Short name. Used as name in the user interface where appropriate.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.Icon">
            <summary>
            Icon identifier. The relevant device icon to show.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.CoverageDirection">
            <summary>
            Direction. Indicate the viewing direction of the device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.CoverageDepth">
            <summary>
            Depth. Indicate the viewing depth of the device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.CoverageFieldOfView">
            <summary>
            Field of view. Indicate the field of view of the device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.RecordingEnabled">
            <summary>
            Recording enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.PrebufferEnabled">
            <summary>
            Prebuffer enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.PrebufferInMemory">
            <summary>
            Prebuffer in memory
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.PrebufferSeconds">
            <summary>
            Prebuffer seconds
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.EdgeStorageEnabled">
            <summary>
            Remote recording enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.EdgeStoragePlaybackEnabled">
            <summary>
            Remote recording playback
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.ManualRecordingTimeoutEnabled">
            <summary>
            Manual recording timeout enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.ManualRecordingTimeoutMinutes">
            <summary>
            Manual recording timeout in minutes
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Speaker.RecordingStorage">
            <summary>
            Path. Contains the path to the related recording storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Speaker.GetOtherRecordingServersWithMedia">
            <summary>
            Get recording servers with media
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Speaker.GetOtherRecordingStoragesWithMedia">
            <summary>
            Get recording storages with media
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Speaker.RetrieveEdgeStorage(System.DateTime,System.DateTime)">
            <summary>
            Retrieve recordings from edge storage
            </summary>
            <param name="startTime">Start time</param>
            <param name="endTime">End time</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Speaker.RetrieveEdgeStorage">
            <summary>
            Retrieve recordings from edge storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Speaker.TruncateStorage">
            <summary>
            Delete all recordings for device on storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Speaker.TruncateStorageOnOtherRecordingServer(System.String)">
            <summary>
            Delete all recordings for device on another recording server
            </summary>
            <param name="itemSelection">Select recording server</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Speaker.TruncateStorageOnOtherRecordingServer">
            <summary>
            Delete all recordings for device on another recording server
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Speaker.ChangeDeviceRecordingStorage(System.String,System.Boolean)">
            <summary>
            Change storage for device
            </summary>
            <param name="itemSelection">Select a storage to move to</param>
            <param name="moveData">Move data on device</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Speaker.ChangeDeviceRecordingStorage">
            <summary>
            Change storage for device
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Speaker.ChangeSecurityPermissions(System.String)">
            <summary>
            Edit permissions
            </summary>
            <param name="userPath">User path</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Speaker.ChangeSecurityPermissions">
            <summary>
            Edit permissions
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.SpeakerFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="speakerFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.SpeakerFolder.Speakers">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerFolder.AddDeviceGroupMember(System.String)">
            <summary>
            Add device
            </summary>
            <param name="itemSelection">Select Speaker</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerFolder.AddDeviceGroupMember">
            <summary>
            Add device
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerFolder.RemoveDeviceGroupMember(System.String)">
            <summary>
            Remove device
            </summary>
            <param name="itemSelection">Select device or group to remove</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerFolder.RemoveDeviceGroupMember">
            <summary>
            Remove device
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.SpeakerGroup">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerGroup.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="speakerGroup">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerGroup.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerGroup.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.SpeakerGroup.SpeakerFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.SpeakerGroup.SpeakerGroupFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.SpeakerGroup.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.SpeakerGroup.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.SpeakerGroup.BuiltIn">
            <summary>
            Built-in group
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.SpeakerGroupFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerGroupFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="speakerGroupFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerGroupFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerGroupFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerGroupFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.SpeakerGroupFolder.SpeakerGroups">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerGroupFolder.AddDeviceGroup(System.String,System.String)">
            <summary>
            Create new group
            </summary>
            <param name="groupName">Group name</param>
            <param name="groupDescription">Group description</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerGroupFolder.AddDeviceGroup">
            <summary>
            Create new group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerGroupFolder.RemoveDeviceGroup(System.Boolean,System.String)">
            <summary>
            Delete group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerGroupFolder.RemoveDeviceGroup">
            <summary>
            Delete group
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SpeakerGroupFolder.RemoveDeviceGroup(System.String)">
            <summary>
            Delete group
            </summary>
            <param name="itemSelection">Select device or group to remove</param>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.Storage">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Storage.EnableEncryption(System.String,System.String)">
            <summary>
            Enable encryption on recording storage <br />
            Please consider using secure version taking SecureString instead
            </summary>
            <param name="password">Encryption password</param>
            <param name="encryptionMethod">Encryption</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Storage.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="storage">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Storage.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Storage.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Storage.ArchiveStorageFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Storage.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Storage.DiskPath">
            <summary>
            Path. Contains the path to the storage disk
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Storage.CreatedDate">
            <summary>
            Created date
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Storage.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Storage.RetainMinutes">
            <summary>
            Retention time. The number of minutes that must elapse before data are deleted or archived. The value that specifies the retention period in minutes. The value have to be between 1 and  525600000 (365000 days). By default, the value is 1440, which is 1 day.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Storage.MaxSize">
            <summary>
            Max size (in MB). The maximum size of the recording storage in MB.  The value have to be between 1 and 1099511627776 (1 exabyte). By default, the value is set to 1024, which is 1 GB.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Storage.IsDefault">
            <summary>
            Default storage. Is default
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Storage.Signing">
            <summary>
            Signing. Specifies if database should be signed
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Storage.EncryptionMethodValues">
            <summary>
            A list of valid names/values for the EncryptionMethod property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.Storage.EncryptionMethod">
            <summary>
            Encryption. Specifies the strength of the encryption. Valid values are available in the EncryptionMethodValues property dictionary.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Storage.GetDevicesUsingStorage">
            <summary>
            Get devices using this storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Storage.ReadStorageInformation">
            <summary>
            Read storage information
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Storage.SetStorageAsDefault">
            <summary>
            Set storage as default
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Storage.EnableEncryption(System.Security.SecureString,System.String)">
            <summary>
            Enable encryption on recording storage
            </summary>
            <param name="password">Encryption password</param>
            <param name="encryptionMethod">Encryption</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Storage.EnableEncryption">
            <summary>
            Enable encryption on recording storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Storage.MoveRecordingStorage(System.String)">
            <summary>
            Move storage
            </summary>
            <param name="diskPath">Path</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.Storage.MoveRecordingStorage">
            <summary>
            Move storage
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.EnableEncryptionServerTask">
            <summary>
            Enable encryption on recording storage
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.EnableEncryptionServerTask.Password">
            <summary>
            Encryption password. Encryption password for recording storage <br />
            Please consider using secure version <see cref="P:VideoOS.Platform.ConfigurationItems.EnableEncryptionServerTask.SecurePassword"/> instead
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.EnableEncryptionServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.EnableEncryptionServerTask.SecurePassword">
            <summary>
            Encryption password. Encryption password for recording storage
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.EnableEncryptionServerTask.EncryptionMethodValues">
            <summary>
            A list of valid names/values for the EncryptionMethod property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.EnableEncryptionServerTask.EncryptionMethod">
            <summary>
            Encryption. Specifies the strength of the encryption. Valid values are available in the EncryptionMethodValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.StorageInformation">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StorageInformation.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
             <summary>
             
            
             Construct the class from serverId of the Management owning the configuration, and the already returned ConfigurationItem.
             </summary>
             <param name="serverId">Identify the Management Server owning the configuration</param>
             <param name="storage">The ConfigurationItem returned from elsewhere</param>
             <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StorageInformation.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
            
             Construct the class from serverId of the Management owning the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server owning the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represent a number of possible exceptions, possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StorageInformation.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
            
             Construct the class from a MIP FQID - note that not all configuration items has a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represent a number of possible exceptions, possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.StorageInformation.AnyTablesWithData">
            <summary>
            AnyTablesWithData
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.StorageInformation.LastUpdated">
            <summary>
            Last updated
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.StorageInformation.LockedUsedSpaceProperty">
            <summary>
            LockedUsedSpaceProperty
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.StorageInformation.UsedSpace">
            <summary>
            UsedSpace
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.MoveRecordingStorageServerTask">
            <summary>
            Move storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.MoveRecordingStorageServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.MoveRecordingStorageServerTask.DiskPath">
            <summary>
            Path. Contains the path to the storage disk
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.StorageFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StorageFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="storageFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StorageFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StorageFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.StorageFolder.Storages">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StorageFolder.AddStorage(System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Add storage
            </summary>
            <param name="name">Name</param>
            <param name="description">Description</param>
            <param name="diskPath">Path</param>
            <param name="signing">Signing</param>
            <param name="retainMinutes">Retention time</param>
            <param name="maxSize">Max size (in MB)</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StorageFolder.AddStorage">
            <summary>
            Add storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StorageFolder.RemoveStorage(System.String)">
            <summary>
            Remove storage
            </summary>
            <param name="itemSelection">Remove storage</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StorageFolder.RemoveStorage">
            <summary>
            Remove storage
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddStorageServerTask">
            <summary>
            Add storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddStorageServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddStorageServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddStorageServerTask.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddStorageServerTask.DiskPath">
            <summary>
            Path. Contains the path to the storage disk
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddStorageServerTask.Signing">
            <summary>
            Signing. Specifies if database should be signed
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddStorageServerTask.RetainMinutes">
            <summary>
            Retention time. The number of minutes that must elapse before data are deleted or archived. The value that specifies the retention period in minutes. The value have to be between 1 and  525600000 (365000 days). By default, the value is 1440, which is 1 day.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddStorageServerTask.MaxSize">
            <summary>
            Max size (in MB). The maximum size of the recording storage in MB.  The value have to be between 1 and 1099511627776 (1 exabyte). By default, the value is set to 1024, which is 1 GB.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveStorageServerTask">
            <summary>
            Remove storage
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveStorageServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveStorageServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveStorageServerTask.ItemSelection">
            <summary>
            Remove storage. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.StreamChildItem">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StreamChildItem.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem,VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="stream">The ConfigurationItem returned from elsewhere</param>
            <param name="parentWrapper"></param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StreamChildItem.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StreamChildItem.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.StreamChildItem.Properties">
            <summary>
            Contains a variable set of properties.<br/>
            All properties are returned as string, and set as strings.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.StreamDefinition">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StreamDefinition.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="stream">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StreamDefinition.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StreamDefinition.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.StreamDefinition.StreamUsageChildItems">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StreamDefinition.AddStream">
            <summary>
            Add stream
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StreamDefinition.RemoveStream(System.String)">
            <summary>
            Remove stream
            </summary>
            <param name="itemSelection">Select stream to remove</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StreamDefinition.RemoveStream">
            <summary>
            Remove stream
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveStreamServerTask">
            <summary>
            Remove stream
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveStreamServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveStreamServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveStreamServerTask.ItemSelection">
            <summary>
            Select stream to remove. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.StreamFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StreamFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="streamFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StreamFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StreamFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.StreamFolder.Streams">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.StreamUsageChildItem">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StreamUsageChildItem.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem,VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="streamUsage">The ConfigurationItem returned from elsewhere</param>
            <param name="parentWrapper"></param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StreamUsageChildItem.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.StreamUsageChildItem.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.StreamUsageChildItem.StreamReferenceIdValues">
            <summary>
            A list of valid names/values for the StreamReferenceId property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.StreamUsageChildItem.StreamReferenceId">
            <summary>
            Stream reference ID. Valid values are available in the StreamReferenceIdValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.StreamUsageChildItem.LiveDefault">
            <summary>
            Default live stream
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.StreamUsageChildItem.LiveModeValues">
            <summary>
            A list of valid names/values for the LiveMode property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.StreamUsageChildItem.LiveMode">
            <summary>
            Mode for live stream. Valid values are available in the LiveModeValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.StreamUsageChildItem.Record">
            <summary>
            Default recording stream
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.SystemAddressChildItem">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SystemAddressChildItem.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem,VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="systemAddress">The ConfigurationItem returned from elsewhere</param>
            <param name="parentWrapper"></param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SystemAddressChildItem.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SystemAddressChildItem.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.SystemAddressChildItem.Url">
            <summary>
            URL
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.SystemAddressChildItem.AddressTypeValues">
            <summary>
            A list of valid names/values for the AddressType property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.SystemAddressChildItem.AddressType">
            <summary>
            Type. Valid values are available in the AddressTypeValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.SystemAddressFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SystemAddressFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="systemAddressFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SystemAddressFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SystemAddressFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.SystemAddressFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.SystemAddressFolder.SystemAddressChildItems">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.TaskDetail">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TaskDetail.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            </summary>
            <param name="serverId"></param>
            <param name="task"></param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TaskDetail.#ctor(VideoOS.Platform.ServerId,System.String)">
            <summary>
            
            </summary>
            <param name="serverId"></param>
            <param name="path"></param>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TaskDetail.Progress">
            <summary>
            Defines the progress of the server task.  When Progress is 100, or state is Success or Error - the task is complete.
            
            To get this field updated, call the Update method, and recheck the fields.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TaskDetail.State">
            <summary>
            Defines the  current state of this task.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TaskDetail.ErrorCode">
            <summary>
            If state is Error the ErrorCode explains what went wrong.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TaskDetail.ErrorText">
            <summary>
            When state is Error the ErrorState TBD
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TaskDetail.UpdateState">
            <summary>
            Calls the server to get the fields updated, when the progress is &lt; 100
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.TimeProfile">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfile.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="timeProfile">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfile.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfile.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfile.TimeProfileAppointmentRecurChildItems">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfile.TimeProfileAppointmentRootChildItems">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfile.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfile.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfile.TimeProfileTypeValues">
            <summary>
            A list of valid names/values for the TimeProfileType property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfile.TimeProfileType">
            <summary>
            Time profile type. Valid values are available in the TimeProfileTypeValues property dictionary.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfile.AddAppointment(System.Boolean,System.DateTime,System.DateTime,System.String)">
            <summary>
            Add appointment
            </summary>
            <param name="allDayEvent">All day event</param>
            <param name="startDateTime">Start time</param>
            <param name="endDateTime">End time</param>
            <param name="subject">Subject</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfile.AddAppointment">
            <summary>
            Add appointment
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfile.RemoveAppointment(System.String)">
            <summary>
            Remove appointment
            </summary>
            <param name="itemSelection">Select appointment to remove</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfile.RemoveAppointment">
            <summary>
            Remove appointment
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfile.AddRecurringAppointment(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.DateTime,System.DateTime,System.String,System.Int32)">
            <summary>
            Add recurring appointment
            </summary>
            <param name="subject">Subject</param>
            <param name="recurrenceOccurrenceStartTime">Start time</param>
            <param name="recurrenceOccurrenceDuration">Duration</param>
            <param name="recurrencePatternFrequency">Frequency</param>
            <param name="recurrencePatternInterval">Interval</param>
            <param name="recurrencePatternDaysOfWeek">Days of the week as bitmask</param>
            <param name="recurrencePatternDayOfMonth">Date in the month</param>
            <param name="recurrencePatternMonthOfYear">Month</param>
            <param name="recurrencePatternOccurrenceOfDayInMonth">Week number within the month</param>
            <param name="recurrencePatternType">Define occurrences</param>
            <param name="recurrenceRangeStartDate">Start of occurrences</param>
            <param name="recurrenceRangeEndDate">End of occurrences</param>
            <param name="recurrenceRangeLimit">End of occurrences is defined by:</param>
            <param name="recurrenceRangeMaxOccurrences">End of occurrences by count</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfile.AddRecurringAppointment">
            <summary>
            Add recurring appointment
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfile.RemoveRecurringAppointment(System.String)">
            <summary>
            Remove recurring appointment
            </summary>
            <param name="itemSelection">Remove a series of recurring appointments</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfile.RemoveRecurringAppointment">
            <summary>
            Remove recurring appointment
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddAppointmentServerTask">
            <summary>
            Add appointment
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddAppointmentServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAppointmentServerTask.AllDayEvent">
            <summary>
            All day event
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAppointmentServerTask.StartDateTime">
            <summary>
            Start time
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAppointmentServerTask.EndDateTime">
            <summary>
            End time
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddAppointmentServerTask.Subject">
            <summary>
            Subject
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveAppointmentServerTask">
            <summary>
            Remove appointment
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveAppointmentServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveAppointmentServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveAppointmentServerTask.ItemSelection">
            <summary>
            Select appointment to remove. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask">
            <summary>
            Add recurring appointment
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.AppointmentRootId">
            <summary>
            ID of the recurrence
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.Subject">
            <summary>
            Subject
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.RecurrenceOccurrenceStartTime">
            <summary>
            Start time. The start time of each appointment, formatted as HH:mm:ss (seconds are ignored)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.RecurrenceOccurrenceDuration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.RecurrencePatternFrequencyValues">
            <summary>
            A list of valid names/values for the RecurrencePatternFrequency property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.RecurrencePatternFrequency">
            <summary>
            Frequency. Valid values are available in the RecurrencePatternFrequencyValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.RecurrencePatternInterval">
            <summary>
            Interval
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.RecurrencePatternDaysOfWeek">
            <summary>
            Days of the week as bitmask. Bitmask for what days to include. Bit 0 is Sunday, 1 is Monday etc. Value of 127 (hexadecimal 7f) indicates all days of the week.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.RecurrencePatternDayOfMonth">
            <summary>
            Date in the month. Used when frequency is Monthly or Yearly
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.RecurrencePatternMonthOfYear">
            <summary>
            Month. Used when Frequency is Yearly
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.RecurrencePatternOccurrenceOfDayInMonthValues">
            <summary>
            A list of valid names/values for the RecurrencePatternOccurrenceOfDayInMonth property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.RecurrencePatternOccurrenceOfDayInMonth">
            <summary>
            Week number within the month. Defines the day of the week within the month for which the occurrence takes place. For example if bitmask defines 4 = Tuesdays, and this field is Second then the result is the second time it is a Tuesday in each month.<br/>
            <br/>
            Used when Frequency is Monthly or Yearly, and Define occurrences is Calculated.  <br/>
            <br/>
            Possible values:<br/>
            <br/>
            None<br/>
            <br/>
            First<br/>
            <br/>
            Second<br/>
            <br/>
            Third<br/>
            <br/>
            Fourth<br/>
            <br/>
            Last. Valid values are available in the RecurrencePatternOccurrenceOfDayInMonthValues property dictionary.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.RecurrencePatternTypeValues">
            <summary>
            A list of valid names/values for the RecurrencePatternType property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.RecurrencePatternType">
            <summary>
            Define occurrences. Setting Define occurrences to Explicit will use the specific relevant values, for example Date in the month repeated each month - while setting Define occurrences to Calculated will calculate what the date should be, based on Days of the week as bitmask and Week number within the month, for example second Tuesday in each month.. Valid values are available in the RecurrencePatternTypeValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.RecurrenceRangeStartDate">
            <summary>
            Start of occurrences
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.RecurrenceRangeEndDate">
            <summary>
            End of occurrences
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.RecurrenceRangeLimitValues">
            <summary>
            A list of valid names/values for the RecurrenceRangeLimit property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.RecurrenceRangeLimit">
            <summary>
            End of occurrences is defined by:. Valid values are available in the RecurrenceRangeLimitValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRecurringAppointmentServerTask.RecurrenceRangeMaxOccurrences">
            <summary>
            End of occurrences by count
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveRecurringAppointmentServerTask">
            <summary>
            Remove recurring appointment
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveRecurringAppointmentServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveRecurringAppointmentServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveRecurringAppointmentServerTask.ItemSelection">
            <summary>
            Remove a series of recurring appointments. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem,VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="timeProfileAppointmentRecur">The ConfigurationItem returned from elsewhere</param>
            <param name="parentWrapper"></param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.AppointmentRootId">
            <summary>
            ID of the recurrence
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.AllDayEvent">
            <summary>
            All day event
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.StartDateTime">
            <summary>
            Start time
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.EndDateTime">
            <summary>
            End time
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.Subject">
            <summary>
            Subject
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrenceDescription">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrenceOccurrenceStartTime">
            <summary>
            Start time. The start time of each appointment, formatted as HH:mm:ss (seconds are ignored)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrenceOccurrenceDuration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrencePatternTypeValues">
            <summary>
            A list of valid names/values for the RecurrencePatternType property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrencePatternType">
            <summary>
            Define occurrences. Setting Define occurrences to Explicit will use the specific relevant values, for example Date in the month repeated each month - while setting Define occurrences to Calculated will calculate what the date should be, based on Days of the week as bitmask and Week number within the month, for example second Tuesday in each month.. Valid values are available in the RecurrencePatternTypeValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrencePatternFrequencyValues">
            <summary>
            A list of valid names/values for the RecurrencePatternFrequency property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrencePatternFrequency">
            <summary>
            Frequency. Valid values are available in the RecurrencePatternFrequencyValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrencePatternInterval">
            <summary>
            Interval
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrencePatternDaysOfWeek">
            <summary>
            Days of the week as bitmask. Bitmask for what days to include. Bit 0 is Sunday, 1 is Monday etc. Value of 127 (hexadecimal 7f) indicates all days of the week.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrencePatternDayOfMonth">
            <summary>
            Date in the month. Used when frequency is Monthly or Yearly
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrencePatternMonthOfYear">
            <summary>
            Month. Used when Frequency is Yearly
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrencePatternOccurrenceOfDayInMonthValues">
            <summary>
            A list of valid names/values for the RecurrencePatternOccurrenceOfDayInMonth property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrencePatternOccurrenceOfDayInMonth">
            <summary>
            Week number within the month. Defines the day of the week within the month for which the occurrence takes place. For example if bitmask defines 4 = Tuesdays, and this field is Second then the result is the second time it is a Tuesday in each month.<br/>
            <br/>
            Used when Frequency is Monthly or Yearly, and Define occurrences is Calculated.  <br/>
            <br/>
            Possible values:<br/>
            <br/>
            None<br/>
            <br/>
            First<br/>
            <br/>
            Second<br/>
            <br/>
            Third<br/>
            <br/>
            Fourth<br/>
            <br/>
            Last. Valid values are available in the RecurrencePatternOccurrenceOfDayInMonthValues property dictionary.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrenceRangeStartDate">
            <summary>
            Start of occurrences
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrenceRangeEndDate">
            <summary>
            End of occurrences
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrenceRangeLimitValues">
            <summary>
            A list of valid names/values for the RecurrenceRangeLimit property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrenceRangeLimit">
            <summary>
            End of occurrences is defined by:. Valid values are available in the RecurrenceRangeLimitValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRecurChildItem.RecurrenceRangeMaxOccurrences">
            <summary>
            End of occurrences by count
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRootChildItem">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRootChildItem.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem,VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="timeProfileAppointmentRoot">The ConfigurationItem returned from elsewhere</param>
            <param name="parentWrapper"></param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRootChildItem.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRootChildItem.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRootChildItem.AllDayEvent">
            <summary>
            All day event
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRootChildItem.OriginalStartDateTime">
            <summary>
            Start date and time (before modification)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRootChildItem.StartDateTime">
            <summary>
            Start time
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRootChildItem.EndDateTime">
            <summary>
            End time
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileAppointmentRootChildItem.Subject">
            <summary>
            Subject
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.TimeProfileFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfileFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="timeProfileFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfileFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfileFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfileFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.TimeProfileFolder.TimeProfiles">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfileFolder.AddTimeProfile(System.String,System.String,System.String)">
            <summary>
            Add time profile
            </summary>
            <param name="name">Name</param>
            <param name="description">Description</param>
            <param name="timeProfileType">Time profile type</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfileFolder.AddTimeProfile">
            <summary>
            Add time profile
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfileFolder.RemoveTimeProfile(System.String)">
            <summary>
            Remove time profile
            </summary>
            <param name="itemSelection">Time profile to remove</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.TimeProfileFolder.RemoveTimeProfile">
            <summary>
            Remove time profile
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddTimeProfileServerTask">
            <summary>
            Add time profile
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddTimeProfileServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddTimeProfileServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddTimeProfileServerTask.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddTimeProfileServerTask.TimeProfileTypeValues">
            <summary>
            A list of valid names/values for the TimeProfileType property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddTimeProfileServerTask.TimeProfileType">
            <summary>
            Time profile type. Valid values are available in the TimeProfileTypeValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveTimeProfileServerTask">
            <summary>
            Remove time profile
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveTimeProfileServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveTimeProfileServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveTimeProfileServerTask.ItemSelection">
            <summary>
            Time profile to remove. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.User">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.User.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="user">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.User.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.User.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.User.Sid">
            <summary>
            SID
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.User.IdentityTypeValues">
            <summary>
            A list of valid names/values for the IdentityType property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.User.IdentityType">
            <summary>
            User type. Valid values are available in the IdentityTypeValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.User.AccountName">
            <summary>
            Account name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.User.DisplayName">
            <summary>
            Role display name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.User.Domain">
            <summary>
            Domain
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.User.MemberOf">
            <summary>
            Member of groups. Only filled when getting specific user, call the GetItem(item.Path) to fill the property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.User.MemberOfRoles">
            <summary>
            Member of roles. Only filled when getting specific user, call the GetItem(item.Path) to fill the property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.User.Members">
            <summary>
            Members. Only filled when getting specific user, call the GetItem(item.Path) to fill the property
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.UserDefinedEvent">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserDefinedEvent.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="userDefinedEvent">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserDefinedEvent.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserDefinedEvent.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.UserDefinedEvent.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.UserDefinedEvent.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.UserDefinedEvent.CreatedDate">
            <summary>
            Created date
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.UserDefinedEvent.Subtype">
            <summary>
            Subtype
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserDefinedEvent.ChangeSecurityPermissions(System.String)">
            <summary>
            Edit permissions
            </summary>
            <param name="userPath">User path</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserDefinedEvent.ChangeSecurityPermissions">
            <summary>
            Edit permissions
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.UserDefinedEventFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserDefinedEventFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="userDefinedEventFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserDefinedEventFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserDefinedEventFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserDefinedEventFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.UserDefinedEventFolder.UserDefinedEvents">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserDefinedEventFolder.AddUserDefinedEvent(System.String)">
            <summary>
            Add user-defined event
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserDefinedEventFolder.AddUserDefinedEvent">
            <summary>
            Add user-defined event
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserDefinedEventFolder.RemoveUserDefinedEvent(System.String)">
            <summary>
            Remove user-defined event
            </summary>
            <param name="itemSelection">Item to remove</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserDefinedEventFolder.RemoveUserDefinedEvent">
            <summary>
            Remove user-defined event
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddUserDefinedEventServerTask">
            <summary>
            Add user-defined event
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddUserDefinedEventServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddUserDefinedEventServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveUserDefinedEventServerTask">
            <summary>
            Remove user-defined event
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveUserDefinedEventServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveUserDefinedEventServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveUserDefinedEventServerTask.ItemSelection">
            <summary>
            Item to remove. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.UserFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="userFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.UserFolder.Users">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserFolder.AddRoleMember(System.String)">
            <summary>
            Add new user or group to role
            </summary>
            <param name="sid">SID</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserFolder.AddRoleMember">
            <summary>
            Add new user or group to role
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserFolder.RemoveRoleMember(System.String)">
            <summary>
            Remove role member
            </summary>
            <param name="itemSelection">Remove role member</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.UserFolder.RemoveRoleMember">
            <summary>
            Remove role member
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddRoleMemberServerTask">
            <summary>
            Add new user or group to role
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddRoleMemberServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddRoleMemberServerTask.Sid">
            <summary>
            SID
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveRoleMemberServerTask">
            <summary>
            Remove role member
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveRoleMemberServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveRoleMemberServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveRoleMemberServerTask.ItemSelection">
            <summary>
            Remove role member. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.VideoWall">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWall.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="videoWall">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWall.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWall.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.VideoWall.MonitorFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.VideoWall.VideoWallPresetFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.VideoWall.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.VideoWall.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.VideoWall.CreatedDate">
            <summary>
            Created date
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.VideoWall.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.VideoWall.StatusText">
            <summary>
            Status text. Is status text shown
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.VideoWall.TitleBarValues">
            <summary>
            A list of valid names/values for the TitleBar property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.VideoWall.TitleBar">
            <summary>
            Title bar. What to show in the title bar. Valid values are available in the TitleBarValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.VideoWallFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="videoWallFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallFolder.#ctor">
             <summary>
             
            
             Construct the class with default root path.
            
             This construction will contact the server and read the specified item.
             </summary>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.VideoWallFolder.VideoWalls">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallFolder.AddVideoWall(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Add new video wall
            </summary>
            <param name="name">Name</param>
            <param name="description">Description</param>
            <param name="statusText">Status text</param>
            <param name="titleBar">Title bar</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallFolder.AddVideoWall">
            <summary>
            Add new video wall
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallFolder.RemoveVideoWall(System.String)">
            <summary>
            Remove video wall
            </summary>
            <param name="itemSelection">Remove video wall</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallFolder.RemoveVideoWall">
            <summary>
            Remove video wall
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddVideoWallServerTask">
            <summary>
            Add new video wall
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddVideoWallServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddVideoWallServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddVideoWallServerTask.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddVideoWallServerTask.StatusText">
            <summary>
            Status text. Is status text shown
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddVideoWallServerTask.TitleBarValues">
            <summary>
            A list of valid names/values for the TitleBar property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddVideoWallServerTask.TitleBar">
            <summary>
            Title bar. What to show in the title bar. Valid values are available in the TitleBarValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveVideoWallServerTask">
            <summary>
            Remove video wall
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveVideoWallServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveVideoWallServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveVideoWallServerTask.ItemSelection">
            <summary>
            Remove video wall. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.VideoWallPreset">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallPreset.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="videoWallPreset">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallPreset.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallPreset.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.VideoWallPreset.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.VideoWallPreset.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.VideoWallPreset.CreatedDate">
            <summary>
            Created date
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallPreset.Activate">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.VideoWallPresetFolder">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallPresetFolder.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="videoWallPresetFolder">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallPresetFolder.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallPresetFolder.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.VideoWallPresetFolder.VideoWallPresets">
            <summary>
            Return a list of children with a given ItemType
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallPresetFolder.AddVideoWallPreset(System.String,System.String)">
            <summary>
            Add video wall preset
            </summary>
            <param name="name">Name</param>
            <param name="description">Description</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallPresetFolder.AddVideoWallPreset">
            <summary>
            Add video wall preset
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallPresetFolder.RemoveVideoWallPreset(System.String)">
            <summary>
            Remove video wall preset
            </summary>
            <param name="itemSelection">Remove video wall preset</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.VideoWallPresetFolder.RemoveVideoWallPreset">
            <summary>
            Remove video wall preset
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.AddVideoWallPresetServerTask">
            <summary>
            Add video wall preset
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.AddVideoWallPresetServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddVideoWallPresetServerTask.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.AddVideoWallPresetServerTask.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.RemoveVideoWallPresetServerTask">
            <summary>
            Remove video wall preset
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.RemoveVideoWallPresetServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveVideoWallPresetServerTask.ItemSelectionValues">
            <summary>
            A list of valid names/values for the ItemSelection property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.RemoveVideoWallPresetServerTask.ItemSelection">
            <summary>
            Remove video wall preset. . Valid values are available in the ItemSelectionValues property dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.LayoutGroup">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LayoutGroup.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="layoutGroup">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LayoutGroup.#ctor(VideoOS.Platform.ServerId,System.String)">
             <summary>
             
             Construct the class from serverId of the Management Server that owns the configuration, and the path of the item.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="serverId">Identify the Management Server that owns the configuration</param>
             <param name="path">The path of a specific item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.LayoutGroup.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.LayoutGroup.LayoutFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.LayoutGroup.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.LayoutGroup.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ManagementServer">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ManagementServer.#ctor(VideoOS.Platform.ServerId,VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            
            Construct the class from serverId of the Management Server that owns the configuration, and the already returned ConfigurationItem.
            </summary>
            <param name="serverId">Identify the Management Server that owns the configuration</param>
            <param name="managementServer">The ConfigurationItem returned from elsewhere</param>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">When LoginSettings not found for serverId</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ManagementServer.#ctor(VideoOS.Platform.FQID)">
             <summary>
             
             Construct the class from a MIP FQID - note that not all configuration items have a corresponding FQID.
            
             This construction will contact the server and read the specified item.
             </summary>
             <param name="fqid">Identify the MIP item</param>
             <exception cref="T:VideoOS.Platform.MIPException">Represents a number of possible exceptions. Possible exceptions can be found via the inherited exceptions - like PathNotFoundMIPException</exception>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ManagementServer.#ctor(VideoOS.Platform.ServerId)">
            <summary/>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.AccessControlSystemFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.AlarmDefinitionFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.AnalyticsEventFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.AutoDetectConfigurationFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.BasicUserFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.CameraGroupFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.GenericEventDataSourceFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.GenericEventFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.GisMapLocationFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.InputEventGroupFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.LayoutGroupFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.LprMatchListFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.MetadataGroupFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.MicrophoneGroupFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.OutputGroupFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.RecordingServerFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.RoleFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.SpeakerGroupFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.SystemAddressFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.TimeProfileFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.UserDefinedEventFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.VideoWallFolder">
            <summary>
            Return the single folder item of the given ItemType
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.LastModified">
            <summary>
            Last modified
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.TimeZone">
            <summary>
            Time zone
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.ComputerName">
            <summary>
            Computer name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.DomainName">
            <summary>
            Domain
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.LastStatusHandshake">
            <summary>
            Last site status handshake
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.PhysicalMemory">
            <summary>
            Physical memory (MB)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.Platform">
            <summary>
            Windows platform
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.Processors">
            <summary>
            Processors
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.ServiceAccount">
            <summary>
            Management server service account
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.SynchronizationStatus">
            <summary>
            Site synchronization status
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ManagementServer.Version">
            <summary>
            Product version
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ManagementServer.LoadTasks">
            <summary>
            Load the tasks existing on the server
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ManagementServer.ClientLogOnSupported(System.String,System.String)">
            <summary>
            Client application login supported
            </summary>
            <param name="clientApplicationType">Client application type</param>
            <param name="userName">User name</param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ManagementServer.ClientLogOnSupported">
            <summary>
            Client application login supported
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ClientLogOnSupportedServerTask">
            <summary>
            Client application login supported
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ClientLogOnSupportedServerTask.Execute">
            <summary>
            Call this method to let the server execute when the properties have been updated.<br/>
            The returned ServerTask can be used to inspect the result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ClientLogOnSupportedServerTask.ClientApplicationTypeValues">
            <summary>
            A list of valid names/values for the ClientApplicationType property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ClientLogOnSupportedServerTask.ClientApplicationType">
            <summary>
            Client application type. Specifies the type of client application. Valid values are available in the ClientApplicationTypeValues property dictionary.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ClientLogOnSupportedServerTask.UserName">
            <summary>
            User name. User name for the hardware
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ConfigurationApiProperties">
            <summary>
            Contains the properties provided by a ConfigurationItem 
            
            This class is used when the properties for a ConfigurationItem is not known.
            This is used for e.g. camera settings properties where the list of properties depends on the type of camera.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ConfigurationApiProperties.Keys">
            <summary>
            The list of Keys for properties on this item
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ConfigurationApiProperties.KeysFullName">
            <summary>
            Will return the list of keys including special characters, e.g. '.:/' as used by camera settings.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ConfigurationApiProperties.GetValue(System.String)">
            <summary>
            Lookup the value for a property 
            </summary>
            <param name="keyOrKeyFullName">The full name, or just the readable part (as returned by Keys)</param>
            <returns>Value or null if not found</returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ConfigurationApiProperties.SetValue(System.String,System.String)">
            <summary>
            Update the value of one specific property
            </summary>
            <param name="keyOrKeyFullName"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ConfigurationApiProperties.GetValueTypeInfoCollection(System.String)">
            <summary>
            Returns the underlaying ValueTypeInfo list for one property
            </summary>
            <param name="keyOrKeyFullName"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ValueTypeInformation">
            <summary>
            This class assist in defining what values are valid for a given property.
            
            Multiple instances of this class are often available for a property.
            
            Check the Configuration API documentation for more details
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ValueTypeInformation.TranslationId">
            <summary>
            When translating to any language this Id is used to make the lookup in 
            the Dictionary returned by the GetTranslations method.<br/>
            When no Id is provided the string in the Name field is displayed as label.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ValueTypeInformation.Name">
            <summary>
            The name of the value type detail.<br/>
            For validation of Int, it can be "MaxValue" or "MinValue" and the Value will contain that value.<br/>
            For help to Enum, the Name is the default displayname for en-US, the TranslationId is used for other languages.<br/>
            For sliders, it can be "MinValue", "MaxValue" and "StepValue".<br/>
            The ValueTypeInfoNames class contains these constants.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ValueTypeInformation.Value">
            <summary>
            Contains the actual value of the property. The content type is as defined by the PropertyType. 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ServerTask">
            <summary>
            Represent a task that is running on the server.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ServerTask.Progress">
            <summary>
            Defines the progress of the server task.  When Progress is 100, or state is Success or Error - the task is complete.
            
            To get this field updated, call the Update method, and recheck the fields.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ServerTask.State">
            <summary>
            Defines the  current state of this task.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ServerTask.ErrorCode">
            <summary>
            If state is Error the ErrorCode explains what went wrong.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ServerTask.ErrorText">
            <summary>
            When state is Error the ErrorState TBD
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ServerTask.Path">
            <summary>
            The path of an item, when relevant. Usually available after adding a ConfigurationItem
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ServerTask.ItemType">
            <summary>
            Returns the ItemType of the underlayng ConfigurationItem, usually InvokeResult or InvokeInfo
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ServerTask.UpdateState">
            <summary>
            Calls the server to get the fields updated, when the progress is &lt; 100
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ServerTask.GetProperty(System.String)">
            <summary>
            Return a property value as string, if key is not found the return value will be null.
            </summary>
            <param name="key"></param>
            <returns>value or null</returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ServerTask.SetProperty(System.String,System.String)">
            <summary>
            Sets the value of a property (all is string format here)
            </summary>
            <param name="key"></param>
            <param name="content"></param>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ServerTask.GetPropertyKeys">
            <summary>
            Gets a collection of all available property keys
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ServerTask.GetValueTypeInfoList(System.String)">
            <summary>
            Gets a list of defined <see cref="T:VideoOS.ConfigurationApi.ClientService.ValueTypeInfo"/>  for a given property.  
            If no ValueTypeInfo is available, an empty list is returned.
            </summary>
            <param name="propertyKey"></param>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ServerTask.Methods">
            <summary>
            The available methods for this task.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ServerTask.ExecuteDefault">
            <summary>
            Will execute the first available method.
            Can be called when multiple steps are involved in changing values in the properties.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ServerTask.ExecuteMethod(System.String)">
            <summary>
            Execute the provided method.  The method id must be one of the defined values in the Methods property.
            </summary>
            <param name="methodId"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigurationItems.ServerTask.ValidateItem">
            <summary>
            Validate the current content 
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.ClassCollectionServerTask">
            <summary>
            A serverTask (result) that also Contains a collection of classes, as a result of the executed task on the server.
            
            Is used for e.g. getting the devices using a specific Storage.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ConfigurationItems.ClassCollectionServerTask.ClassCollection">
            <summary>
            Contains a list of ConfigurationItem's
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ConfigurationItems.StateEnum">
            <summary>
            Defines the different valies for the ServerTask.State property
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ConfigurationItems.StateEnum.Success">
            <summary>
            The task has completed with success
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ConfigurationItems.StateEnum.Error">
            <summary>
            The task has completed with error, check the errorCode and errorState for explanation
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ConfigurationItems.StateEnum.InProgress">
            <summary>
            The task is in progress, check the Progress property for how far it is
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ConfigurationItems.StateEnum.Idle">
            <summary>
            The task is queued up on the server, awaiting free resources.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ConfigurationItems.StateEnum.Completed">
            <summary>
            The task has completed
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.ClientErrorCode">
            <summary>
            Error code of the client
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.ClientErrorCode.Ok">
            <summary>
            No error
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.ClientErrorCode.ConnectionLost">
            <summary>
            Recording server is disconnected
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.ClientErrorCode.WrongState">
            <summary>
            Wrong State
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.ClientErrorCode.AuthenticationFailed">
            <summary>
            Authentication to recording server failed
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.ClientErrorCode.InternalError">
            <summary>
            Unknown exception is thrown, check log for details.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.ClientErrorCode.Max">
            <summary>
            Don't add error codes beyond this number!
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.DirectSpeakerControllerExt">
            <summary>
            Extension to DirectSpeakerController
            The DirectSpeakerControllerExt sends an audio stream directly to an outgoing speaker. The audio data is transported "as is",
            without adjusting parameters. Added error code and device id properties.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DirectSpeakerControllerExt.OutgoingAudioErrorCode">
            <summary>
            Sets the outgoing audio error provider code
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DirectSpeakerControllerExt.DeviceId">
            <summary>
            ID of the speaker
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerControllerExt.ShowErrorInISClientCommunicationMessage(System.String,System.Int32)">
            <summary>
            Used internally
            </summary>
            <param name="errorMessage"></param>
            <param name="errorCode"></param>
        </member>
        <member name="P:VideoOS.Platform.Data.DirectSpeakerControllerExt.OutgoingAudioErrorText">
            <summary>
             Sets the outgoing audio error provider text
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerControllerExt.Connect(VideoOS.Platform.FQID,System.Int32)">
             <summary>
             Connects and to reserves the speaker identified by SpeakerFQID
             
             Note: Do not provide a long timeout when called from within a UI thread.
            
             Next step is to invoke TransmitStart
             </summary>
             <param name="speakerFQID"></param>
             <param name="timeoutMSec"></param>
             <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Data.EventHeaderTypes">
            <summary>
            Contains the built-in types used in the EventHeader.Type on the BaseEvent class.
            Partners are welcome to use their own types.<br/>
            These types can be used to filter message reception of type level, instead of receiving all messages, when using the MessageCommunication classes.
            <see cref="T:VideoOS.Platform.Messaging.CommunicationIdFilter"/> constructor for more on usage.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.EventHeaderTypes.SystemEventType">
            <summary>
            All system events, like "Not Responding", "Responding" for camera connection state changes. <br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.EventHeaderTypes.SystemAlarmType">
            <summary>
            Used to identify that an event of type <see cref="F:VideoOS.Platform.Data.EventHeaderTypes.SystemEventType"/> is the base of an alarm.  
            Events that has other types, e.g. <see cref="F:VideoOS.Platform.Data.EventHeaderTypes.LPREventType"/> will continue to have same type as the original event.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.EventHeaderTypes.SystemMADType">
            <summary>
            Used when a MAD formatted analytics event is received by the Event Server and converted into a BaseEvent.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.EventHeaderTypes.AccessControlSystemEventType">
            <summary>
            Identifies all events generated by the Event Server's Acces Control framework.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.EventHeaderTypes.LPRServerEventType">
            <summary>
            Events related to the LPR server itself
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.EventHeaderTypes.LPREventType">
            <summary>
            Event for a found license plate
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.EventHeaderTypes.LPRVideoSourceEventType">
            <summary>
            Events related to the video source beging analyzed 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.HardwareDeviceDefinitions.DeviceDefinition">
            <summary>
            Base class responsible for describing the parameters for a single device
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.HardwareDeviceDefinitions.DeviceDefinition.#ctor(System.Collections.Generic.IDictionary{VideoOS.Platform.Data.MediaContent,System.String})">
            <summary>
            ctor
            </summary>
            <param name="acceptedCodecs"></param>
        </member>
        <member name="P:VideoOS.Platform.Data.HardwareDeviceDefinitions.DeviceDefinition.Codec">
            <summary>
            Gets and sets the default codec to be used for the camera.
            
            Allowed values are <see cref="F:VideoOS.Platform.Data.MediaContent.Audio"/>.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.HardwareDeviceDefinitions.DeviceDefinition.CodecSet">
            <summary>
            Gets the set of codecs supported by the camera.
            
            Allowed values are any combinations of <see cref="F:VideoOS.Platform.Data.MediaContent.Audio"/>
            </summary>
            <remarks>While other codecs can be put into the list, <see cref="M:VideoOS.Platform.Data.HardwareDeviceDefinitions.DeviceDefinition.GenerateDeviceParameters(System.String,System.Collections.Generic.IDictionary{System.String,System.String})"/> will throw an exception
            when the parameters are generated</remarks>
        </member>
        <member name="M:VideoOS.Platform.Data.HardwareDeviceDefinitions.DeviceDefinition.GenerateDeviceParameters(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Generates the parameters for the device in the format used by the MIP driver.
            </summary>
            <param name="prefix">Prefix</param>
            <param name="parameters">The <see cref="T:System.Collections.Generic.IDictionary`2"/> where to write the parameters.</param>
        </member>
        <member name="T:VideoOS.Platform.Data.HardwareDeviceDefinitions.PcmMicrophoneDeviceDefinition">
            <summary>
            This class is responsible for describing the parameters for a single microphone device (when using PCM format)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.HardwareDeviceDefinitions.PcmMicrophoneDeviceDefinition.DefaultSampleRate">
            <summary>
            Initial value of SampleRate
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.HardwareDeviceDefinitions.PcmMicrophoneDeviceDefinition.DefaultBitsPerSample">
            <summary>
            Initial value of BitsPerSample
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.HardwareDeviceDefinitions.PcmMicrophoneDeviceDefinition.DefaultNumberOfChannels">
            <summary>
            Initial value of NumberOfChannels
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.HardwareDeviceDefinitions.PcmMicrophoneDeviceDefinition.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.HardwareDeviceDefinitions.PcmMicrophoneDeviceDefinition.SampleRate">
            <summary>
            Gets and sets the Sample rate for the microphone (currently only 8000 supported).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.HardwareDeviceDefinitions.PcmMicrophoneDeviceDefinition.SampleRateRange">
            <summary>
            Gets and sets the allowed range for for the sample rate.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.HardwareDeviceDefinitions.PcmMicrophoneDeviceDefinition.BitsPerSample">
            <summary>
            Gets and sets Bits per sample for the microphone (currently only 16 is supported - 2 bytes int).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.HardwareDeviceDefinitions.PcmMicrophoneDeviceDefinition.BitsPerSampleSet">
            <summary>
            Gets and sets the allowed range for the Bits per Sample.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.HardwareDeviceDefinitions.PcmMicrophoneDeviceDefinition.NumberOfChannels">
            <summary>
            Gets and sets Number of Channels for the microphone (currently only 1 is supported - mono sound).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.HardwareDeviceDefinitions.PcmMicrophoneDeviceDefinition.NumberOfChannelsRange">
            <summary>
            Gets and sets the allowed range for for the Number of Channels.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.HardwareDeviceDefinitions.PcmMicrophoneDeviceDefinition.GenerateDeviceParameters(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Generates the parameters for the mic in the format used by the MIP driver.
            </summary>
            <param name="prefix">Prefix</param>
            <param name="parameters">The <see cref="T:System.Collections.Generic.IDictionary`2"/> where to write the parameters.</param>
        </member>
        <member name="T:VideoOS.Platform.Data.HardwareDeviceDefinitions.MicrophoneDeviceDefinition">
            <summary>
            This class is responsible for describing the parameters for a single microphone device
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.HardwareDeviceDefinitions.MicrophoneDeviceDefinition.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.SizeAndCropInfo">
            <summary>
            Internal class usage for holding the size and crop info
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.SizeAndCropInfo.FillCropInfo(VideoOS.Platform.CroppingInfo)">
            <summary>
            Fills CroppingInfo with the size of SizeAndCropInfo
            </summary>
            <param name="croppingInfo"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.SizeAndCropInfo.FillCropInfo(VideoOS.Platform.Data.JPEGData)">
            <summary>
            Fills CroppingInfo with the size of SizeAndCropInfo
            </summary>
            <param name="jpegData"></param>
        </member>
        <member name="T:VideoOS.Platform.Data.GenericTranscodedVideoSource`1">
            <summary>
            GenericTranscodedVideoSource - generic class to dela with transoded sources<br/>
            This class is NOT thread safe, and all calls to these methods MUST be coming from same thread.<br/>
            When getting images from the server, it should be considered that the Get() method can take some time and is not ideal to execute on a UI thread.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericTranscodedVideoSource`1.#ctor(VideoOS.Platform.Item,VideoOS.Platform.Data.IInternalCommandServiceImplementer{`0},VideoOS.Platform.Data.SizeAndCropInfo)">
            <summary>
            Construct a VideoSource for transcoded handling. The Item MUST be of Kind==Kind.Camera
            </summary>
            <param name="item"></param>
            <param name="implementer"></param>
            <param name="sizeAndCropInfo"></param>
        </member>
        <member name="P:VideoOS.Platform.Data.GenericTranscodedVideoSource`1.Height">
            <summary>
            The height of all frames received
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.GenericTranscodedVideoSource`1.Width">
            <summary>
            The width of all frames received
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.GenericTranscodedVideoSource`1.AllowUpscaling">
            <summary>
            Gets or sets whether upscaling is allowed
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.GenericTranscodedVideoSource`1.KeepAspectRatio">
            <summary>
            Gets whether keep aspect is allowed
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.GenericTranscodedVideoSource`1.FillWithBlack">
            <summary>
            Gets whether filling with black is allowed
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericTranscodedVideoSource`1.SetKeepAspectRatio(System.Boolean,System.Boolean)">
            <summary>
            Instruct the Media Toolkit to keep the aspect ratio for the transcoded frames.<br/>
            This method <i>must</i> be called before the Init call.
            <param name="keepAspectRatio">true to keep same aspect ratio as the original frames has.</param>
            <param name="fillSpace">true to fill missing pixels with black to match the target width and height</param>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericTranscodedVideoSource`1.Init">
            <summary>
            Initialize the server connection and set default width and height
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericTranscodedVideoSource`1.InitInternal(System.Int32,System.Int32,System.Func{System.Object})">
            <summary>
            Initialize the server connection and set the with and height to specific values.<br/>
            The height and width should be set to the lowest value that make sense for your application, 
            e.g. don't ask for 1080x720 images if displaying thumbnails.<br/>
            </summary>
            <exception cref="T:VideoOS.Platform.ImplementationMIPException">Looks like a programming error, check order and parameters of the calls.</exception>
            <exception cref="T:VideoOS.Platform.NotAuthorizedMIPException">Unable to connect to the server. Could be user is not authorized to see this camera.</exception>
            <param name="width"></param>
            <param name="height"></param>
            <param name="imageExporterConnect"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericTranscodedVideoSource`1.SuspendSettingsUpdate">
            <summary>
            Calling this method will suspend the change to any settings, until a ResumeSettingsUpdate has been called.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericTranscodedVideoSource`1.ResumeSettingsUpdate">
            <summary>
            Calling this method will allow the system to perform the pending settings changes done between calling the SuspendSettingUpdate and this method.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericTranscodedVideoSource`1.SetWidthHeight">
            <summary>
            Enforce the changed width, height and allow upscaling properties.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericTranscodedVideoSource`1.SetCropRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Define a cropping rectangle of what part of the image to pick out.<br/>
            The values are all between 0.0 up to 1.0 as a relative part of the original image.<br/>
            To crop out a lower right hand rectangle these values could apply:<br/>
            	SetCropRectangle( 0.5, 0.5, 0.25, 0.25 );
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="P:VideoOS.Platform.Data.GenericTranscodedVideoSource`1.Compression">
            <summary>
            The quality of the JPEGs.  A value between 1..100. <br/>
            The name of the property should really have been Quality, not Compression.<br/>
            The default value is 75.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.GenericTranscodedVideoSource`1.CustomData">
            <summary>
            Can be set to any value or class that is used by the application.
            The current value will be 'returned' in any subsequent JPEGData on next received frame.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericTranscodedVideoSource`1.Close">
            <summary>
            Close session to server and cleanup.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.IInternalCommandServiceImplementer`1">
            <summary>
            Interface for communication with InternalCommandService.
            Used by instances of BaseVideoSource
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IInternalCommandServiceImplementer`1.GetNearest">
            <summary>
            Method for getting nearest timestamp frame
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IInternalCommandServiceImplementer`1.GetAt">
            <summary>
            Method for getting frame at the timestamp or later/after
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IInternalCommandServiceImplementer`1.GetAtOrBefore">
            <summary>
            Method for getting frame at the timestamp or earlier/before
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IInternalCommandServiceImplementer`1.GetAfter">
            <summary>
            Method for getting frame after/later the timestamp 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IInternalCommandServiceImplementer`1.GetBefore">
            <summary>
            Method for getting frame before/earlier the timestamp 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IInternalCommandServiceImplementer`1.Command">
            <summary>
            Method for command execution
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IInternalCommandServiceImplementer`1.OnData">
            <summary>
            callback for additional work done over the data
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IInternalCommandServiceImplementer`1.Convertor">
            <summary>
            Convertor from TDataType to SourceDataType
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.GenericVideoSource`1">
            <summary>
            BaseVideoSource in abstract class for video and audio sources.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.GenericVideoSource`1.SyncObject">
            <summary>
            Synchronization object used by inheritors
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.#ctor(VideoOS.Platform.Item,System.Guid[],VideoOS.Platform.Data.IInternalCommandServiceImplementer{`0})">
            <summary>
            Constructs a BaseVideoSource. The Item MUST be of Kind==Kind.Camera or Kind==Kind.Microphone
            </summary>
            <param name="item">Item for which data will be retrieved</param>
            <param name="supportedKinds">Kind of the Item that will be allowed to be passed</param>
            <param name="implementer">Implementer of the InternalCommandService commands</param>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.InitInternal(System.Func{System.Object},System.Action)">
            <summary>
            Initialize the server connection.
            </summary>
            <exception cref="T:VideoOS.Platform.ImplementationMIPException">Looks like a programming error, check order and parameters of the calls.</exception>
            <exception cref="T:VideoOS.Platform.NotAuthorizedMIPException">Unable to connect to the server. Could be user is not authorized to see this camera.</exception>
        </member>
        <member name="P:VideoOS.Platform.Data.GenericVideoSource`1.ItemMediaType">
            <summary>
            Returns string with media type of the selected Item
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.Close">
            <summary>
            Close session to server and cleanup.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.GenericVideoSource`1.SessionId">
            <summary>
            The object representing the underlaying session
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.Get(System.DateTime)">
            <summary>
            Get one frame at the specified time.<br/> if no image found, null may be returned.
            </summary>
            <param name="dateTime"></param>
            <returns>null or a BaseVideoSourceData class</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.Get(System.DateTime,System.TimeSpan,System.Int32)">
            <summary>
            Get a list of Raw data from the time specified and limited as specified.
            </summary>
            <param name="dateTime">DateTime of first frame</param>
            <param name="maxTimeAfter">Max TimeSpan to look for images</param>
            <param name="maxCountAfter">Max number of images to return</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.GetNearest(System.DateTime)">
            <summary>
            Get the nearest raw image to the DateTime specified.<br/>
            This method is useful when being issued within a second of when the recording took place. e.g. close to real time. 
            The actual recording may not have happened yet, and this method will then go back a few seconds instead of returning null.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.GetAtOrBefore(System.DateTime)">
            <summary>
            Get the previous image to the DateTime specified or the image at the exact same time.<br/>
            This method is useful when being issued within a second of when the recording took place. e.g. close to real time. 
            The actual recording may not have happened yet, and this method will then go back a few seconds instead of returning null.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.GoToWithResult(System.DateTime,System.String)">
            <summary>
            Set the pointer as close to this time as possible.
            </summary>
            <remarks>
            This method will return true if the video pointer was moved - even if the time it was moved to is far in time from the requested time.
            False is only returned if the video pointer is not moved, which only happens in a few cases:
            <ol>
              <li>If the direction argument is PlaybackPlayModeData.Forward, the method returns true if there is ANY video at or after the requested time.
                  Only if the requested time is after database end will GoToWithResultreturn false.</li>
              <li>If the direction argument is PlaybackPlayModeData.Reverse, the method returns true if there is ANY video at or before the requested time.
                  Only if the requested time is before database start will GoToWithResult return false.</li>
              <li>If the direction argument is something else, it will return true, if there is any video and false only if the DB is empty.</li>
            </ol>
            </remarks>
            <param name="timestamp">The point in time that the video pointer should be moved to</param>
            <param name="playbackPlayModeData">Used to fine tune the direction to move if exact time stamp is not available.  
            Set to one of the PlaybackPlayModeData definitions, as this can often be taken from the current playback mode.</param>
            <returns>True if the video pointer was moved; false if it did not move</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.GoTo(System.DateTime,System.String)">
            <summary>
            Set the pointer as close to this time as possible.
            </summary>
            <param name="timestamp">The point in time that the video pointer should be moved to</param>
            <param name="playbackPlayModeData">Used to fine tune the direction to move if exact time stamp is not available.  
            Set to one of the PlaybackPlayModeData definitions, as this can often be taken from the current playback mode.</param>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.GetNext">
            <summary>
            Get the next frame after last received frame
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.FireCommandInternal(System.Func{System.Object,VideoOS.Platform.FQID,System.DateTime,`0},System.DateTime)">
            <summary>
            Fires command
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.FireCommandInternal(System.Func{System.Object,System.String,`0},System.String)">
            <summary>
            Fires command
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.FireCommandInternal(System.Func{`0})">
            <summary>
            Fires command
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.GetNext(System.DateTime)">
            <summary>
            Get the next frame after the one identified by DateTime
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.GetPrevious">
            <summary>
            Get the previous frame <br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.GetPrevious(System.DateTime)">
            <summary>
            Get the previous frame to a given timestamp<br/>
            This method supported for standalone MIP library applications.
            </summary>
            <param name="dateTime">The timestamp to get the previous frame to</param>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.GetNextViaLowerLevel">
            <summary>
            Get the next image <br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.GetPreviousSequence">
            <summary>
            Get the first image in the previous sequence<br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.GetNextSequence">
            <summary>
            Get the first image of the next sequence<br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.GetBegin">
            <summary>
            Get first frame in the database<br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.GenericVideoSource`1.GetEnd">
            <summary>
            Get last frame in the database<br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.DirectSpeakerController">
            <summary>
            The DirectSpeakerController sends an audio stream directly to an outgoing speaker. The audio data is transported "as is", without adjusting parameters like .
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DirectSpeakerController._deviceFQID">
            <summary>
            ID of the speaker
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DirectSpeakerController._isClients">
            <summary>
            collection of Image Server clients
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DirectSpeakerController._retryConnectTimer">
            <summary>
            Timer that trigger swap to new camera
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DirectSpeakerController._retryConnectTimerInterval">
            <summary>
            Timer interval value. Is increased over time when connection fails
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DirectSpeakerController._outgoingAudioErrorText">
            <summary>
            Holds outgoing audio error provider text
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DirectSpeakerController.DoRetryConnect">
            <summary>
            If true, then the controller will try to reconnect automatically when the connection fails. 
            Default is false. I.e. do not try to reconnect.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DirectSpeakerController.MaxAllowableTimeOutMSec">
            <summary>
            The maximum allowable timeout in milliseconds for connect/disconnect 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DirectSpeakerController.DefAllowableTimeOutMSec">
            <summary>
            The minimum allowable timeout in milliseconds for connect/disconnect
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DirectSpeakerController.LoginSettings">
            <summary>
            Set the loginSettings relevant for the speaker being connected to
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DirectSpeakerController.HasAnyISClients">
            <summary>
            Indicates whether the speaker controller has any clients
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DirectSpeakerController.Connected">
            <summary>
            Returns true if the speaker controller is connected to a speaker
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DirectSpeakerController.Busy">
            <summary>
            Is true if the connection state is not "Disconnected" or "Uninitialized".
            Must be false to be allowed to initiate the Connect request
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DirectSpeakerController.Mute">
            <summary>
            Gets or sets whether audio is muted or not
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DirectSpeakerController.OutgoingAudioTransmitEnableState">
            <summary>
            Sets the outgoing audio transmit enable state
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DirectSpeakerController.OutgoingAudioErrorText">
            <summary>
            Sets the outgoing audio error provider text
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.#ctor">
            <summary>
            Creates a new DirectSpeakerController. Performs minimal initiating work. Connect() still needs to be called. 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.Close(System.Int32)">
            <summary>
            Stops the audio recorder stream and the disconnects the Speaker.
            Note: Do not provide a long timeout when called from within a UI thread.
            </summary>
            <param name="timeoutMSec">The maximum wait time for a connect. Otherwise mnimum 100 msec, Max 10 sec</param>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.Dispose">
            <summary>
            Disposed internally
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.Connect(VideoOS.Platform.FQID,System.Int32)">
            <summary>
            Connects and to reserves the speaker identified by SpeakerFQID
            
            Note: Do not provide a long timeout when called from within a UI thread.
            
            Next step is to invoke TransmitStart
            </summary>
            <param name="speakerFQID">The Speaker's FQID</param>
            <param name="timeoutMSec">The maximum wait time for a connect. Otherwise mnimum 100 msec, Max 10 sec</param>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.TransmitStart">
            <summary>
            Start the transmission. Can only be called after a successful Connect
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.TransmitStop">
            <summary>
            Stop the transmission. Will stop the transmission from the recorder side tothe speaker. 
            But it will retain the connection to the speaker and therefore also keep it reserved.
            May be followed by a TransmitStart to resume the transmission
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.SendData(System.Byte[])">
            <summary>
            Send audio data directly to a speaker.
            </summary>
            <param name="audioData"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.InitOutgoingWaveFormat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Init outgoing wave format. Use when sending wrapped data.
            </summary>
            <param name="channelsCount"></param>
            <param name="bitsPerSample"></param>
            <param name="samplesPerSecond"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.SendWrappedData(System.Byte[])">
            <summary>
            Send audio data directly to a speaker. Uses configured Wave samping rate, channels count and bits per sample
            Sending wrapped data will add generic byte data header to each request containing length, codec type, sample count, bits per sample etc.
            </summary>
            <param name="audioData"></param>
        </member>
        <member name="E:VideoOS.Platform.Data.DirectSpeakerController.MuteStatusChangedEvent">
            <summary>
            Signals that the mute status has changed
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Data.DirectSpeakerController.OutgoingAudioTransmitEnableStateChangedEvent">
            <summary>
            Signals that the outgoing audio transmit enable state has changed
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Data.DirectSpeakerController.OutgoingAudioErrorTextEvent">
            <summary>
            Signals that the outgoing audio error provider text has changed
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.FireMuteStatusChangedEvent">
            <summary>
            Activates the MuteStatusChangedEvent
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.FireOutgoingAudioTransmitEnableStateChangedEvent">
            <summary>
            Activates the OutgoingAudioTransmitEnableStateChangedEvent
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.DirectSpeakerController.HandleClientStateEventDelegate">
            <summary>
            This delegate is used to ensure that ClientState commands are executed on the main thread and not on the ImageServerClient threads. This is nessesary bacause the application logic is not thread safe. 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.FireOutgoingAudioErrorTextEvent">
            <summary>
            Activates the OutgoingAudioErrorTextEvent
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.HandleClientState(System.String,VideoOS.Platform.Data.Speaker.ClientState,System.String,System.Collections.ArrayList,System.Int32)">
            <summary>
            This method is used to ensure that the ClientState commands are executed on the main thread and not on the ImageServerClient threads. This is nessesary because the application logic is not thread safe. 
            </summary>
            <param name="recorderName">Identifier</param>
            <param name="clientState">ISClient protocol state</param>
            <param name="errorMessage">Message from ISClient when failing</param>
            <param name="failedDevices">ArrayList with devices (guids) that failed</param>
            <param name="errorCode">Code if the error. Could be http response code or ClientErrorCode enum</param>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.SetOutgoingSpeaker">
            <summary>
            Used internally by Connect method
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.RetryConnectLater">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.ConnectClients(System.Int32)">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.ConnectClient(VideoOS.Platform.Data.Speaker.ImageServerClient,System.Int32)">
            <summary>
            Used internally allows connecting to provided ImageServerClient
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.DisconnectClients(System.Int32)">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.StartTransmission(System.Boolean@)">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.StopTransmission(System.Boolean@)">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.SendDataToImageServers(System.Byte[],System.Boolean)">
            <summary>
            Sends provided audio data to the registered image servers. Can be configured to request wrapping of the given data in GenericByteData header.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.ShowErrorUsingLocalPCMicrophoneMessage(System.String)">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.ShowErrorInISClientCommunicationMessage(System.String,System.Int32)">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.DirectSpeakerController.ActiveOutgoingSpeakersChangedEventArgs">
            <summary>
            Implements the class that contains the event args for the ActiveOutgoingSpeakersChangedEventArgs
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DirectSpeakerController.ActiveOutgoingSpeakersChangedEventArgs._activeOutgoingSpeaker">
            <summary>
            The parameter of the event args
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.ActiveOutgoingSpeakersChangedEventArgs.#ctor(VideoOS.Platform.FQID)">
            <summary>
            Constructs a ActiveOutgoingSpeakersChangedEventArgs instance
            </summary>
            <param name="activeOutgoingSpeaker">The Device ID parameter of the event args</param>
        </member>
        <member name="P:VideoOS.Platform.Data.DirectSpeakerController.ActiveOutgoingSpeakersChangedEventArgs.ActiveOutgoingSpeaker">
            <summary>
            Gets or sets the Audio Out Device parameter of the event args
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.DirectSpeakerController.OutgoingAudioTransmitLockEventArgs">
            <summary>
            Implements the class that contains the event args for the GetOutgoingAudioTransmitLockEventArgs
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DirectSpeakerController.OutgoingAudioTransmitLockEventArgs._locked">
            <summary>
            The lock state parameter of the event args
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DirectSpeakerController.OutgoingAudioTransmitLockEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructs a EventArgs instance
            </summary>
            <param name="locked">The lock state parameter of the args</param>
        </member>
        <member name="P:VideoOS.Platform.Data.DirectSpeakerController.OutgoingAudioTransmitLockEventArgs.Locked">
            <summary>
            Gets or sets the lock state parameter of the args
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.IDirectSpeakerController">
            <summary>
            Interface of DirectSpeakerController sends an audio stream directly to an outgoing speaker
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDirectSpeakerController.DoRetryConnect">
            <summary>
            If true, then the controller will try to reconnect automatically when the connection fails. 
            Default is false. I.e. do not try to reconnect.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDirectSpeakerController.LoginSettings">
            <summary>
            Set the loginSettings relevant for the speaker being connected to
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDirectSpeakerController.Connected">
            <summary>
            Returns true if the speaker controller is connected to a speaker
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDirectSpeakerController.Busy">
            <summary>
            Is true if the connection state is not "Disconnected" or "Uninitialized".
            Must be false to be allowed to initiate the Connect request
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDirectSpeakerController.Mute">
            <summary>
            Gets or sets whether audio is muted or not
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDirectSpeakerController.OutgoingAudioTransmitEnableState">
            <summary>
            Sets the outgoing audio transmit enable state
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDirectSpeakerController.OutgoingAudioErrorText">
            <summary>
            Sets the outgoing audio error provider text
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IDirectSpeakerController.Close(System.Int32)">
            <summary>
            Stops the audio recorder stream and the disconnects the Speaker.
            Note: Do not provide a long timeout when called from within a UI thread.
            </summary>
            <param name="timeoutMSec">The maximum wait time for a connect. Otherwise mnimum 100 msec, Max 10 sec</param>
        </member>
        <member name="M:VideoOS.Platform.Data.IDirectSpeakerController.Dispose">
            <summary>
            Disposed internally
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IDirectSpeakerController.Connect(VideoOS.Platform.FQID,System.Int32)">
            <summary>
            Connects and to reserves the speaker identified by SpeakerFQID
            
            Note: Do not provide a long timeout when called from within a UI thread.
            
            Next step is to invoke TransmitStart
            </summary>
            <param name="speakerFQID">The Speaker's FQID</param>
            <param name="timeoutMSec">The maximum wait time for a connect. Otherwise mnimum 100 msec, Max 10 sec</param>
        </member>
        <member name="M:VideoOS.Platform.Data.IDirectSpeakerController.TransmitStart">
            <summary>
            Start the transmission. Can only be called after a successful Connect
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IDirectSpeakerController.TransmitStop">
            <summary>
            Stop the transmission. Will stop the transmission from the recorder side tothe speaker. 
            But it will retain the connection to the speaker and therefore also keep it reserved.
            May be followed by a TransmitStart to resume the transmission
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IDirectSpeakerController.SendData(System.Byte[])">
            <summary>
            Send audio data directly to a speaker.
            </summary>
            <param name="audioData"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.IDirectSpeakerController.InitOutgoingWaveFormat(System.Int32,System.Int32,System.Int32)">
            <summary>
            Init outgoing wave format. Use when sending wrapped data.
            </summary>
            <param name="channelsCount"></param>
            <param name="bitsPerSample"></param>
            <param name="samplesPerSecond"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.IDirectSpeakerController.SendWrappedData(System.Byte[])">
            <summary>
            Send audio data directly to a speaker. Uses configured Wave sampling rate, channels count and bits per sample.
            Sending wrapped data will add generic byte data header to each request containing length, codec type, sample count, bits per sample etc.
            </summary>
            <param name="audioData"></param>
        </member>
        <member name="E:VideoOS.Platform.Data.IDirectSpeakerController.MuteStatusChangedEvent">
            <summary>
            Signals that the mute status has changed
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Data.IDirectSpeakerController.OutgoingAudioTransmitEnableStateChangedEvent">
            <summary>
            Signals that the outgoing audio transmit enable state has changed
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Data.IDirectSpeakerController.OutgoingAudioErrorTextEvent">
            <summary>
            Signals that the outgoing audio error provider text has changed
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.IDirectSpeakerControllerExt">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDirectSpeakerControllerExt.OutgoingAudioErrorCode">
            <summary>
            Sets the outgoing audio error provider code
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDirectSpeakerControllerExt.DeviceId">
            <summary>
            ID of the speaker
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.IWAVExporter">
            <summary>
            For internal use only. Instantiate the VideoOS.Platform.Data.WAVExporter() class.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IWAVExporter.Init">
            <summary>
            Initialize managed wrapper. Only needed in Standalone, must be called before using any instance of WAVExporter
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IWAVExporter.Close">
            <summary>
            Uninitialize managed wrapper. Only needed in Standalone, should be called when done using any instance of WAVExporter, for example at exit.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IWAVExporter.AudioList">
            <summary>
            The list of Audio sources to export. Can be microphones, Speakers.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IWAVExporter.Path">
            <summary>
            Where to store the export on hard disk.  <br/>
            Used when the ExportToDisk is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IWAVExporter.ExportToDisk">
            <summary>
            Specifies whether to export hard disk.<br/>
            The path of where to store the export is defined in the Path property.<br/>
            This property is valid for Smart Client plug-ins.<br/>
            Default value is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IWAVExporter.ExportToMediaBurner">
            <summary>
            Specifies whether to export to an optical disc (i.e. DVD).<br/>
            The drive letter of where to burn the export is defined in the MediaBurnerDriverLetter property.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            Default value is false.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IWAVExporter.MediaBurnerDriverLetter">
            <summary>
            When the ExportToMediaBurner is set to true, the MediaBurnerDriverLetter is used to identify which burner to use.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            There is no default value, must be specified for MediaBurner exports.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IWAVExporter.ExportName">
            <summary>
            Specify the name of the export. This value is used as the name of the subdirectory under the path and as the name of the optical disc.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            Default value is a construction of current Date and Time
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IWAVExporter.FileName">
            <summary>
            Name of the WAV file.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IWAVExporter.Codec">
            <summary>
            Codec to be used for WAV
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IWAVExporter.CodecList">
            <summary>
            Returns a list of valid codecs to be used for the WAV export
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IWAVExporter.Channels">
            <summary>
            Number of audio channels. Deafult is 1
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IWAVExporter.AudioSampleRate">
            <summary>
            Sample rate for Audio. Default is 8000
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IWAVExporter.AudioSampleDepth">
            <summary>
            Audio bit per sample. Default is 16 bits
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IWAVExporter.StartExport(System.DateTime,System.DateTime)">
            <summary>
            Exports the currently defined devices as an WAV file. Returns error if already in progress.
            </summary>
            <param name="start">The start time.</param>
            <param name="end">The end time.</param>
            <returns>True if export was started. Is finished when Progress >= 100.</returns>
        </member>
        <member name="P:VideoOS.Platform.Data.IWAVExporter.Progress">
            <summary>
            Gets the updated progress in percent
            </summary>
            <value>The percent done. Out of range 0-100 means error. -2 means uninitialized.</value>
        </member>
        <member name="M:VideoOS.Platform.Data.IWAVExporter.Cancel">
            <summary>
            Cancels the current export operation
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IWAVExporter.LastError">
            <summary>
            Gets the last export error as a number.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.IWAVExporter.LastDetailedError">
            <summary>
            Gets the last export detailed error as a number.
            Only valid in Standalone application
            </summary>
            <value>The last error.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.IWAVExporter.LastErrorString">
            <summary>
            Gets the last export error as an English string.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="M:VideoOS.Platform.Data.IWAVExporter.EndExport">
            <summary>
            Ends and cleans up the current export operation
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.JPEGData">
            <summary>
            Contains the JPEG as bytes
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.JPEGData.DateTime">
            <summary>
            The date and time the image was taken.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.JPEGData.Bytes">
            <summary>
            The bytes for the image in JPEG form.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.JPEGData.IsNextAvailable">
            <summary>
            Defines if the NextDateTime is filled.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.JPEGData.NextDateTime">
            <summary>
            The time stamp for the next image.<br/>
            This field is not always available.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.JPEGData.IsPreviousAvailable">
            <summary>
            Defines if the PreviousDateTime is filled.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.JPEGData.PreviousDateTime">
            <summary>
            The time stamp for the previous image.<br/>
            This field is not always available.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.JPEGData.HardwareDecodingStatus">
            <summary>
            Defines how the decoding of the current frame is performed.<br/>
            Values can be:<br/>
              'hardware' - Decoded by GPU<br/>
              'software' - Decoded by Intel Media SDK<br/>
              'fallback' - Decoded by Intel Media SDK, even though it was requested to be Hardware (or Auto)<br/>
              'ipp'      - Decoded by Intel UMC<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.JPEGData.Width">
            <summary>
            Get the width of the returned JPEG.  0 returned when width cannot be detected.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.JPEGData.Height">
            <summary>
            Get the Height of the returned JPEG.  0 returned when height cannot be detected.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.JPEGData.CroppingDefined">
            <summary>
            Is set to true if the returned content has been cropped 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.JPEGData.CropX">
            <summary>
            When the CroppingDefined is true, this field contains the cropping definition.  The definition contains the same values as used on the SetCropping call. <br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.JPEGData.CropY">
            <summary>
            When the CroppingDefined is true, this field contains the cropping definition.  The definition contains the same values as used on the SetCropping call. <br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.JPEGData.CropWidth">
            <summary>
            When the CroppingDefined is true, this field contains the cropping definition.  The definition contains the same values as used on the SetCropping call. <br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.JPEGData.CropHeight">
            <summary>
            When the CroppingDefined is true, this field contains the cropping definition.  The definition contains the same values as used on the SetCropping call. <br/>
            </summary>
            
        </member>
        <member name="P:VideoOS.Platform.Data.JPEGData.CustomData">
            <summary>
            Contains the latest CustomData object set on the JPEGVideoSource. This can be used for signaling that all 
            properties set on this class has been 'embedded' in the returned JPEG frame.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGData.ConvertToBitmapSource">
            <summary>
            Utility method used to convert the <see cref="F:VideoOS.Platform.Data.JPEGData.Bytes"/> property into a <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>
            which can be directly applied as a source to an WPF Image control.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Data.JPEGVideoSourceImplementer">
            <summary>
            JPEGVideoSourceImplementer gets recorded video image formatted as JPEGs.<br/>
            This class is NOT thread safe, and all calls to these methods MUST be coming from same thread.<br/>
            When getting images from the server, it should be considered that the Get() method can take some time and is not ideal to execute on a UI thread.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSourceImplementer.#ctor(VideoOS.Platform.Item)">
            <summary>
            Construct a VideoSource for JPEG handling. The Item MUST be of Kind==Kind.Camera
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSourceImplementer.Init(System.Int32,System.Int32)">
            <summary>
            Initialize the server connection and set the with and height to specific values.<br/>
            The height and width should be set to the lowest value that make sense for your application, 
            e.g. don't ask for 1080x720 images if displaying thumbnails.<br/>
            </summary>
            <exception cref="T:VideoOS.Platform.ImplementationMIPException">Looks like a programming error, check order and parameters of the calls.</exception>
            <exception cref="T:VideoOS.Platform.NotAuthorizedMIPException">Unable to connect to the server. Could be user is not authorized to see this camera.</exception>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="T:VideoOS.Platform.Data.SourceDataOnJpegDataProxy">
            <summary>
            Proxy between ISourceData and JPEGData
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.SourceDataOnJpegDataProxy.#ctor(VideoOS.Platform.Data.JPEGData)">
            <summary>
            Constructor
            </summary>
            <param name="jpegData"></param>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnJpegDataProxy.JpegData">
            <summary>
            JPEGData to be used by inheritors
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnJpegDataProxy.DateTime">
            <summary>
            Central timestamp
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnJpegDataProxy.IsNextAvailable">
            <summary>
            Is next sample available
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnJpegDataProxy.NextDateTime">
            <summary>
            Next sample timestamp
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnJpegDataProxy.IsPreviousAvailable">
            <summary>
            Is prev sample available
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnJpegDataProxy.PreviousDateTime">
            <summary>
            Previous sample timestamp
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.VideoSourceDataOnJpegDataProxy">
            <summary>
            Proxy between ISourceData and JPEGData
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.VideoSourceDataOnJpegDataProxy.#ctor(VideoOS.Platform.Data.JPEGData)">
            <summary>
            Constructor
            </summary>
            <param name="jpegData"></param>
        </member>
        <member name="P:VideoOS.Platform.Data.VideoSourceDataOnJpegDataProxy.HardwareDecodingStatus">
            <summary>
            Gets or sets hardware decoding status
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MediaDataHelpers.AudioMediaDataQueue">
            <summary>
            Class implementing PCM audio buffers queue and transforming push of byte[] to pull of MediaData
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaDataHelpers.AudioMediaDataQueue.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            ctor with parameters
            </summary>
            <param name="sampleRate"></param>
            <param name="bitsPerSample"></param>
            <param name="channelsCount"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaDataHelpers.AudioMediaDataQueue.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaDataHelpers.AudioMediaDataQueue.SampleRate">
            <summary>
            Sample Rate of the audio that is being pushed. Default value of 8000 (8 kHz).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaDataHelpers.AudioMediaDataQueue.BitsPerSample">
            <summary>
            Bits per Sample of the audio that is being pushed. Default value of 16 (2 byte Int).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaDataHelpers.AudioMediaDataQueue.ChannelsCount">
            <summary>
            Number of audio channels that are being pushed. Default value is 1 (Mono).
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaDataHelpers.AudioMediaDataQueue.GetMediaData(VideoOS.Platform.Data.MediaProviderSession)">
            <summary>
            Called from the MediaProviderChannel when data is needed to be send trough the network.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaDataHelpers.AudioMediaDataQueue.GetTimeSpan(System.Collections.Generic.IEnumerable{VideoOS.Platform.Data.MediaData})">
            <summary>
            Calculates duration of buffers collection.
            </summary>
            <param name="buffers">IEnumerable of MediaData to be calculated.</param>
            <returns>Duration based of aggregated media data bytes, sampling rate, bits per sample, channels number</returns>
        </member>
        <member name="T:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueue">
            <summary>
             Class implementing media data buffers queue.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueue.MediaQueue">
            <summary>
            Queue used for media data objects
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueue.MediaQueueLocker">
            <summary>
            Object used to lock operations with MediaQueue
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueue.LastSentDateTime">
            <summary>
            Last time when data was sent to MediaProviderChannel
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueue.MaxBufferSize">
            <summary>
            Maximal buffer size in time for the circular buffer.
            By default it is set to 2 s.
            In case of overflow oldest data is deleted.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueue.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueue.ErrorHandler">
            <summary>
            Interface for subscribing for errors.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueue.OnData(VideoOS.Platform.Data.MediaData)">
            <summary>
            Called when data is available from the source.
            </summary>
            <param name="mediaData">MediaData to enqueue</param>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueue.GetMediaData(VideoOS.Platform.Data.MediaProviderSession)">
            <summary>
            Called from the MediaProviderChannel when data is needed to be send trough the network.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueue.GetTimeSpan(System.Collections.Generic.IEnumerable{VideoOS.Platform.Data.MediaData})">
            <summary>
            Calculates duration of buffers collection.
            </summary>
            <param name="buffers">IEnumerable of MediaData to be calculated.</param>
            <returns>Time difference between now and first media data in the queue.</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueue.Reset">
            <summary>
            Clearing buffers and reset of the internal variables.
            Should be called before every start of the streaming.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueueException">
            <summary>
            Generic exception for AudioMediaDataQueue class
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueueException.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueueOverflowException">
            <summary>
            Exception in AudioMediaDataQueue class which occurs on buffer overflow
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueueOverflowException.#ctor(System.TimeSpan,System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="dataSkipped"></param>
            <param name="skipItemsCount"></param>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueueOverflowException.DataSkipped">
            <summary>
            TimeSpan of data that has been skipped when buffer overflow occurs
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueueOverflowException.SkippedItemsCount">
            <summary>
            Count of items that has been skipped when buffer overflow occurs
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaDataHelpers.MediaDataQueueOverflowException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Needed for Serialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:VideoOS.Platform.Data.MediaDataHelpers.AudioRecorderToMediaData">
            <summary>
            Class providing data conversion from IAudioRecorder to MediaData
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaDataHelpers.AudioRecorderToMediaData.#ctor(VideoOS.Platform.Data.IAudioRecorder)">
            <summary>
            ctor
            </summary>
            <param name="audioRecorder"></param>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaDataHelpers.AudioRecorderToMediaData.InIdle">
            <summary>
            Control start/stop of the streaming
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaDataHelpers.AudioRecorderToMediaData.GetMediaData(VideoOS.Platform.Data.MediaProviderSession)">
            <summary>
            Callback to be called from the MediaProviderChannel
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaDataHelpers.AudioRecorderToMediaData.Close">
            <summary>
            Clean-up after completion of usage
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaDataHelpers.AudioRecorderToMediaData.ErrorHandler">
            <summary>
            Interface for subscribing for errors.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderInternal.JpegMediaProviderChannel.GetMediaDataInIdle">
            <summary>
            Method for providing data during Idle period
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderInternal.PcmMediaProviderChannel.GetMediaDataInIdle">
            <summary>
            Method for providing data during Idle period
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Data.MediaProviderInternal.Protocol">
            <summary>
            Implement all protocol specific formatting and sending of packers.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderInternal.Protocol.ProcessRequest(System.Net.Sockets.Socket,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <param name="sock">The socket, so you can respond</param>
            <param name="request">The request received</param>
            <param name="storedPasswordHashHex32">The hash of the password stored locally</param>
            <param name="macaddr">The MAC address stored locally</param>
            <param name="sessionParms">Session parameters</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderInternal.Protocol.SendMediaData(System.Net.Sockets.Socket,VideoOS.Platform.Data.MediaData)">
            <summary>
            Send one media data to the video server
            </summary>
            <param name="sock">The socket to send on</param>
            <param name="mediaData">The media content</param>
            <returns>True if it makes sense to retry</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderInternal.Protocol.ValidateToken(System.String,System.String,System.String)">
            <summary>
            Validate the token string received from the video server
            </summary>
            <param name="token">The string received as token=</param>
            <param name="date">The string received as date=</param>
            <param name="storedPasswordHashHex32">The hash of the password stored locally.</param>
            <returns>True if token can be recomputed, else false</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderInternal.Protocol.SendString(System.Net.Sockets.Socket,System.String,System.Net.HttpStatusCode)">
            <summary>
            Send any HTTP response back
            </summary>
            <param name="sock">The socket to send on</param>
            <param name="s">The response's content</param>
            <param name="httpStatusCode">The HTTP return code</param>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderInternal.Protocol.SendFirstMultiPart(System.Net.Sockets.Socket)">
            <summary>
            Respond with initial multipart response.
            </summary>
            <param name="socket">The socket to send on</param>
        </member>
        <member name="T:VideoOS.Platform.Data.MediaProviderInternal.ServerService">
            <summary>
            This class is responsible for implementing an HTTP server that will listen for requests from the MIP driver
            running on a recording server
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MetadataSupplierEventArgs">
            <summary>
            Instances of this class will be included when <see cref="E:VideoOS.Platform.Data.MetadataSupplier.NewMetadataEvent"/> is triggered.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataSupplierEventArgs.Data">
            <summary>
            The new metadata.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataSupplierEventArgs.Time">
            <summary>
            The timestamp of the new metadata.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataSupplierEventArgs.PreviousTime">
            <summary>
            Timestamp of previous metadata if available.
            
            Only available in playback.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataSupplierEventArgs.NextTime">
            <summary>
            Timestamp of next metadata if available.
            
            Only available in playback.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MetadataSupplierErrorEventArgs">
            <summary>
            Instances of this class will be returned when <see cref="E:VideoOS.Platform.Data.MetadataSupplier.ErrorEvent"/> is triggered.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataSupplierErrorEventArgs.ErrorText">
            <summary>
            Contains text describing the error.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MetadataSupplierMetadataInvalidatedEventArgs">
            <summary>    
            Instances of this class will be returned when <see cref="E:VideoOS.Platform.Data.MetadataSupplier.MetadataInvalidatedEvent"/> is triggered.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataSupplierMetadataInvalidatedEventArgs.InvalidDataDateTime">
            <summary>
            Timestamp of the metadata which becomes invalid
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MetadataSupplier">
            <summary>
            This class automatically provides metadata when available, both in live and playback.
            
            In standalone you must initialize the Export and Media environments prior to using this class.
            
            Only supported in Smart Client and standalone environments.
            
            Usage: Provide the metadata source in the constructor, subscribe to <see cref="E:VideoOS.Platform.Data.MetadataSupplier.NewMetadataEvent"/> and call <see cref="M:VideoOS.Platform.Data.MetadataSupplier.Start"/>.
            
            Call <see cref="M:VideoOS.Platform.Data.MetadataSupplier.Stop"/> when done.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataSupplier.#ctor(VideoOS.Platform.Item)">
            <summary>
            Constructor for metadata source that will follow the main windowstate.
            </summary>
            <param name="metadataSourceItem">The metadata source from which to receive data</param>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataSupplier.#ctor(VideoOS.Platform.Item,VideoOS.Platform.Client.WindowInformation)">
            <summary>
            Constructor for following state of specific window.
            </summary>
            <param name="metadataSourceItem">The metadata source from which to receive data</param>
            <param name="windowInformation">Information about the window this control is used in and thus
            what controls the data flow. Only for Smart Client - always use the constructor without this parameter in standalone.</param>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataSupplier.Start">
            <summary>
            Call this method to start listening for metadata.
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataSupplier.Stop">
            <summary>
            Call this method to stop listening for metadata.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Data.MetadataSupplier.NewMetadataEvent">
            <summary>
            Subscribe to this event to receive metadata.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Data.MetadataSupplier.ErrorEvent">
            <summary>
            Subscribe to this event to be notified when errors occurs.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Data.MetadataSupplier.MetadataInvalidatedEvent">
            <summary>
            Subscribe to this event to be notified when the recent metadata becomes invalid.
            
            In live mode, the event is raised when the recent metadata valid time expires. 
            
            In Playback mode, the event is raised when playback control browses/plays before the metadata time, or browses/plays
            after the metadata expired time.
            
            When changing between mode, the event is raised on a recent valid metadata if there's one.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.GenericData">
            <summary>
            Contains the Generic Data as bytes
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.GenericData.Data">
            <summary>
            The bytes for the data.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.GenericData.DateTime">
            <summary>
            The date and time the image was taken.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.GenericData.IsNextAvailable">
            <summary>
            Defines if the NextDateTime is filled.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.GenericData.NextDateTime">
            <summary>
            The time stamp for the next image.<br/>
            This field is not always available.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.GenericData.IsPreviousAvailable">
            <summary>
            Defines if the PreviousDateTime is filled.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.GenericData.PreviousDateTime">
            <summary>
            The time stamp for the previous image.<br/>
            This field is not always available.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.IPcmAudioData">
            <summary>
            Contains the specific data for audio data
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IPcmAudioData.Duration">
            <summary>
            Gets the presenation duration of the audio frame
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IPcmAudioData.EndDateTime">
            <summary>
            Gets the presentation end time of the audio frame
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IPcmAudioData.PcmSourceSettings">
            <summary>
            Gets the pcm source setting associated with this audio frame
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.PcmAudioData">
            <summary>
            PCM data 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.PcmAudioData.Duration">
            <summary>
            Gets the presenation duration of the audio frame
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.PcmAudioData.EndDateTime">
            <summary>
            Gets the presentation end time of the audio frame
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.PcmAudioData.PcmSourceSettings">
            <summary>
            Gets the pcm source setting associated with this audio frame
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.PcmAudioDataList">
            <summary>
            List of PCM audio datas
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.PcmAudioDataList.#ctor(System.Collections.Generic.IEnumerable{VideoOS.Platform.Data.PcmAudioData})">
            <summary>
            Construction
            </summary>
            <param name="dataList"></param>
        </member>
        <member name="P:VideoOS.Platform.Data.PcmAudioDataList.DataList">
            <summary>
            Getting the list of pcm audio datas
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.PcmAudioDataList.AccumulatedData">
            <summary>
            Accumulated data for all the internal frames
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.PcmAudioDataList.Duration">
            <summary>
            Gets the presenation duration of the audio frame
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.PcmAudioDataList.EndDateTime">
            <summary>
            Gets the presentation end time of the audio frame
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.PcmAudioDataList.PcmSourceSettings">
            <summary>
            Gets the pcm source setting associated with this audio frames group
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.PcmAudioDataList.DateTime">
            <summary>
            The date and time the image was taken.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.PcmAudioDataList.IsNextAvailable">
            <summary>
            Defines if the NextDateTime is filled.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.PcmAudioDataList.NextDateTime">
            <summary>
            The time stamp for the next image.<br/>
            This field is not always available.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.PcmAudioDataList.IsPreviousAvailable">
            <summary>
            Defines if the PreviousDateTime is filled.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.PcmAudioDataList.PreviousDateTime">
            <summary>
            The time stamp for the previous image.<br/>
            This field is not always available.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.PcmAudioSource">
            <summary>
            Class providing Pcm audio data for playback
            When getting images from the server, it should be considered that the Get() method can take some time and is not ideal to execute on a UI thread.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.PcmAudioSource.PcmSourceSettings">
            <summary>
            PcmSourceSettings
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.PcmAudioSource.#ctor(VideoOS.Platform.Item)">
            <summary>
            Construct a RawVideoSource for Raw handling. The Item MUST be of Kind==Kind.Microphone
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.PcmAudioSource.Init(System.Int32,System.Int32)">
            <summary>
            This constructor will ignore the width and height, as they are not relevant for this class.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.PcmAudioSource.Init">
            <summary>
            Initialize the server connection.
            </summary>
            <exception cref="T:VideoOS.Platform.ImplementationMIPException">Looks like a programming error, check order and parameters of the calls.</exception>
            <exception cref="T:VideoOS.Platform.NotAuthorizedMIPException">Unable to connect to the server. Could be user is not authorized to see this camera.</exception>
        </member>
        <member name="T:VideoOS.Platform.Data.SmartClientProfileSetting">
            <summary>
            Data class for a Smart Client Profile setting
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.SmartClientProfileSetting.CustomExportPath">
            <summary>
            Key for the "Custom export path" Smart Client Profile setting
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SmartClientProfileSetting.Key">
            <summary>
            Gets the key associated with the setting.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SmartClientProfileSetting.Locked">
            <summary>
            Gets whether or not the setting is locked.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SmartClientProfileSetting.Value">
            <summary>
            Gets a string representation of the setting value.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.SmartClientProfileSetting.#ctor(System.Int32,System.Boolean,System.String)">
             <summary>
             Creates an immutable <see cref="T:VideoOS.Platform.Data.SmartClientProfileSetting"/> using the passed arguments.
            
             For internal use only.
             </summary>
             <param name="key">The key associated with the setting.</param>
             <param name="locked">Indicates whether or not the setting is locked.</param>
             <param name="value">String representation of the setting value.</param>
        </member>
        <member name="T:VideoOS.Platform.Data.WAVExporter">
            <summary>
            This class will use environment specific implementation to export
            one or mixture of multiple audio streams to an WAV file. You can do sound mixing
            with combination of speaker output and microphone input for instance.
            To export multiple audio streams, you need to set the <see cref="P:VideoOS.Platform.Data.WAVExporter.AudioList"/> property
            then call the <see cref="M:VideoOS.Platform.Data.WAVExporter.StartExport(System.DateTime,System.DateTime)"/> method.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.WAVExporter.#ctor">
            <summary>
            Exports the currently defined device(s) in WAV data format
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.WAVExporter.Init">
            <summary>
            Initialize managed wrapper. Only needed in Standalone, must be called before using any instance of WAVExporter
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.WAVExporter.Close">
            <summary>
            Uninitialize managed wrapper. Only needed in Standalone, should be called when done using any instance of WAVExporter, for example at exit.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.WAVExporter.AudioList">
            <summary>
            The list of Audio sources to export. Can be microphones, Speakers.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.WAVExporter.Path">
            <summary>
            Where to store the export on hard disk.  <br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.WAVExporter.ExportToDisk">
            <summary>
            Specifies whether to export hard disk.<br/>
            The path of where to store the export is defined in the Path property.<br/>
            This property is valid for Smart Client plug-ins.<br/>
            Default value is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.WAVExporter.ExportToMediaBurner">
            <summary>
            Specifies whether to export to an optical disc (i.e. DVD).<br/>
            The drive letter of where to burn the export is defined in the MediaBurnerDriverLetter property.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            Default value is false.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.WAVExporter.MediaBurnerDriverLetter">
            <summary>
            When the ExportToMediaBurner is set to true, the MediaBurnerDriverLetter is used to identify which burner to use.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            There is no default value, must be specified for MediaBurner exports.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.WAVExporter.ExportName">
            <summary>
            Specific the name of the export. This value is used as a part of the path and a the name of the optical disc.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            Default value is a construction of current Date and Time
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.WAVExporter.FileName">
            <summary>
            Name of the WAV file.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.WAVExporter.Codec">
            <summary>
            Codec to be used for WAV
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.WAVExporter.CodecList">
            <summary>
            Returns a list of valid codecs to be used for the WAV export
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.WAVExporter.Channels">
            <summary>
            Number of audio channels
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.WAVExporter.AudioSampleRate">
            <summary>
            Sample rate for Audio. Default is 8000
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.WAVExporter.AudioSampleDepth">
            <summary>
            Audio bit per sample, default is 16 bits
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.WAVExporter.StartExport(System.DateTime,System.DateTime)">
            <summary>
            Exports the currently defined devices as an WAV file. Returns error if already in progress.
            </summary>
            <param name="start">The start time.</param>
            <param name="end">The end time.</param>
            <returns>True if export was started. Is finished when Progress >= 100.</returns>
        </member>
        <member name="P:VideoOS.Platform.Data.WAVExporter.Progress">
            <summary>
            Gets the updated progress in percent
            </summary>
            <value>The percent done. Out of range 0-100 means error. -2 means uninitialized.</value>
        </member>
        <member name="M:VideoOS.Platform.Data.WAVExporter.Cancel">
            <summary>
            Cancels the current export operation
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.WAVExporter.LastError">
            <summary>
            Gets the last export error as a number.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.WAVExporter.LastDetailedError">
            <summary>
            Gets the last export detailed error as a number.
            Only valid in Standalone application
            </summary>
            <value>The last error.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.WAVExporter.LastErrorString">
            <summary>
            Gets the last export error as an English string.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="M:VideoOS.Platform.Data.WAVExporter.EndExport">
            <summary>
            Ends and cleans up the current export operation
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.AccessControlEvent">
            <summary>
            The AccessControlEvent class is used for events generated with access control plugins.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.EventHeader">
            <summary>
            The representation of an event header containing information common for all Milestone events.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventHeader.ID">
            <summary>
            The unique ID of the event.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventHeader.Timestamp">
            <summary>
            The time of the event.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventHeader.Class">
            <summary>
            The class of the event, e.g. "Analytics"
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventHeader.Type">
            <summary>
            The type - a sub-classification - of the event, if applicable.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventHeader.Version">
            <summary>
            The version of this document schema.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventHeader.Priority">
            <summary>
            The priority of the event.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventHeader.PriorityName">
            <summary>
            The priority name of the event.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventHeader.Name">
            <summary>
            The event name.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventHeader.Message">
            <summary>
            The event message.  This is the field that will be matched with the AlarmDefinition message when sending this event to the Event Server.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventHeader.CustomTag">
            <summary>
            A custom tag set by the user to filter the events.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventHeader.Source">
            <summary>
            The source of the event. This can represent e.g. a camera, a microphone, a user-defined event, etc.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventHeader.ExpireTimestamp">
            <summary>
            The expire time of the event. The event will be deleted from the event database when the time is reached.
            When creating events a value of DateTime.MinValue (default value) indicates that the default event expire time should be used.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventHeader.MessageId">
            <summary>
            The message id of the event. The message id coorsponds to the ID part returned in ItemManager.GetKnownEventTypes
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.EventSource">
            <summary>
            The source of the event. This can represent e.g. a camera, a microphone, a user-defined event, etc.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventSource.Name">
            <summary>
            The name of the source.
            </summary>
            When used for sending an AnalyticsEvent, the Name can be filled with an IP address and 
            the Event Server will convert this to the correct FQID - do not fill the FQID in this case.
        </member>
        <member name="P:VideoOS.Platform.Data.EventSource.Description">
            <summary>
            A description of the source.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventSource.FQID">
            <summary>
            The Fully Qualified ID of the source.
            </summary>
            When sending AnalyticsEvent to the EventServer, this field can be ignore when the Name field contains
            an IP address of the source (e.g. the camera that provided the video the analytics is done on).
        </member>
        <member name="T:VideoOS.Platform.Data.RuleList">
            <summary>
            A list of rules.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.Rule">
            <summary>
            The representation of a rule, which triggered the event.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Rule.ID">
            <summary>
            The ID of the rule.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Rule.Name">
            <summary>
            The name of the rule.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Rule.Type">
            <summary>
            The type of the rule.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Rule.PolygonList">
            <summary>
            A list of polygons illustrating the rule within the scene (tripwires, areas, etc.).
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.PolygonList">
            <summary>
            A list of polygons.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.TPolygon">
            <summary>
            The representation of a polygon describing a set of normalized coordiantes and color.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.TPolygon.Closed">
            <summary>
            A flag indicating whether the polygon is open or closed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.TPolygon.Color">
            <summary>
            The preferred color of the polygon.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.TPolygon.FillColor">
            <summary>
            The preferred fill color of a closed polygon, if any.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.TPolygon.PointList">
            <summary>
            A list of points, describing the polygon.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.TColor">
            <summary>
            The representation of an ARGB color.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.TColor.A">
            <summary>
            The alpha channel [0;255]. 0 represents a fully transparent color, and 255 represents a fully opaque color.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.TColor.R">
            <summary>
            The red color channel [0;255].
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.TColor.G">
            <summary>
            The green color channel [0;255].
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.TColor.B">
            <summary>
            The blue color channel [0;255].
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.PointList">
            <summary>
            A list of points.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.TPoint">
            <summary>
            The representation of a point described by a set of normalized coordinates.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.TPoint.X">
            <summary>
            The normalized X coordinate [0;1].
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.TPoint.Y">
            <summary>
            The normalized Y coordinate [0;1].
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.SnapshotList">
            <summary>
            A list of snapshots.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.Snapshot">
            <summary>
            The representation of a snapshot associated with the event with time offset relative to the event timestamp.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Snapshot.TimeOffset">
            <summary>
            The time offset in milliseconds relative to the event timestamp.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Snapshot.Width">
            <summary>
            The width of the image in pixels.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Snapshot.Height">
            <summary>
            The height of the image in pixels.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Snapshot.HasOverlay">
            <summary>
            A flag indicating whether the image has overlay rendered into the image.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Snapshot.SizeInBytes">
            <summary>
            The size in bytes of the binary image.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Snapshot.Image">
            <summary>
            A binary JPEG image, if the image is stored in the alarm database.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Snapshot.Path">
            <summary>
            A path to the image on the server, if the image is stored on the central server.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Snapshot.FQID">
            <summary>
            A FQID to a camera, if the snaphort referes to the recorded image on the recording server.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.AnalyticsObjectList">
            <summary>
            A list of analytics objects.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.AnalyticsObject">
            <summary>
            The representation of an analytics object.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsObject.ID">
            <summary>
            The ID of the object.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsObject.Name">
            <summary>
            The name of the object.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsObject.Type">
            <summary>
            The type of the object.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsObject.Description">
            <summary>
            A description of the object.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsObject.Confidence">
            <summary>
            Normalized confidence of the detection [0;1].
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsObject.Value">
            <summary>
            A value associated with the object. This could be a detected license plate, or the number of people in a detected crowd, etc.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsObject.AlarmTrigger">
            <summary>
            A flag indicating whether the object is the cause of the evet.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsObject.Removed">
            <summary>
            A flag indicating whether this object referes to a removed object.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsObject.Color">
            <summary>
            Human-readable color of the object.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsObject.Size">
            <summary>
            Human-readable size of the object in the unit given SizeUnit.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsObject.SizeUnit">
            <summary>
            The unit of the object's Size.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsObject.BoundingBox">
            <summary>
            The bounding box of the object.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsObject.Polygon">
            <summary>
            An outline of the object. For complex objects, it is not recommended setting the polygon due to verbosity. Use BoundingBox or Mask instead.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsObject.Motion">
            <summary>
            The motion of the object (speed and path).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsObject.Mask">
            <summary>
            A binary mask of the object within the boudingbox.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.BoundingBox">
            <summary>
            The representation of a bounding box, describing a rectangle in normalized coordinates within the scene.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BoundingBox.Top">
            <summary>
            The top of the bounding box.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BoundingBox.Left">
            <summary>
            The left side of the bounding box.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BoundingBox.Bottom">
            <summary>
            The bottom of the bounding box.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BoundingBox.Right">
            <summary>
            The right side of the bounding box.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BoundingBox.Color">
            <summary>
            The preferred color of the boudnig box.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.ObjectMotion">
            <summary>
            The representation of an objects tracked motion through the scene.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.ObjectMotion.Speed">
            <summary>
            Human-reable speed of the object in the units given by SpeedUnit.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.ObjectMotion.SpeedUnit">
            <summary>
            The unit of the object's Speed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.ObjectMotion.Path">
            <summary>
            The path of tracked the object. The polygon should typically be defined as Open.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.ReferenceList">
            <summary>
            A list of references.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.Reference">
            <summary>
            The representation of a reference to another entity in the system - e.g. another alarm or device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Reference.FQID">
            <summary>
            The Fully Quallified ID of the reference, including its ID and Kind.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.Vendor">
            <summary>
            Information about the analytics vendor including any custom data.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Vendor.Name">
            <summary>
            The name of the vendor.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Vendor.CustomData">
            <summary>
            Custom vendor data, which may include XML.
            Note that custom data will not be indexed; therefore retrieving it will not be optimized.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.Alarm">
            <summary>
            The representation of a Milestone alarm.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Alarm.EventHeader">
            <summary>
            The EventHeader, containing information common for all Milestone events.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Alarm.Description">
            <summary>
            The description of the alarm.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Alarm.StartTime">
            <summary>
            The start time of the alarm, if it takes plate over a period of time.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Alarm.EndTime">
            <summary>
            The end time of the alarm, if it takes plate over a period of time.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Alarm.Location">
            <summary>
            The location of the alarm (this will typically be the same as the camera's location).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Alarm.State">
            <summary>
            The current state of the alarm.
             0: Any
             1: New
             4: In progress
             9: On hold
            11: Closed
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Alarm.StateName">
            <summary>
            The current state name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Alarm.Category">
            <summary>
            The current category of the alarm.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Alarm.CategoryName">
            <summary>
            The current category name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Alarm.AssignedTo">
            <summary>
            The user to which the alarm is currently assigned.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Alarm.Count">
            <summary>
            The count value, if the alarm is a counting alarm. Default: 0 (no count).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Alarm.RuleList">
            <summary>
            The RuleList, containing information contains information about the rule(s), which triggered the alarm.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Alarm.ObjectList">
            <summary>
            The ObjectList, containing information about the detected object(s) in the scene.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Alarm.ReferenceList">
            <summary>
            The ReferenceList, containing any number of references to other entities in the system, e.g. alarms or cameras, by FQID.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Alarm.SnapshotList">
            <summary>
            The SnapshotList, containing any number of images related to the alarm. If the Source is a camera,
            it is not neccesary to attach a snapshot from that camera at the time of the alarm.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Alarm.Vendor">
            <summary>
            The Vendor, containing information about the analytics vendor including any custom data.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.AlarmUpdateKey">
            <summary>
            This class specifies the available keys when doing an alarm update. 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AlarmUpdateKey.State">
            <summary>
            Key used when updating the state using a state guid as value.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AlarmUpdateKey.StateName">
            <summary>
            Key used when updating the state name.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AlarmUpdateKey.StateInt">
            <summary>
            Key used when updating the state integer.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AlarmUpdateKey.Category">
            <summary>
            Key used when updating the category using a category guid as value. 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AlarmUpdateKey.CategoryName">
            <summary>
            Key used when updating the category name.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AlarmUpdateKey.CategoryInt">
            <summary>
            Key used when updating the category integer.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AlarmUpdateKey.Priority">
            <summary>
            Key used when updating the priority using a priority guid as value.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AlarmUpdateKey.PriorityName">
            <summary>
            Key used when updating the priority name.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AlarmUpdateKey.PriorityInt">
            <summary>
            Key used when updating the priority integer.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AlarmUpdateKey.Comment">
            <summary>
            Key used when adding a comment to the update history.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AlarmUpdateKey.AssignedTo">
            <summary>
            Key used when updating the assigned to.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AlarmUpdateKey.ReasonCode">
            <summary>
            Key used when updating the reason code.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.AnalyticsEvent">
            <summary>
            An implementation of the BaseEvent with more relevant information when an Analytics oriented event has occurred.
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsEvent.Description">
            <summary>
            The description of the analytics event.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsEvent.StartTime">
            <summary>
            The start time of the analytics event, if it takes place over a period of time.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsEvent.EndTime">
            <summary>
            The end time of the analytics event, if it takes place over a period of time.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsEvent.Location">
            <summary>
            The location of the analytics event (this will typically be the same as the camera's location).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsEvent.Count">
            <summary>
            The count value, if the analytics event is a counting events. Default: 0 (no count).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsEvent.RuleList">
            <summary>
            The RuleList, containing information contains information about the rule(s), which triggered the analytics event.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsEvent.ObjectList">
            <summary>
            The ObjectList, containing information about the detected object(s) in the scene.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsEvent.ReferenceList">
            <summary>
            The ReferenceList, containing any number of references to other entities in the system, e.g. cameras, by FQID.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsEvent.SnapshotList">
            <summary>
            The SnapshotList, containing any number of images related to the analytics event. If the Source is a camera,
            it is not neccesary to attach a snapshot from that camera at the time of the analytics event.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AnalyticsEvent.Vendor">
            <summary>
            The Vendor, containing information about the analytics vendor including any custom data.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.AudioStreamPlayer">
            <summary>
            Streams PCM data from an input stream to the OutgoingSpeakerController.
            </summary>
            <remarks>
            It will pace the reading to match the sample rate except for a prebuffer read =
            2 * ForwardSampleBlockSize samples. The default for ForwardSampleBlockSize is 
            OutgoingAudioWaveFormatSamplesPerSecond / 20 = 50 msec of samples.
            <example>
            It assumes by default that the input is a WAV formatted input file and reads the 
            settings from the WAV header, if created like this:
            <code>
            AudioStreamPlayer player = new AudioStreamPlayer(new System.IO.FileStream("MySound.wav"));
            _outgoingSpeakerController.Init(player);    
            _outgoingSpeakerController.ShowLive = true; // Obsolete, not used any more
            _outgoingSpeakerController.Connect();
            </code>
            It may also be created with a binary stream without WAV header and then configured directly, like in
            <code>
            AudioStreamPlayer player = new AudioStream(myBinaryStream,false);
            player.OutgoingWaveFormatChannels = 1;
            player.OutgoingWaveFormatBitsPerSample = 16;
            player.OutgoingAudioWaveFormatSamplesPerSecond = 8000;
            player.BlockAlign = player.OutgoingWaveFormatChannels * player.OutgoingWaveFormatBitsPerSample / 8;
            player.DataSize = 0; //To indicate that the number of bytes is unknown.
            player.ForwardSampleBlockSize = OutgoingAudioWaveFormatSamplesPerSecond / 20; //==50 msec blocks is good
            _outgoingSpeakerController.Init(player);    
            _outgoingSpeakerController.ShowLive = true; // Obsolete, not used any more
            _outgoingSpeakerController.Connect();
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:VideoOS.Platform.Data.AudioStreamPlayer.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Class constructor.
            </summary>
            <param name="audioStream"></param>
            <param name="readFormatFromStream"></param>
        </member>
        <member name="P:VideoOS.Platform.Data.AudioStreamPlayer.BlockAlign">
            <summary>
            Set the Block align value. Alternatively call the ReadFormatFromStream.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AudioStreamPlayer.DataSize">
            <summary>
            Set the total data size. The Player will stop when this number is reached.
            Alternatively call the ReadFormatFromStream
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Data.AudioStreamPlayer.ProgressCompleteEvent">
            <summary>
            This event is fired when the capture / read thread has completed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AudioStreamPlayer.Progress">
            <summary>
            If DataSize is set to a value > 0, then it returns a double value 0.0 .. 1.0 
            indicate the progress of the read process. Otherwise it returns -1.0.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AudioStreamPlayer.ForwardSampleBlockSize">
            <summary>
            The number of Samples to forward to the Speaker at a time. 
            Default is OutgoingAudioWaveFormatSamplesPerSecond / 20.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.AudioStreamPlayer.ReadFormatFromStream">
            <summary>
            Read the stream format from the stream input. It is called by the Initialize() function 
            if the readFormatFromStream parameter equals true. Please note that it must be in RIFF / WAVE format.
            </summary>
            <remarks>
            In Windows 7 you have to start the Sound Recorder with the following command line parameters to 
            make it generate a WAV file: <c>soundrecorder /file outputfile.wav</c>.
            </remarks>
        </member>
        <member name="M:VideoOS.Platform.Data.AudioStreamPlayer.Initialize">
            <summary>
            Call this to initialize. Reads the stream format from the stream input if the 
            readFormatFromStream parameter (from the constructor) equals true.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.AudioStreamPlayer.Free">
            <summary>
            Stops recording, and free resources.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.AudioStreamPlayer.StartRecording">
            <summary>
            Starts recording.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.AudioStreamPlayer.StopRecording">
            <summary>
            Stops recording.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.AudioStreamPlayer.IsRecording">
            <summary>
            Indicates if it is recording.
            </summary>
            <returns>True if recording.</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.AudioStreamPlayer.CalcMeterValue(System.Byte[],System.Int32)">
            <summary>
            Calculate how much noice is in the audio stream.
            </summary>
            <param name="data">The data received in the AudioDataReadyEvent</param>
            <param name="dataLength">The langth</param>
            <returns>a value between 0 and 100</returns>
        </member>
        <member name="T:VideoOS.Platform.Data.CameraDeviceDefinition">
            <summary>
            This class is responsible for describing the parameters for a single camera device
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.CameraDeviceDefinition.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.CameraDeviceDefinition.Codec">
            <summary>
            Gets and sets the default codec to be used for the camera.
            
            Allowed values are <see cref="F:VideoOS.Platform.Data.MediaContent.H264"/>, <see cref="F:VideoOS.Platform.Data.MediaContent.H265"/>, <see cref="F:VideoOS.Platform.Data.MediaContent.Jpeg"/> or <see cref="F:VideoOS.Platform.Data.MediaContent.Mpeg"/>.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.CameraDeviceDefinition.CodecSet">
            <summary>
            Gets the set of codecs supported by the camera.
            
            Allowed values are any combinations of <see cref="F:VideoOS.Platform.Data.MediaContent.H264"/>, <see cref="F:VideoOS.Platform.Data.MediaContent.Jpeg"/> and <see cref="F:VideoOS.Platform.Data.MediaContent.Mpeg"/>.
            </summary>
            <remarks>While other codecs can be put into the list, <see cref="M:VideoOS.Platform.Data.CameraDeviceDefinition.GenerateDeviceParameters(System.Collections.Generic.IDictionary{System.String,System.String})"/> will throw an exception
            when the parameters are generated</remarks>
        </member>
        <member name="P:VideoOS.Platform.Data.CameraDeviceDefinition.Resolution">
            <summary>
            Gets and sets the resolution as a string. Examples of resolutions are <code>"800x600"</code> and <code>"1024x768"</code>.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.CameraDeviceDefinition.ResolutionSet">
            <summary>
            Gets the set of resolutions supported by the camera.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.CameraDeviceDefinition.Fps">
            <summary>
            Gets and sets the frame rate for the camera.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.CameraDeviceDefinition.FpsRange">
            <summary>
            Gets and sets the allowed range for for the frame rate.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.CameraDeviceDefinition.Gop">
            <summary>
            Gets and sets the number of frames to group together as a Group Of Pictures (GOP).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.CameraDeviceDefinition.GopRange">
            <summary>
            Gets and sets the range allowed for the number of frames in a single GOP.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.CameraDeviceDefinition.Quality">
            <summary>
            Gets and sets a number indicating the quality of the video.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.CameraDeviceDefinition.QualityRange">
            <summary>
            Gets and sets the range allowed for the video quality.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.CameraDeviceDefinition.GenerateDeviceParameters(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Generates the parameters for the camera in the format used by the MIP driver.
            </summary>
            <param name="parameters">The <see cref="T:System.Collections.Generic.IDictionary`2"/> where to write the parameters.</param>
        </member>
        <member name="T:VideoOS.Platform.Data.DataCapability">
            <summary>
            This class is responsible for describing the parameters for a data capability, which takes integer values.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DataCapability.Minimum">
            <summary>
            Gets and sets the minimum allowed value the capability can be set to.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DataCapability.Maximum">
            <summary>
            Gets and sets the maximum allowed value the capability can be set to.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DataCapability.Resolution">
            <summary>
            Gets and sets the resolution (in other words the minimum allowed change to the parameter).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DataCapability.Default">
            <summary>
            Gets and sets the default value.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DataCapability.CreateValidTimeCapability">
            <summary>
            Create a capability describing the valid time capability.
            </summary>
            <returns>A new instance of <see cref="T:VideoOS.Platform.Data.DataCapability"/> that describes the valid time capability.</returns>
        </member>
        <member name="T:VideoOS.Platform.Data.EnumCapability">
            <summary>
            This class is responsible for describing the parameters for an enum capability, which can only take discrete predefined values.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EnumCapability.EnumValues">
            <summary>
            Gets the list of allowed values for this capability.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EnumCapability.DefaultValue">
            <summary>
            Gets or sets the name of the default value.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.EnumCapabilityValue">
            <summary>
            This class is responsible for describing one of the allowed values for an enum capability. Each value
            is selectable in the drop-down list for the enum capability.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EnumCapabilityValue.Name">
            <summary>
            Gets and sets the name of the enum value. This name is used only internally in the
            system and will not be displayed.
            </summary>
            <remarks>
            This should be set to a string without spaces. Please contact support to get a new string,
            if you are defining a new enum value.
            </remarks>
        </member>
        <member name="P:VideoOS.Platform.Data.EnumCapabilityValue.Id">
            <summary>
            Gets and sets the identifier for the type definition.
            </summary>
            <remarks>
            If this is a non-standard type, the integrator should contact support to get a new GUID.
            </remarks>
        </member>
        <member name="P:VideoOS.Platform.Data.EnumCapabilityValue.DisplayName">
            <summary>
            Gets and sets the display name of the type definition. This is the name displayed for the enum value
            if there are no translations.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EnumCapabilityValue.DisplayId">
            <summary>
            Gets and sets the identifier for the display name. This is used for translations, so ask support to get
            one assigned for new enum values. This ensures that any future translations will be used.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EnumCapabilityValue.Value">
            <summary>
            Gets and sets the value for the enum. These values have to be unique within the enum but can otherwise be
            anything.
            </summary>
            <remarks>
            If this is a non-standard type, the integrator should contact support to get consistent values.
            </remarks>
        </member>
        <member name="T:VideoOS.Platform.Data.MediaContent">
            <summary>
            The format being requested from the server side.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.MediaContent.Jpeg">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Data.MediaContent.H264">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Data.MediaContent.Audio">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Data.MediaContent.MetaData">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Data.MediaContent.Mpeg">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Data.MediaContent.H265">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Data.MediaContent.Pcm">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Data.MetadataCache">
            <summary>
            This class is repsonsible for caching and navigating a pseudo-"GOP" of metadata content.
            It handles navigating retreiving, storing and navigating by supporing <see cref="M:VideoOS.Platform.Data.MetadataCache.GetNext"/>
            and <see cref="M:VideoOS.Platform.Data.MetadataCache.GetPrevious"/> operations.
            
            This class is not thread-safe!
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.MetadataCache._data">
            <summary>
            Contains the latest recieved data which is cached. This class depends on this list to be sorted
            according to the dates of content in ascending order!
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataCache.FirstEntry">
            <summary>
            Gets the first element in the cache. Returns null if the cache is empty.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataCache.LastEntry">
            <summary>
            Gets the last element in the cache. Returns null if the cache is empty.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataCache.SetCacheContents(System.Collections.Generic.IEnumerable{VideoOS.Platform.Data.MetadataPlaybackData})">
            <summary>
            Load new data into the cache and reset the state used to compute next and previous elements.
            </summary>
            <param name="data">The data to load into the cache.</param>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataCache.FindCacheEntryAfter(System.DateTime)">
            <summary>
            This method finds the first element in the sequence that has a later date than <paramref name="timeStamp"/>.
            If <paramref name="timeStamp"/> is before the first entry in the cache or after the last entry, the cache is viewed as 
            invalid as there may be data between the first entry and the requested entry.
            </summary>
            <param name="timeStamp">The timestamp to find the next entry after</param>
            <returns>The first element with a timestamp later than <paramref name="timeStamp"/> or null if such an element does not exist</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataCache.FindCacheEntryBefore(System.DateTime)">
            <summary>
            This method finds the last element in the sequence that has a date earlier than <paramref name="timeStamp"/>.
            If <paramref name="timeStamp"/> is before the first entry in the cache or after the last entry, the cache is viewed as 
            invalid as there may be data between the first entry and the requested entry.
            </summary>
            <param name="timeStamp">The timestamp to find the next entry before</param>
            <returns>The first element with a timestamp earlier than <paramref name="timeStamp"/> or null if such an element does not exist</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataCache.GetNext">
            <summary>
            Gets the element after the last returned element. This method will return null if it does not make sense to talk of a next element.
            This happens when data was just loaded (there is no previously returned element), if the element returned was the last in the
            cache or if a previous call returned null.
            </summary>
            <returns>The element after the last returned element or null, if it either does not exist or cannot be determined</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataCache.GetPrevious">
            <summary>
            Gets the element before the last returned element. This method will return null if it does not make sense to talk of a previous element.
            This happens when data was just loaded (there is no previously returned element) or if the element returned was the first in the
            cache.
            </summary>
            <returns>The element before the last returned element or null, if it either does not exist or cannot be determined</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataCache.GetNearest(System.DateTime)">
            <summary>
            Returns the element in the cache that is closest to the timestamp. If the timestmap is before the first element
            or after the last, null will be returned.
            </summary>
            <param name="timestamp">The timestamp to search for</param>
            <returns>The closest element or null if the timestamp is outside the cache</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataCache.GetAtOrBefore(System.DateTime)">
            <summary>
            Gets the last element in the cache that is smaller than or equal to the timestamp given.
            If the timestmap is before the first element or after the last, null will be returned.
            </summary>
            <param name="timestamp">The timestamp that the element returned must be equal to or smaller</param>
            <returns>An element matching the query or null if nothing could be found.</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataCache.Clear">
            <summary>
            Clears the cache of all contents.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MetadataDeviceCapability">
            <summary>
            This class is responsible for describing a capability for a metadata device. A capability describes a single setting
            that will appear on the settings tab for the device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataDeviceCapability.Name">
            <summary>
            Gets and sets the name of the capability (setting). This name is used only internally in the
            system and will not be displayed.
            </summary>
            <remarks>
            This should be set to a string without spaces. Please contact support to get a new string,
            if you are defining a new capability for metadata devices.
            </remarks>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataDeviceCapability.TypeName">
            <summary>
            Gets and sets the type name for the metadata capability. 
            </summary>
            <remarks> This should be set to a string without spaces. Please contact support to get a new string,
            if you are defining a new capability for metadata devices. This often has the same value as <see cref="P:VideoOS.Platform.Data.MetadataDeviceCapability.Name"/>
            but with "Type" appended.
            </remarks>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataDeviceCapability.TypeId">
            <summary>
            Gets and sets the type identifier
            </summary>
            <remarks>
            If this is a non-standard type, the integrator should contact support to get a new GUID.
            </remarks>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataDeviceCapability.TypeDisplayName">
            <summary>
            Gets and sets the display name of the capability. This is the name displayed for the capability
            if there are no translations.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataDeviceCapability.TypeDisplayId">
            <summary>
            Gets and sets the identifier for the display name. This is used for translations, so ask support to get
            one assigned for new metadata capabilities. This ensures that any future translations will be used.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MetadataDeviceDefintion">
            <summary>
            This class is responsible for describing the parameters used by a single metadata device on a piece of hardware.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataDeviceDefintion.MetadataTypes">
            <summary>
            Gets the list desribing all the types of metadata this device can deliver.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataDeviceDefintion.CreateGpsDevice">
            <summary>
            Create a metadata device that delivers GPS data.
            </summary>
            <returns>A new metadata device that suppots GPS</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataDeviceDefintion.CreateBoundingBoxDevice">
            <summary>
            Create a metadata device that delivers bounding box data.
            </summary>
            <returns>A new metadata device that suppots bounding boxes</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataDeviceDefintion.GenerateDeviceParameters(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="devicePrefix"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataDeviceDefintion.GenerateDeviceParametersWithCurrent(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Generates the parameters for the metadata device in the format used by the MIP driver.
            </summary>
            <param name="devicePrefix">The prefix for this particular device.</param>
            <param name="parameters">The <see cref="T:System.Collections.Generic.IDictionary`2"/> where to write the parameters.</param>
            <param name="currentValues"></param>
        </member>
        <member name="T:VideoOS.Platform.Data.HardwareDefinition">
            <summary>
            This class represents a piece of hardware that can added to a runnig system using the MIP driver.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.HardwareDefinition.#ctor(System.Net.NetworkInformation.PhysicalAddress,System.String)">
            <summary>
            Instantiates a new instance of <see cref="T:VideoOS.Platform.Data.HardwareDefinition"/> and sets its required parameters.
            </summary>
            <param name="macAddress">The physical address (MAC address) of the hardware. This may be a dummy value, but it must be present</param>
            <param name="model">The model name of the hardware. This must be a non-empty string</param>
        </member>
        <member name="P:VideoOS.Platform.Data.HardwareDefinition.MacAddress">
            <summary>
            Gets the physical address (MAC address) of the hardware.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.HardwareDefinition.Model">
            <summary>
            Gets the model name of the hardware
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.HardwareDefinition.Firmware">
            <summary>
            Gets or sets the firmware version for the hardware
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.HardwareDefinition.SerialNr">
            <summary>
            Gets or sers the serial number for the hardware
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.HardwareDefinition.MetadataDevices">
            <summary>
            Gets the list of metadata devices on the hardware.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.HardwareDefinition.CameraDevices">
            <summary>
            Gets the list of camera devices on the hardware. Currently, a maximum of one camera device is supported.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.HardwareDefinition.MicrophoneDevices">
            <summary>
            Gets the list of microphone devices on the hardware.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.HardwareDefinition.GenerateParameters">
            <summary>
            Generates an <see cref="T:System.Collections.Generic.IDictionary`2"/> of all the parameters describing the hardware configuration.
            These parameters are in the format used by the MIP driver. There is usually no need to call this method
            in client code, but it does give the option of manipulating the parameters by hand.
            
            The resulting dictionary is used to transmit to the MIP Driver.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.HardwareDefinition.GenerateParameters(VideoOS.Platform.Data.MediaProviderService)">
            <summary>
            Generates an <see cref="T:System.Collections.Generic.IDictionary`2"/> of all the parameters describing the hardware configuration.
            These parameters are in the format used by the MIP driver. There is usually no need to call this method
            in client code, but it does give the option of manipulating the parameters by hand.
            
            The resulting dictionary is used to transmit to the MIP Driver.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Data.MetadataTypeDefinition">
            <summary>
            This class is responsible for handling the parameters that define the type of metadata 
            a metadata device delivers when using the MIP driver. The display name (or its translation)
            will be used as the headline on the settings tab for the device in the Management Client.
            All capabilities in this type will then appear as children in the setting tab.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataTypeDefinition.Capabilities">
            <summary>
            Gets the list of capabilities supported
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataTypeDefinition.Name">
            <summary>
            Gets and sets the name of the type definition. This name is considered a pair with the <see cref="P:VideoOS.Platform.Data.MetadataTypeDefinition.Id"/>.
            If there is no standard name for the type yet, any name can be used as it is not shown to the user.
            </summary>
            <remarks>
            The name usually has the format of all-capital letters and underscores for space. Examples of this
            format are "META_DATA_GPS" and "META_DATA_BOUNDING_BOX".
            </remarks>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataTypeDefinition.Id">
            <summary>
            Gets and sets the identifier for the type definition.
            </summary>
            <remarks>
            If this is a non-standard type, the integrator should contact support to get a new GUID.
            </remarks>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataTypeDefinition.DisplayName">
            <summary>
            Gets and sets the display name of the type definition. This is the name displayed for the metadata type
            if there are no translations.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataTypeDefinition.DisplayId">
            <summary>
            Gets and sets the identifier for the display name. This is used for translations, so ask support to get
            one assigned for new metadata types. This ensures that any future translations will be used.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataTypeDefinition.CreateGpsDefinition">
            <summary>
            Create a <see cref="T:VideoOS.Platform.Data.MetadataTypeDefinition"/> describing a GPS type
            </summary>
            <returns>A new instance of <see cref="T:VideoOS.Platform.Data.MetadataTypeDefinition"/> describing GPS</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataTypeDefinition.CreateBoundingBoxDefinition">
            <summary>
            Create a <see cref="T:VideoOS.Platform.Data.MetadataTypeDefinition"/> describing a bounding boxes
            </summary>
            <returns>A new instance of <see cref="T:VideoOS.Platform.Data.MetadataTypeDefinition"/> describing bounding boxes</returns>
        </member>
        <member name="T:VideoOS.Platform.Data.MetadataProviderChannel">
            <summary>
            This <see cref="T:VideoOS.Platform.Data.MetadataProviderChannel"/> provides an interface for sending metadata to a Milestone XProtect Recording Server.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataProviderChannel.Channel">
            <summary>
            The virtual channel number this stream is identified by.<br/>
            The number is given in the call to <see cref="M:VideoOS.Platform.Data.MediaProviderService.CreateMetadataProvider(System.Int32,System.Int32)"/> that created this instance.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataProviderChannel.ParameterDictionary">
            <summary>
            Contains the set of parameters this application can return to the VMS system, when requested.<br/>
            These parameters are displayed in the administrators UI.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataProviderChannel.ServerParameterDictionary">
            <summary>
            Contains the set of parameters the server has set.<br/> 
            Is not filled on reconnection! Will only be filled when values change, so it is up to the metadata device to persist the values locall when restarting.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataProviderChannel.IsConnected">
            <summary>
            Give the status of the current TCP session.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataProviderChannel.ActiveSessions">
            <summary>
            Contains the number of active sessions right now.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataProviderChannel.Connect">
            <summary>
            Call this method to indicate that you would now like to provide metadata to the server.<br/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataProviderChannel.Disconnect">
            <summary>
            This method will disconnect the session.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataProviderChannel.QueueMetadata(VideoOS.Platform.Metadata.MetadataStream,System.DateTime,System.Nullable{System.TimeSpan})">
            <summary>
            Enqueue a single piece of metadata to transmit.
            </summary>
            <param name="metadata">The metadata to transmit</param>
            <param name="startTime">This parameter currently has no effect and should just be set to DateTime.UtcNow</param>
            <param name="timeSpan">This parameter has no effect and should not be used.</param>
            <returns>True if the metadata was queued to at least one receiver</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataProviderChannel.QueueMetadata(System.String,System.DateTime,System.Nullable{System.TimeSpan})">
            <summary>
            Enqueue a single piece of metadata to transmit.
            </summary>
            <param name="metadata">The metadata to transmit</param>
            <param name="startTime">This parameter currently has no effect and should just be set to DateTime.UtcNow</param>
            <param name="timeSpan">This parameter has no effect and should not be used.</param>
            <returns>True if the metadata was queued to at least one receiver</returns>
        </member>
        <member name="E:VideoOS.Platform.Data.MetadataProviderChannel.SessionOpening">
            <summary>
            Called when a new session is being opened from the VMS system. The <see cref="T:VideoOS.Platform.Data.MediaProviderInternal.RequestHeader"/> parameter contains information about the 
            specific parameters requested for this session. For the parameters not requested in this session, the default parameters
            on the MetadataProviderChannel should be used.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Data.MetadataProviderChannel.SessionClosed">
            <summary>
            Called when one session on this channel is closed from the VMS.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Data.MetadataProviderChannel.ParametersChanged">
            <summary>
            Event is fired when the administrator has changed the configuration.
            
            The receiving application should pass the ServerParameterDictionary and update the ParameterDictionary if the asked changes are valid.
            Also, the current values should be stored on disk, so any restart of the application will know what the latest configuration is.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MetadataSource">
            <summary>
            This class is responsible for giving information about the data in a metadata device. Specifically, it allows
            a client to retrieve information about the types of metadata that the device can deliver.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataSource.#ctor(VideoOS.Platform.Item)">
            <summary>
            Create a new instance of <see cref="T:VideoOS.Platform.Data.MetadataSource"/> and set the device it refers to.
            </summary>
            <param name="item">An <see cref="T:VideoOS.Platform.Item"/> refering to a metadata device.</param>
            <exception cref="T:VideoOS.Platform.ImplementationMIPException">If the <paramref name="item"/> does not refer to a metadata device.</exception>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataSource.GetTypes">
            <summary>
            Get information about the types of metadata that the metadata device can deliver.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:VideoOS.Platform.Data.DataType"/>s, where each element describes on type of metadata.</returns>
        </member>
        <member name="F:VideoOS.Platform.Data.MetadataSource.DisplayNameKey">
            <summary>
            Used as a key to for getting the internal name of a metadata type in <see cref="F:VideoOS.Platform.Data.DataType.Properties"/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.MetadataSource.DisplayIdKey">
            <summary>
            Used as a key to for getting the display id of a metadata type in <see cref="F:VideoOS.Platform.Data.DataType.Properties"/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.MetadataSource.ValidTimeKey">
            <summary>
            Used as a key to getting the valid time for this metadata type in <see cref="F:VideoOS.Platform.Data.DataType.Properties"/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MetadataPlaybackData">
            <summary>
            This class is responsible for containing the information about a single "frame" of recorded metadata.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.MetadataPlaybackData.DateTime">
            <summary>
            The date and time the metadata was recorded.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.MetadataPlaybackData.NextDateTime">
            <summary>
            The time stamp for the next metadata. This field is not always available and will be null if there is no previous data.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.MetadataPlaybackData.PreviousDateTime">
            <summary>
            The time stamp for the previous metadata. This field is not always available and will be null if there is no previous data.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataPlaybackData.Content">
            <summary>
            The metadata stored in the database.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataPlaybackData.SequenceNumber">
            <summary>
            Defines the sequence number 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MKVExporter">
            <summary>
            This class will use Environment specific implementation to export
            one video stream and zero or multiple audio streams to an MKV file (Matroska).
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MKVExporter.#ctor">
            <summary>
            Exports the currently defined devices in a number of data formats
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MKVExporter.Init">
            <summary>
            Initializes the class and any underlaying classes.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MKVExporter.Close">
            <summary>
            Close and destroy underlaying classes.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MKVExporter.CameraList">
            <summary>
            The list of cameras to export.  For MKV export only the first camera is used.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MKVExporter.AudioList">
            <summary>
            The list of Audio sources to export. Can be both microphones and Speakers.
            
            If you need to have the related Microphone or Speaker added, use the GetRelated() method on the 
            Camera Item.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MKVExporter.Path">
            <summary>
            Where to store the file on hard disk.  <br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MKVExporter.Filename">
            <summary>
            Name of the AVI file.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MKVExporter.StartExport(System.DateTime,System.DateTime)">
            <summary>
            Exports the currently defined devices as an MKV file. Returns error if already in progress.
            </summary>
            <value>True if export was started. Is finished when Progress >= 100.</value>
            <param name="start">The start time.</param>
            <param name="end">The end time.</param>
        </member>
        <member name="P:VideoOS.Platform.Data.MKVExporter.Progress">
            <summary>
            Gets the updated progress in percent
            </summary>
            <value>The percent done. Out of range 0-100 means error. -2 means uninitialized.</value>
        </member>
        <member name="M:VideoOS.Platform.Data.MKVExporter.Cancel">
            <summary>
            Cancels the current export operation
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MKVExporter.LastError">
            <summary>
            Gets the last export error as a number.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.MKVExporter.LastDetailedError">
            <summary>
            Gets the last export detailed error as a number (not implemented for MKV export).
            </summary>
            <value>The last error.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.MKVExporter.LastErrorString">
            <summary>
            Gets the last export error as an English string.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="M:VideoOS.Platform.Data.MKVExporter.EndExport">
            <summary>
            Ends and cleans up the current export operation
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.IMKVExporter">
            <summary>
            For internal use only. Instantiate the VideoOS.Platform.Data.MKVExporter() class.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IMKVExporter.Init">
            <summary>
            Initialize managed wrapper. Must be called by application before StartExport()
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IMKVExporter.Close">
            <summary>
            Uninitialize managed wrapper. Should be called when done using any instance of Exporter, for example at exit.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IMKVExporter.CameraList">
            <summary>
            The list of cameras to export.  For MKV export only the first camera is used.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IMKVExporter.AudioList">
            <summary>
            The list of Audio sources to export. Can be both microphones and Speakers.
            
            If you need to have the related Microphone or Speaker added, use the GetRelated() method on the 
            Camera Item.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IMKVExporter.ExportToDisk">
            <summary>
            Specifies whether to export hard disk.<br/>
            The path of where to store the export is defined in the Path property.<br/>
            This property is valid for Smart Client plug-ins.<br/>
            Default value is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IMKVExporter.ExportToMediaBurner">
            <summary>
            Specifies whether to export to an optical disc (i.e. DVD).<br/>
            The drive letter of where to burn the export is defined in the MediaBurnerDriverLetter property.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            Default value is false.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IMKVExporter.MediaBurnerDriverLetter">
            <summary>
            When the ExportToMediaBurner is set to true, the MediaBurnerDriverLetter is used to identify which burner to use.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            There is no default value, must be specified for MediaBurner exports.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IMKVExporter.Path">
            <summary>
            Where to store the export
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IMKVExporter.ExportName">
            <summary>
            Specific the name of the export. This value is used as a part of the path and a the name of the optical disc.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            Default value is a construction of current Date and Time
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IMKVExporter.Filename">
            <summary>
            Name of the AVI file.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IMKVExporter.StartExport(System.DateTime,System.DateTime)">
            <summary>
            Exports the currently defined devices as an AVI file. Returns error if already in progress.
            </summary>
            <value>True if export was started. Is finished when Progress >= 100.</value>
            <param name="start">The start time.</param>
            <param name="end">The end time.</param>
        </member>
        <member name="P:VideoOS.Platform.Data.IMKVExporter.Progress">
            <summary>
            Gets the updated progress in percent
            </summary>
            <value>The percent done. Out of range 0-100 means error. -2 means uninitialized.</value>
        </member>
        <member name="M:VideoOS.Platform.Data.IMKVExporter.Cancel">
            <summary>
            Cancels the current export operation
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IMKVExporter.LastError">
            <summary>
            Gets the last export error as a number.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.IMKVExporter.LastErrorString">
            <summary>
            Gets the last export error as an English string.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="M:VideoOS.Platform.Data.IMKVExporter.EndExport">
            <summary>
            Ends and cleans up the current export operation
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.Property">
            <summary>
            The Property class is used for events generated with access control plugins.
            The AccessControlEvent class references this class.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Property.Key">
            <summary/>
        </member>
        <member name="P:VideoOS.Platform.Data.Property.Value">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.Data.Property.Equals(System.Object)">
            <summary>
            Compares both key and value for equality. Comparison is case-sensitive.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.Property.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Data.MetadataPlaybackSource">
            <summary>
            MetadataPlaybackSource gets metadata in raw mode. This means that the Generic Byte Header as well as the content is available.<br/>
            When getting metadata from the server, it should be considered that the Get() method can take some time and is not ideal to execute on a UI thread.<br/>
            Only supported in Smart Client and standalone environments.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.#ctor(VideoOS.Platform.Item)">
            <summary>
            Create and initialize an instance of <see cref="T:VideoOS.Platform.Data.MetadataPlaybackSource"/> for handling. The Item MUST be of Kind==Kind.Metadata
            </summary>
            <param name="item">An <see cref="P:VideoOS.Platform.Data.MetadataPlaybackSource.Item"/> that represents the metadata device to read data from.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="item"/> is null</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="item"/> does not refer to a metadata device. </exception>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.Init">
            <summary>
            Initialize the server connection.
            </summary>
            <exception cref="T:VideoOS.Platform.ImplementationMIPException">Looks like a programming error, check order and parameters of the calls.</exception>
            <exception cref="T:VideoOS.Platform.NotAuthorizedMIPException">Unable to connect to the server. Could be user is not authorized to see this metadata device.</exception>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.Close">
            <summary>
            Close the connection
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataPlaybackSource.SessionId">
            <summary>
            The object representing the underlaying session
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MetadataPlaybackSource.Item">
            <summary>
            The Metadata Item to receive recorded data from
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.Get(System.DateTime)">
            <summary>
            Get one metadata "frame" at the specified time. If no data is found, null may be returned.
            </summary>
            <param name="timestamp"></param>
            <returns>null or an instance of <see cref="T:VideoOS.Platform.Data.MetadataPlaybackData"/> with the recorded data</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.Get(System.DateTime,System.TimeSpan,System.Int32)">
            <summary>
            Get a list of raw metadata from the time specified and limited as specified.
            </summary>
            <param name="timestamp">DateTime of first metadata "frame"</param>
            <param name="maxTimeAfter">Max TimeSpan to look for data</param>
            <param name="maxCountAfter">Max number of metadata "GOPs" to return</param>
            <returns>null or a <see cref="T:System.Collections.Generic.List`1"/> instance with the recorded data</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.GetNearest(System.DateTime)">
            <summary>
            Get the nearest raw metadata to the <see cref="T:System.DateTime" /> specified.
            This method is useful when being issued within a second of when the recording took place. e.g. close to real time. 
            The actual recording may not have happened yet, and this method will then go back a few seconds instead of returning null.
            </summary>
            <param name="timestamp">A <see cref="T:System.DateTime"/> specifying when to look for data</param>
            <returns>null or an instance of <see cref="T:VideoOS.Platform.Data.MetadataPlaybackData"/> with the recorded data</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.GetAtOrBefore(System.DateTime)">
            <summary>
            Get the previous image or the image at the exact same time as specified by <paramref name="timestamp"/>.
            This method is useful when being issued within a second of when the recording took place. e.g. close to real time. 
            The actual recording may not have happened yet, and this method will then go back a few seconds instead of returning null.
            </summary>
            <param name="timestamp"></param>
            <returns>null or an instance of <see cref="T:VideoOS.Platform.Data.MetadataPlaybackData"/> with the recorded data</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.GoToWithResult(System.DateTime,System.String)">
            <summary>
            Set the pointer as close to this time as possible.
            </summary>
            <remarks>
            This method will return true if the video pointer was moved - even if the time it was moved to is far in time from the requested time.
            False is only returned if the video pointer is not moved, which only happens in a few cases:
            <ol>
              <li>If the direction argument is PlaybackPlayModeData.Forward, the method returns true if there is ANY video at or after the requested time.
                  Only if the requested time is after database end will GoToWithResultreturn false.</li>
              <li>If the direction argument is PlaybackPlayModeData.Reverse, the method returns true if there is ANY video at or before the requested time.
                  Only if the requested time is before database start will GoToWithResult return false.</li>
              <li>If the direction argument is something else, it will return true, if there is any video and false only if the DB is empty.</li>
            </ol>
            </remarks>
            <param name="timestamp">The point in time that the video pointer should be moved to</param>
            <param name="playbackPlayModeData">Used to fine tune the direction to move if exact time stamp is not available.  
            Set to one of the <see cref="T:VideoOS.Platform.Messaging.PlaybackPlayModeData"/> definitions, as this can often be taken from the current playback mode.</param>
            <returns>True if the video pointer was moved; false if it did not move</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.GoTo(System.DateTime,System.String)">
            <summary>
            Set the pointer as close to this time as possible.
            </summary>
            <param name="timestamp">The point in time that the video pointer should be moved to</param>
            <param name="playbackPlayModeData">Used to fine tune the direction to move if exact time stamp is not available.  
            Set to one of the <see cref="T:VideoOS.Platform.Messaging.PlaybackPlayModeData"/> definitions, as this can often be taken from the current playback mode.</param>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.GetNext">
            <summary>
            Get the next metadata "frame" after the last non-null return value
            
            If the previous call to get data returned null, this method will also return null,
            as there is nothing that identifies the current position.
            </summary>
            <returns>null or an instance of <see cref="T:VideoOS.Platform.Data.MetadataPlaybackData"/> with the recorded data</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.GetNext(System.DateTime)">
            <summary>
            Get the next metadata "frame" after the one identified by <paramref name="timestamp"/>
            </summary>
            <param name="timestamp">The timestamp to get the next metadata "frame" to</param>
            <returns>null or an instance of <see cref="T:VideoOS.Platform.Data.MetadataPlaybackData"/> with the recorded data</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.GetPrevious">
            <summary>
            Get the previous metadata "frame" <br/>
            
            If the previous call to get data returned null, this method will also return null,
            as there is nothing that identifies the current position.
            </summary>
            <returns>null or an instance of <see cref="T:VideoOS.Platform.Data.MetadataPlaybackData"/> with the recorded data</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.GetPrevious(System.DateTime)">
            <summary>
            Get the previous metadata "frame" to a given timestamp<br/>
            </summary>
            <param name="timestamp">The timestamp to get the previous frame to</param>
            <returns>null or an instance of <see cref="T:VideoOS.Platform.Data.MetadataPlaybackData"/> with the recorded data</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.GetNextViaLowerLevel">
            <summary>
            Get the next image <br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.GetPreviousSequence">
            <summary>
            Get the first image in the previous sequence<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.GetNextSequence">
            <summary>
            Get the first image of the next sequence
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.GetBegin">
            <summary>
            Get first frame in the database
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MetadataPlaybackSource.GetEnd">
            <summary>
            Get last frame in the database
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.RawVideoSource">
            <summary>
            RawVideoSource gets video image in raw mode, e.g. GenericByteHeaders with encoded content.<br/>
            When getting images from the server, it should be considered that the Get() method can take some time and is not ideal to execute on a UI thread.<br/>
            Note: Is only implemented in the MIP SDK for component integration.   
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.#ctor(VideoOS.Platform.Item)">
            <summary>
            Construct a RawVideoSource for Raw handling. The Item MUST be of Kind==Kind.Camera
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.Init(System.Int32,System.Int32)">
            <summary>
            This constructor will ignore the width and height, as they are not relevant for this class.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.Init">
            <summary>
            Initialize the server connection.
            </summary>
            <exception cref="T:VideoOS.Platform.ImplementationMIPException">Looks like a programming error, check order and parameters of the calls.</exception>
            <exception cref="T:VideoOS.Platform.NotAuthorizedMIPException">Unable to connect to the server. Could be user is not authorized to see this camera.</exception>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.Close">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.RawVideoSource.SessionId">
            <summary>
            The object represending the underlaying session
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.Get(System.DateTime)">
            <summary>
            Get one frame at the specified time.<br/> if no image found, null may be returned.
            </summary>
            <param name="dateTime"></param>
            <returns>null or a RawVideoSourceData class</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.Get(System.DateTime,System.TimeSpan,System.Int32)">
            <summary>
            Get a list of Raw data from the time specified and limited as specified.
            </summary>
            <param name="dateTime">DateTime of first frame</param>
            <param name="maxTimeAfter">Max TimeSpan to look for images</param>
            <param name="maxCountAfter">Max number of images to return</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.GetNearest(System.DateTime)">
            <summary>
            Get the nearest raw image to the DateTime specified.<br/>
            This method is useful when being issued within a second of when the recording took place. e.g. close to real time. 
            The actual recording may not have happened yet, and this method will then go back a few seconds instead of returning null.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.GetAtOrBefore(System.DateTime)">
            <summary>
            Get the previous image to the DateTime specified or the image at the exact same time.<br/>
            This method is useful when being issued within a second of when the recording took place. e.g. close to real time. 
            The actual recording may not have happened yet, and this method will then go back a few seconds instead of returning null.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.GoToWithResult(System.DateTime,System.String)">
            <summary>
            Set the pointer as close to this time as possible.
            </summary>
            <remarks>
            This method will return true if the video pointer was moved - even if the time it was moved to is far in time from the requested time.
            False is only returned if the video pointer is not moved, which only happens in a few cases:
            <ol>
              <li>If the direction argument is PlaybackPlayModeData.Forward, the method returns true if there is ANY video at or after the requested time.
                  Only if the requested time is after database end will GoToWithResultreturn false.</li>
              <li>If the direction argument is PlaybackPlayModeData.Reverse, the method returns true if there is ANY video at or before the requested time.
                  Only if the requested time is before database start will GoToWithResult return false.</li>
              <li>If the direction argument is something else, it will return true, if there is any video and false only if the DB is empty.</li>
            </ol>
            </remarks>
            <param name="timestamp">The point in time that the video pointer should be moved to</param>
            <param name="playbackPlayModeData">Used to fine tune the direction to move if exact time stamp is not available.  
            Set to one of the PlaybackPlayModeData definitions, as this can often be taken from the current playback mode.</param>
            <returns>True if the video pointer was moved; false if it did not move</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.GoTo(System.DateTime,System.String)">
            <summary>
            Set the pointer as close to this time as possible.
            </summary>
            <param name="timestamp">The point in time that the video pointer should be moved to</param>
            <param name="playbackPlayModeData">Used to fine tune the direction to move if exact time stamp is not available.  
            Set to one of the PlaybackPlayModeData definitions, as this can often be taken from the current playback mode.</param>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.GetNext">
            <summary>
            Get the next frame after last received frame
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.GetNext(System.DateTime)">
            <summary>
            Get the next frame after the one identified by DateTime
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.GetPrevious">
            <summary>
            Get the previous frame <br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.GetPrevious(System.DateTime)">
            <summary>
            Get the previous frame to a given timestamp<br/>
            This method supported for standalone MIP library applications.
            </summary>
            <param name="dateTime">The timestamp to get the previous frame to</param>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.GetNextViaLowerLevel">
            <summary>
            Get the next image <br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.GetPreviousSequence">
            <summary>
            Get the first image in the previous sequence<br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.GetNextSequence">
            <summary>
            Get the first image of the next sequence<br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.GetBegin">
            <summary>
            Get first frame in the database<br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSource.GetEnd">
            <summary>
            Get last frame in the database<br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.IAudioRecorder">
            <summary>
            This class is a base class for audio recorder implementations.<br/>
            In the .Net Library there is one implementation, for recording audio from a PC attached microphone.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.IAudioRecorder.AudioDataReadyEventHandler">
            <summary>
            Represents the method that will signal Audio Data Ready
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Data.IAudioRecorder.AudioDataReadyEvent">
            <summary>
            Signals Audio Data Ready
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IAudioRecorder.FireAudioDataReadyEvent(System.Byte[])">
             <summary>
            Activates the AudioDataReadyEvent
             </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAudioRecorder.OutgoingWaveFormatChannels">
            <summary>
            Number of channels, expected to be 1
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAudioRecorder.OutgoingWaveFormatBitsPerSample">
            <summary>
            Specify the bits per sample - default is 16
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAudioRecorder.OutgoingAudioWaveFormatSamplesPerSecond">
            <summary>
            Specify number of samples per second - default is 8000
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IAudioRecorder.Initialize">
            <summary>
            Initializes the class and reserves resources. May do a small sample start / stop to validate connection is operational.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.IAudioRecorder.Free">
            <summary>
            Stops recording, and free resources.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IAudioRecorder.StartRecording">
            <summary>
            Starts recording.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IAudioRecorder.StopRecording">
            <summary>
            Stops recording.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IAudioRecorder.IsRecording">
            <summary>
            Indicates if it is recording.
            </summary>
            <returns>True if recording.</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.IAudioRecorder.CalcMeterValue(System.Byte[],System.Int32)">
            <summary>
            Calculate how much noice is in the audio stream.
            </summary>
            <param name="data">The data received in the AudioDataReadyEvent</param>
            <param name="dataLength">The langth</param>
            <returns>a value between 0 and 100</returns>
        </member>
        <member name="T:VideoOS.Platform.Data.IAudioRecorder.AudioDataEventArgs">
            <summary>
            Implements the class that contains the event arguments for the AudioDataEventArgs
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.IAudioRecorder.AudioDataEventArgs._audioData">
            <summary>
            The input value parameter of the event arguments
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IAudioRecorder.AudioDataEventArgs.#ctor(System.Byte[])">
            <summary>
            Constructs a AudioDataEventArgs instance
            </summary>
            <param name="audioData">The input value parameter of the event arguments</param>
        </member>
        <member name="P:VideoOS.Platform.Data.IAudioRecorder.AudioDataEventArgs.AudioData">
            <summary>
            Gets or sets the input value mode parameter of the event arguments
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.AVIExporter">
            <summary>
            This class will use environment specific implementation to export
            either one video stream with zero or more audio streams, or multiple video streams, to an AVI file.
            
            To export just a single video stream (optionally with one or more audio streams) use the <see cref="P:VideoOS.Platform.Data.AVIExporter.CameraList"/>
            and <see cref="P:VideoOS.Platform.Data.AVIExporter.AudioList"/> properties and then call the <see cref="M:VideoOS.Platform.Data.AVIExporter.StartExport(System.DateTime,System.DateTime)"/> method.
            
            To export multiple video streams sequentially to the same AVI file use the <see cref="M:VideoOS.Platform.Data.AVIExporter.StartExport(System.Collections.Generic.IEnumerable{VideoOS.Platform.Data.SequenceAviExportElement})"/>
            method and specify the cameras to export in the argument to this method. Audio is not supported for sequential export.
            
            Sequential export in the Smart Client is supported from 2017 R3.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AVIExporter.VerticalOverlayPositionTop">
            <summary>
            Constant defining top position for the overlay image, argument used with <see cref="M:VideoOS.Platform.Data.AVIExporter.SetOverlayImage(System.Drawing.Bitmap,System.Int32,System.Int32,System.Double,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AVIExporter.VerticalOverlayPositionCentered">
            <summary>
            Constant defining centered position for the overlay image, argument used with <see cref="M:VideoOS.Platform.Data.AVIExporter.SetOverlayImage(System.Drawing.Bitmap,System.Int32,System.Int32,System.Double,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AVIExporter.VerticalOverlayPositionBottom">
            <summary>
            Constant defining bottom position for the overlay image, argument used with <see cref="M:VideoOS.Platform.Data.AVIExporter.SetOverlayImage(System.Drawing.Bitmap,System.Int32,System.Int32,System.Double,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AVIExporter.HorizontalOverlayPositionLeft">
            <summary>
            Constant defining left position for the overlay image, argument used with <see cref="M:VideoOS.Platform.Data.AVIExporter.SetOverlayImage(System.Drawing.Bitmap,System.Int32,System.Int32,System.Double,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AVIExporter.HorizontalOverlayPositionCentered">
            <summary>
            Constant defining centered position for the overlay image, argument used with <see cref="M:VideoOS.Platform.Data.AVIExporter.SetOverlayImage(System.Drawing.Bitmap,System.Int32,System.Int32,System.Double,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AVIExporter.HorizontalOverlayPositionRight">
            <summary>
            Constant defining right position for the overlay image, argument used with <see cref="M:VideoOS.Platform.Data.AVIExporter.SetOverlayImage(System.Drawing.Bitmap,System.Int32,System.Int32,System.Double,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.AVIExporter.#ctor">
            <summary>
            Exports the currently defined devices in a number of data formats
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.AVIExporter.Init">
            <summary>
            Initialize managed wrapper. Must be called by application before StartExport()
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.AVIExporter.Close">
            <summary>
            Uninitialize managed wrapper. Should be called when done using any instance of Exporter, for example at exit.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.CameraList">
            <summary>
            The list of cameras to export
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.AudioList">
            <summary>
            The list of Audio sources to export. Can be both microphones and Speakers.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.Path">
            <summary>
            Where to store the export on hard disk.  <br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.ExportToDisk">
            <summary>
            Specifies whether to export hard disk.<br/>
            The path of where to store the export is defined in the Path property.<br/>
            This property is valid for Smart Client plug-ins.<br/>
            Default value is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.ExportToMediaBurner">
            <summary>
            Specifies whether to export to an optical disc (i.e. DVD).<br/>
            The drive letter of where to burn the export is defined in the MediaBurnerDriverLetter property.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            Default value is false.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.MediaBurnerDriverLetter">
            <summary>
            When the ExportToMediaBurner is set to true, the MediaBurnerDriverLetter is used to identify which burner to use.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            There is no default value, must be specified for MediaBurner exports.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.ExportName">
            <summary>
            Specific the name of the export. This value is used as a part of the path and a the name of the optical disc.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            Default value is a construction of current Date and Time
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.Filename">
            <summary>
            Name of the AVI file.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.Timestamp">
            <summary>
            True if timestamp should be placed on top of video
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.Codec">
            <summary>
            Codec to be used for AVI
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.CodecList">
            <summary>
            Returns a list of valid codecs to be used for the AVI export
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.FrameRate">
            <summary>
            Target frame rate
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.Width">
            <summary>
            Width of target AVI
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.Height">
            <summary>
            Height of target AVI
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.Channels">
            <summary>
            Number of audio channels
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.AudioSampleRate">
            <summary>
            Sample rate for Audio. Default is 8000
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.AudioSampleDepth">
            <summary>
            Audio bit per sample, default is 16 bits
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.Window">
            <summary>
            A rectagle to export, if only a part should be exported.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.AutoSplitExportFile">
            <summary>
            Enable/disable the autoSplitExport feature. Default set to true (=enable splitting).<br/>
            When this property is set to true, the resulting AVI file is split into AVI files of with size as set in the MaxAVIFileSize property.<br/>
            When this property is set to false, the resulting AVI file is limited to a size of MaxAVIFileSize. If the file size is exceeded then 
            the export fails.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.MaxAVIFileSize">
            <summary>
            Set the max file size of the autoSplitExport feature. <br/>
            Default value is 512 MB, e.g. value of 512*1024*1024.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.AVIExporter.SetOverlayImage(System.Drawing.Bitmap,System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            Applies an overlay image to the exported video. The positioning and size are relative to the zoomed/cropped exported image (video). The method must be called prior to StartExport. For platform integrations this feature is only supported in combination with <see cref="M:VideoOS.Platform.Data.AVIExporter.StartExport(System.DateTime,System.DateTime)"/> method.
            </summary>
            <param name="overlayBitmap">The overlay image to be used. Should be in an alpha-enabled image color format (RGBA or BGRA) to be able to handle (semi-)transparent areas. Any other format will not support transparency.</param>
            <param name="verticalOverlayPosition">The vertical position of the overlay image relative to the regular orientation of the output images, supports: Top, Centered and Bottom location - use defined constants.</param>
            <param name="horizontalOverlayPosition">The horizontal position of the overlay image relative to the regular orientation of the output images, supports: Left, Centered and Right - use defined constants.</param>
            <param name="scaleFactor">Scale factor relative the output image size. The value of 1.0 indicates 100% size, and smaller means that the overlay will cover a smaller area of the image. Larger values will result in that the surplus will be cropped.</param>
            <param name="ignoreAspect">Flag indicating whether or not the aspect ratio is taken into account. The value of false will ensure aspect ratio correction, otherwise the overlaying is done directly on a pixel-to-pixel basis.</param>
            <returns>True if successfully set the overlay image, otherwise false.</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.AVIExporter.StartExport(System.DateTime,System.DateTime)">
            <summary>
            Exports the currently defined devices as an AVI file. Returns error if already in progress.
            </summary>
            <param name="start">The start time.</param>
            <param name="end">The end time.</param>
            <returns>True if export was started. Is finished when Progress >= 100.</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.AVIExporter.StartExport(System.Collections.Generic.IEnumerable{VideoOS.Platform.Data.SequenceAviExportElement})">
            <summary>
            Exports the specified sequences as one sequential AVI file. The sequences will be exported one after another in the order provided 
            - no matter the chronological order of the data within.
            </summary>
            <param name="sequences">The list of sequences to export.</param>
            <remarks>The CameraList property is ignored (cameras to export are taken from sequences instead) and audio is not supported for this method.</remarks>
            <returns>True if export was started. Is finished when Progress >= 100.</returns>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.Progress">
            <summary>
            Gets the updated progress in percent
            </summary>
            <value>The percent done. Out of range 0-100 means error. -2 means uninitialized.</value>
        </member>
        <member name="M:VideoOS.Platform.Data.AVIExporter.Cancel">
            <summary>
            Cancels the current export operation
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.LastError">
            <summary>
            Gets the last export error as a number.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.LastDetailedError">
            <summary>
            Gets the last export detailed error as a number.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.AVIExporter.LastErrorString">
            <summary>
            Gets the last export error as an English string.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="M:VideoOS.Platform.Data.AVIExporter.EndExport">
            <summary>
            Ends and cleans up the current export operation
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.SequenceAviExportElement">
            <summary>
            Class for defining each element of an AVI sequence export
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SequenceAviExportElement.StartTime">
            <summary>
            Start time for this export element
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SequenceAviExportElement.EndTime">
            <summary>
             End time for this export element
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SequenceAviExportElement.Camera">
            <summary>
            The camera to export in this part of the sequence
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SequenceAviExportElement.OverlayText">
            <summary>
            Overlay text to show in lower left corner in this part of the sequence
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.BitmapVideoSourceImplementer">
            <summary>
            BitmapVideoSourceImplementer gets video image formatted as Bitmaps.<br/>
            This class is NOT thread safe, and all calls to these methods MUST be coming from same thread.
            When getting images from the server, it should be considered that the Get() method can take some time and is not ideal to execute on a UI thread.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSourceImplementer.#ctor(VideoOS.Platform.Item)">
            <summary>
            Construct a VideoSource for Bitmap handling. The Item MUST be of Kind==Kind.Camera
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSourceImplementer.Init(System.Int32,System.Int32)">
            <summary>
            Initialize the server connection and set the with and height to specific values.<br/>
            The height and width should be set to the lowest value that make sense for your application, 
            e.g. don't ask for 1080x720 images if displaying thumbnails.<br/>
            The Bitmap format will be set to BGR24.
            </summary>
            <exception cref="T:VideoOS.Platform.ImplementationMIPException">Looks like a programming error, check order and parameters of the calls.</exception>
            <exception cref="T:VideoOS.Platform.NotAuthorizedMIPException">Unable to connect to the server. Could be user is not authorized to see this camera.</exception>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSourceImplementer.Init(System.Int32,System.Int32,VideoOS.Platform.BitmapFormat)">
            <summary>
            Initialize the server connection and set the with and height to specific values.<br/>
            The height and width should be set to the lowest value that make sense for your application, 
            e.g. don't ask for 1080x720 images if displaying thumbnails.<br/>
            The Bitmap format will be set to the specified format.
            </summary>
            <exception cref="T:VideoOS.Platform.ImplementationMIPException">Looks like a programming error, check order and parameters of the calls.</exception>
            <exception cref="T:VideoOS.Platform.NotAuthorizedMIPException">Unable to connect to the server. Could be user is not authorized to see this camera.</exception>
            <param name="width">The width of the video frames to be received, or 0 for original size</param>
            <param name="height">The height of the video frames to be received, or 0 for original size</param>
            <param name="format">The format of the bitmap.</param>
        </member>
        <member name="T:VideoOS.Platform.Data.BitmapVideoSource">
            <summary>
            BitmapVideoSource gets video image formatted as Bitmaps.<br/>
            This class is NOT thread safe, and all calls to these methods MUST be coming from same thread.
            When getting images from the server, it should be considered that the Get() method can take some time and is not ideal to execute on a UI thread.<br/>
            Only supported in Smart Client and standalone environments.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.#ctor(VideoOS.Platform.Item)">
            <summary>
            Construct a VideoSource for Bitmap handling. The Item MUST be of Kind==Kind.Camera
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.Init">
            <summary>
            Initialize the server connection and set default width and height. <br/> 
            Default is currently VGA, e.g. 640x480. It it not the camera defined resolution!<br/>
            The Bitmap format will be set to BGR24.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.Init(System.Int32,System.Int32)">
            <summary>
            Initialize the server connection and set the width and height to specific values.<br/>
            The height and width should be set to the lowest value that make sense for your application, 
            e.g. don't ask for 1080x720 images if displaying thumbnails.<br/>
            The Bitmap format will be set to BGR24.
            </summary>
            <exception cref="T:VideoOS.Platform.ImplementationMIPException">Looks like a programming error, check order and parameters of the calls.</exception>
            <exception cref="T:VideoOS.Platform.NotAuthorizedMIPException">Unable to connect to the server. Could be user is not authorized to see this camera.</exception>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.Init(System.Int32,System.Int32,VideoOS.Platform.BitmapFormat)">
            <summary>
            Initialize the server connection and set the width and height to specific values.<br/>
            The height and width should be set to the lowest value that make sense for your application, 
            e.g. don't ask for 1080x720 images if displaying thumbnails.<br/>
            The Bitmap format will be set to the specified format.
            </summary>
            <exception cref="T:VideoOS.Platform.ImplementationMIPException">Looks like a programming error, check order and parameters of the calls.</exception>
            <exception cref="T:VideoOS.Platform.NotAuthorizedMIPException">Unable to connect to the server. Could be user is not authorized to see this camera.</exception>
            <param name="width">The width of the video frames to be received, or 0 for original size</param>
            <param name="height">The height of the video frames to be received, or 0 for original size</param>
            <param name="format">The format of the bitmap.</param>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.Close">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BitmapVideoSource.SessionId">
            <summary>
            The object representing the underlaying session
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BitmapVideoSource.Height">
            <summary>
            The height of all frames received
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BitmapVideoSource.Width">
            <summary>
            The width of all frames received
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.SetKeepAspectRatio(System.Boolean,System.Boolean)">
            <summary>
            Instruct the Media Toolkit to keep the aspect ratio for the transcoded frames.<br/>
            This method <i>must</i> be called before the Init call.
            <param name="keepAspectRatio">true to keep same aspect ratio as the original frames has.</param>
            <param name="fillSpace">true to fill missing pixels with black to match the target width and height</param>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.SuspendSettingsUpdate">
            <summary>
            Calling this method will suspend the change to any settings, until a ResumeSettingsUpdate has been called.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.ResumeSettingsUpdate">
            <summary>
            Calling this method will allow the system to perform the pending settings changes done between calling the SuspendSettingUpdate and this method.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.SetWidthHeight">
            <summary>
            Enforce the changed width and height properties.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.SetCropRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Define a cropping rectangle of what part of the image to pick out.<br/>
            The values are all between 0.0 up to 1.0 as a relative part of the original image.<br/>
            To crop out a lower right hand rectangle these values could apply:<br/>
            	SetCropRectangle( 0.5, 0.5, 0.25, 0.25 );
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.Get(System.DateTime)">
            <summary>
            Get one Bitmap at the specified time.<br/> if no image found, null may be returned.
            </summary>
            <param name="dateTime"></param>
            <returns>null or a bitmapData class</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.Get(System.DateTime,System.TimeSpan,System.Int32)">
            <summary>
            Get a list of Bitmaps from the time specified and limited as specified.
            </summary>
            <param name="dateTime">DateTime of first frame</param>
            <param name="maxTimeAfter">Max TimeSpan to look for images</param>
            <param name="maxCountAfter">Max number of images to return</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.GetNearest(System.DateTime)">
            <summary>
            Get the nearest bitmap to the DateTime specified.<br/>
            This method is useful when being issued within a second of when the recording took place. e.g. close to real time. 
            The actual recording may not have happened yet, and this method will then go back a few seconds instead of returning null.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.GetAtOrBefore(System.DateTime)">
            <summary>
            Get the nearest bitmap to the DateTime specified.<br/>
            This method is useful when being issued within a second of when the recording took place. e.g. close to real time. 
            The actual recording may not have happened yet, and this method will then go back a few seconds instead of returning null.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.GoToWithResult(System.DateTime,System.String)">
            <summary>
            Set the pointer as close to this time as possible.
            </summary>
            <remarks>
            This method will return true if the video pointer was moved - even if the time it was moved to is far in time from the requested time.
            False is only returned if the video pointer is not moved, which only happens in a few cases:
            <ol>
              <li>If the direction argument is PlaybackPlayModeData.Forward, the method returns true if there is ANY video at or after the requested time.
                  Only if the requested time is after database end will GoToWithResultreturn false.</li>
              <li>If the direction argument is PlaybackPlayModeData.Reverse, the method returns true if there is ANY video at or before the requested time.
                  Only if the requested time is before database start will GoToWithResult return false.</li>
              <li>If the direction argument is something else, it will return true, if there is any video and false only if the DB is empty.</li>
            </ol>
            </remarks>
            <param name="timestamp">The point in time that the video pointer should be moved to</param>
            <param name="playbackPlayModeData">Used to fine tune the direction to move if exact time stamp is not available.  
            Set to one of the PlaybackPlayModeData definitions, as this can often be taken from the current playback mode.</param>
            <returns>True if the video pointer was moved; false if it did not move</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.GoTo(System.DateTime,System.String)">
            <summary>
            Set the pointer as close to this time as possible.
            </summary>
            <param name="timestamp">The point in time that the video pointer should be moved to</param>
            <param name="playbackPlayModeData">Used to fine tune the direction to move if exact time stamp is not available.  
            Set to one of the PlaybackPlayModeData definitions, as this can often be taken from the current playback mode.</param>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.GetNext">
            <summary>
            Get the next bitmap after the one received on last call to Get()
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.GetPrevious">
            <summary>
            Get the previous bitmap <br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.GetPreviousSequence">
            <summary>
            Get the first bitmap in the previous sequence<br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.GetNextSequence">
            <summary>
            Get the first bitmap of the next sequence<br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.GetBegin">
            <summary>
            Get first Bitmap in the database<br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapVideoSource.GetEnd">
            <summary>
            Get last Bitmap in the database<br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.BitmapData">
            <summary>
            Contains the Bitmap information 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.BitmapData.DateTime">
            <summary>
            The date and time the image was taken.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.BitmapData.IsNextAvailable">
            <summary>
            Defines if the NextDateTime is filled.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.BitmapData.NextDateTime">
            <summary>
            The time stamp for the next image.<br/>
            This field is not always available.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.BitmapData.IsPreviousAvailable">
            <summary>
            Defines if the PreviousDateTime is filled.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.BitmapData.PreviousDateTime">
            <summary>
            The time stamp for the previous image.<br/>
            This field is not always available.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BitmapData.HardwareDecodingStatus">
            <summary>
            Defines how the decoding of the current frame is performed.<br/>
            Values can be:<br/>
              'hardware' - Decoded by GPU<br/>
              'software' - Decoded by Intel Media SDK<br/>
              'fallback' - Decoded by Intel Media SDK, even though it was requested to be Hardware (or Auto)<br/>
              'ipp'      - Decoded by Intel UMC<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapData.GetBitmap">
            <summary>
            Get a Bitmap class pointing to the original plane data.
            The resulting Bitmap needs to be Disposed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapData.ConvertToBitmapSource">
            <summary>
            Utility method used to convert the contained bitmap into a <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>
            which can be directly applied as a source to an WPF Image control.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.Data.BitmapData.Format">
            <summary>
            The format of the received bitmap
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BitmapData.ColorSpace">
            <summary>
            For BitmapFormat of types YCbCr, the BitmapColorSpace defines what color space is used
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapData.GetPlaneBytes(System.Int32)">
            <summary>
            Returns the bytes in one plane
            </summary>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapData.GetPlaneHeight(System.Int32)">
            <summary>
            Get the height of a given plane
            </summary>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapData.GetPlaneWidth(System.Int32)">
            <summary>
            Get the width of one plane
            </summary>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapData.GetPlaneStride(System.Int32)">
            <summary>
            Get the width of one scan line in bytes (including filler bytes)
            </summary>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.Data.BitmapData.PixelAspectRatio">
            <summary>
            How each pixel should be spaced.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapData.GetPlanePointer(System.Int32)">
            <summary>
            Get a pointer to the start of a plane. The pointer is pointing into unmanaged memory!
            </summary>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.Data.BitmapData.ObjectToDispose">
            <summary>
            Reserved for internal use. DO NOT ACCESS THIS FIELD!
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapData.Dispose(System.Boolean)">
            <summary>
            Call this to dispose the related memory
            </summary>
            <param name="native">Ignored</param>
        </member>
        <member name="M:VideoOS.Platform.Data.BitmapData.Dispose">
            <summary>
            Call this to dispose the related memory (Unmanaged)
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.SourceDataOnBitmapDataProxy">
            <summary>
            Proxy between ISourceData and BitmapData
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.SourceDataOnBitmapDataProxy.#ctor(VideoOS.Platform.Data.BitmapData)">
            <summary>
            Constructor
            </summary>
            <param name="bitmapData"></param>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnBitmapDataProxy.BitmapData">
            <summary>
            BitmapData t be used by the inheritors
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnBitmapDataProxy.DateTime">
            <summary>
            Central timestamp
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnBitmapDataProxy.IsNextAvailable">
            <summary>
            Is next sample available
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnBitmapDataProxy.NextDateTime">
            <summary>
            Next sample timestamp
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnBitmapDataProxy.IsPreviousAvailable">
            <summary>
            Is prev sample available
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnBitmapDataProxy.PreviousDateTime">
            <summary>
            Previous sample timestamp
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.VideoSourceDataOnBitmapDataProxy">
            <summary>
            Proxy between IVideoSourceData and BitmapData
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.VideoSourceDataOnBitmapDataProxy.#ctor(VideoOS.Platform.Data.BitmapData)">
            <summary>
            Constructor
            </summary>
            <param name="bitmapData"></param>
        </member>
        <member name="P:VideoOS.Platform.Data.VideoSourceDataOnBitmapDataProxy.HardwareDecodingStatus">
            <summary>
            Gets or sets hardware decoding status
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.Bookmark">
            <summary>
            The Bookmark class represents a bookmark instance. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Bookmark.BookmarkFQID">
            <summary>
            The id of the bookmark. <br/>
            The FQID.ServerId defines what Management Server this bookmark is stored on.<br/>
            The FQID.ParentId defines what Item the bookmark relates to (e.g. a Camera ObjectId)<br/>
            The FQID.ObjectId defines the individual Id of the bookmark.
            The FQID.Kind is Kind.Bookmark
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Bookmark.Description">
            <summary>
            Description of the bookmark. Optional
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Bookmark.Header">
            <summary>
            The Header text of the bookmark. Optional
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Bookmark.Reference">
            <summary>
            A readable reference identification of the bookmark. Should be make unique, although it is not enforced.
            Will be auto generated if left empty by the BookmarkCreate.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Bookmark.TimeBegin">
            <summary>
            The begin time of the device recording associated with this bookmark. The time is in UTC.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Bookmark.TimeEnd">
            <summary>
            The end time of the device recording associated with this bookmark. The time is in UTC.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Bookmark.TimeTrigged">
            <summary>
            The trigger time  of this bookmark. The time is in UTC.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Bookmark.User">
            <summary>
            The identification of the user that created the bookmark.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.Bookmark.GetDeviceItem">
            <summary>
            Get the item representing the device. E.g. a camera, a microphone or a speaker
            </summary>
            <returns>The device item</returns>
        </member>
        <member name="T:VideoOS.Platform.Data.BookmarkService">
            <summary>
            Provides access to the bookmark service of the ServerCommandService.<br/>
            Note that this service is only available on the high-end XProtect Corporate products.<br/>
            For the products where it is not supported, each method entry is ignored and a single message is logged in the MIP log.<br/>
            <br/>
            The methods of this service is invoked through the singleton reference 'Instance'.<br/>
            E.g. A new bookmark may be created using the statement:<br/>
            Bookmark bookmark1 = BookmarkService.Instance.BookmarkCreate(cameraFqid, timeBegin, timeTrigger, timeEnd, reference, header, description);<br/>
            <br/>
            The 'Bookmark' class contains all the information related to the new bookmark, especially the BookmarkFQID property, which holds the unique identification of the new bookmark.<br/> 
            <br/>
            Existing bookmarks may be queried by BookmarkSearchTime or BookmarkSearchFromBookmark. BookmarkSearchTime searches for bookmarks within a specific time interval. 
            BookmarkSearchFromBookmark begins the search from the time right after a specific existing bookmark. <br/>
            The search may take several seconds. Therefore it may be relevant to use the asynchronous equivalents BookmarkSearchTimeAsync and BookmarkSearchFromBookmarkAsync in stead.<br/>    
            <br/>
            A known bookmark may be quieried by means of the BookmarkGet method 
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BookmarkService.Instance">
            <summary>
            This Singleton item of this class. 
            Only the 'get' access should be used, as the class is created during MIP Environment startup.
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BookmarkService.BookmarkCreate(VideoOS.Platform.FQID,System.DateTime,System.DateTime,System.DateTime,System.String,System.String,System.String)">
            <summary>
            Creates a new bookmark.
            If a rule needs to be generated, set the reference to null, 
            and the server will issue a new event "Bookmark Reference Requested" that can be used to trigger further actions.
            
            Notice: To trigger a rule, the 'reference' parameter needs to be null.
            </summary>
            <param name="deviceFqid">The id of the device to which the Bookmark is to be registered. Mandatory</param>
            <param name="timeBegin">The begin time of the recording associated with this Bookmark. DateTime.MinValue => UtcNow - 10 seconds</param>
            <param name="timeTrigged">The Bookmark trigger time. DateTime.MinValue => UtcNow</param>
            <param name="timeEnd">The end of the recording associated with this bookmark. DateTime.MinValue => TimeTrigged + 10 seconds</param>
            <param name="reference">The reference field of the bookmark. Null => Autogenerated unique bookmark reference</param>
            <param name="header">The header field of the bookmark. Null => no header text</param>
            <param name="description">The description field of the bookmark. Null => no description text</param>
            <returns>A new Bookmark instance. Null indicates an error</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.BookmarkService.BookmarkSearchTime(VideoOS.Platform.ServerId,System.DateTime,System.Int64,System.Int32,System.Guid[],VideoOS.Platform.FQID[],System.String[],System.String)">
            <summary>
            Search for bookmarks in a time interval.
            The call is synchronous, so it may take some time to return.
            </summary>
            <param name="serverId">The ServerId of the management server to be searched for Bookmarks. Null = Master site.</param>
            <param name="time">Start time of the search interval. Mandatory </param>
            <param name="timeLimitUSec">Period of time to search within (in microseconds). Mandatory</param>
            <param name="countLimit">Maximum number of bookmarks to be returned in the result. Mandatory</param>
            <param name="kinds">The Kinds to be searched for. Null => all kinds</param>
            <param name="fqids">Array of Item identifications to search. Null => Any</param>
            <param name="optUsers">Array of User names (the users that created the bookmark). Null => Ignored</param>
            <param name="optSearchStr">Search string. To appear in either of the fields 'Reference', 'Header', 'Description'. Null => Ignored,</param>
            <returns>Array of Bookmarks found. Null indicates an error</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.BookmarkService.BookmarkSearchFromBookmark(VideoOS.Platform.FQID,System.Int64,System.Int32,System.Guid[],VideoOS.Platform.FQID[],System.String[],System.String)">
            <summary>
            Search from bookmarks after a known bookmark. The known bookmark is ignored.
            The call is synchronous, so it may take some time to return.
            </summary>
            <param name="fromBookmarkFQID">The bookmark after which to start search.</param>
            <param name="timeLimitUSec">Period of time to search within (in microseconds). Mandatory</param>
            <param name="countLimit">Maximum number of bookmarks to be returned in the result. Mandatory</param>
            <param name="kinds">The kinds of items to search within. Null => all kinds</param>
            <param name="fqids">Array of Devices to search. Null => Ignored</param>
            <param name="optUsers">Array of User names (the users that created the bookmark). Null => Ignored</param>
            <param name="optSearchStr">Search string. To appear in either of the fields 'Reference', 'Header', 'Description'. Null => Ignored,</param>
            <returns>Array of Bookmarks found. Null indicates an error</returns>
        </member>
        <member name="T:VideoOS.Platform.Data.BookmarkService.BookmarkSearchCompletedEventArgs">
            <summary>
            Carries the result of an asynchronous search request. <br/>
            The 'Result' property contains the result.<br/>
            The 'AsyncState' property provides the asyncstate argument provided with the call of the async request.<br/>
            The 'Exception' property contains exception information if one has occured<br/>
            The 'Cancelled' property returns true if the async request was cancelled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BookmarkService.BookmarkSearchCompletedEventArgs.Exception">
            <summary>
            Provides the Exception information if one has occured.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BookmarkService.BookmarkSearchCompletedEventArgs.Cancelled">
            <summary>
            Is true if the async operation was cancelled
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BookmarkService.BookmarkSearchCompletedEventArgs.#ctor(VideoOS.Platform.Data.Bookmark[],System.Exception,System.Boolean,System.Object)">
            <summary>
            Constructed internally in MIP
            </summary>
            <param name="results"></param>
            <param name="exception"></param>
            <param name="cancelled"></param>
            <param name="userState"></param>
        </member>
        <member name="P:VideoOS.Platform.Data.BookmarkService.BookmarkSearchCompletedEventArgs.Result">
            <summary>
            Provides the result of the search request
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.BookmarkService.BookmarkSearchTimeAsync(VideoOS.Platform.ServerId,System.DateTime,System.Int64,System.Int32,System.Guid[],VideoOS.Platform.FQID[],System.String[],System.String,VideoOS.Platform.Data.AsyncCallbackHandler,System.Object)">
            <summary>
            Search for bookmarks in a time interval.
            The call is asynchronous. You need to provide a call back event hander to receive the result.
            </summary>
            <param name="serverId">The ServerId of the management server to be searched for Bookmarks. Null = Master site.</param>
            <param name="time">Start time of the search interval. Mandatory </param>
            <param name="timeLimitUSec">Maximum time allowed to search in microseconds. Mandatory</param>
            <param name="countLimit">Maximum number of bookmarks to be returned in the result. Mandatory</param>
            <param name="kinds">The Kinds to be searched for. Null => all kinds</param>
            <param name="fqids">Array of Item identifications to search. Null => Any</param>
            <param name="optUsers">Array of User names (the users that created the bookmark). Null => Ignored</param>
            <param name="optSearchStr">Search string. To appear in either of the fields 'Reference', 'Header', 'Description'. Null => Ignored,</param>
            <param name="resultCallbackEventHandler">Call back handler for the result</param>
            <param name="asyncState">User defined state information</param>
        </member>
        <member name="M:VideoOS.Platform.Data.BookmarkService.BookmarkSearchFromBookmarkAsync(VideoOS.Platform.FQID,System.Int64,System.Int32,System.Guid[],VideoOS.Platform.FQID[],System.String[],System.String,VideoOS.Platform.Data.AsyncCallbackHandler,System.Object)">
            <summary>
            Search from bookmarks after a known bookmark. The known bookmark is ignored.
            The call is asynchronous. You need to provide a call back event hander to receive the result.
            </summary>
            <param name="fromBookmarkFQID">The bookmark after which to start search.</param>
            <param name="timeLimitUSec">Maximum time internal to search in microseconds. Mandatory</param>
            <param name="countLimit">Maximum number of bookmarks to be returned in the result. Mandatory</param>
            <param name="kinds">The kinds of items to search within. Null => all kinds</param>
            <param name="fqids">Array of Devices to search. Null => Ignored</param>
            <param name="optUsers">Array of User names (the users that created the bookmark). Null => Ignored</param>
            <param name="optSearchStr">Search string. To appear in either of the fields 'Reference', 'Header', 'Description'. Null => Ignored,</param>
            <param name="resultCallbackEventHandler">Call back handler for the result</param>
            <param name="asyncState">User defined state information</param>
        </member>
        <member name="M:VideoOS.Platform.Data.BookmarkService.BookmarkGet(VideoOS.Platform.FQID)">
            <summary>
            Get an existing bookmark by bookmarkId
            </summary>
            <param name="bookmarkFQID">The FQID of the bookmark</param>
            <returns>A bookmark instance. Null indicates an error</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.BookmarkService.BookmarkUpdate(VideoOS.Platform.Data.Bookmark)">
            <summary>
            Updates an existing bookmark
            </summary>
            <param name="bookmark">The bookmark instance with information to be updated.</param>
            <returns>A new bookmark instance. Null indicates an error</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.BookmarkService.BookmarkDelete(VideoOS.Platform.FQID)">
            <summary>
            Deletes an existing bookmark.
            </summary>
            <param name="bookmarkFQID">The Guid of the bookmark</param>
        </member>
        <member name="M:VideoOS.Platform.Data.BookmarkService.BookmarkDelete(VideoOS.Platform.Data.Bookmark)">
            <summary>
            Deletes an existing bookmark.
            </summary>
            <param name="bookmark">The bookmark to be deleted. The 'Id' field is mandatory</param>
        </member>
        <member name="M:VideoOS.Platform.Data.BookmarkService.BookmarkGetNewReference(VideoOS.Platform.FQID,System.Boolean)">
            <summary>
            Ask server for a new reference to a bookmark.  
            This will also trigger any rules configured on the server side, configured for 'Bookmark Reference Requested' as trigger event.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.BookmarkReference">
            <summary>
            The result of getting a new bookmark reference.  This class is returned as a result for the BookmarkGetNewReference method.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BookmarkReference.Reference">
            <summary>
            A refence created by the server.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BookmarkReference.Time">
            <summary>
            The exact time for when the reference was created.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.EventGroup">
            <summary>
            This class is used to group <see cref="T:VideoOS.Platform.Data.EventType"/>s.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventGroup.Name">
            <summary>
            The group name. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventGroup.ID">
            <summary>
            The group id.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.EventType">
            <summary>
            This class is used to define Event Types which an <see cref="T:VideoOS.Platform.Admin.ItemManager"/>
            can deliver to the Event Server using the method GetKnownEventTypes(CultureInfo culture).
            Event Types are used in defining the events, which can trigger alarms.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventType.Message">
            <summary>
            The Event Type Message. The Message should be localized when used with GetKnownEventTypes(CultureInfo culture).
            Note that the Message in the en-US culture must correspond to the message of the incomming event.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventType.ID">
            <summary>
            The event type id.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventType.GroupID">
            <summary>
            The id of the <see cref="T:VideoOS.Platform.Data.EventGroup"/>, which this event belongs to.
            If empty, the Event Type will be grouped as Undefined.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventType.SourceKinds">
            <summary>
            The Source Kind defines which Item Kinds can be the source of the event (e.g. camera or server).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventType.DefaultSourceKind">
            <summary>
            The Default Source Kind defines which Item Kind is the default source of the event.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.IDBExporter">
            <summary>
            For internal use only. Instantiate the VideoOS.Platform.Data.DBExporter() class.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IDBExporter.Init">
            <summary>
            Initialize managed wrapper. Must be called by application before StartExport()
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IDBExporter.Close">
            <summary>
            Uninitialize managed wrapper. Should be called when done using any instance of Exporter, for example at exit.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.CameraList">
            <summary>
            The list of cameras to export
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.AudioList">
            <summary>
            The list of Audio sources to export. Can be both microphones and Speakers.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.Compression">
            <summary>
            Set to True, if exported database is to be compressed.<br/>
            Note: Unsupported from Smart Client 7.0.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.Encryption">
            <summary>
            Set to True if Encryption is required, also set the Password.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.Password">
            <summary>
            The password used for encryption.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.ViewerPaths">
            <summary>
            The path to the Viewer, and any language paths that should also be exported.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.Path">
            <summary>
            Where to store the export
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.ExportToDisk">
            <summary>
            Specifies whether to export disk or not.<br/>
            This property is valid for Smart Client plug-ins.<br/>
            Default value is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.ExportToMediaBurner">
            <summary>
            Specifies whether to export directly to an optical disc (i.e. DVD).<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            Default value is false.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.MediaBurnerDriverLetter">
            <summary>
            When the ExportToMediaBurner is set to true, the MediaBurnerDriverLetter is used to identify which burner to use.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            There is no default value, must be specified for MediaBurner exports.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.ExportName">
            <summary>
            Specifies the name of the export. This value is used as a part of the path and a the name of the optical disc.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            Default value is a construction of current Date and Time
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.EncryptionStrength">
            <summary>
            Specifies the encryption strength.<br/>
            This property is valid for Smart Client plug-ins.<br/>
            Default value is DES-56 bit
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.IncludePlayer">
            <summary>
            Specifies whether to include the Smart Client - Player or not. <br/>
            This property is valid for Smart Client plug-ins only.<br/>
            Default value is false.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.SignExport">
            <summary>
            Specifies if the export should be signed.
            
            This option is only available for exports in BLK format.
            </summary>
            <remarks>Default value is false</remarks>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.IncludeBookmarks">
            <summary>
            Specifies if the export should include bookmarks.
            
            This option is only available for exports in BLK format.
            </summary>
            <remarks>Default value is false</remarks>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.PrivacyMask">
            <summary>
            An additional mask to be applied on all images.<br/>
            
            Any mask defined on the server is applied as well.
            </summary>
            <remarks>
            The format contains a size definition and a series of rows, seperated by ';'<br/>
            A 3 by 3 grid with top right square masked out is defined by:<br/>
                3x3;001;000;000
            </remarks>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.PreventReExport">
            <summary>
            Specifies whether to prevent the end user from doing a new export from the Smart Client Player. <br/>
            Default is false (allow reexport). <br/>
            Only support for BLK format exports.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IDBExporter.StartExport(System.DateTime,System.DateTime)">
            <summary>
            Exports the currently defined devices as a Milestone database. Returns error if already in progress.
            </summary>
            <returns>
            <value>True  if export was started. Use Progress >= 100 to validate when the export has finished.</value>
            <value>False if export was not started. </value>
            </returns>
            <param name="start">The start time.</param>
            <param name="end">The end time.</param>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.Progress">
            <summary>
            Gets the updated progress in percent
            </summary>
            <value>The percent done. Out of range 0-100 means error. -2 means uninitialized.</value>
        </member>
        <member name="M:VideoOS.Platform.Data.IDBExporter.Cancel">
            <summary>
            Cancels the current export operation
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.LastError">
            <summary>
            Gets the last export error as a number.
            
            0 - No error<br/>
            1 - Exception happened during export. Check LastErrorString for more details.<br/>
            2 - The export was canceled<br/>
            3 - Internal error (in relation to registering token update)<br/>
            </summary>
            <value>The last error.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.LastDetailedError">
            <summary>
            Not implemented for DBExport
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.LastErrorString">
            <summary>
            Gets the last export error as an English string.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="M:VideoOS.Platform.Data.IDBExporter.EndExport">
            <summary>
            Ends and cleans up the current export operation
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IDBExporter.LastWarning">
            <summary>
            Get the last warning, if any.
            </summary>
            <returns>
            0 = No warnings<br/>
            1 = Incomplete Export<br/>
            2 = All other<br/>
            </returns>
        </member>
        <member name="T:VideoOS.Platform.Data.DBExporter">
            <summary>
            Class to perform a database export from a VMS server to a local disk.
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DBExporter.#ctor">
            <summary>
            Exports the currently defined devices in a number of data formats
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DBExporter.#ctor(System.Boolean)">
            <summary>
            Create database exporter for database in either PIC or BLK file format.
            </summary>
            <param name="blkFormat">true when to export in BLK format</param>
        </member>
        <member name="M:VideoOS.Platform.Data.DBExporter.Init">
            <summary>
            Initializes the class and any underlaying classes.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DBExporter.Close">
            <summary>
            Uninitialize managed wrapper. Should be called when done using any instance of Exporter, for example at exit.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.CameraList">
            <summary>
            The list of cameras to export. 
            </summary>
            <remarks>
            When executing in the Smart Client, the related audio sources are automatically included.
            </remarks>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.AudioList">
            <summary>
            The list of Audio sources to export. Can be both microphones and Speakers.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.Compression">
            <summary>
            Set to True, if exported database is to be compressed.<br/>
            Note: Unsupported from Smart Client 7.0.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.Encryption">
            <summary>
            Set to True if Encryption is required, also set the Password.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.Password">
            <summary>
            The password used for encryption.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.ViewerPaths">
            <summary>
            The path to the Viewer, and any language paths that should also be exported.
            Notice that the Viewer is no longer distributed with the Smart Client, and 
            this field is ignored.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.Path">
            <summary>
            Where to store the export on hard disk.  <br/>
            Used when the ExportToDisk is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.ExportToDisk">
            <summary>
            Specifies whether to export hard disk.<br/>
            The path of where to store the export is defined in the Path property.<br/>
            This property is valid for Smart Client plug-ins.<br/>
            Default value is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.ExportToMediaBurner">
            <summary>
            Specifies whether to export to an optical disc (i.e. DVD).<br/>
            The drive letter of where to burn the export is defined in the MediaBurnerDriverLetter property.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            Default value is false.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.MediaBurnerDriverLetter">
            <summary>
            When the ExportToMediaBurner is set to true, the MediaBurnerDriverLetter is used to identify which burner to use.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            There is no default value, must be specified for MediaBurner exports.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.ExportName">
            <summary>
            Specific the name of the export. This value is used as a part of the path and a the name of the optical disc.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            Default value is a construction of current Date and Time
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.EncryptionStrength">
            <summary>
            Specifies the encryption strength.<br/>
            This property is valid for Smart Client plug-ins.<br/>
            Default value is DES-56 bit
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.IncludePlayer">
            <summary>
            Specifies whether to include the Smart Client - Player or not. <br/>
            This property is valid for Smart Client plug-ins only.<br/>
            Default value is false.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.SignExport">
            <summary>
            Specifies if the export should be signed.
            
            This option is only available for exports in BLK format.
            </summary>
            <remarks>Default value is false</remarks>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.IncludeBookmarks">
            <summary>
            Specifies if the export should include bookmarks.
            
            This option is only available for exports in BLK format.
            </summary>
            <remarks>Default value is false</remarks>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.PrivacyMask">
            <summary>
            An additional mask to be applied on all images.<br/>
            
            Any mask defined on the server is applied as well.
            </summary>
            <remarks>
            The format contains a size definition and a series of rows, seperated by ';'<br/>
            A 3 by 3 grid with top right square masked out is defined by:<br/>
                3x3;001;000;000
            </remarks>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.PreventReExport">
            <summary>
            Specifies whether to prevent the end user from doing a new export from the Smart Client Player. <br/>
            Default is false (allow reexport). <br/>
            Only support for BLK format exports.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DBExporter.StartExport(System.DateTime,System.DateTime)">
            <summary>
            Exports the currently defined devices as a Milestone database. Returns error if already in progress.
            </summary>
            <returns>
            True  if export was started. Use Progress >= 100 to validate when the export has finished.<br/>
            False if export was not started. 
            </returns>
            <param name="start">The start time.</param>
            <param name="end">The end time.</param>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.Progress">
            <summary>
            Gets the updated progress in percent
            </summary>
            <value>The percent done. Out of range 0-100 means error. -2 means uninitialized.</value>
        </member>
        <member name="M:VideoOS.Platform.Data.DBExporter.Cancel">
            <summary>
            Cancels the current export operation
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.LastError">
            <summary>
            Gets the last export error as a number.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.LastDetailedError">
            <summary>
            Gets the last export detailed error as a number.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.LastErrorString">
            <summary>
            Gets the last export error as an English string.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.DBExporter.LastWarning">
            <summary>
            Get the last warning, if any.
            </summary>
            <returns>
            0 = No warnings<br/>
            1 = Incomplete Export<br/>
            2 = Video was transcoded, takes extra time - but is not an error<br/>
            </returns>
        </member>
        <member name="M:VideoOS.Platform.Data.DBExporter.EndExport">
            <summary>
            Ends and cleans up the current export operation
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.EncryptionStrength">
            <summary>
            Encryption strength values
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.IAVIExporter">
            <summary>
            For internal use only. Instantiate the VideoOS.Platform.Data.AVIExporter() class.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IAVIExporter.Init">
            <summary>
            Initialize managed wrapper. Must be called by application before StartExport()
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IAVIExporter.Close">
            <summary>
            Uninitialize managed wrapper. Should be called when done using any instance of Exporter, for example at exit.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.CameraList">
            <summary>
            The list of cameras to export
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.AudioList">
            <summary>
            The list of Audio sources to export. Can be both microphones and Speakers.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.Path">
            <summary>
            Where to store the export
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.ExportToDisk">
            <summary>
            Specifies whether to export hard disk.<br/>
            The path of where to store the export is defined in the Path property.<br/>
            This property is valid for Smart Client plug-ins.<br/>
            Default value is true.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.ExportToMediaBurner">
            <summary>
            Specifies whether to export to an optical disc (i.e. DVD).<br/>
            The drive letter of where to burn the export is defined in the MediaBurnerDriverLetter property.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            Default value is false.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.MediaBurnerDriverLetter">
            <summary>
            When the ExportToMediaBurner is set to true, the MediaBurnerDriverLetter is used to identify which burner to use.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            There is no default value, must be specified for MediaBurner exports.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.ExportName">
            <summary>
            Specific the name of the export. This value is used as a part of the path and a the name of the optical disc.<br/>
            This property is valid for Smart Client plug-ins only.<br/>
            Default value is a construction of current Date and Time
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.Filename">
            <summary>
            Name of the AVI file.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.Timestamp">
            <summary>
            True if timestamp should be placed on top of video
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.Codec">
            <summary>
            Codec to be used for AVI
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.CodecList">
            <summary>
            Returns a list of valid codecs to be used for the AVI export
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.FrameRate">
            <summary>
            Target frame rate
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.Width">
            <summary>
            Width of target AVI
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.Height">
            <summary>
            Height of target AVI
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.Channels">
            <summary>
            Number of audio channels
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.AudioSampleRate">
            <summary>
            Sample rate for Audio. Default is 8000
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.AudioSampleDepth">
            <summary>
            Audio bit per sample, default is 16 bits
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.Window">
            <summary>
            A rectangle to export, if only a part should be exported.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IAVIExporter.SetOverlayImage(System.Drawing.Bitmap,System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            Applies an overlay image to the exported video. The positioning and size are relative to the zoomed/cropped exported image (video). The method must be called prior to StartExport. For platform integrations this feature is only supported in combination with <see cref="M:VideoOS.Platform.Data.IAVIExporter.StartExport(System.DateTime,System.DateTime)"/> method.
            </summary>
            <param name="overlayBitmap">The overlay image to be used. Should be in an alpha-enabled image color format (RGBA or BGRA) to be able to handle (semi-)transparent areas. Any other format will not support transparency.</param>
            <param name="verticalOverlayPosition">The vertical position of the overlay image relative to the regular orientation of the output images, supports: Top, Centered and Bottom location - use defined constants.</param>
            <param name="horizontalOverlayPosition">The horizontal position of the overlay image relative to the regular orientation of the output images, supports: Left, Centered and Right - use defined constants.</param>
            <param name="scaleFactor">Scale factor relative the output image size. The value of 1.0 indicates 100% size, and smaller means that the overlay will cover a smaller area of the image. Larger values will result in that the surplus will be cropped.</param>
            <param name="ignoreAspect">Flag indicating whether or not the aspect ratio is taken into account. The value of false will ensure aspect ratio correction, otherwise the overlaying is done directly on a pixel-to-pixel basis.</param>
            <returns>True if successfully set the overlay image, otherwise false.</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.IAVIExporter.StartExport(System.DateTime,System.DateTime)">
            <summary>
            Exports the currently defined devices as an AVI file. Returns error if already in progress.
            </summary>
            <param name="start">The start time.</param>
            <param name="end">The end time.</param>
            <returns>True if export was started. Is finished when Progress >= 100.</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.IAVIExporter.StartExport(System.Collections.Generic.IEnumerable{VideoOS.Platform.Data.SequenceAviExportElement})">
            <summary>
            Exports the specified sequences as one sequential AVI file. The sequences will be exported one after another in the order provided 
            - no matter the chronological order of the data within.
            </summary>
            <remarks>The CameraList property is ignored (cameras to export are taken from sequences instead) and audio is not supported for this method.</remarks>
            <param name="sequences">The list of sequences to export.</param>
            <returns>True if export was started. Is finished when Progress >= 100.</returns>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.AutoSplitExportFile">
            <summary>
            Enable/disable the autoSplitExport feature. Default enabled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.MaxAVIFileSize">
            <summary>
            Set the max file size of the autoSplitExport feature. <br/>
            Default value is 512 MB
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.Progress">
            <summary>
            Gets the updated progress in percent
            </summary>
            <value>The percent done. Out of range 0-100 means error. -2 means uninitialized.</value>
        </member>
        <member name="M:VideoOS.Platform.Data.IAVIExporter.Cancel">
            <summary>
            Cancels the current export operation
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.LastError">
            <summary>
            Gets the last export error as a number.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.LastDetailedError">
            <summary>
            Not implemented for DBExport
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IAVIExporter.LastErrorString">
            <summary>
            Gets the last export error as an English string.
            </summary>
            <value>The last error.</value>
        </member>
        <member name="M:VideoOS.Platform.Data.IAVIExporter.EndExport">
            <summary>
            Ends and cleans up the current export operation
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.IExporter">
            <summary>
            The common interface used by DBExporter and AVIExporter.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IExporter.Init">
            <summary>
            Read documentation for the implementing classes, e.g. DBExporter or AVIExporter.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IExporter.StartExport(System.DateTime,System.DateTime)">
            <summary>
            Read documentation for the implementing classes, e.g. DBExporter or AVIExporter.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IExporter.Close">
            <summary>
            Read documentation for the implementing classes, e.g. DBExporter or AVIExporter.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IExporter.Cancel">
            <summary>
            Read documentation for the implementing classes, e.g. DBExporter or AVIExporter.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IExporter.CameraList">
            <summary>
            Read documentation for the implementing classes, e.g. DBExporter or AVIExporter.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IExporter.AudioList">
            <summary>
            Read documentation for the implementing classes, e.g. DBExporter or AVIExporter.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IExporter.Progress">
            <summary>
            Read documentation for the implementing classes, e.g. DBExporter or AVIExporter.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IExporter.LastError">
            <summary>
            Read documentation for the implementing classes, e.g. DBExporter or AVIExporter.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IExporter.LastDetailedError">
            <summary>
            Read documentation for the implementing classes, e.g. DBExporter or AVIExporter.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IExporter.LastErrorString">
            <summary>
            Read documentation for the implementing classes, e.g. DBExporter or AVIExporter.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IExporter.Path">
            <summary>
            Where to store the export
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.IExporter.EndExport">
            <summary>
            Read documentation for the implementing classes, e.g. DBExporter or AVIExporter.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MediaData">
            <summary>
            Contains one piece of media information.  For video it will be one frame, for audio it will be for a short period.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.MediaData.DateTime">
            <summary>
            The start date and time 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.MediaData.TimeSpan">
            <summary>
            The timespan - when the content has been collected over a time period (e.g. Audio)<br/>
            Default is a timespan of 0.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.MediaData.Bytes">
            <summary>
            The content
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.MediaData.MediaContent">
            <summary>
            Defined the type of content.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MediaProviderChannel">
            <summary>
            This MediaProvider provides an interface for sending video frames to a Milestone XProtect Recording Server.<br/>
            The specific MIPMediaProvider driver has to be configured to point at this executing application and port, as defined in this class.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderChannel.Init">
            <summary>
            Initializes the class.<br/>
            When the class is initialized, the TCP socket will be open for listen to new connection but no video will be sent.  
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderChannel.Close">
            <summary>
            Disconnect and Disposes of all resources.<br/>
            The class cannot be used after calling this method.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaProviderChannel.Channel">
            <summary>
            The virtual channel number this stream is identified by.<br/>
            
            The number is given in the constructor is returned here.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaProviderChannel.ParameterDictionary">
            <summary>
            Contains the set of parameters this application can return to the VMS system, when requested.<br/>
            These parameters are displayed in the administrators UI.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaProviderChannel.SetParameterDictionary">
            <summary>
            Contains the set of parameters the server has set.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaProviderChannel.IsConnected">
            <summary>
            Give the status of the current TCP session. The setter does nothing and is there for legacy reasons only.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderChannel.Connect">
            <summary>
            Call this method to indicate that you would now like to provide jpeg's to the server.<br/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderChannel.Disconnect">
            <summary>
            This method will disconnect the session, and flush all jpeg's in queue.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaProviderChannel.InIdleMode">
            <summary>
            Is controlled by the application. <br/>
            When this property is true, a "No Video" frame will be sent to the VMS system to keep the session open.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MediaProviderChannel.SessionOpeningDelegate">
            <summary>
            The type of method needed for getting session open events from <see cref="E:VideoOS.Platform.Data.MediaProviderChannel.SessionOpening"/>
            </summary>
            <param name="session">the session that is opened.</param>
        </member>
        <member name="E:VideoOS.Platform.Data.MediaProviderChannel.SessionOpening">
            <summary>
            Called when a new session is being opened from the VMS system.  The RequestHeader contains information about the specific parameters requested for this session.<br/>
            For the parameters not requested in this session, the default parameters on the MediaProviderChannel should be used.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MediaProviderChannel.SessionClosedDelegate">
            <summary>
            The type of method needed for getting session closed events from <see cref="E:VideoOS.Platform.Data.MediaProviderChannel.SessionClosed"/>
            </summary>
            <param name="session">the session that is closed.</param>
        </member>
        <member name="E:VideoOS.Platform.Data.MediaProviderChannel.SessionClosed">
            <summary>
            Called when one session on this channel is closed from the VMS.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MediaProviderChannel.GetMediaDataDelegate">
            <summary>
            The type of method that the implementor must provide for sending a frame to VMS MIP driver via <see cref="E:VideoOS.Platform.Data.MediaProviderChannel.GetMediaData"/>
            </summary>
            <param name="session">The session the frame is sent for</param>
            <returns>The media data that will be sent to the VMS MIP driver</returns>
        </member>
        <member name="E:VideoOS.Platform.Data.MediaProviderChannel.GetMediaData">
            <summary>
            This event is called every time a new frame should be sent to the VMS MIP driver.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderChannel.GetMediaDataInIdle">
            <summary>
            Мethod for providing data during Idle period
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Data.MediaProviderChannel.HandlePTZCommandDelegate">
            <summary>
            The type of method that the implementor must provide to receive PTZ commands from <see cref="E:VideoOS.Platform.Data.MediaProviderChannel.HandlePTZCommandEvent"/>
            </summary>
            <param name="controlCommandMessageId">The message id of the PTZ command</param>
            <param name="controlCommandData">An instance of <see cref="T:VideoOS.Platform.Messaging.PTZMoveStartCommandData"/> with the command</param>
            <returns>An instance of <see cref="T:VideoOS.Platform.Messaging.PTZGetAbsoluteRequestData"/> that contains the command result</returns>
        </member>
        <member name="E:VideoOS.Platform.Data.MediaProviderChannel.HandlePTZCommandEvent">
            <summary>
            When PTZ commands are issued by the VMS, this event will be called with a messageId and the corresponding data content.<br/>
            A PTZ start move would f.ex. have the message id = MessageId.Control.PTZMoveStartCommand, and the data object will contain the 
            Messaging.PTZMoveStartCommandData struct with the pan, tilt, zoom and speed information.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaProviderChannel.ActiveSessions">
            <summary>
            Contains the number of active sessions right now.<br/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MediaProviderService">
            <summary>
            The MediaProviderService will open for TCP socket and listen for connections.<br/>
            New MediaProvider's need to be created for each channel that will be available for video later on.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderService.Init(System.Int32,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes the TCP service, and start to listen for incoming requests.<br/>
            When the class is initialized, the TCP socket will be open for listen to new connection but no video will be sent.  
            In this mode the administrator can add and configure the camera definition in the VMS system.<br/>
            Please consider using the more secure version using SecureString for the password instead.
            </summary>
            <param name="port">The TCP port to be used - as the server will connect this application.</param>
            <param name="password">The password to be used for incoming session validation</param>
            <param name="parameters">A dictionary of additional parameters to be sent to the server when requested.</param>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if this method has already been called.</exception>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderService.Init(System.Int32,System.Security.SecureString,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes the TCP service, and start to listen for incoming requests.<br/>
            When the class is initialized, the TCP socket will be open for listen to new connection but no video will be sent.  
            In this mode the administrator can add and configure the camera definition in the VMS system.<br/>
            </summary>
            <param name="port">The TCP port to be used - as the server will connect this application.</param>
            <param name="password">The password to be used for incoming session validation</param>
            <param name="parameters">A dictionary of additional parameters to be sent to the server when requested.</param>
            <exception cref="T:System.InvalidOperationException">This exception is thrown if this method has already been called.</exception>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderService.Init(System.Int32,System.String,VideoOS.Platform.Data.HardwareDefinition)">
            <summary>
            Initializes the TCP service, and start to listen for incoming requests.<br/>
            When the class is initialized, the TCP socket will be open for listen to new connection but no video will be sent.  
            In this mode the administrator can add and configure the metadata definition in the VMS system.<br/>
            Please consider using the more secure version using SecureString for the password instead.
            </summary>
            <param name="port">The TCP port to be used - as the server will connect this application.</param>
            <param name="password">The password to be used for incoming session validation</param>
            <param name="hardwareDefinition">A definition of the metadata hardware.</param>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderService.Init(System.Int32,System.Security.SecureString,VideoOS.Platform.Data.HardwareDefinition)">
            <summary>
            Initializes the TCP service, and start to listen for incoming requests.<br/>
            When the class is initialized, the TCP socket will be open for listen to new connection but no video will be sent.  
            In this mode the administrator can add and configure the metadata definition in the VMS system.<br/>
            </summary>
            <param name="port">The TCP port to be used - as the server will connect this application.</param>
            <param name="password">The password to be used for incoming session validation</param>
            <param name="hardwareDefinition">A definition of the metadata hardware.</param>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderService.Close">
            <summary>
            Disconnect and Disposes of all resources.<br/>
            The class cannot be used after calling this method.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaProviderService.MacAddress">
            <summary>
            The MacAddress property is used to identify this virtual device within the VMS configuration.<br/>
            The value needs to be persisted to be the same value for the same 'device' - also after this application has been restarted.<br/>
            When no value has been assigned, the default will be the first mac address of executing machine.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderService.CreateMediaProvider(System.Int32)">
            <summary>
            Creates a new instance of a MediaProvider for handling one session.
            </summary>
            <param name="channel">Channel to use, starting from 1</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderService.CreateMediaProvider(System.Int32,VideoOS.Platform.Data.MediaContent)">
            <summary>
            Creates a new instance of a MediaProvider for handling one session.
            </summary>
            <param name="channel">Channel to use, starting from 1, from this type</param>
            <param name="content">Type of the channel to be created</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderService.CreateMetadataProvider(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of a <see cref="T:VideoOS.Platform.Data.MetadataProviderChannel"/> for handling one channel.
            </summary>
            <param name="channel">The channel number, which must correspond to a channel defined in the parameters to the Init method</param>
            <param name="queueLength">The length of the internal transmit queues. The longer the queue,
            the better the data can be throttled but it also increases the risk of data loss if the connection is terminated</param>
            <returns>A new instance of <see cref="T:VideoOS.Platform.Data.MediaProviderChannel"/> that allow sending data on that channel.</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderService.RemoveMediaProvider(VideoOS.Platform.Data.MediaProviderChannel)">
            <summary>
            Close and remove one channel / MediaProvider from the system.<br/>
            Any session still active will be terminated.
            </summary>
            <param name="mediaProvider"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.MediaProviderService.RemoveMetadataProvider(VideoOS.Platform.Data.MetadataProviderChannel)">
            <summary>
            Close and remove one channel / MetadataProviderChannel from the system.<br/>
            Any session still active will be terminated.
            </summary>
            <param name="metadataProvider">The channel to close.</param>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaProviderService.MediaProviders">
            <summary>
            Get hold of all defined MediaProviders
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.MediaProviderSession">
            <summary>
            Contains the properties that a given session is using.<br/>
            When used on the initial SessionOpening method, it will contain the values as requested by the server side. <br/>
            The application can then modify the values to what is relevant for the given application and session.<br/>
            This class is created by the MediaProviderService when a new HTTP request has been received that want to receive a new stream.<br/>
            Note that multiple MediaProviderSession classes can exist on the same MediaProvider when multiple servers 
            are connecting to the same channel or when a XPE Administration Application is previewing while the Recording Server is active.
            
            If the session is a metadata session, the properties related to video can be ignored.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaProviderSession.Channel">
            <summary>
            The channel number that was given in the CreateMediaProvider method.<br/>
            The first channel is 1
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaProviderSession.ApplicationCustomData">
            <summary>
            This field can be used by the application for any use.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaProviderSession.FPS">
            <summary>
            The requested FPS the server would like to receive.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaProviderSession.MediaContent">
            <summary>
            Contains the codec this application will provide.  
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaProviderSession.ImageWidth">
            <summary>
            This property will contain the requested image width set by the server.<br/>
            If set by this application, the value will be returned to the server and used as a default resolution.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaProviderSession.ImageHeight">
            <summary>
            This property will contain the requested image height set by the server.<br/>
            If set by this application, the value will be returned to the server and used as a default resolution.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaProviderSession.Quality">
            <summary>
            Indicates the JPEG quality/compression rate.  If not provided a default value of 75 is used.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.MediaProviderSession.GopLength">
            <summary>
            The length of a Gop in frames, e.g. 5 will be 1 - key frame and 4 - P frames
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.OutgoingSpeakerController">
            <summary>
            The OutgoingSpeakerController sends an audio stream to a speaker. The audio stream can come from a pc-microphone or a file.
            </summary>
            <remarks>
            <p>The audio stream is provided by an IAudioRecorder instance, which is linked to the controller by the Init call.
            E.g. from a microphone (AudioController) or a file (AudioStreamPlayer). </p>
            
            <p>The timing of the stream is driven by the IAudioRecorder instance. I.e. it is responsible for keeping a pace near 
            real time and a prebuffer to compensate for timing discrepancies.</p>
            
            <p>The basic code to invoke the controller may look like this:<br/></p>
            <code>
            VideoOS.Platform.Data.Speaker.AudioStreamPlayer player = new VideoOS.Platform.Data.Speaker.AudioStreamPlayer(
            new System.IO.FileStream(filename, System.IO.FileMode.Open, System.IO.FileAccess.Read));
            _outgoingSpeakerController.Init(player); //Assigns the player to the controller
            _outgoingSpeakerController.Connect(speakerFqid); //connects to the speaker and reserves it
            _outgoingSpeakerController.TransmitStart(); //starts the stream
            </code>
            <p>The transmission of the audiostream will progress in the background. 
            It may be stopped permanently invoking the Close method or temporarily by invoking TrasmitStop.</p>
            <p>Note: In an application using the Windows UI, you need to assign the UIHandle to the UI thread. 
            Also, you should not provide long timeouts in the call of Connect and Close, because it will block the UI thread.</p>
            <para>The format for the audio file allways needs to be: PCM, sample rate=8000, mono, 16 bit wide samples. 
            A reference can be found at http://en.wikipedia.org/wiki/WAV with the sample file from the Wiki article at http://www.nch.com.au/acm/8k16bitpcm.wav
            </para>
            </remarks>
        </member>
        <member name="F:VideoOS.Platform.Data.OutgoingSpeakerController._outgoingAudioTransmitLock">
            <summary>
            Holds outgoing audio transmit lock value
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.OutgoingSpeakerController._outgoingAudioMeter">
            <summary>
            Holds outgoing audio Meter value
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.OutgoingSpeakerController._outgoingAudioSupported">
            <summary>
            Holds status on outgoing audio technical support
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.OutgoingSpeakerController._audioRecorder">
            <summary>
            Holds reference to the audio recorder.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.OutgoingSpeakerController.OutgoingAudioSupported">
            <summary>
            Gets whether outgoing audio is technically supported or not (e.g. outgoing audio is not supported if no sound card is available on the machine).
            </summary>
            <returns>True if outgoing audio is technically supported. False if not.</returns>
        </member>
        <member name="F:VideoOS.Platform.Data.OutgoingSpeakerController.UIHandle">
            <summary>
            Handle to the UI Process. Used by internal messaging.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.OutgoingSpeakerController.OutgoingAudioTransmitLock">
            <summary>
            Gets or sets the outgouing audio transmit lock.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.OutgoingSpeakerController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.OutgoingSpeakerController.Init(VideoOS.Platform.Data.IAudioRecorder)">
            <summary>
            Initializes the Plugin object by assigning the audiorecorder. Next step is to call the Connect({speaker}) method.
            </summary>
            <param name="audiorecorder">the audio recorder that will feed the audio stream to the controller</param>
        </member>
        <member name="M:VideoOS.Platform.Data.OutgoingSpeakerController.Close(System.Int32)">
            <summary>
            Stops the audio recorder stream and the disconnects the Speaker.
            Note: Do not provide a long timeout when called from within a UI thread.
            </summary>
            <param name="timeoutMSec">The maximum wait time for a connect. Value between 100 (msec) and 10000 (10 sec), default 100 msec</param>
        </member>
        <member name="M:VideoOS.Platform.Data.OutgoingSpeakerController.SendData(System.Byte[])">
            <summary>
            Not supported in this class, use DirectSpeakerController
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.OutgoingSpeakerController.OutgoingAudioTransmitLockEventHandler">
            <summary>
            Represents the method that will handle Audio Out Meter events
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Data.OutgoingSpeakerController.OutgoingAudioTransmitLockEvent">
            <summary>
            Signals that the outgoing audio transmit lock is activated/deactivated
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.OutgoingSpeakerController.FireOutgoingAudioTransmitLockEvent(System.Boolean)">
            <summary>
            Activates the OutgoingAudioTransmitLockEvent
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.OutgoingSpeakerController.OutgoingAudioMeterEventHandler">
            <summary>
            Represents the method that will handle Audio Out Meter events
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Data.OutgoingSpeakerController.OutgoingAudioMeterEvent">
            <summary>
            Signals that the Audio Out Meter has changed. 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.OutgoingSpeakerController.FireOutgoingAudioMeterEvent(System.Int32)">
             <summary>
            Activates the OutgoingAudioMeterEvent
             </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.OutgoingSpeakerController.OutgoingAudioMeter">
            <summary>
            Gets or sets the outgouing audio meter. The value must be between 0 and 100 (including)
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.OutgoingSpeakerController.HandleAudioDataReadyEventDelegate">
            <summary>
            This delegate is used to ensure that AudioDataReady commands are executed on the main thread and not on the AudioRecorder threads. This is nessesary bacause the application logic is not thread safe. 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.OutgoingSpeakerController.HandleAudioDataReady(System.Byte[])">
            <summary>
            This method is used to ensure that AudioDataReady commands are executed on the main thread and not on the AudioRecorder threads. This is nessesary bacause the application logic is not thread safe. 
            </summary>
            <param name="audioData">Audio data</param>
        </member>
        <member name="M:VideoOS.Platform.Data.OutgoingSpeakerController.SetOutgoingSpeaker">
            <summary>
            Used internally by Connect method
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.OutgoingSpeakerController.ConnectClients(System.Int32)">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.OutgoingSpeakerController.DisconnectClients(System.Int32)">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.OutgoingSpeakerController.StartTransmission(System.Boolean@)">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.OutgoingSpeakerController.StartCapturing">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.OutgoingSpeakerController.StopTransmission(System.Boolean@)">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.OutgoingSpeakerController.StopCapturing">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.OutgoingSpeakerController.OutgoingAudioMeterEventArgs">
            <summary>
            Implements the class that contains the event args for the OutgoingAudioMeterEventArgs
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.OutgoingSpeakerController.OutgoingAudioMeterEventArgs._outgoingAudioMeter">
            <summary>
            The Device parameter of the event args
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.OutgoingSpeakerController.OutgoingAudioMeterEventArgs.#ctor(System.Int32)">
            <summary>
            Constructs a OutgoingAudioMeterEventArgs instance
            </summary>
            <param name="outgoingAudioMeter">The Audio Out Meter parameter of the event args</param>
        </member>
        <member name="P:VideoOS.Platform.Data.OutgoingSpeakerController.OutgoingAudioMeterEventArgs.OutgoingAudioMeter">
            <summary>
            Gets or sets the Audio Out Device parameter of the event args
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.RawVideoSourceData">
            <summary>
            Contains the raw GenericByteData content, used by RawVideoSource during playback of raw frames.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.RawVideoSourceData.DateTime">
            <summary>
            The date and time the image was taken.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.RawVideoSourceData.IsNextAvailable">
            <summary>
            Defines if the NextDateTime is filled.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.RawVideoSourceData.NextDateTime">
            <summary>
            The time stamp for the next image.<br/>
            This field is not always available.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.RawVideoSourceData.IsPreviousAvailable">
            <summary>
            Defines if the PreviousDateTime is filled.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.RawVideoSourceData.PreviousDateTime">
            <summary>
            The time stamp for the previous image.<br/>
            This field is not always available.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.RawVideoSourceData.Content">
            <summary>
            The raw content of the frames.
            </summary>
            This will start with a GenericByteHeader (32 or 36) bytes specifying the folowing frame format and codec.
        </member>
        <member name="P:VideoOS.Platform.Data.RawVideoSourceData.PrivacyMask">
            <summary>
            Privacy mask definition
            </summary>
            Contains a string of chanacters defining what parts of the image need to be masked out.
            <para>
            It defines how big a matrix is defined, followed by a list of zero'es and one's for each row.
            </para>
        </member>
        <member name="P:VideoOS.Platform.Data.RawVideoSourceData.HasMotion">
            <summary>
            Defines if image has motion
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.RawVideoSourceData.SequenceNumber">
            <summary>
            Defines the sequence number 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.SourceDataOnRawDataProxy">
            <summary>
            Proxy between ISourceData and RawVideoSourceData
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.SourceDataOnRawDataProxy.#ctor(VideoOS.Platform.Data.RawVideoSourceData)">
            <summary>
            Construcotor
            </summary>
            <param name="rawData"></param>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnRawDataProxy.RawVideoSourceData">
            <summary>
            RawVideoSourceData to be used by the inheritors
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnRawDataProxy.DateTime">
            <summary>
            Central timestamp
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnRawDataProxy.IsNextAvailable">
            <summary>
            Is next sample available
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnRawDataProxy.NextDateTime">
            <summary>
            Next sample timestamp
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnRawDataProxy.IsPreviousAvailable">
            <summary>
            Is prev sample available
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.SourceDataOnRawDataProxy.PreviousDateTime">
            <summary>
            Previous sample timestamp
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.RawVideoSourceDataList">
            <summary>
            Contains a list of raw GenericByteData content, used by RawVideoSource during playback of raw frames.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.RawVideoSourceDataList.Signature">
            <summary>
            The signature from a signed database
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.RawVideoSourceDataList.List">
            <summary>
            A list of RawVideoSourceData, each containing one frame
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.RawVideoSourceDataList.ObjectToDispose">
            <summary>
            Reserved for internal use. DO NOT ACCESS THIS FIELD!
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSourceDataList.Dispose(System.Boolean)">
            <summary>
            Must be called to dispose native parts
            </summary>
            <param name="native"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSourceDataList.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSourceDataList.op_Implicit(VideoOS.Platform.Data.RawVideoSourceDataList)~VideoOS.Platform.Data.RawVideoSourceData">
            <summary>
            Implicit RawVideoSourceData convertor
            </summary>
            <param name="dataList"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.RawVideoSourceDataList.ToRawVideoSourceData">
            <summary>
            Convertor to RawVideoSourceData
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Data.Speaker.ClientState">
            <summary>
            Enum specifying the Image Server Client state
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.Speaker.ClientState.ErrorDetected">
            <summary>
            The Image Server Client is in Error state
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.Speaker.ClientState.Disconnected">
            <summary>
            The Image Server Client is disconnected to the Image Server
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.Speaker.ClientState.Connecting">
            <summary>
            The Image Server Client is connecting to the Image Server
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.Speaker.ClientState.Connected">
            <summary>
            The Image Server Client is connected to the Image Server
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.Speaker.ClientState.Initializing">
            <summary>
            The Image Server Client is initializing connection to speaker devices
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.Speaker.ClientState.Initialized">
            <summary>
            The Image Server Client has initialized connection to speaker devices
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.Speaker.ClientState.BeginningSpeak">
            <summary>
            The Image Server Client is preparing receiving speak data
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.Speaker.ClientState.Speaking">
            <summary>
            The Image Server Client is ready for receiving speak data
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.Speaker.ClientState.EndingSpeak">
            <summary>
            The Image Server Client is stopping receiving speak data
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.Speaker.ClientState.UnInitializing">
            <summary>
            The Image Server Client is uninitializing connection to speaker devices
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.Speaker.ImageServerClient">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.Speaker.ImageServerClient.ClientStateEventHandler">
            <summary>
            Represents the method that will signal Client State
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Data.Speaker.ImageServerClient.ClientStateEvent">
            <summary>
            Signals Client State
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.Speaker.ImageServerClient.FireClientStateEvent(VideoOS.Platform.Data.Speaker.ClientState,System.String,System.Collections.ArrayList,System.Int32)">
             <summary>
            Activates the ClientStateEvent
             </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Speaker.ImageServerClient.RecorderName">
            <summary>
            Gets or sets the recorder name
            Is thread safe.
            </summary>
            <value>The recorder name</value>
        </member>
        <member name="P:VideoOS.Platform.Data.Speaker.ImageServerClient.ServerUri">
            <summary>
            Gets or sets the server URI 
            Is thread safe.
            </summary>
            <value>The server URI</value>
        </member>
        <member name="P:VideoOS.Platform.Data.Speaker.ImageServerClient.DeviceIds">
            <summary>
            Gets or sets the Device Identifier 
            Is thread safe.
            </summary>
            <value>The Device Id</value>
        </member>
        <member name="P:VideoOS.Platform.Data.Speaker.ImageServerClient.FailedDeviceIds">
            <summary>
            Gets the Failed Device Identifier 
            Is thread safe.
            </summary>
            <value>The Device Id</value>
        </member>
        <member name="P:VideoOS.Platform.Data.Speaker.ImageServerClient.Token">
            <summary>
            Gets or sets the security token 
            Is thread safe.
            </summary>
            <value>The security token.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.Speaker.ImageServerClient.ClientState">
            <summary>
            Sets the client state
            Is thread safe.
            </summary>
            <value>Client state.</value>
        </member>
        <member name="M:VideoOS.Platform.Data.Speaker.ImageServerClient.Speak(System.Byte[],System.Boolean)">
            <summary>
            Sends audio data to the speaker.
            </summary>
            <param name="captureData"></param>
            <param name="includeGenericByteDataHeader">Whether to include a Generic Byte Data Wrapper, containing audio recorder parameters.</param>
        </member>
        <member name="M:VideoOS.Platform.Data.Speaker.ImageServerClient.Receive(VideoOS.Platform.Data.Speaker.ImageServerClient.Connection)">
            <summary>
            Receives data from the socket
            </summary>
            <returns>Number of characters received</returns>
        </member>
        <member name="T:VideoOS.Platform.Data.Speaker.ImageServerClient.ClientStateEventArgs">
            <summary>
            Implements the class that contains the event args for the ClientStateEventArgs
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.Speaker.ImageServerClient.ClientStateEventArgs._clientState">
            <summary>
            The input value parameter of the event args
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.Speaker.ImageServerClient.ClientStateEventArgs.#ctor(VideoOS.Platform.Data.Speaker.ClientState,System.String,System.Collections.ArrayList,System.Int32)">
            <summary>
            Constructs a ClientStateEventArgs instance
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Speaker.ImageServerClient.ClientStateEventArgs.ClientState">
            <summary>
            Gets or sets the client state parameter of the event args
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Speaker.ImageServerClient.ClientStateEventArgs.ErrorMessage">
            <summary>
            Gets or sets the error message value parameter of the event args
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.Speaker.ImageServerClient.ClientStateEventArgs.FailedDevices">
            <summary>
            Gets or sets the list of failed devices parameter of the event args
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.Speaker.ImageServerClient.Connection">
            <summary>
            Implements a class that holds and manages a Socket and a Stream
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.Speaker.OutgoingAudioServerMessages">
            <summary>
            Class that handles the building and parsing of Outgoing Audio commands
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.Speaker.OutgoingAudioServerMessages.HeaderVersion">
            <summary>
            const specifying the property key string that shall be used when savinng the ipix pan value in the configuration
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.Speaker.OutgoingAudioServerMessages.BuildConnectRequest(System.Int32,System.String)">
            <summary>
            Builds outgoing audio connect request
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.Speaker.OutgoingAudioServerMessages.BuildInitializeRequest(System.Int32,System.String,System.Collections.Generic.List{System.Guid})">
            <summary>
            Builds outgoing audio initialize request
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.Speaker.OutgoingAudioServerMessages.BuildUninitializeRequest(System.Int32)">
            <summary>
            Builds outgoing audio uninitialize request
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.Speaker.OutgoingAudioServerMessages.BuildBeginSpeakRequest(System.Int32,System.String,System.Collections.ArrayList,System.Boolean)">
            <summary>
            Builds outgoing audio Begin Speak request
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.Speaker.OutgoingAudioServerMessages.BuildEndSpeakRequest(System.Int32)">
            <summary>
            Builds outgoing audio End Speak request
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.Speaker.OutgoingAudioServerMessages.BuildSpeakRequest(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds outgoing audio Speak request
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.Speaker.OutgoingAudioServerMessages.BuildDirectSpeakRequest(System.Int32,System.Byte[])">
            <summary>
            Build outgoing speak request from data with Generic Byte Data Header
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.Speaker.OutgoingAudioServerMessages.ReadResponseXml(System.String,System.Collections.ArrayList@)">
            <summary>
            Parses outgoing audio common XML response
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.Speaker.TimeConverter">
            <summary>
            Utility class for timestamp converting between DateTime and milliseconds since the epoch
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.Speaker.TimeConverter._dt1970">
            <summary>
            DateTime object representing the epoch
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.Speaker.TimeConverter.#cctor">
            <summary>
            Static constructor initializing _dt1970
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.Speaker.TimeConverter.FromDouble(System.Double)">
            <summary>
            Converts milliseconds since epoch into a DateTime
            </summary>
            <param name="milesec">Milliseconds since epoch</param>
            <returns>The date</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.Speaker.TimeConverter.FromString(System.String)">
            <summary>
            Converts a string containing the number of milliseconds since epoch into a DateTime
            </summary>
            <param name="milesecString">String containing the amount milliseconds since epoch</param>
            <returns>The date</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.Speaker.TimeConverter.ToDouble(System.DateTime)">
            <summary>
            Converts a DateTime into number of milliseconds since epoch
            </summary>
            <param name="time">The time</param>
            <returns>The number of milliseconds since epoch</returns>
        </member>
        <member name="T:VideoOS.Platform.Data.StreamDataSource">
             <summary>
             The StreamDataSource provides information of what streams are available on a given Item.<br/>
             This data source is only valid for camera items (Kind.Camera) when running in the .Net Library Environment. (Version MIPSDK 3.6 or later).
            
             To get a list of available Streams:
             <code><![CDATA[
                 StreamDataSource streamDataSource = new StreamDataSource(_myCameraItem);
                 List<DataTypes> streams = streamDataSource.GetTypes();
                 foreach (DataType stream in streams)
                 {
                     Debug.WriteLine("Stream: "+stream.Name+", has Id="+stream.Id);
                 }
             ]]>
             </code>
             Note that all the GetData and Command methods has no function in this implementation of the DataSource.
             </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.StreamDataSource.#ctor(VideoOS.Platform.Item)">
            <summary>
            Construct the StreamDataSource for a given Item.  
            The Item needs to be Kind.Camera
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.StreamDataSource.GetTypes">
            <summary>
            Returns the available types of streams for the given Item (a Camera).
            </summary>
            <returns>The list can be empty, when only the default stream is defined.</returns>
        </member>
        <member name="T:VideoOS.Platform.Data.IThumbnailQueueDiagnostics">
            <summary>
            Diagnostics for the <see cref="T:VideoOS.Platform.Data.ThumbnailQueue"/> providing a snapshot of the current state of the queue.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IThumbnailQueueDiagnostics.MaxConcurrentRequests">
            <summary>
            Gets the maximum number of requests (<see cref="T:VideoOS.Platform.Data.ICancelableRequest"/>) that can be active at any given time.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IThumbnailQueueDiagnostics.MaxIdleTimeMillisBeforeVideoSourceCleanup">
            <summary>
            Gets the maximum time, in milliseconds, a <see cref="T:VideoOS.Platform.Data.VideoSource"/> associated with a recording server queue can remain idle before being shut down.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IThumbnailQueueDiagnostics.ConcurrentRequests">
            <summary>
            Gets the total number of active requests.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IThumbnailQueueDiagnostics.ActiveVideoSources">
            <summary>
            Gets the number of active <see cref="T:VideoOS.Platform.Data.VideoSource"/>s currently processing requests.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IThumbnailQueueDiagnostics.IdleVideoSources">
            <summary>
            Gets the number of idle <see cref="T:VideoOS.Platform.Data.VideoSource"/>s which are ready to process incoming requests.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IThumbnailQueueDiagnostics.VideoSources">
            <summary>
            Gets the total number of <see cref="T:VideoOS.Platform.Data.VideoSource"/>s currently in memory. Essentially this is the sum of the active and idle video sources.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.IThumbnailQueueDiagnostics.RequestsInQueue">
            <summary>
            Gets the total number of requests in the queue that are not currently being processed.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.ICancelableRequest">
            <summary>
            Defines a cancelable thumbnail queue request.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.ICancelableRequest.Canceled">
            <summary>
            Gets or sets whether or not the request is canceled.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.ThumbnailQueue">
             <summary>
             Thumbnail queue (singleton) used for fetching thumbnail images from cameras in a controlled and optimized manner.
             Queue characteristics can be controlled in the app.config of the client application, otherwise default values are used.
             The following app settings can be configured in the app.config file to control the queue:
            
             ThumbnailQueue.MaxConcurrentRecordingServers         - Sets the maximum number of recording servers the queue can communicate with (in parallel) at any given time.
             ThumbnailQueue.MaxVideoSourcesPerRecordingServer     - Sets the maximum number of <see cref="T:VideoOS.Platform.Data.VideoSource"/> instances that are initialized (in parallel) towards any single recording server.
             ThumbnailQueue.MaxConcurrentRequestsInTotal          - Sets the maximum number of requests that can be processed at any given time (in parallel).
             ThumbnailQueue.MaxVideoSourceIdleTimeMillis          - Sets the maximum time a <see cref="T:VideoOS.Platform.Data.VideoSource"/> resource can sit idle (i.e. not process any requests) before it is automatically shut down.
             ThumbnailQueue.ThumbnailCacheEnabled                 - Determines whether the up-front caching of thumbnails is used. This will give better performance, but at the cost of a slight increase in memory usage.
             ThumbnailQueue.MaxThumbnailCacheCapacity             - Determines the maximum number of thumbnails stored in the cache. When adding a new thumbnail, the least recently used thumbnail is removed.
             ThumbnailQueue.ThumbnailCacheExpirationTimeMillis    - Sets the expiration time (in milliseconds) which, if the "last use" timestamp of a thumbnail exceeds, will remove the thumbnail from the cache. Setting "0" will disable expiration.
             ThumbnailQueue.ThumbnailCreationThreadPoolSize       - Sets the size of the dedicated thread pool used to convert <see cref="T:VideoOS.Platform.Data.BitmapData"/>s to <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>s.
             </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.ThumbnailQueue.ThumbnailGetStrategy">
            <summary>
            Strategy for fetching thumbnails using the <see cref="T:VideoOS.Platform.Data.VideoSource"/>.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.ThumbnailQueue.ThumbnailGetStrategy.Get">
            <summary>
            Calls the <see cref="M:VideoOS.Platform.Data.VideoSource.Get(System.DateTime)"/> method.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.ThumbnailQueue.ThumbnailGetStrategy.GetAtOrBefore">
            <summary>
            Calls the <see cref="M:VideoOS.Platform.Data.VideoSource.GetAtOrBefore(System.DateTime)"/> method.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.ThumbnailQueue.ThumbnailGetStrategy.GetNearest">
            <summary>
            Calls the <see cref="M:VideoOS.Platform.Data.VideoSource.GetNearest(System.DateTime)"/> method.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.ThumbnailQueue.Instance">
            <summary>
            The single instance of the thumbnail queue.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.ThumbnailQueue.Diagnostics">
            <summary>
            Provides a snapshot of the current state of the queue
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.ThumbnailQueue.CacheSize">
            <summary>
            Gets the current size of the cache (i.e. how many items are currently cached).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.ThumbnailQueue.UsingCache">
            <summary>
            Gets whether or not the cache is in use.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.ThumbnailQueue.ClearCache">
            <summary>
            Clears the cache (if used)
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.ThumbnailQueue.Clear">
            <summary>
            Clears the internal resources/toolkits.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.ThumbnailQueue.Clear(System.Boolean)">
            <summary>
            Clears the internal resources/toolkits and cache (optional).
            </summary>
            <param name="clearCache">Indication of whether the cache should also be cleared or not.</param>
        </member>
        <member name="M:VideoOS.Platform.Data.ThumbnailQueue.Enqueue(VideoOS.Platform.Item,System.DateTime,System.Windows.Size,System.Action{VideoOS.Platform.Data.BitmapDataResult})">
            <summary>
            Enqueues the provided <see cref="T:VideoOS.Platform.Item"/> and <see cref="T:System.DateTime"/> input onto the queue. The provided output action
            will be invoked once the queued item has been processed.
            </summary>
            <param name="item">The camera item to fetch a thumbnail from</param>
            <param name="timestamp">The timestamp at which to get the thumbnail. (Uses GetAtOrBefore strategy).</param>
            <param name="desiredSize">The desired size of the thumbnail.</param>
            <param name="outputAction">The action to invoke once the item has been processed.</param>
            <returns>A handle which can be used to prematurely cancel the queued item if it is no longer relevant for the caller.</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.ThumbnailQueue.Enqueue(VideoOS.Platform.Item,System.DateTime,VideoOS.Platform.Data.ThumbnailQueue.ThumbnailGetStrategy,System.Windows.Size,System.Action{VideoOS.Platform.Data.BitmapDataResult})">
            <summary>
            Enqueues the provided <see cref="T:VideoOS.Platform.Item"/> and <see cref="T:System.DateTime"/> input onto the queue. The provided output action
            will be invoked once the queued item has been processed.
            </summary>
            <param name="item">The camera item to fetch a thumbnail from</param>
            <param name="timestamp">The timestamp at which to get the thumbnail.</param>
            <param name="strategy">The strategy to use when fetching the thumbnail.</param>
            <param name="desiredSize">The desired size of the thumbnail.</param>
            <param name="outputAction">The action to invoke once the item has been processed.</param>
            <returns>A handle which can be used to prematurely cancel the queued item if it is no longer relevant for the caller.</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.ThumbnailQueue.ConvertToBitmapSource(VideoOS.Platform.Data.BitmapData)">
            <summary>
            Converts the provided <see cref="T:VideoOS.Platform.Data.BitmapData"/> to a <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> using a dedicated thread pool task which ensures we do not leak global windows ATOMs (by
            using the standard thread pool threads)
            </summary>
            <param name="bitmapData">The <see cref="T:VideoOS.Platform.Data.BitmapData"/> to convert to a <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.</param>
            <returns>A task resolving the desired <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.ThumbnailQueue.Dispose">
            <summary>
            Disposes the <see cref="T:VideoOS.Platform.Data.ThumbnailQueue"/>.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.BitmapDataResult">
            <summary>
            The result type received when using the <see cref="T:VideoOS.Platform.Data.ThumbnailQueue"/> to fetch a thumbnail. The type has properties
            to indicate if an error occurred, and the actual data (if no error occurred).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BitmapDataResult.FailedToRetrieveImage">
            <summary>
            This returns true if failure occurred while trying to retrieve the image. This could be a network connection or similar problems.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BitmapDataResult.NoImageAvailable">
            <summary>
            This returns true if there was no image to retrieve. This could be because the recording has been deleted or there simply isn't any video for the given time.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BitmapDataResult.Exception">
            <summary>
            If an exception is thrown while trying to retrieve the image, then returns that exception.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BitmapDataResult.BitmapData">
            <summary>
            Gets the <see cref="P:VideoOS.Platform.Data.BitmapDataResult.BitmapData"/> for the result.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.AlertConverter">
            <summary>
            Allows for conversion from legacy MAD format to MAD format version 2.5
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.AlertConverter.ImageHeight">
            <summary>
            Gets or sets the height of the image.
            Specify ImageHeight and ImageWidth to normalize BoundingBoxes and Points.
            </summary>
            <value>The height of the image.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.AlertConverter.ImageWidth">
            <summary>
            Gets or sets the width of the image.
            Specify ImageHeight and ImageWidth to normalize BoundingBoxes and Points.
            </summary>
            <value>The width of the image.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.AlertConverter.DefaultSpeedUnit">
            <summary>
            Gets or sets the default speed unit given to all object motion speeds.
            </summary>
            <value>The default speed unit.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.AlertConverter.DefaultSizeUnit">
            <summary>
            Gets or sets the default size unit given to all object sizes.
            </summary>
            <value>The default size unit.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.AlertConverter.AlarmIDMap">
            <summary>
            Gets or sets the alarm ID map, which maps alarm IDs from integer to Guid.
            Each alarm is given a unique Guid, so one integer may map to several Guids.
            </summary>
            <value>The alarm ID map.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.AlertConverter.ObjectIDMap">
            <summary>
            Gets or sets the object ID map, which maps object IDs from integer to Guid.
            If object Guid is reused if integer is the same.
            </summary>
            <value>The object ID map.</value>
        </member>
        <member name="P:VideoOS.Platform.Data.AlertConverter.ServerId">
            <summary>
            Gets or sets the server id, which identifies the image/management server on which the cameras are located
            </summary>
            <value>The server id.</value>
        </member>
        <member name="M:VideoOS.Platform.Data.AlertConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VideoOS.Platform.Data.AlertConverter"/> class.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.AlertConverter.CreateAlarm(System.String)">
            <summary>
            Creates an alarm from a legacy MAD formatted alert.
            </summary>
            <param name="alertXml">The alert XML string.</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.AlertConverter.CreateAlarm(System.Xml.XmlDocument)">
            <summary>
            Creates an alarm from a legacy MAD formatted alert.
            </summary>
            <param name="alertDoc">The alert XML document.</param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Data.AlertDataSource">
            <summary>
            This class can be constructed with a specific Alert item as parameter. It will assist in getting specific alerts from the defined alert.<br/>
            Notice: Alerts has been deprecated in XProtect Corporate from version 4.0 - consider to use bookmarks or alarms.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.AlertDataSource.#ctor(VideoOS.Platform.Item)">
            <summary>
            Construction of this class needs a reference to the alert to get alerts from.<br/>
            Alerts in this context are the alerts defined in XProtect Corporate (Pre-version 4.0) or the hardware inputs and manual events defined
            in XProtect Enterprise.<br/>
            It should also be noted that the originator that triggered this event, can not be retrieved when using alerts.<br/>
            </summary>
            <param name="item">An alert Item</param>
        </member>
        <member name="M:VideoOS.Platform.Data.AlertDataSource.GetData(System.DateTime,System.TimeSpan,System.Int32,System.TimeSpan,System.Int32)">
            <summary>
            Get a list of alerts that matches the filter criteria specified.
            </summary>
            <param name="dateTime">Center time</param>
            <param name="maxTimeBefore">TimeSpan before dateTime to look for alerts</param>
            <param name="maxCountBefore">Max number of alerts to include</param>
            <param name="maxTimeAfter">TimeSpan after dateTime to look for alerts</param>
            <param name="maxCountAfter">Max number of alerts to include</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.AlertDataSource.GetDataAsync(System.Object,System.DateTime,System.TimeSpan,System.Int32,System.TimeSpan,System.Int32,VideoOS.Platform.Data.AsyncCallbackHandler)">
            <summary>
            Overloaded method as GetData, executing asynchronous.
            </summary>
            <param name="asyncState"></param>
            <param name="dateTime"></param>
            <param name="maxTimeBefore"></param>
            <param name="maxCountBefore"></param>
            <param name="maxTimeAfter"></param>
            <param name="maxCountAfter"></param>
            <param name="resultCallback"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.AlertDataSource.Command(System.Object,System.String,System.String[])">
            <summary>
            Not implemented.
            </summary>
            <param name="objectData"></param>
            <param name="command"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Data.AlertData">
            <summary>
            This is simply a reference to the EventData structure, that is used to return the result.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.BaseEvent">
            <summary>
            The BaseEvent, containing information common for all Milestone events. Notice that several overriden classes exists
            that may be more useful in a given situation, e.g. AnalyticsEvent or EventData
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BaseEvent.EventHeader">
            <summary>
            The EventHeader describing the source, timestamp and much more for this event.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.BaseEvent.ExtensionData">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.Data.BaseEvent.#ctor">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Data.EventData">
            <summary>
            The EventData contains a complete set of information for a specific event.
            It is used for some DataSources as well as for EventServer integration.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventData.EventSequence">
            <summary>
            Contains time stamp information, and possible images.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.EventSequence">
            <summary>
            Contain image and video reference
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventSequence.StartDateTime">
            <summary>
            The time this event is considered as started
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventSequence.EndDateTime">
            <summary>
            The time this event is considered as ended.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventSequence.SnapshotImages">
            <summary>
            Any extra images that provided additional information, analytics shapshots etc.<br/>
            
            Note that during the send process, this content is converted to SnapshopJPEGs, and any Alarms being generated from this event will contain the images in the Alarm.SnapshotList.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventSequence.SnapshotJPEGs">
            <summary>
            Any extra JPEGs, formatted as byte[] An alternative to the SnapshotImages.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.EventSequence.ExtensionData">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.DataType">
            <summary>
            Represents a type of Data being provided by a DataSource.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DataType.Id">
            <summary>
            The identification of this data type. <br/>
            The inner classes contains the predefined fixed Guids for Sequence, Jpeg and TimeLine types.<br/>
            For Streams the Ids are dynamic and created when the stream definition is added in the administrator.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DataType.Name">
            <summary>
            The display name of the stream.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DataType.Properties">
            <summary>
            Extra information about the data type
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DataType.ToString">
            <summary>
            Returns the Name of the stream, in order to be used for adding in drop down lists like ComboBox.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Data.DataType.SequenceTypeGuids">
            <summary>
            Build-in DataType Ids for camera Items.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DataType.SequenceTypeGuids.RecordingSequence">
            <summary>
            DataType for RecordingSequence, only supported for C-Code products.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DataType.SequenceTypeGuids.MotionSequence">
            <summary>
            DataType for MotionSequence, supported for all XProtect Video products.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DataType.SequenceTypeGuids.RecordingWithTriggerSequence">
            <summary>
            DataType for Recordings triggered by an event, only supported for C-Code products.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DataType.SequenceTypeGuids.TimelineRecording">
            <summary>
            DataType for converting the Timeline information on SOAP to a set of Sequences for Recording, 
            only supported by standalone MIPSDK connected to an E-Code product.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DataType.SequenceTypeGuids.TimelineMotionDetected">
            <summary>
            DataType for converting the Timeline information on SOAP to a set of Sequences for Motion Detected, 
            only supported by standalone MIPSDK connected to an E-Code product.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.DataType.JPEGTypeGuids">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DataType.JPEGTypeGuids.JPEGDataType">
            <summary>
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.DataType.TimeLineInformationTypeGuids">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DataType.TimeLineInformationTypeGuids.RecordedDataAvailable">
            <summary>
            Constant used to define the type of sequences returned when asking for VideoOS.Platform.Data.DataType.SequenceTypeGuids.TimelineRecording
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.DataType.TimeLineInformationTypeGuids.ActivitiesDetected">
            <summary>
            Constant used to define the type of sequences returned when asking for VideoOS.Platform.Data.DataType.SequenceTypeGuids.TimelineMotionDetected.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.DataSource">
            <summary>
            An abstract class to be used for implementation of a DataSource.<br/>
            Within the MIP Environment there are currently these built-in implementations:<br/>
              AlertDataSource - to get access to video alerts<br/>
              SequenceDataSource - to get access to recorded video related sequence information<br/>
              StreamDataSource - to get the configured streams on a camera<br/>
              MetadataSource - to get the configured metadata stream information on a metadata item<br/>
            <br/>
            <br/>
            If a plug-in can provide list of data related to a specific Item, implementation of this class can be used.<br/>
            <br/>
            Construction can be performed in two ways:<br/>
              Call the GetDataSource() on the owning Item<br/>
              Construct the correct class based on the Item at hand<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DataSource.#ctor(VideoOS.Platform.Item)">
            <summary>
            Construct a DataSource based on the Item given as parameter.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.DataSource.Init">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DataSource.Close">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.DataSource.Item">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DataSource.GetTypes">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DataSource.GetData(System.DateTime,System.TimeSpan,System.Int32,System.TimeSpan,System.Int32)">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DataSource.GetData(System.DateTime,System.TimeSpan,System.Int32,System.TimeSpan,System.Int32,System.Guid)">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DataSource.GetDataAsync(System.Object,System.DateTime,System.TimeSpan,System.Int32,System.TimeSpan,System.Int32,VideoOS.Platform.Data.AsyncCallbackHandler)">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DataSource.GetDataAsync(System.Object,System.DateTime,System.TimeSpan,System.Int32,System.TimeSpan,System.Int32,System.Guid,VideoOS.Platform.Data.AsyncCallbackHandler)">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.DataSource.Command(System.Object,System.String,System.String[])">
            <summary>
            Reserved for future use.
            </summary>
            <param name="objectData"></param>
            <param name="command"></param>
            <param name="args"></param>
            <returns>Error message or "OK"</returns>
        </member>
        <member name="T:VideoOS.Platform.Data.AsyncResultEventArgs">
            <summary>
            The result of a Async operation.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AsyncResultEventArgs.Result">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Data.AsyncResultEventArgs.AsyncState">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.AsyncCallbackHandler">
            <summary>
            A delegate to hold the reference to your method to be called when the result has been retrieved from the server.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.JPEGVideoSource">
            <summary>
            JPEGVideoSource gets recorded video image formatted as JPEGs.<br/>
            Please note that all calls to the methods in this class MUST be coming from the same thread!<br/>
            When getting images from the server, it should be considered that the Get() method can take some time and is not ideal to execute on a UI thread.<br/>
            Only supported in Smart Client and standalone environments.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.#ctor(VideoOS.Platform.Item)">
            <summary>
            Construct a VideoSource for JPEG handling. The Item MUST be of Kind==Kind.Camera
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:VideoOS.Platform.Data.JPEGVideoSource.Height">
            <summary>
            The height of all frames received
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.JPEGVideoSource.Width">
            <summary>
            The width of all frames received
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.JPEGVideoSource.AllowUpscaling">
            <summary>
            Gets or sets whether upscaling is allowed
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.SetKeepAspectRatio(System.Boolean,System.Boolean)">
            <summary>
            Instruct the Media Toolkit to keep the aspect ratio for the transcoded frames.<br/>
            This method <i>must</i> be called before the Init call.
            <param name="keepAspectRatio">true to keep same aspect ratio as the original frames has.</param>
            <param name="fillSpace">true to fill missing pixels with black to match the target width and height</param>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.Init">
            <summary>
            Initialize the server connection and set default width and height
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.Init(System.Int32,System.Int32)">
            <summary>
            Initialize the server connection and set the with and height to specific values.<br/>
            The height and width should be set to the lowest value that make sense for your application, 
            e.g. don't ask for 1080x720 images if displaying thumbnails.<br/>
            </summary>
            <exception cref="T:VideoOS.Platform.ImplementationMIPException">Looks like a programming error, check order and parameters of the calls.</exception>
            <exception cref="T:VideoOS.Platform.NotAuthorizedMIPException">Unable to connect to the server. Could be user is not authorized to see this camera.</exception>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.SuspendSettingsUpdate">
            <summary>
            Calling this method will suspend the change to any settings, until a ResumeSettingsUpdate has been called.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.ResumeSettingsUpdate">
            <summary>
            Calling this method will allow the system to perform the pending settings changes done between calling the SuspendSettingUpdate and this method.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.SetWidthHeight">
            <summary>
            Enforce the changed width, height and allow upscaling properties.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.SetCropRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Define a cropping rectangle of what part of the image to pick out.<br/>
            The values are all between 0.0 up to 1.0 as a relative part of the original image.<br/>
            To crop out a lower right hand rectangle these values could apply:<br/>
            	SetCropRectangle( 0.5, 0.5, 0.25, 0.25 );
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="P:VideoOS.Platform.Data.JPEGVideoSource.Compression">
            <summary>
            The quality of the JPEGs.  A value between 1..100. <br/>
            The name of the property should really have been Quality, not Compression.<br/>
            The default value is 75.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.JPEGVideoSource.CustomData">
            <summary>
            Can be set to any value or class that is used by the application.
            The current value will be 'returned' in any subsequent JPEGData on next received frame.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.Close">
            <summary>
            Close session to server and cleanup.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.Get(System.DateTime)">
            <summary>
            Get one JPEG at the specified time.<br/> if no image found, null may be returned.
            </summary>
            <param name="dateTime"></param>
            <returns>null or a JPEGData class</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.Get(System.DateTime,System.TimeSpan,System.Int32)">
            <summary>
            Get a list of JPEGs from the time specified and limited as specified.
            </summary>
            <param name="dateTime">DateTime of first JPEG</param>
            <param name="maxTimeAfter">Max TimeSpan to look for images</param>
            <param name="maxCountAfter">Max number of images to return</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.GetNearest(System.DateTime)">
            <summary>
            Get the nearest JPEG to the DateTime specified.<br/>
            This method is useful when being issued within a second of when the recording took place. e.g. close to real time. 
            The actual recording may not have happened yet, and this method will then go back a few seconds instead of returning null.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.GetAtOrBefore(System.DateTime)">
            <summary>
            Get the nearest JPEG to the DateTime specified.<br/>
            This method is useful when being issued within a second of when the recording took place. e.g. close to real time. 
            The actual recording may not have happened yet, and this method will then go back a few seconds instead of returning null.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.GoToWithResult(System.DateTime,System.String)">
            <summary>
            Set the pointer as close to this time as possible.
            </summary>
            <remarks>
            This method will return true if the video pointer was moved - even if the time it was moved to is far in time from the requested time.
            False is only returned if the video pointer is not moved, which only happens in a few cases:
            <ol>
              <li>If the direction argument is PlaybackPlayModeData.Forward, the method returns true if there is ANY video at or after the requested time.
                  Only if the requested time is after database end will GoToWithResultreturn false.</li>
              <li>If the direction argument is PlaybackPlayModeData.Reverse, the method returns true if there is ANY video at or before the requested time.
                  Only if the requested time is before database start will GoToWithResult return false.</li>
              <li>If the direction argument is something else, it will return true, if there is any video and false only if the DB is empty.</li>
            </ol>
            </remarks>
            <param name="timestamp">The point in time that the video pointer should be moved to</param>
            <param name="playbackPlayModeData">Used to fine tune the direction to move if exact time stamp is not available.</param>
            <returns>True if the video pointer was moved; false if it did not move</returns>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.GoTo(System.DateTime,System.String)">
            <summary>
            Set the pointer as close to this time as possible.
            </summary>
            <param name="timestamp">The point in time that the video pointer should be moved to</param>
            <param name="playbackPlayModeData">Used to fine tune the direction to move if exact time stamp is not available.</param>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.GetNext">
            <summary>
            Get the next JPEG after the one received on last call to Get()
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.GetPrevious">
            <summary>
            Get the previous JPEG <br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.GetPreviousSequence">
            <summary>
            Get the first JPEG in the previous sequence<br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.GetNextSequence">
            <summary>
            Get the first JPEG of the next sequence<br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.GetBegin">
            <summary>
            Get first JPEG in the database<br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.JPEGVideoSource.GetEnd">
            <summary>
            Get last JPEG in the database<br/>
            This method supported for standalone MIP library applications.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.SequenceDataSource">
            <summary>
            The SequenceDataSource can assist with getting sequence information for a camera or metadata device.<br/>
            The GetData methods returns a list of SequenceData containing the DateTime information for the type of sequence requested.<br/>
            The GetTypes() method will return the possible and supported types for this class. 
            E.g. the DataType.SequenceTypeGuids.RecordingSequence for Recorded sequences.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.SequenceDataSource.#ctor(VideoOS.Platform.Item)">
            <summary>
            Create a new instance of <see cref="T:VideoOS.Platform.Data.SequenceDataSource"/>
            </summary>
            <param name="item">The item to get sequences from.</param>
        </member>
        <member name="M:VideoOS.Platform.Data.SequenceDataSource.GetTypes">
            <summary>
            Returns the list of valid DataType's support by this class.
            
            For Camera/Microphone/Speakers, check this class for possible Ids: SequenceTypeGuids and TimeLineInformationTypeGuids
            
            For Metadata, the DataTypes available is determined by the metadata provider
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.SequenceDataSource.GetData(System.DateTime,System.TimeSpan,System.Int32,System.TimeSpan,System.Int32)">
            <summary>
            Get data from the server in the specified time interval.  The type is selected as the default type: DataType.SequenceTypeGuids.RecordingSequence.
            Consider limiting the time interval when possible, multi-day intervals can take many seconds for the server to assemble.
            </summary>
            <param name="dateTime"></param>
            <param name="maxTimeBefore"></param>
            <param name="maxCountBefore"></param>
            <param name="maxTimeAfter"></param>
            <param name="maxCountAfter"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.SequenceDataSource.GetData(System.DateTime,System.TimeSpan,System.Int32,System.TimeSpan,System.Int32,System.Guid)">
            <summary>
            Get data from the server in the specified time interval. Consider limiting the time interval when possible, multi-day intervals can take many seconds for the server to assemble.
            </summary>
            <param name="dateTime"></param>
            <param name="maxTimeBefore"></param>
            <param name="maxCountBefore"></param>
            <param name="maxTimeAfter"></param>
            <param name="maxCountAfter"></param>
            <param name="sequenceTypeGuid"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Data.SequenceDataSource.GetDataAsync(System.Object,System.DateTime,System.TimeSpan,System.Int32,System.TimeSpan,System.Int32,VideoOS.Platform.Data.AsyncCallbackHandler)">
            <summary>
            As for GetData, but returns the result to an async method when available.
            
            Note: If communication errors occur, the async method is not called.
            </summary>
            <param name="asyncState"></param>
            <param name="dateTime"></param>
            <param name="maxTimeBefore"></param>
            <param name="maxCountBefore"></param>
            <param name="maxTimeAfter"></param>
            <param name="maxCountAfter"></param>
            <param name="resultCallbackHandler"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.SequenceDataSource.GetDataAsync(System.Object,System.DateTime,System.TimeSpan,System.Int32,System.TimeSpan,System.Int32,System.Guid,VideoOS.Platform.Data.AsyncCallbackHandler)">
            <summary>
            As for GetData, but returns the result to an async method when available.
            
            Note: If communication errors occur, the async method is not called.
            </summary>
            <param name="asyncState"></param>
            <param name="dateTime"></param>
            <param name="maxTimeBefore"></param>
            <param name="maxCountBefore"></param>
            <param name="maxTimeAfter"></param>
            <param name="maxCountAfter"></param>
            <param name="typeOfData"></param>
            <param name="resultCallbackHandler"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.SequenceDataSource.Command(System.Object,System.String,System.String[])">
            <summary>
            Not implemented
            </summary>
            <param name="objectData"></param>
            <param name="command"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Data.SequenceData">
            <summary>
            Contains the actual sequence data for one sequence, e.g. start and end DateTime.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Data.VideoSource">
            <summary>
            Gives access to recorded video.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.VideoSource.#ctor(VideoOS.Platform.Item)">
            <summary>
            One VideoSource is assigned to a specific Item.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Data.VideoSource.Init">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.VideoSource.Init(System.Int32,System.Int32)">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.VideoSource.Close">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Data.VideoSource.Item">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.VideoSource.Get(System.DateTime)">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.VideoSource.GetNearest(System.DateTime)">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.VideoSource.GetAtOrBefore(System.DateTime)">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.VideoSource.GetNext">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Data.VideoSource.Get(System.DateTime,System.TimeSpan,System.Int32)">
            <summary>
            See the specific DataSource implementation for documentation.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Live.BaseLiveSource`2">
            <summary>
            T is the type of the content data (LiveSourceContent or LiveSourceRawContent)
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.BaseLiveSource`2.#ctor(VideoOS.Platform.Item,System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
            <summary>
            Construct the class for use of video from the defined Item. The Item can be an ImageServer owned camera, an Enterprise or a Corporate database file.
            </summary>
            <param name="item"></param>
            <param name="supportedTypes"></param>
            <param name="isRawSource"></param>
        </member>
        <member name="M:VideoOS.Platform.Live.BaseLiveSource`2.Init">
            <summary>
            Initialize and connect to the source of the video.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.BaseLiveSource`2.Item">
            <summary>
            The camera Item to receive live video from
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.BaseLiveSource`2.SupportedItemTypes">
            <summary>
            List of supported item Types
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.BaseLiveSource`2.IsRawSource">
            <summary>
            Property describing if the live source will get raw data or not
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.BaseLiveSource`2.StreamId">
            <summary>
            Can be used to identify which stream to use, when more than one is available.<br/>
            Multiple streams are available in XProtect Corporate.<br/>
            When set to Guid.Empty, the default stream will be used.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.BaseLiveSource`2.SessionId">
            <summary>
            Session object that can be used by the inheritors or users of the component
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.BaseLiveSource`2.MulticastEnabled">
            <summary>
            Tells whether multicast is enabled for current stream
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.BaseLiveSource`2.StreamSelectionParams">
            <summary>
            Allows configuration/selection of the specific camera stream
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.BaseLiveSource`2.Close">
            <summary>
            See the specific LiveSource implementation for documentation.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.BaseLiveSource`2.LiveModeStart">
            <summary>
            Start the live feed. Frames will be passed through the LiveNotificationEvent event.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Live.BaseLiveSource`2.LiveContentEvent">
            <summary>
            This event is fired for every new live frame.<br/>
            The EventArgs passed on with this event is the LiveContentEventArgs/LiveContentRawEventArgs containing the frame and properties.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Live.BaseLiveSource`2.LiveStatusEvent">
            <summary>
            This event is fired when new live status information is available.<br/>
            The EventArgs passed on with this event is the LiveStatusEventArgs containing flag information about the current status of the camera connection.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.BaseLiveSource`2.CurrentStatusFlags">
            <summary>
            Holds the current status.<br/>
            It is also possible to be immediately informed about status changes by subscribing to the LiveStatusEvent.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.BaseLiveSource`2.ReleaseObject(System.IDisposable)">
            <summary>
            Deprecated. May be deleted in the future.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.BaseLiveSource`2.OnUpdateLiveStart">
            <summary>
            Called when Live start is updated. Used from inheritors to do specific intializations.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.BaseLiveSource`2.OnUpdateSettings">
            <summary>
            Used by inheritors to update some settings
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.BaseLiveSource`2.ConnectAndStartLiveSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.BaseLiveSource`2.StopAndDisconnectLiveSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.BaseLiveSource`2.HandleLiveDataContent(`0)">
            <summary>
            Called on received data. Should be overrriten in the inheritors.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:VideoOS.Platform.Live.BaseLiveSource`2.ConnectLiveSource(System.String)">
            <summary>
            Method to be overriten in the inheritors.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.BaseLiveSource`2.OnLiveStatusEvent(System.EventArgs)">
            <summary>
            Called when status is received
            </summary>
            <param name="eventArgs"></param>
        </member>
        <member name="M:VideoOS.Platform.Live.BaseLiveSource`2.OnLiveContentEvent(System.EventArgs)">
            <summary>
            Called when data is received
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Live.LiveSourcePcmContent">
            <summary>
            This class is received in the event args for LiveVideo coming out of the multi media toolkit, used by the PcmLiveSource class.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourcePcmContent.BeginTime">
            <summary>
            The time stamp for the beginning of the content.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourcePcmContent.EndTime">
            <summary>
            The time stamp for the end of the content.  This field is only relevant for audio data.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourcePcmContent.Content">
            <summary>
            The PCM content of the frames.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourcePcmContent.ObjectToDispose">
            <summary>
            Reserved for internal use. DO NOT ACCESS THIS FIELD!
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSourcePcmContent.Dispose(System.Boolean)">
            <summary>
            Provides overritable possibility to do thier Disposing.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSourcePcmContent.Dispose">
            <summary>
            Releases resources and signals that the client is done using this frame.
            </summary>
            <remarks>This method is not thread-safe!</remarks>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSourcePcmContent.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Live.PcmLiveSource">
            <summary>
            Class for retrieving pcm live audio (decoded to fixed number of channels, bits per pixel and sample frequency)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.PcmLiveSource.PcmSourceSettings">
            <summary>
            PcmSourceSettings
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.PcmLiveSource.#ctor(VideoOS.Platform.Item)">
            <summary>
            Constructor of the PcmLiveSource class
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Live.PcmLiveSource.OnUpdateLiveStart">
            <summary>
            Update settings on start
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.PcmLiveSource.OnUpdateSettings">
            <summary>
            Update settings if something has changed (channels, bits per pixel or sample rate)
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.PcmLiveSource.HandleLiveDataContent(VideoOS.Platform.Live.LiveSourceContent)">
            <summary>
            Handle data callback
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:VideoOS.Platform.Live.PcmLiveSource.ConnectLiveSource(System.String)">
            <summary>
            Configure live source on conenct request
            </summary>
            <param name="media"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Live.BitmapLiveSource">
            <summary>
            This class is responsible for delivering live bitmap images from a camera.<br/>
            Only supported in Smart Client and standalone environments.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.BitmapLiveSource.#ctor(VideoOS.Platform.Item,VideoOS.Platform.BitmapFormat)">
            <summary>
            Initialize an instance of <see cref="T:VideoOS.Platform.Live.BitmapLiveSource"/> and set the camera and Bitmap format
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.BitmapLiveSource.ConnectLiveSource(System.String)">
            <summary>
            
            </summary>
            <param name="media"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Live.LiveSourceTimeout">
            <summary>
            Class used to report a timeout from the toolkit
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Live.LiveStatusEventArgs">
            <summary>
            The content of the eventArgs fired on the LiveStatusEvent
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Live.LiveStatusEventArgs.CurrentStatusFlags">
            <summary>
            Contains the statusflags returned this time.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Live.LiveStatusEventArgs.ChangedStatusFlags">
            <summary>
            Contains a mask with the flags changed this time.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Live.MetadataLiveContent">
            <summary>
            This class contains the data delivered by a live metadata stream. All fields are immutable after construction.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.MetadataLiveContent.#ctor(System.DateTime,System.DateTime,VideoOS.Platform.Metadata.MetadataContent,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a new instance of <see cref="T:VideoOS.Platform.Live.MetadataLiveContent"/> and sets all fields.
            </summary>
            <param name="beginTime">The time stamp for the beginning of the content</param>
            <param name="endTime">The time stamp for the end of the content</param>
            <param name="content">The binary content of the package</param>
            <param name="properties">Additional properties containing information about the content</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="content"/> is null</exception>
        </member>
        <member name="P:VideoOS.Platform.Live.MetadataLiveContent.BeginTime">
            <summary>
            Gets the time stamp for the beginning of the content.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.MetadataLiveContent.EndTime">
            <summary>
            Gets the time stamp for the end of the content.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.MetadataLiveContent.Content">
            <summary>
            Contains the requested content. This can never be null.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.MetadataLiveContent.Properties">
            <summary>
            Gets any additional properties containing information about the content.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Live.MetadataLiveSource">
            <summary>
            This class is responsible for delivering live metadata from a device.<br/>
            Only supported in Smart Client and standalone environments.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Live.MetadataLiveSource.LiveContentEvent">
            <summary>
            This event is fired for every new live frame.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Live.MetadataLiveSource.ErrorEvent">
            <summary>
            This event is fired for every error while retrieving data.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Live.MetadataLiveSource.LiveStatusEvent">
            <summary>
            This event is fired when new live status information is available.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.MetadataLiveSource.#ctor(VideoOS.Platform.Item)">
            <summary>
            Initializes a new instance of <see cref="T:VideoOS.Platform.Live.MetadataLiveSource"/>.
            </summary>
            <param name="item">The data source</param>
        </member>
        <member name="P:VideoOS.Platform.Live.MetadataLiveSource.LiveModeStart">
            <summary>
            Start the live feed. Frames will be passed through the LiveNotificationEvent event.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.MetadataLiveSource.Close">
            <summary>
            See the specific LiveSource implementation for documentation.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.MetadataLiveSource.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.MetadataLiveSource.LogLocal(System.String,System.Exception)">
            <summary>
            Ensure to only log entry when running.
            </summary>
            <param name="where"></param>
            <param name="ex"></param>
        </member>
        <member name="T:VideoOS.Platform.Live.RawLiveSource">
            <summary>
            Provides raw video frames, including GenericByteHeader, for further analysis and decoding.
            </summary>
            Note: Is only implemented in the MIP SDK for component integration.
        </member>
        <member name="M:VideoOS.Platform.Live.RawLiveSource.#ctor(VideoOS.Platform.Item)">
            <summary>
            Construct the class for use of video from the defined Item. The Item can be an ImageServer owned camera, an Enterprise or a Corporate database file.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:VideoOS.Platform.Live.RawLiveSource.RequestSignatures">
            <summary>
            Defines if the signatures should be passed from the DB layer to the application - can be used 
            when the video database is signed.
            The Application can use this to validate the frames as being authentic.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.RawLiveSource.OnUpdateLiveStart">
            <summary>
            OnUpdateLiveStart() base class overritable
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.RawLiveSource.OnUpdateSettings">
            <summary>
            OnUpdateSettings() base class overritable
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.RawLiveSource.HandleLiveDataContent(VideoOS.Platform.Live.LiveSourceRawContent)">
            <summary>
            HandleLiveDataContent(LiveSourceRawContent data) base class overritable
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:VideoOS.Platform.Live.RawLiveSource.ConnectLiveSource(System.String)">
            <summary>
            ConnectLiveSource(string media) base class overritable
            </summary>
            <param name="media"></param>
        </member>
        <member name="P:VideoOS.Platform.Live.RawLiveSource.EnableMulticast">
            <summary>
            Specify whether multicast should be used if supported by and enabled on the server. Must be set before calling <see cref="M:VideoOS.Platform.Live.BaseLiveSource`2.Init"/> Default is false.<br/>
            Only supported in Smart Client and standalone.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Live.LiveSourceRawContent">
            <summary>
            This class is received in the event args for LiveVideo coming out of the multi media toolkit, use by the RawVideoSource class.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceRawContent.Content">
            <summary>
            The raw content of the frames.
            </summary>
            This will start with a GenericByteHeader (32 or 36) bytes specifying the folowing frame format and codec.
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceRawContent.PrivacyMask">
            <summary>
            Privacy mask definition
            </summary>
            <remarks>
            Contains a string of chanacters defining what parts of the image need to be masked out.
            <para>
            It defines how big a matrix is defined, followed by a list of zero'es and one's for each row.
            </para>
            <para>
            Can be null if no privacy mask has been defined.
            </para>
            </remarks>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceRawContent.ObjectToDispose">
            <summary>
            Reserved for internal use. DO NOT ACCESS THIS FIELD!
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSourceRawContent.Dispose">
            <summary>
            Releases resources and signals that the client is done using this frame.
            </summary>
            <remarks>This method is not thread-safe!</remarks>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSourceRawContent.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Live.LiveSourceBitmapContent">
            <summary>
            This class is received in the event args for LiveVideo coming out of the multi media toolkit.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceBitmapContent.Format">
            <summary>
            The format of the received bitmap
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceBitmapContent.ColorSpace">
            <summary>
            For BitmapFormat of types YCbCr, the BitmapColorSpace defines what color space is used
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSourceBitmapContent.GetPlaneBytes(System.Int32)">
            <summary>
            Returns the bytes in one plane
            </summary>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSourceBitmapContent.GetPlaneHeight(System.Int32)">
            <summary>
            Get the height of a given plane
            </summary>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSourceBitmapContent.GetPlaneWidth(System.Int32)">
            <summary>
            Get the width of one plane
            </summary>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSourceBitmapContent.GetPlaneStride(System.Int32)">
            <summary>
            Get the width of one scan line in bytes (including filler bytes)
            </summary>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceBitmapContent.PixelAspectRatio">
            <summary>
            How each pixel should be spaced.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSourceBitmapContent.GetPlanePointer(System.Int32)">
            <summary>
            Get a pointer to the start of a plane. The pointer is pointing into unmanaged memory!
            </summary>
            <param name="plane"></param>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceBitmapContent.ObjectToDispose">
            <summary>
            Reserved for internal use. DO NOT ACCESS THIS FIELD!
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSourceBitmapContent.Dispose">
            <summary>
            Releases resources and signals that the client is done using this frame.
            </summary>
            <remarks>This method is not thread-safe!</remarks>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSourceBitmapContent.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Live.LiveStatus">
            <summary>
            This class is responsible for handling the status of a live source and updating the state according to input.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveStatus.#ctor(VideoOS.Platform.Live.StatusFlags)">
            <summary>
            Create and initiliazes a new instance of <see cref="T:VideoOS.Platform.Live.LiveSourceStatus"/>
            </summary>
            <param name="startValue">The initial value of the status</param>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveStatus.CurrentStatus">
            <summary>
            Gets the current status of the source
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveStatus.UpdateStatus(VideoOS.Platform.Live.LiveSourceStatus,VideoOS.Platform.Live.StatusFlags)">
            <summary>
            Update the current status of a source given a <see cref="T:VideoOS.Platform.Live.LiveSourceStatus"/> package from the toolkit and the initial flags.
            </summary>
            <param name="lss">A <see cref="T:VideoOS.Platform.Live.LiveSourceStatus"/> package from the toolkit with status update for a source.</param>
            <param name="initialFlags">The initial flags for the source. The parameter has a default value of <see cref="F:VideoOS.Platform.Live.StatusFlags.None"/></param>
            <returns>The flags that were changed as a result of the update</returns>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveStatus.SetLiveModeStart(System.Boolean)">
            <summary>
            Indicated whether the clients wants to start live.
            </summary>
            <param name="start"><c>true</c> for live mode; <c>false</c> to stop live mode.</param>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveStatus.FromImageServerValue(System.Int32)">
            <summary>
            Convert from the integers used on the ImageServer protocol for LivePackage itemId to StatusFlags
            </summary>
            <param name="key">An integer value from the ImageServer protocol indicating the status</param>
            <returns>A <see cref="T:VideoOS.Platform.Live.StatusFlags"/> value corresponding to <paramref name="key"/></returns>
        </member>
        <member name="T:VideoOS.Platform.Live.StatusFlagManager">
            <summary>
            This class is responsible for dealing with flags when using the toolkit fork system.
            
            The class allows a client to retrieve the initial flags for a parent in the fork tree,
            as this information is not available at creation time.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.StatusFlagManager.Register(System.Object,System.Guid)">
            <summary>
            Register to get the current flags of the device. This method can be called multiple times for the same
            parameters. The effect of that is to re-register to get the latest flags and should be done after each
            (re)connect.
            </summary>
            <param name="referenceObject">The object registering for the flags.</param>
            <param name="objectId">The id of the device the listener is getting data from</param>
        </member>
        <member name="T:VideoOS.Platform.Live.StatusFlags">
            <summary>
            The StatusFlag contains a flag for each of the possible status items the server can tell about.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Live.StatusFlags.None">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Live.StatusFlags.LiveFeed">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Live.StatusFlags.Motion">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Live.StatusFlags.Recording">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Live.StatusFlags.Notification">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Live.StatusFlags.CameraConnectionLost">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Live.StatusFlags.DatabaseFail">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Live.StatusFlags.DiskFull">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Live.StatusFlags.ClientLiveStopped">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Live.StatusFlags.All">
            
        </member>
        <member name="T:VideoOS.Platform.Live.VideoLiveSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.VideoLiveSource.#ctor(VideoOS.Platform.Item)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Live.VideoLiveSource.Init">
            <summary>
            Initialize the source
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.VideoLiveSource.Close">
            <summary>
            Close the source
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.VideoLiveSource.SuspendSettingsUpdate">
            <summary>
            Calling this method will suspend the change to any settings, until a ResumeSettingsUpdate has been called.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.VideoLiveSource.ResumeSettingsUpdate">
            <summary>
            Calling this method will allow the system to perform the peding settings changes done between calling the SuspendSettingUpdate and this method.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.VideoLiveSource.Height">
            <summary>
            The requested height of the images. You can set this field to retrieve images in a specific size. 
            
            Default is 0 and means that the images will be delivered in the size they have when received from the camera.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.VideoLiveSource.Width">
            <summary>
            The requested width of the images. You can set this field to retrieve images in a specific size. 
            
            Default is 0 and means that the images will be delivered in the size they have when received from the camera.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.VideoLiveSource.SetWidthHeight">
            <summary>
            Enforce the changed width and height properties.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.VideoLiveSource.FPS">
            <summary>
            Possible downscale of FPS
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.VideoLiveSource.KeyFramesOnly">
            <summary>
            Specify if the underlying decoding should only decode the key frames. Default is false -> all frames decoded.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.VideoLiveSource.KeepAspectRatio">
            <summary>
            Specify if aspect of the picture should be kept or not
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.VideoLiveSource.FillWithBlack">
            <summary>
            Specify if black bars to be inserted in the picture in order to achive desired aspect
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.VideoLiveSource.EnableMulticast">
            <summary>
            Specify whether multicast should be used if supported by and enabled on the server. Must be set before calling <see cref="M:VideoOS.Platform.Live.VideoLiveSource.Init"/> Default is false.<br/>
            Only supported in Smart Client and standalone.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.VideoLiveSource.SetKeepAspectRatio(System.Boolean,System.Boolean)">
            <summary>
            Instruct the Media Toolkit to keep the aspect ratio for the transcoded frames.<br/>
            This method <i>must</i> be called before the Init call.<br/>
            For this feature to work, remember to fill (and update) the Width and Height according to the actual display area being used.
            </summary>
            <param name="keepAspectRatio">true to keep same aspect ratio as the original frames have.</param>
            <param name="fillSpace">true to fill missing pixels with black to match the target width and height</param>
        </member>
        <member name="M:VideoOS.Platform.Live.VideoLiveSource.SetCropRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Define a cropping rectangle of what part of the image to pick out.<br/>
            The values are all between 0.0 up to 1.0 as a relative part of the original image.<br/>
            To crop out a lower right hand rectangle these values could apply:<br/>
            	SetCropRectangle( 0.5, 0.5, 0.25, 0.25 );
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="P:VideoOS.Platform.Live.VideoLiveSource.Compression">
            <summary>
            The compression of the JPEGs.  A value between 1..100.<br/>
            The default value is 75.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.VideoLiveSource.CustomData">
            <summary>
            Can be set to any value or class that is used by the application.
            The current value will be 'returned' in any subsequent JPEGData on next received frame.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.VideoLiveSource.AllowUpscaling">
            <summary>
            Gets or sets whether upscaling is allowed
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.VideoLiveSource.OnUpdateLiveStart">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.VideoLiveSource.HandleLiveDataContent(VideoOS.Platform.Live.LiveSourceContent)">
            <summary>
            
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:VideoOS.Platform.Live.VideoLiveSource.OnUpdateSettings">
            <summary>
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Live.JPEGLiveSource">
            <summary>
            This class is responsible for delivering live JPEG images from a camera.<br/>
            Only supported in Smart Client and standalone environments.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.JPEGLiveSource.#ctor(VideoOS.Platform.Item)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Live.JPEGLiveSource.ConnectLiveSource(System.String)">
            <summary>
            
            </summary>
            <param name="media"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Live.LiveSource">
            <summary>
            An abstract class to be used for implementation of a LiveSources.<br/>
            Within the MIP Environment there are currently these built-in implementations:<br/>
              JPEGLiveSource<br/>
              BitmapLiveSource<br/>
              RawLiveSource<br/>
            </summary>
            <remarks>
             Construct one of these classes with the Item as parameter, e.g. <code>JPEGLiveSource myJpeg = new JPEGLiveSource( cameraItem )</code>;
            </remarks>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSource.#ctor">
            <summary>
            Construct a LiveSource. The Item need to be initialized before the <see cref="M:VideoOS.Platform.Live.LiveSource.Init"/> call.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSource.#ctor(VideoOS.Platform.Item)">
            <summary>
            Construct a LiveSource based on the Item given as parameter.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSource.Init">
            <summary>
            See the specific LiveSource implementation for documentation.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSource.Close">
            <summary>
            See the specific LiveSource implementation for documentation.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSource.Item">
            <summary>
            See the specific LiveSource implementation for documentation.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Live.LiveSource.LiveContentEvent">
            <summary>
            This event is fired for every new live frame.<br/>
            The EventArgs passed on with this event is the <see cref="T:VideoOS.Platform.Live.LiveContentEventArgs"/> or <see cref="T:VideoOS.Platform.Live.LiveContentRawEventArgs"/> containing the frame and properties.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Live.LiveSource.LiveStatusEvent">
            <summary>
            This event is fired when new live status information is available.<br/>
            The EventArgs passed on with this event is the <see cref="T:VideoOS.Platform.Live.LiveStatusEventArgs" /> containing flag information about the current status of the camera connection.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSource.LiveModeStart">
            <summary>
            This flag controls the ongoing stream of live packages. When the user UI is shortly doing something else,
            this flag can be set to false, to avoid packages passing the network but not used.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSource.SingleFrameQueue">
            <summary>
            Defines if only ONE frame should be forwarded to the application at any given time.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSource.ProcessingNewFrame">
            <summary>
            Signal that an implementation has passed on a new frame to a client.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSource.ProcessNextFrame">
            <summary>
            Tells if the client is not ready to process the next frame when SingleFrameQueue is active.
            </summary>
            <returns><c>true</c> if the client is still processing the old frame</returns>
        </member>
        <member name="T:VideoOS.Platform.Live.BaseLiveContentEventArgs">
            <summary>
            The content of the eventArgs fired on the LiveContentEvent (base class for every one of them)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Live.BaseLiveContentEventArgs.Exception">
            <summary>
            Overshadowed by implementations in each subclass. Only kept here for backwards compatibility
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Live.LiveContentEventArgs">
            <summary>
            The content of the eventArgs fired on the LiveContentEvent
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Live.LiveContentEventArgs.LiveContent">
            <summary>
            See the specific LiveSource implementation for documentation.<br/>
            When exceptions has occurred, this field is null;
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Live.LiveContentEventArgs.Exception">
            <summary>
            If any errors have occurred internally or for the communication to a recording server, this field is filled with the exception.<br/>
            It is null, when no exception has occurred.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Live.LiveContentRawEventArgs">
            <summary>
            The content of the eventArgs fired on the LiveContentEvent
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Live.LiveContentRawEventArgs.LiveContent">
            <summary>
            When exceptions has occurred, this field is null;
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Live.LiveContentPcmEventArgs">
            <summary>
            The content of the eventArgs fired on the LiveContentEvent
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Live.LiveContentPcmEventArgs.LiveContent">
            <summary>
            When exceptions has occurred, this field is null;
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Live.LiveContentPcmEventArgs.Exception">
            <summary>
            If any errors have occurred internally or for the communication to a recording server, this field is filled with the exception.<br/>
            It is null, when no exception has occurred.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Live.LiveSourceContent">
            <summary>
            This class is used for receiving live content.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceContent.BeginTime">
            <summary>
            The time stamp for the beginning of the content.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceContent.EndTime">
            <summary>
            The time stamp for the end of the content.  This field is only relevant for audio data.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceContent.Content">
            <summary>
            Contains the requested content. <br/>
            Be aware that this can be of zero length in certain cases, and should simply be ignored in that instance.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceContent.Properties">
            <summary>
            Any additional properties containing information about the content.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceContent.HardwareDecodingStatus">
            <summary>
            Defines how the decoding of the current frame is performed.<br/>
            Values can be: <br/>
              'hardware' - Decoded by GPU <br/>
              'software' - Decoded by Intel Media SDK <br/>
              'fallback' - Decoded by Intel Media SDK, even though it was requested to be Hardware (or Auto) <br/>
              'ipp'      - Decoded by Intel UMC <br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceContent.Width">
            <summary>
            Get the width of the returned JPEG.  0 returned when width cannot be detected.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceContent.Height">
            <summary>
            Get the Height of the returned JPEG.  0 returned when height cannot be detected.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceContent.CroppingDefined">
            <summary>
            Is set to true if the returned content has been cropped 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceContent.CropX">
            <summary>
            When the CroppingDefined is true, this field contains the cropping definition.  The definition contains the same values as used on the SetCropping call.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceContent.CropY">
            <summary>
            When the CroppingDefined is true, this field contains the cropping definition.  The definition contains the same values as used on the SetCropping call.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceContent.CropWidth">
            <summary>
            When the CroppingDefined is true, this field contains the cropping definition.  The definition contains the same values as used on the SetCropping call.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceContent.CropHeight">
            <summary>
            When the CroppingDefined is true, this field contains the cropping definition.  The definition contains the same values as used on the SetCropping call.
            </summary>
            
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceContent.CustomData">
            <summary>
            Contains the CustomData set on the LiveSource (e.g. JPEGLiveSource).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceContent.Source">
            <summary>
            The source that delivered this frame to a client.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSourceContent.Dispose(System.Boolean)">
            <summary>
            This method does nothing and should never be called!
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSourceContent.Dispose">
            <summary>
            Releases resources and signals that the client is done using this frame.
            </summary>
            <remarks>This method is not thread-safe!</remarks>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSourceContent.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Live.LiveSourceStatus">
            <summary>
            Contains the LiveStatus information.  It is transmitted as XML in between live video stream
            and contains changes relating to a given camera.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSourceStatus.#ctor(System.String)">
            <summary>
            Construction is done internally
            </summary>
            <param name="liveStatus"></param>
        </member>
        <member name="P:VideoOS.Platform.Live.LiveSourceStatus.Keys">
            <summary>
            All the keys to status changes within this package
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Live.LiveSourceStatus.Value(System.Int32)">
            <summary>
            Get the value for a given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Messaging.ConnectionStateChangedEventArgs">
            <summary>
            Identifies the server wre the connection state has changed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ConnectionStateChangedEventArgs.ServerId">
            <summary>
            Identifies the server where connection has changed
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ConnectionStateChangedEventArgs.Uri">
            <summary>
            The Uri used for the connection
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ConnectionStateChangedEventArgs.ServiceType">
            <summary>
            The service type identification, when available.
            
            The Guid is the same as used in the ServiceRegistration classes.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.ConnectionStateChangedEventArgs.#ctor(VideoOS.Platform.ServerId,System.Uri,System.Guid)">
            <summary>
            </summary>
            <param name="serverId"></param>
            <param name="uri"></param>
            <param name="serviceType"></param>
        </member>
        <member name="T:VideoOS.Platform.Messaging.ConnectionStateChangedEventHandler">
            <summary>
            The handler called by the ConnectionStateChangedEvent
            </summary>
            <param name="sender"></param>
            <param name="connectionStateChangedEventArgs"></param>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MessageIdAndRelatedKindFilter">
            <summary>
            The MessageIdFilter will match on the provided MessageId and kind.<br/>
            Only messages send with a specific messageId and where the message.RelatedFQID matches the given kind will be passed through the filter.<br/>
            The matching string for the messageId may contain a '*' as the last character to allow for multiple matches, e.g. 'Control.PTZ*' will match almost all PTZ operations going on.<br/>
            This filter is especially useful for the <see cref="F:VideoOS.Platform.Messaging.MessageId.Server.ConfigurationChangedIndication"/> message.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.MessageIdAndRelatedKindFilter.#ctor(System.String,System.Guid)">
            <summary>
            The messageId and kind defines what to look for, last character of messageId can be a '*'.
            </summary>
            <param name="messageId"></param>
            <param name="kind"></param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.MessageIdAndRelatedKindFilter.Match(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            Checks if the given message text matches the messageId string specified on the constructor and the kind of the 
            RelatedFQID of the message matches the kind specified.
            Match on messageId is case sensitive.
            </summary>
            <param name="message"></param>
            <param name="destination"></param>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Messaging.CommunicationIdFilter">
            <summary>
            The CommunicationIdFilter is used to identify what messages to subscribe to, on another machine.<br/>
            It is used in the Messaging.MessageCommunication class.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.CommunicationIdFilter.Equals(System.Object)">
            <summary>
            Compares user fields
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Messaging.CommunicationIdFilter.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Messaging.CommunicationIdFilter.#ctor(System.String)">
            <summary>
            The messageId defines what to look for, first or last character can be a '*'.<br/>
            This constructor should NOT be used to receive messages of type <see cref="F:VideoOS.Platform.Messaging.MessageId.Server.NewEventsIndication"/>,
            as this will generate a lot of traffic from Event Server to your application. Use constructor with 2 or 3 parameters to filter more specific.
            </summary>
            <param name="messageId"></param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.CommunicationIdFilter.#ctor(System.String,System.String)">
            <summary>
            Construct a filter that will match the eventheader.Type and eventHeader.Message.<br/>
            Currently only supported for <see cref="F:VideoOS.Platform.Messaging.MessageId.Server.NewEventsIndication"/><br/>
            Built-in known types are defined in <see cref="T:VideoOS.Platform.Data.EventHeaderTypes"/>
            </summary>
            <param name="messageId"></param>
            <param name="eventHeaderType">Receive all events where the <see cref="P:VideoOS.Platform.Data.EventHeader.Type"/> is matching this value. </param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.CommunicationIdFilter.#ctor(System.String,System.String,System.String)">
            <summary>
            Construct a filter that will match the eventheader.Type and eventHeader.Message.<br/>
            Currently only supported for <see cref="F:VideoOS.Platform.Messaging.MessageId.Server.NewEventsIndication"/><br/>
            Built-in known types are defined in <see cref="T:VideoOS.Platform.Data.EventHeaderTypes"/>
            </summary>
            <param name="messageId"></param>
            <param name="eventHeaderType">Only receive events where the <see cref="P:VideoOS.Platform.Data.EventHeader.Type"/> is matching this value. </param>
            <param name="eventHeaderMessage">Defines what <see cref="P:VideoOS.Platform.Data.EventHeader.Message"/> to filter on. Only used when the <see cref="T:VideoOS.Platform.Data.EventHeaderTypes"/> is not null. This value can be blank or null to receive all events within the defined type in <see cref="T:VideoOS.Platform.Data.EventHeaderTypes"/>. A starting or ending characer of '*' means any </param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.CommunicationIdFilter.Match(VideoOS.Platform.Messaging.ExternalMessage,VideoOS.Platform.FQID,VideoOS.Platform.Messaging.EndPointType)">
            <summary>
            This method is used by the built-in filter mechanism, to ensure only registered messages are forwarded to relevant machine, e.g. filtering at the source machine.<br/>
            The EndPoint and EndPointType is used to validate if the source EndPoint ( machine ), matches the defined filter criteria.
            </summary>
            <param name="message"></param>
            <param name="endPoint"></param>
            <param name="endPointType"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Messaging.CommunicationIdFilter.MatchId(System.String)">
            <summary>
            This method is used by the built-in filter mechanism, to ensure only registered messages are forwarded to relevant machine, e.g. filtering at the source machine.
            </summary>
            <param name="messageId"></param>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.Messaging.CommunicationIdFilter.MessageId">
            <summary>
            The original messageId string without special start or ending (*)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.CommunicationIdFilter.StartWith">
            <summary>
            Does the filter have an asterix in the beginning of the text
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.CommunicationIdFilter.EndsWith">
            <summary>
            Does the filter have an asterix in the end of the text
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.CommunicationIdFilter.EventHeaderType">
            <summary>
            The type of the event header
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.CommunicationIdFilter.ToString">
            <summary>
            Make specific formatting
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Messaging.ExternalMessage">
            <summary>
            A ExternalMessage contains information send from a sender to one or multiple receivers.<br/>
            It is identified by a String, the well known messages created and send by 
            the MIP Environment are defined in class VideoOS.Platform.Messaging.MessageId.
            <br/>
            The fields may be filled out or not filled out depending on the MessageId.
            The MessageId is the identification of the message, a plugin can use any MessageId they choose for additional communication.
            <br/>
            The field Reason - is a string containing why this message has been send, could be the name of a rule, a black list, or simply a user action.<br/>
            The RelatedFQID is used for some Messages – see documentation for each MessageId.<br/>
            The Data field is simply an object relevant to the specific MessageId.
            </summary> 
        </member>
        <member name="M:VideoOS.Platform.Messaging.ExternalMessage.#ctor(System.String)">
            <summary>
            The Message contains a singe string as the ID.
            </summary>
            <param name="messageId">The ID</param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.ExternalMessage.#ctor(System.String,VideoOS.Platform.FQID)">
            <summary>
            The Message contains a single string as the ID. The message relates to the relatedFQID.
            </summary>
            <param name="messageId">The Id of the message</param>
            <param name="relatedFQID">FQID of a related Item to the Destination FQID</param>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ExternalMessage.ExtensionData">
            <summary>
            For use by SOAP, do not modify
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ExternalMessage.MessageId">
            <summary>
            The identification of the message begin sent.
            Built-in message id's are located in class Messaging.MessageId
            Plugin defined messages are suggested to be of a namespace format with the plugin type as the initial name.
            e.g. "MyPlugin.Info.PayAttention"
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ExternalMessage.RelatedFQID">
            <summary>
            The RelatedFQID identifies an Item that subject to an action/event, e.g. as a parameter.
            The destination FQID on the SendMessage is usually the one receiving the message and RelatedFQID.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ExternalMessage.Data">
            <summary>
            The data can be any object as defined by the MessageId.
            Built-in messages uses a name format for the Data field like the messageId appended with 'Data'.<br/>
            Notice that plug-in defined classes carried in the Data field MUST have the [Serialized] attribute defined, as the class
            is serialized with the DataContractSerialized class when transported from one machine to another.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ExternalMessage.Reason">
            <summary>
            The Reason is an informative field that can be used to display or trace additional reason for the Sending of this message.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ExternalMessage.SourceEndPoint">
            <summary>
            Filled by the MIP Environment during the Transmit handling, and identify the executing application.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ExternalMessage.SourceEndPointType">
            <summary>
            Filled by the MIP Environment during the Transmit handling, and identify the type of Communication EndPoint.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ExternalMessage.Source">
            <summary>
            Contains the original source parameter for a SendMessage/PostMessage call, and identify the individual Item (class) within the application, that 
            issued the call.<br/>
            This can be used by the receiver on another machine to send back responses directly to the original source, within the original source EndPoint.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ExternalMessage.Destination">
            <summary>
            Contains the Destination parameter from the SendMessage/PostMessage call, and identify the individual Item (class) within the Destination Endpoint application, that 
            should receive this message.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ExternalMessage.DataClass">
            <summary>
            Contains the full name of the serialized Data field. <br/>
            This field is filled and used by the MIP Environments.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ExternalMessage.DataClassContent">
            <summary>
            Contains the serialized content of the Data field.<br/>
            This field is filled and used by the Data property. <br/>
            When reading the Data property, this field is deserialized and the original class is returned. 
            Multiple accesses to the Data field will reuse the same instance of the de-serialized class.<br/>
            When writing to the Data field, the content is serialized and stored in this field.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.Internal.CommunicationClient">
            <summary>
            This class is handling the client end of the message communication. E.g. executing in the
            Smart Client as well as in the Event Server.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.Internal.CommunicationClient.Run">
            <summary>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.Internal.CommunicationClient.RefillMyRegisteredFilters">
            <summary>
            When server is out of registrations we need to do them again
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.Internal.CommunicationClient.MessageHandler(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            All messages are coming through here, and validated for a Match -- if any other application has registered to receive it.
            </summary>
            <param name="message"></param>
            <param name="dest"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Messaging.Internal.CommunicationClientOnServer">
            <summary>
            This is the Client, running inside the Event Server - for now: same code as the other clients.
            This class has been made as I expect we need to shortcut part of the communication or initialization at some point
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.Internal.CommunicationClientOnServer.Run">
            <summary>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.Internal.CommunicationClientOnServer.RefillMyRegisteredFilters">
            <summary>
            When server is out of registrations we need to do them again
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.Internal.CommunicationFilter">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.Internal.CommunicationFilter.ExtensionData">
            <summary/>
        </member>
        <member name="P:VideoOS.Platform.Messaging.Internal.CommunicationFilter.CommunicationIdFilter">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.Internal.CommunicationFilter.EndPoint">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.Internal.CommunicationFilter.EndPointType">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.Internal.CommunicationFilter.Id">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.Internal.CommunicationFilter.RequesterEndPoint">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.Internal.CommunicationFilter.NumberOfFilterHits">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MessageCommunication">
            <summary>
            Communication between EventServer and all other MIP Environments can be done via this class.<br/>
            Each starting application or service will have one EndPoint ( Unique for each execution ), and a EndPointType.<br/>
            The EventServer is defined as a EndPointType.Server and all other MIP Environments are in this context a EndPointType.Client.<br/>
            Any MIP plug-in can get a list of all currently executing MIP Environments and store their EndPointFQID for communication purpose. 
            For each EndPoint is is possible to get hold of the EndPointIdentityData class to identify the login user name for a given EndPoint.  
            See the WhoAreOnlineRequest and WhoAreOnlineResponse MessageId's for more on this.<br/>
            <br/>
            This class is created through the MessageCommunicationManager static class.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.MessageCommunication.ServerId">
            <summary>
            Provide the ServerId used during the Start operation.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.MessageCommunication.Uri">
            <summary>
            The Uri used for message communication
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.MessageCommunication.Dispose">
            <summary>
            Disposed internally
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.MessageCommunication.RegisterCommunicationFilter(VideoOS.Platform.MessageReceiver,VideoOS.Platform.Messaging.CommunicationIdFilter)">
            <summary>
            Register to receive specific messages, from any other machine.<br/>
            Please use this filter mechanism with care, as it can impact network traffic.
            
            Note: It can take 3-4 seconds before this registration takes effect!
            Use <see cref="M:VideoOS.Platform.Messaging.MessageCommunication.WaitForCommunicationFilterRegistration(VideoOS.Platform.Messaging.CommunicationIdFilter,System.TimeSpan)"/> if you need to ensure it's registered
            </summary>
            <param name="messageReceiver"></param>
            <param name="messageFilter"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Messaging.MessageCommunication.WaitForCommunicationFilterRegistration(VideoOS.Platform.Messaging.CommunicationIdFilter)">
            <summary>
            Waits for the communication filter to be registered on server. Use the overload with timeout if you wish to limit the wait.
            </summary>
            <param name="messageFilter">The communication filter</param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.MessageCommunication.WaitForCommunicationFilterRegistration(VideoOS.Platform.Messaging.CommunicationIdFilter,System.TimeSpan)">
            <summary>
            Waits for the communication filter to be registered on server
            Throws <see cref="T:System.TimeoutException"/> if the timeout is exceeded
            </summary>
            <param name="messageFilter">The communication filter</param>
            <param name="timeout">Maximum timeout to wait, pass <see cref="F:System.TimeSpan.Zero"/> for unlimited waiting</param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.MessageCommunication.RegisterCommunicationFilter(VideoOS.Platform.MessageReceiver,VideoOS.Platform.Messaging.CommunicationIdFilter,VideoOS.Platform.FQID,VideoOS.Platform.Messaging.EndPointType)">
            <summary>
            Register to receive specific messages, from the specified EndPoint and EndpointType.<br/>
            If the EndPoint is null, all EndPoints are requested to transmit the specific messages.<br/>
            The filter information is send to the EventServer, and again forwarded to relevant clients.  This will allow message
            filtering to be done at the source of the messages and keep network transmission to a minimum.<br/>
            Filters are stored in the EventServer in case of short network problems, and will be re-transmitted to 
            clients that are re-connecting within 60 seconds.  If a client is not connected for 60 seconds, all 
            filters issued on other machines to that machine will be deleted (Unregistered).
            
            Note: It can take 3-4 seconds before this registration takes effect!
            </summary>
            <param name="messageReceiver">The method to be called when a message matching the other parameters is received.</param>
            <param name="communicationIdFilter">The filter specifying the type of message to receive.</param>
            <param name="endPoint">A specific endpoint to receive messages from. If set to null messages from all endpoints will be received.</param>
            <param name="endPointType">A specific type of endpoint to receive messages from. If set to null (along with endPoint parameter) messages from all endpoints will be received.</param>
            <returns>An object to be used for UnRegistrationCommunicationFilter</returns>
        </member>
        <member name="M:VideoOS.Platform.Messaging.MessageCommunication.UnRegisterCommunicationFilter(System.Object)">
            <summary>
            To Unregister a previously registered filter.<br/>
            </summary>
            <param name="communicationFilterObject">The object returned from the RegisterCommunicationFilter method</param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.MessageCommunication.TransmitMessage(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            Transmit a message. When destinationEndPoint is null, the message will be sent to
            the EventServer itself for processing, where the receiving message filters will be used to determine who should receive the message.<br/>
            When the destinationEndPoint is filled, the message is first sent to the EventServer, that again will forward to 
            the specified endpoint - without any validation of the message filters.<br/>
            Use of the destinationEndPoint is a direct way for two clients to communicate with each other without any filters.<br/>
            If the destinationEndPoint is filled with an ObjectId of Guid.Empty the message is considered a broadcast, and will be transmitted
            to all clients currently logged in.
            </summary>
            <param name="message">The actual message to be transmitted.</param>
            <param name="destinationEndPoint">Identification of a specific client endpoint to receive the message. If null it will be sent to all.</param>
            <param name="destinationObject">Id of a specific object within the receiving application, that is to receive the message.</param>
            <param name="source">The id of the sender (or null if the recipients doesn't care).</param>
        </member>
        <member name="P:VideoOS.Platform.Messaging.MessageCommunication.IsConnected">
            <summary>
            Returns the status of the communication to the EventServer's Communication service.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Messaging.MessageCommunication.ConnectionStateChangedEvent">
            <summary>
            You can register on this event, if you need to know when the session to the Event Server is changing.<br/>
            When receiving the event call, check the IsConnected property for the actual state.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.MessageCommunication.ServerEndPointFQID">
            <summary>
            Get the FQID that identifies the EventServer instance 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.MessageCommunication.BroadcastEndPointFQID">
            <summary>
            Get the FQID that can be used for broadcasting a message to all clients.  
            Note: Please use with care!
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageCommunication.WhoAreOnlineRequest">
            <summary>
            This request can be send to the Event Server to ask who is connected right now.<br/>
            The response is coming in a message with id=WhoAreOnlineResponse.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageCommunication.WhoAreOnlineResponse">
            <summary>
            Contains a Collection of EndPointIdentityData for each connected user.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageCommunication.NewEndPointIndication">
            <summary>
            Send by the EventServer when new clients are logging on.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageCommunication.EndPointCloseIndication">
            <summary>
            Send by the EventServer when new clients are logging out.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageCommunication.EndPointTableChangedIndication">
            <summary>
            A client connection has been opened or closed.  The WhoAreOnlineRequest can be used to get a full list of online clients.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageCommunication.ProvideCurrentStateRequest">
             <summary>
             Used to get a the current state for Items.  The response is returned as another message - see <see cref="F:VideoOS.Platform.Messaging.MessageCommunication.ProvideCurrentStateResponse"/>.<br/>
             This message should be used as few times as possible, as the result can be very large.<br/>
            
            	Sample - as part of some initialization code
             <code>
             	MessageCommunicationManager.Start(EnvironmentManager.Instance.MasterSite.ServerId);
            		MessageCommunication _messageCommunication = MessageCommunicationManager.Get(EnvironmentManager.Instance.MasterSite.ServerId);
            
            		_object = _messageCommunication.RegisterCommunicationFilter(ProvideCurrentStateResponseHandler,
            					new VideoOS.Platform.Messaging.CommunicationIdFilter(MessageCommunication.ProvideCurrentStateResponse));
            		try {
             		_messageCommunication.TransmitMessage(
            				new VideoOS.Platform.Messaging.Message(MessageCommunication.ProvideCurrentStateRequest), null, null, null);				
            		} catch (MIPException ex)
            		{
            			EnvironmentManager.Instance.ExceptionDialog("Unable to get status", ex);
            		}
            	</code>
             
             For asking for a set of Items, fill the Message.Data field with an array of guids (as String), like
             <code>
             		_messageCommunication.TransmitMessage(
            				new VideoOS.Platform.Messaging.Message(MessageCommunication.ProvideCurrentStateRequest, new String[] {item.FQID.ObjectId.ToString()}), null, null, null);				
             </code>
             To get the status of one specific item.
             
             </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageCommunication.ProvideCurrentStateResponse">
            <summary>
            The Data field contains a Collection&lt;ItemState&gt; with all known Items in one flat Collection.<br/>
            
            Sample handler code:
            <code>
            <![CDATA[
            private object ProvideCurrentStateResponseHandler(VideoOS.Platform.Messaging.Message message, FQID dest, FQID source)
            {
            	if (InvokeRequired)
            	{	// If we are doing UI updates, we better switch to our thread
            		BeginInvoke(new MessageReceiver(ProvideCurrentStateResponseHandler), message, dest, source);
            	} else
            	{
            		Collection<ItemState> result = message.Data as Collection<ItemState>;
            		if (result != null)
            		{
            			foreach (ItemState itemState in result)
            			{
            				Do something with itemState
            			}
            		}
            	}
            	return null;
            }
            ]]>
            </code>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.ConnectionStateEventArgs">
            <summary>
            Is send on the ConnectionStateChangedEvent
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ConnectionStateEventArgs.IsConnected">
            <summary>
            True when the connection is established
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.ConnectionStateEventArgs.#ctor(System.Boolean)">
            <summary> </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.EndPointIdentityData">
            <summary>
            Contains the FQID and the username used for login at that EndPoint identified by the EndPointFQID.<br/>
            This class is used in conjunction with the WhoAreOnlineResponse and NewEndPointIndication messages.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.EndPointIdentityData.EndPointFQID">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.EndPointIdentityData.IdentityName">
            <summary> </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.ItemState">
            <summary>
            Defines the current state a given Item has. <br/>
            This class is used in conjunction with the ProvideCurrentStateResponse message.<br/>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ItemState.FQID">
            <summary>
            Identify the current state for an Item. Can be a server, a camera or any Item from a Plug-in that has support for status information.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ItemState.State">
            <summary>
            Can contain one of these values:<br/>
            	"Unknown" - Dont know what the state really is<br/>
            	"Enabled" - Enabled by Milestone Management Client/App. , but device state not yet determined<br/>
            	"Disabled" - Disabled by Milestone Management Client/App.<br/>
            	"Responding" - Device is responding and OK<br/>
            	"Server Responding" - Server is alive<br/>
            	"Not Responding" - Device is enabled, but not responding<br/>
            	"Server Not Responding" - Server is not reachable<br/>
            <br/>
            Other states that come from time to time, are not stored in the this field, but will be contained in the NewEventIndication message.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.EndPointType">
            <summary>
            Defines the possible EndPointType's available 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.EndPointType.Server">
            <summary>
            Identify the Event Server communication instance.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.EndPointType.Client">
            <summary>
            Identify all other MIP Environments than the Event Server, e.g. Smart Clients, .Net MIP Library, Administrators
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.EndPointType.Any">
            <summary>
            Used for listening to messages, where messages from any source is relevant.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MessageCommunicationManager">
            <summary>
            The MessageCommunicationManager holds MessageCommunication classes for each EventServer it has connection to.
            The EventServers are identified by the ServerId.Id of their owning Management Server.
            
            During development, you can enable tracing of this and related class by setting:
            
                EnvironmentManager.Instance.TraceMessageCommunication = true;
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.MessageCommunicationManager.EndPointType">
            <summary>
            Identifies what EndPointType this MIP Environment is.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.MessageCommunicationManager.EndPointFQID">
            <summary>
            Identifies the specific FQID identifying this application instance. If multiple Smart Clients or MIP .Net Library Environments are executing
            on the same machine, they all have unique FQIDs. A Smart Client closing down and started up again will have a new FQID - but a logout / login
            operation will keep the FQID the same.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.MessageCommunicationManager.Security">
            <summary>
            Defines what level of security this communication endpoint has. Default is Securitylevel.Normal.<br/>
            This property can be changed by plug-ins to either increase or decrease the current security level, and will
            impact what messages are being transmitted from executing MIP Environment to another Environment.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MessageCommunicationManager.SecurityLevel">
            <summary>
            Defines to what degree a communication endpoint (e.g. a Smart Client), will
            send messages to other applications and machines.<br/>
            	High = No messages are transmitted<br/>
                Normal = All messages are transmitted, but received messages with "*Command" endings will be filtered out.<br/>
            	Low = All messages are transmitted and received.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageCommunicationManager.SecurityLevel.High">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageCommunicationManager.SecurityLevel.Normal">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageCommunicationManager.SecurityLevel.Low">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.Messaging.MessageCommunicationManager.Start(VideoOS.Platform.ServerId)">
            <summary>
            Will start message communication for the server identified by the ServerId.
            </summary>
            <param name="serverId"></param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.MessageCommunicationManager.Stop(VideoOS.Platform.ServerId)">
            <summary>
            Stop the MessageCommunication client identified by a ServerId.
            Please note that multiple plug-ins can share same same clint, so this method should only be called 
            when entire application is understood to not use this client anymore.
            </summary>
            <param name="serverId"></param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.MessageCommunicationManager.Get(VideoOS.Platform.ServerId)">
            <summary>
            Get the MessageCommunication class that communicates with a specific server, identified by ServerId.
            The communication to that server must have been started via the Start(ServerId) method before calling this method.
            </summary>
            <param name="serverId"></param>
            <returns></returns>
        </member>
        <member name="E:VideoOS.Platform.Messaging.MessageCommunicationManager.ConnectionStateChangedEvent">
            <summary>
            You can register on this event, if you need to know when the session to the Event Server is changing.<br/>
            When receiving the event call, check the IsConnected property for the actual state.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.PlaybackControllerFilter">
            <summary>
            This class can be used to filter messages coming from playbackcontrollers.
            By using this filter, only messages from the defined playbackcontroller will be received.
            </summary>
            The default playback controller for floating windows can be retrieved via the WindowInformation property on the ViewItemUserControl.
        </member>
        <member name="M:VideoOS.Platform.Messaging.PlaybackControllerFilter.#ctor(System.String,VideoOS.Platform.FQID)">
            <summary>
            Construct for a specific playbackController. Null parameter can be used to identify the main window.
            The messageId defines what to look for, last character can be a '*'.
            </summary>
            <param name="messageId"></param>
            <param name="playbackControllerFQID"></param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.PlaybackControllerFilter.#ctor(System.String,VideoOS.Platform.Client.WindowInformation)">
            <summary>
            Construct for use by the default playbackcontroller for the window.
            The messageId defines what to look for, last character can be a '*'.
            </summary>
            <param name="messageId"></param>
            <param name="windowInformation"></param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.PlaybackControllerFilter.Match(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            Compares the message and the sender - to see if given message is relevant for a ViewItem places on the 
            window defined by the WindowInformation specified on the constructor.
            
            Used by ViewItem Smart Client plugins to only retrieve relevant playback commands
            </summary>
            <param name="message"></param>
            <param name="destination"></param>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Messaging.PlaybackControllerReceiverFilter">
            <summary>
            Used internally to match for receiver == playbackController
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.PlaybackControllerReceiverFilter.#ctor(System.String,VideoOS.Platform.FQID)">
            <summary>
            Construct for a specific playbackController. Null parameter can be used to identify the main window.
            The messageId defines what to look for, last character can be a '*'.
            </summary>
            <param name="messageId"></param>
            <param name="playbackControllerFQID"></param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.PlaybackControllerReceiverFilter.#ctor(System.String,VideoOS.Platform.Client.WindowInformation)">
            <summary>
            Construct for use by the default playbackcontroller for the window.
            The messageId defines what to look for, last character can be a '*'.
            </summary>
            <param name="messageId"></param>
            <param name="windowInformation"></param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.PlaybackControllerReceiverFilter.Match(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            Compares the message and the receiver (destination) - to see if given message is relevant for a PlaybackController.
            </summary>
            <param name="message"></param>
            <param name="destination"></param>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Messaging.WindowFilter">
            <summary>
            This class can be used to filter messages, so only relevant messages from a window is received.
            </summary>
            Use this when you listen for e.g. Mode change
        </member>
        <member name="M:VideoOS.Platform.Messaging.WindowFilter.#ctor(System.String,System.Guid)">
            <summary>
            Construct with the Id for the window. This property is defined on the WindowInformation class.
            The messageId defines what to look for, last character can be a '*'.
            </summary>
            <param name="messageId"></param>
            <param name="windowId"></param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.WindowFilter.#ctor(System.String,VideoOS.Platform.Client.WindowInformation)">
            <summary>
            Construct the filter based on the WindowInformation class, located on the ViewItemUserControl.
            The messageId defines what to look for, last character can be a '*'.
            </summary>
            <param name="messageId"></param>
            <param name="windowInformation"></param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.WindowFilter.Match(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            Check if a given set of parameters matches the construction criteria, e.g. relevant message from a given window.
            When sender is null, the sender comparizon is ignored (e.g. equal)
            </summary>
            <param name="message"></param>
            <param name="destination"></param>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Messaging.AnyFilter">
            <summary>
            This MessageFilter will match any messages.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.AnyFilter.Match(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            Will always return true.
            </summary>
            <param name="message"></param>
            <param name="destination"></param>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Messaging.KindFilter">
            <summary>
            The KindFilter can filter on Messages.  This class will match the message.RelatedFQID to the Guid parameter on the constructor and return true if there is a match.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.KindFilter.#ctor(System.Guid)">
            <summary>
            Constructs a filter for match on the RelatedFQID.Kind field.
            </summary>
            <param name="kind">The Kind to match up with</param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.KindFilter.Match(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            Performs the actual matching, for this class with the RelatedFQID.Kind
            </summary>
            <param name="message"></param>
            <param name="destination"></param>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Messaging.Message">
            <summary>
            A Message contains information send from a sender to one or multiple receivers.
            It is identified by a String, the well known messages created and send by 
            the MIP Environment are defined in class VideoOS.Platform.Messaging.MessageId.
            <br/>
            The fields may be filled out or not filled out depending on the MessageId.
            The MessageId is the identification of the message, a plugin can use any MessageId they choose of additional communication.
            <br/>
            The field Reason - is a string containing why this message has been send, could be the name of a rule, a black list, or simply a user action.
            The RelatedFQID is used for some Messages – see documentation for each MessageId.
            The Data field is simply an object relevant to the specific MessageId.
            </summary> 
        </member>
        <member name="M:VideoOS.Platform.Messaging.Message.#ctor(System.String)">
            <summary>
            The Message contains a singe string as the ID.
            </summary>
            <param name="messageId">The ID</param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.Message.#ctor(System.String,VideoOS.Platform.FQID)">
            <summary>
            The Message contains a single string as the ID. The message relates to the relatedFQID.
            </summary>
            <param name="messageId">The Id of the message</param>
            <param name="relatedFQID">FQID of a related Item to the Destination FQID</param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.Message.#ctor(System.String,System.Object)">
            <summary>
            The Message contains a singe string as the ID and a Data object. T
            </summary>
            <param name="messageId">The Id of the message</param>
            <param name="data">Can contain data to be send with the message, or 
            data where fields can be filled by receiver</param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.Message.#ctor(System.String,VideoOS.Platform.FQID,System.Object)">
            <summary>
            The Message contains a singe string as the ID.
            </summary>
            <param name="messageId">The Id of the message</param>
            <param name="relatedFQID">FQID of a related Item to the Destination FQID</param>
            <param name="data">Can contain data to be send with the message, or 
            data where fields can be filled by receiver</param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.Message.#ctor(System.String,VideoOS.Platform.FQID,System.Object,System.String)">
            <summary>
            The Message contains a singe string as the ID.
            </summary>
            <param name="messageId">The Id of the message</param>
            <param name="relatedFQID">FQID of a related Item to the Destination FQID</param>
            <param name="data">Can contain data to be send with the message, or 
            data where fields can be filled by receiver</param>
            <param name="reason">Explain why this message is being sent</param>
        </member>
        <member name="P:VideoOS.Platform.Messaging.Message.MessageId">
            <summary>
            The identification of the message begin sent.
            Built-in message id's are located in class Messaging.MessageId
            Plugin defined messages are suggested to be of a namespace format with the plugin type as the initial name.
            e.g. "MyPlugin.Info.PayAttention"
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.Message.RelatedFQID">
            <summary>
            The RelatedFQID identifies an Item that subject to an action/event, e.g. as a parameter.
            The destination FQID on the SendMessage is usually the one receiving the message and RelatedFQID.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.Message.Data">
            <summary>
            The data can be any object as defined by the MessageId.
            Built-in messages uses a name format for the Data field like the messageId appended with 'Data'
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.Message.Reason">
            <summary>
            The Reason is an informative field that can be used to display or trace additional reason for the Sending of this message.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.Message.ExternalMessageSourceEndPoint">
            <summary>
            If this message originated from another application, this FQID will identify the Source EndPoint's FQID.<br/>
            This can be used for the destinationEndPoint if you need to replay back in the MessageCommunication.Transmit method.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MessageFilter">
            <summary>
            This class is the base class for classes that can assist in filtering messages.<br/>
            The MessageIdFilter matches on the MessageId itself.<br/>
            The AnyFilter is an always-true filter – most useful for debugging.<br/>
            A plugin can create own filters as appropriate for matching and filtering on specific combination the available fields.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.MessageFilter.Match(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            Checks if the given message matches this filter.
            </summary>
            <param name="message"></param>
            <param name="destination"></param>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MessageIdFilter">
            <summary>
            The MessageIdFilter will match on the MessageId itself.<br/>
            Only messages send with a specific messageId will be passed through the filter.<br/>
            The matching string may contain a '*' as the last character to allow for multiple matches, e.g. 'Control.PTZ*' will match almost all PTZ operations going on.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.MessageIdFilter.#ctor(System.String)">
            <summary>
            The messageId defines what to look for, last character can be a '*'.
            </summary>
            <param name="messageId"></param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.MessageIdFilter.Match(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            Checks if the given message text matches the string specified on the constructor.
            Match is case sensitive.
            </summary>
            <param name="message"></param>
            <param name="destination"></param>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MessageIdListFilter">
            <summary>
            This class will match the messageId of a message with a list of messageId's, if a match exists for one of these, the message is passed through the filter.<br/>
            The '*' character cannot be used for this class.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.MessageIdListFilter.#ctor(System.String[])">
            <summary>
            Construct a message filter that filters on a list of id's
            </summary>
            <param name="messageIdList"></param>
        </member>
        <member name="M:VideoOS.Platform.Messaging.MessageIdListFilter.Match(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            Check if a given MessageId matches any of the messages in the list provided at construction.
            </summary>
            <param name="message"></param>
            <param name="destination"></param>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MessageId">
            <summary>
            The MessageId class contains the definitions of all the system defined messages.
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MessageId.System">
            <summary>
            This class is a collection of static strings used for messages relevant on a system level.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.System.ApplicationLoggedOnIndication">
            <summary>
            This message is send when the user has just logged on to a server.<br/>
            Try avoiding to use this message, and instead use the Init() method on the different plug-in classes.
             </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.System.ApplicationLoggedOffIndication">
            <summary>
            This message is send when the user has just logged off a server.<br/>
            Try avoiding to use this message, and instead use the Close() method on the different plug-in classes.
             </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.System.ApplicationExitIndication">
            <summary>
            This message has been deprecated.<br/>
            Use the <see cref="E:VideoOS.Platform.ClientControl.ApplicationCloseEvent"/> event instead.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.System.ModeChangedIndication">
            <summary>
            Is send when the Smart Client or the .Net Library MIP Environment has changed mode.  
            The Data field contains the new Mode, as well as the EnvironmentManager.Mode
            Note: Do not use this message in Smart Client plugins. Instead use ShownWorkSpace, WorkSpaceState and associated messages.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.System.ModeChangeCommand">
            <summary>
            Can be sent to the individual PlaybackController in the .Net Library MIP and Smart Client Environment
            when the application want to change mode for one PlaybackController and all related
            ImageViewerControl's. <br/>
            The destination field must contain the FQID of the PlaybackController that should handle the command.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.System.SystemConfigurationChangedIndication">
            <summary>
            This message is send when part of the Milestone configuration has changed in general.
            Please note that many of these message can be sent, and a plug-in should not re-load
            or re-check the entire Milestone configuration at every event.
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.System.LocalConfigurationChangedIndication">
            <summary>
            When running with the .Net library, this message is sent when the memory copy of the configuration has been updated.
            This can happen as a result of a late connection to a sub-site, or an update to one recorder.
            
            When MIP .Net Library has loaded configuration from a server, this message is fired with the RelatedFQID being the Management Server FQID.
            
            When MIP .Net Library has updated configuration after hardware has been moved, or hardware being renamed, this
            message is being fired with the Data field containing a "List&lt;FQID&gt;" to identify each of the items that has changes (e.g.
            cameras or metadata items)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.System.LoginTokenChangedIndication">
             <summary>
             When the main login token has changed a message with this Id is posted.  The LoginSettings event can also be used know when a token has changed.
             
             It should be noted, that each Management Server added to a system will have its own token, and will
             be re-newed at interval specified for each system. Be very careful when receiving this message to
             ensure that you use the one that is relevant for your current item.<br/>
             This can be done by checking that the LoginSettings.Id is the same as for the Management Server
             that owns the Item you are currently working with, e.g. the event handler for this message contains:
             <code>
                 LoginSettings ls = message.Data as LoginSettings;
                 FQID recorderServerFQID = _cameraFQID.GetParent();    
                 if (ls.Guid != recorderServerFQID.ParentId) // Parent to recorder is the Management Server
                    return null;
            
                 String token = ls.Token;
             </code>
             
             A related method for getting the token is using the TokenChangedEvent on the LoginSettings class.
             
             </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.System.ApplicationRefreshTreeViewCommand">
            <summary>
            This message can be send by a plug-in in the administrators when the plug-in has an updated list of items to show in the TreeView.<br/>
            This message should not be used during normal Add/Delete/Rename operations. The message will only work for the currently shown plug-in tree,
            and either the Data or the RelatedFQID.Kind of the message should match the Kind of the items that should be refreshed. 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.System.LicenseChangedIndication">
            <summary>
            When licenses has been activated, this event is send. You can afterwards call the GetLicense(pluginId) method to retrieve your licenses.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.System.LicenseAutomaticUpdateRequest">
            <summary>
            Can be sent by a MIP plug-in running in the Management Client or Management Administrator, to indicate that its license information has changed. <br/>
            The environment will then call the PluginLicenseRequest methods to get a new set of license requests. <br/>
            The information will be stored on the server and used during next automatic license activation - usually scheduled to be performed within a few minutes.<br/>
            
            Note: Supported from 2016.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.System.RemovableMasksLiftedChangedIndication">
            <summary>
            Indicates that the removable masks lifted stated has changed.
            
            Note: Supported from 2018.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MessageId.SmartClient">
            <summary>
            This class is a collection of static strings mostly for use when executing in the Smart Client<br/>
            The 4 playback message Id's can also be used for a ImageViewerControl running in the .Net Library.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SelectedCameraChangedIndication">
            <summary>
            Send when the user selects a new camera viewitem.
            RelatedFQID contains new ID
            
            Notice: from 2017R3 floating windows will also issue this command, the 'sender' field will contain the FQID of the window sending this command.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.GetSelectedCameraRequest">
            <summary>
            To request the current selected camera FQID.
            The returned object is the selected camera FQID, or null if none is selected.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.PlaybackCommand">
            <summary>
            Playback Commands can used to sent to the Playback control - just as if a user had set the time on the UI control.
            The Data field need to be filled with the PlaybackCommandData structure, where the Command contains one of the
            commands defined in PlayBackData class, and for the GoTo command the PlaybackCommandData.DateTime field need to be filled.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.PlaybackSkipModeCommand">
            <summary>
            Is used to instruct a PlaybackController what to do when end of a sequence (e.g. continues video) is reached on
            selected ImageViewerControl.  The Data field is filled with one of the modes in: PlaybackSkipModeData, e.g. 
            PlaybackSkipModeData.Skip, PlaybackSkipModeData.NoSkip,  PlaybackSkipModeData.StopAtSequenceEnd.
            
            The destination for the SendMessage must be the identification of the PlaybackController that should act on the command.
            This can be either null, for the built-in default playback controller, or the FQID returned from the creation of 
            a playback controller ClientControl.Instance.GeneratePlaybackController().
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.GetCurrentPlaybackTimeRequest">
            <summary>
            This request can be send by a plug-in executing in the Smart Client and the .Net Library to retrieve the current time of the playback.<br/>
            the result is a DateTime.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.PlaybackIndication">
            <summary>
            When the PlaybackController has received a command to change speed, mode, direction etc - this message will be send with the Data
            field containing the PlaybackCommandData content.<br/>
            This can be used to synchronize other kind of data and text with the video being shown.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.PlaybackCurrentTimeIndication">
            <summary>
            The PlaybackCurrentTimeIndication can be used to retrieve display time when the playback UserControl, either because of user action or running playback.<br/>
            If running normal speed playback, this message will be retrieved very often, e.g. 25 times a second.<br/>
            The actual DateTime will be stored in the Message.Data field.<br/>
            This message can be used to synchronize other kind of data and text with the video being shown.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.PlaybackTimeInformation">
            <summary>
            This command is used to inform the PlaybackController at what time there is data from a specific Item.<br/>
            The Data field must contain the PlaybackTimeInformationData class with relevant content.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ClearIndicatorCommand">
            <summary>
            Clear the motion and event indicators on the top bar of the ImageViewerControl.<br/>
            The Data field need to contains one of the ClearIndicatorCommandData strings to instruct what to clear. 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ApplicationControlCommand">
            <summary>
            A set of commands to control how the Smart Client application panels looks.
            The Data field should contain one of the commands defined in ApplicationControlCommandData.
            The commands are the same as can be issued by the Smart Client user when is clicking or double clicking at specific places.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ChangeModeCommand">
            <summary>
            Instruct the Smart Client to change mode.  The Data field should contain the new Mode.<br/>
            Relevant values for the Smart Client are: ClientSetup, ClientLive and ClientPlayback
            
            Note: Do not use this message in Smart Client plugins. Instead use ShownWorkSpace, WorkSpaceState and associated messages.<br/>
            Note: For changing mode on a PlaybackController - see the System.ModeChangeCommand message
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ShowWorkSpaceCommand">
            <summary>
            Instruct the Smart Client show a workspace. RelatedFQID contains the id of the work space to show.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ChangeWorkSpaceStateCommand">
            <summary>
            Instruct the Smart Client to change the current workspace state. The Data field should contain the new workspace state.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ChangeThemeCommand">
            <summary>
            Instruct the Smart Client to change the current theme. The Data field should contain the new theme.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ViewItemControlCommand">
            <summary>
            A command that can instruct the Smart Client to minimize and maximize a ViewItem, as well as tick the digital zoom check mark on or off.<br/>
            The Data field should contain one of the commands defined in ViewItemControlCommandData.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.MultiWindowCommand">
            <summary>
            Contain a set of commands to control windows, views and screens for the Smart Client. <br/>
            By this command you can select views, open and close floating windows and more.<br/>
            The Data field must contain the MultiWindowCommandData structure filled with relevant fields.
            The MultiWindowCommandData field must contains one of the command contained in the MultiWindowCommand class, e.g. same namespace as 
            this command!<br/>
            What fields is used for each command is documented for each command.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ViewGroupModifiedIndication">
            <summary>
            This message is send by the Smart Client when a view group has been modified.  The Data field is null.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SelectedViewChangedIndication">
            <summary>
            Send by the Smart Client when a view has changed. The Data field contains the ViewAndLayoutItem for the new view, or null when a floating or secondary 
            window is being closed.
            The sender FQID contains the id for the window, e.g. null or ObjectId == Kind.Window for main window, otherwise a specific FQID.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ViewGroupsLoadedIndication">
            <summary>
            This message is sent by the Smart Client when all view groups has been loaded.  Use the ClientControl.Instance.GetViewGroupItems() or
            ClientControl.Instance.GetSmartWallItems() to access the view groups.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.WindowStateChangedIndication">
            <summary>
            Send when a window has changed state, the sender FQID identifies the window being changed,
            where main window is null.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ShownWorkSpaceChangedIndication">
            <summary>
            Is send when the Smart Client changed the shown workspace.
            The Data field contains the item for the new workspace.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.WorkSpaceStateChangedIndication">
            <summary>
            Is send when the Smart Client workspace state has changed.
            The Data field contains the new WorkSpaceState.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ThemeChangedIndication">
            <summary>
            Is send when the Smart Client theme has changed.
            The Data field contains the new theme.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SetCameraInViewCommand">
            <summary>
            This command requires the SetCameraInViewCommandData to be filled and assigned in the Data field.
            </summary>
            <remarks>
            The Data contains a camera FQID and the index it should be inserted in. The index is numbered from zero to the max number of view items. 
            The top left viewitem is index zero for all built-in view layouts, but can be different for plug-in developed view layouts.<br/>
            The SendMessage() method or PostMessage() method will pass on this command to the window 
            identified by the destination FQID. The window FQID can come from the MultiWindowCommand.OpenFloatingWindow
            or found through ItemPicker dialog or some search method.<br/>
            The modification is NOT saved permanently.
            Note that you can send this command with CameraFQID = null to remove the current camera.
            </remarks>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SmartClientMessageCommand">
            <summary>
            Identifies that a message is to be displayed to the operator. Currently the message is displayed 
            in the message bar located at the top of the main Smart Client window. The message is configured 
            by filling out a F object that is added to the Data field of the message 
            command. The Message can be updated by successive message commands with a SmartClientMessageData 
            containing the same messageId.<br/>
            Use the properties of SmartClientMessageData to control the appearance of the message. E.g. display 
            a button or a progress bar as part of the messages, or control whether the user can close the 
            message or not.<br/>
            Set up message listeners on SmartClientMessageButtonClickedIndication and 
            SmartClientMessageRemovedIndication to get notifications about when the user clicks the message 
            button or the message is removed respectively.<br/>
            The Data field needs to be filled with the SmartClientMessageData class. Setting the 
            SmartClientMessageData.Message to string.Empty will remove the message.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SmartClientMessageButtonClickedIndication">
            <summary>
            This message is sent within the SmartClient when a message button is clicked by the user.
            The Data field contains the MessageId of the relevant job message.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SmartClientMessageRemovedIndication">
            <summary>
            This message is sent within the SmartClient when a message created by a plugin is removed from the UI.
            The Data field contains the MessageId of the relevant job message.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SmartClientTimeZoneChangedIndication">
            <summary>
            This message is sent within the SmartClient when the ClientControl.SelectedTimeZone has changed.<br/>
            The plugin should display all date/time information in the selected time zone.<br/>
            The Data field contains the new TimeZoneInfo.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SetSelectedViewItemCommand">
            <summary>
            Set a specific ViewItem as selected within current Window.<br/>
            The SetSelectedViewItemData needs to be filled and assigned to the Data field of the message.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SelectedViewItemChangedIndication">
            <summary>
            Is send by the Smart Client when the operator selects any ViewItem.  The RelatedFQID identifies the 
            selected ViewItem, and can be used to match up with the ViewAndLayoutItem (and children) send out by
            the SelectedViewChangedIndication.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.TalkToSpeakerCommand">
            <summary>
            To open the PC microphone for audio going from PC to speaker attached to selected camera.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SelectSpeakerCommand">
            <summary>
            Sets the selected speaker in the Smart Client's side panel to RelatedFQID passed with this message.<br/>
            Note: Only works in the Smart Client.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SelectMicrophoneCommand">
            <summary>
            Sets the selected microphone in the Smart Client's side panel to RelatedFQID passed with this message.<br/>
            Note: Only works in the Smart Client.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ReloadConfigurationCommand">
            <summary>
            This message will reload the entire configuration from all sites and all views from the server.
            This message takes time, please use with care.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ShowCamerasInFloatingWindowCommand">
            <summary>
            Creates a new floating window with a set of cameras.<br/>
            The Data field needs to be filled with the ShowCamerasInFloatingWindowData class.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.WorkSpaceReadyIndication">
            <summary>
            This indication is fired after the ApplicationLoggedOnIndication, as an indication that the
            workspaces has been created in the Smart Client, and all workspace commands can be used.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.GetTimelineSelectedIntervalRequest">
            <summary>
            This request can be send by a plug-in executing in the Smart Client to retrieve the current selected interval of the timeline.<br/>
            The destination should be null for the main window timeline and otherwise the FQID of the playback controller for any other window.<br/>
            The result is a <see cref="T:VideoOS.Platform.Util.TimeInterval"/> or <see cref="F:VideoOS.Platform.Util.TimeInterval.Zero"/> if no selection is available.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.PtzCommandOccurredIndication">
            <summary>
            Send when the operator moves a camera.  The RelatedFQID contains the camera's FQID.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.RefreshTimelineRequest">
            <summary>
            Instruct the Smart Client to refresh the time in relation to the device in RelatedFQID.  The Data field is not used for this message.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SmartMapGoToPositionCommand">
            <summary>
            Instruct the Smart Map to go to a specific coordinate.<br/>
            The Data field needs to be filled with an instance of the <see cref="T:VideoOS.Platform.Messaging.SmartMapGoToPositionCommandData"/> class.<br/>
            Destination parameter of SendMessage/PostMessage is ignored. Destination instance is specified in the data object.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SmartMapGoToAreaCommand">
            <summary>
            Instruct the Smart Map to go to a specific area.
            The Data field needs to be filled with an instance of the <see cref="T:VideoOS.Platform.Messaging.SmartMapGoToAreaCommandData"/> class.<br/>
            Destination parameter of SendMessage/PostMessage is ignored. Destination instance is specified in the data object.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SmartMapGoToLocationCommand">
            <summary>
            Instruct the Smart Map to go to a specific location.
            The Data field needs to be filled with an instance of the <see cref="T:VideoOS.Platform.Messaging.SmartMapGoToLocationCommandData"/> class.<br/>
            Destination parameter of SendMessage/PostMessage is ignored. Destination instance is specified in the data object.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SmartMapSelectItemCommand">
            <summary>
            Instruct the Smart Map to go to and select an item. Currently, it only supports Camera item
            The Data field needs to be filled with an instance of the <see cref="T:VideoOS.Platform.Messaging.SmartMapSelectItemCommandData"/> class.<br/>
            Destination parameter of SendMessage/PostMessage is ignored. Destination instance is specified in the data object.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SmartMapGetPositionRequest">
            <summary>
            Request the currently shown position from the Smart Map.<br/>
            The Data field needs to be filled with an instance of the <see cref="T:VideoOS.Platform.Messaging.SmartMapGetPositionRequestData"/> class.<br/>
            The response will be an instance of the <see cref="T:VideoOS.Platform.Messaging.SmartMapPositionData"/> class.<br/>
            Destination parameter of SendMessage/PostMessage is ignored. Destination instance is specified in the data object.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SmartMapPositionChangedIndication">
            <summary>
            This message is sent by Smart Client when a Smart Map position is changed in Smart Client, for instance, when there is panning or zooming action on the map.
            The Data field needs to be filled with an instance of the <see cref="T:VideoOS.Platform.Messaging.SmartMapPositionData"/> class.<br/>
            Destination parameter of SendMessage/PostMessage is ignored. Destination instance is specified in the data object.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.GetCurrentWorkspaceRequest">
            <summary>
            Request the currently shown workspace for the window specified in the destination parameter.<br/>
            The Destination parameter of SendMessage is used to identify from which window to get the result. Default (or null) means main window.<br/>
            The response will be the item representing the workspace.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ToastShowCommand">
            <summary>
            Requests that a toast message is displayed by the Smart Client. A toast message is a non-intrusive message that is displayed in the lower right
            corner of the screen. The toast message is configured by filling a specific specialization of <see cref="T:VideoOS.Platform.Messaging.SmartClientToastData"/> and add it to the
            data field of the message command. The toast message can be updated by successive <see cref="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ToastShowCommand"/> messages with a <see cref="T:VideoOS.Platform.Messaging.SmartClientToastData"/>
            containing the same id, or removed completely using the <see cref="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ToastHideCommand"/> message.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ToastHideCommand">
            <summary>
            Requests that a toast message currently displayed by the Smart Client is removed. The id of the toast message that should be removed is set on the
            data field of the message command.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MessageId.Server">
            <summary>
            This class is a collection of static strings for server communications. The event and alarm messages will be sent to the EventServer and others represent communication to the logon server.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.NewEventCommand">
            <summary>
            Plug-ins sends a Message with this message id to inform the Event Server of a new event.
            If this is sent in the Smart Client or when running with the .Net Library, it will
            be transfered to the event server over a SOAP protocol.
            The EventServer will process the message for possible storage in the alarm database if it 
            finds a match in one of the alarm definition.<br/>
            The Data field of the message can contain either an EventData or an AnalyticsEvent class.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.NewEventsCommand">
            <summary>
            Should only be used in Event Server.
            Plug-ins sends a Message with this message id to inform the Event Server of mulitple new events.
            The EventServer will process the events contained in the message for possible storage in the alarm database if it 
            finds a match in one of the alarm definition.<br/>
            The Data field of the message should contain an IEnumerable containing object of either the EventData or the AnalyticsEvent class.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.NewAlarmCommand">
            <summary>
            Plug-ins can send this message with an Alarm class in the Data field, to have the EventServer
            store the Alarm into the database. <br/>
            The Alarm will be stored unaltered except for these fields:<br/>
            - State will be set to "New"<br/>
            <br/>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.NewEventIndication">
            <summary>
            This message Id is SEND by the Event server, to inform others that a new event has occurred.<br/>
            Plug-in's running in the event server will be able to retrieve this message using the RegisterReceiver method.
            For receiving this message in other Environments than the event server, use the MessageCommunication classes.
            </summary>
            <remarks>Only register to listen for either: NewEventIndication or NewEventsIndication<br/>
            If a receiver listen for the NewEventIndication, the MIP Environment will split the NewEventsIndication into 
            seperate messages - in order to be backwards compatible.
            </remarks>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.NewEventsIndication">
            <summary>
            This message Id is SEND by the Event server, to inform others that one or more new events has occurred.<br/>
            Plug-in's running in the event server will be able to retrieve this message using the RegisterReceiver method.
            For receiving this message in other Environments than the event server, use the MessageCommunication classes.
            </summary>
            <remarks>Only register to listen for either: NewEventIndication or NewEventsIndication<br/>
            If a receiver listen for the NewEventIndication, the MIP Environment will split the NewEventsIndication into 
            seperate messages - in order to be backwards compatible.
            </remarks>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.NewAlarmIndication">
            <summary>
            This message Id is SEND by the Event server, to inform others that a new alarm has occurred.
            
            When running in other Environments, the MessageCommunication classes can be used to retrieve
            the NewAlarmIndication from the Event Server.
            
            Note: In the Smart Client, changes to an Alarm will <i>also</i> use the NewAlarmIndication to send
            out the changes in an AlarmLine class.  You will need to try to cast the Message.Data to both 
            the Alarm and the AlarmLine to identify which one it is.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.ConfigurationChangedIndication">
            <summary>
            This message is being sent by the Environment to indicate that some part of
            a plug-in configuration has changed.<br/>
            The Message.RelatedFQID defines the top most Item that has changed.  If the specific Item is not known
            only the Kind is filled with relevant content.<br/>
            You may use this information to reload from this Item and all it's children.<br/>
            The EventServer will use this information to reload a plug-ins Items and refresh relevant Maps.<br/>
            <br/>
            Please note that video management server configuration changes are being notified by the similar
            message under the System namespace (System.SystemConfigurationChangedIndication).<br/>
            This feature requires the EnvironmentManager.Instance.EnableConfigurationChangedService = true; 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.RecorderFQIDChangedIndication">
            <summary>
            This message ID is used when a failover has occurred in a Corporate system. The Message.RelatedFQID
            defines the recorder that has an updated address (WebServerUri).
            Note: This message is enabled by the VideoOS.Platform.SDK.Environment.Login() method is called.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.ChangedAlarmIndication">
            <summary>
            This message is send within the Event Server environment, when one or many alarms has been changed.
            The Message.Data field contains a ChangedAlarmData class.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.ChangedAlarmHistoryIndication">
            <summary>
            This message is send within the Event Server environment, when one or more alarm histories has been updated.
            The Message.Data field contains a ChangedAlarmHistoriesData class.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.NewEventAsAlarmHandlerCommand">
            <summary>
            Deprecated - see Server.NewAlarmCommand
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.NewAlertAsAlarmHandlerCommand">
            <summary>
            Deprecated - see Server.NewEventCommand
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.NewAlarmAsEventCommand">
            <summary>
            Deprecated - see Server.NewEventCommand
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.EventCommand">
            <summary>
            Deprecated - see Server.NewEventCommand
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.GetIPAddressRequest">
            <summary>
            To request IP address for a given camera.  The Related FQID is the camera you need information about.
            The returned object is a string with the IP address.
            </summary>
            Note: This only works in the EventServer from MIP v4 (EventServer 3.1a)<br/>
            Note: From 2016 can be used everywhere. When transmissted on the MessageCommunication the Event Server will respond with a 
            GetIPAddressResponse message where the Data contains the cameras IP address.
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.GetIPAddressResponse">
            <summary>
            The response to the GetIPAddressRequest, when transmitted on the MessageCommunication to the event server.
            
            The Data field of the response contains result as a string like "http://1.2.3.4" or "http://1.2.3.4:5555".
            
            Note: Can only identify address of cameras, all other items will respond with null or blank.
            
            (Supported from 2016)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.NewAlarmUpdatedIndication">
            <summary>
            This message is send within the Event Server environment, when one or more alarm updates (activities) has been added to an alarm.
            The Message.Data field contains a NewAlarmUpdateData class.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.DisabledMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.EnabledMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.NotRespondingMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.RespondingMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.MotionDetectedMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.MotionEndMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.ExternalEventMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.OutputActivatedMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.OutputDeactivatedMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.RunningOutOfDiskSpaceMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.ArchiveFailureMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.ArchiveMoveFailureMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.ServerNotRespondingMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.ServerRespondingMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.DatabaseBeingRepairedMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.ArchiveFailureDiskUnavailableMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.ArchiveDiskAvailableMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.SettingsChangedMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.SettingsChangedErrorMessage">
            <summary>
            Can appear in the NewEventIndication message
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.GetMapRequest">
            <summary>
            This request can be used in the Smart Client to get a list of child maps.
            
            The Message.Data is filled with a MapRequestData containing a serverId and the id of the current map to get child maps for. 
            Use ID = "" for the top map.
            
            The result will be send in a new message with id GetMapResponse.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.GetMapResponse">
            <summary>
            Is sent as a result of a GetMapRequest.  The message.Data field contains a MapResponseData class.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.GetAnalyticsMessagesRequest">
            <summary>
            Is used to get a list of all configured Analytics messages.
            
            The request is serviced by the Event Server, so event server plugin can use "SendMessage" while 
            support from other environments will need to use MessageCommunication.
            
            Please register the message: GetAnalyticsMessagesRequest for the returning response.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.GetAnalyticsMessagesResponse">
            <summary>
            Contains a response to the GetAnalyticsMessagesRequest message.
            
            The message.Data field contains an array of AnalyticsMessageData
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Server.MipItemPositionChangedIndication">
            <summary>
            This message ID is used when the PositioningInformation property of a MIP plugin item has changed.
            
            The <see cref="P:VideoOS.Platform.Messaging.Message.RelatedFQID"/> property of the message will contain the ID of the item that has moved and the <see cref="P:VideoOS.Platform.Messaging.Message.Data"/> property will contain the new <see cref="T:VideoOS.Platform.PositioningInformation"/> value. 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MessageId.LPR">
            <summary>
            This class is a collection of static strings for subscribing to LPR match lists related events.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.LPR.AddLicensePlateListIndication">
            <summary>
            Is sent when a license plate list is added
            
            The <see cref="P:VideoOS.Platform.Messaging.Message.Data"/> property will contain Tuple&lt;Guid, string&gt; (listId, name) value. 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.LPR.RenameLicensePlateListIndication">
            <summary>
            Is sent when a license plate list is renamed, or its properties are changed (triggered events, custom fields)
            
            The <see cref="P:VideoOS.Platform.Messaging.Message.Data"/> property will contain Tuple&lt;Guid, string&gt; (listId, name) value. 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.LPR.DeleteLicensePlateListIndication">
            <summary>
            Is sent when one or more license plate lists are deleted
            
            The <see cref="P:VideoOS.Platform.Messaging.Message.Data"/> property will contain Guid[] with deleted ids. 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.LPR.AddLicensePlatesIndication">
             <summary>
             Is sent when license plates are added or modified in the list
            
             The <see cref="P:VideoOS.Platform.Messaging.Message.Data"/> property will contain Tuple&lt;Guid, string[]&gt; (list id, affected registration numbers). 
             </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.LPR.DeleteLicensePlatesIndication">
             <summary>
             Is sent when license plates are deleted from the list
            
             The <see cref="P:VideoOS.Platform.Messaging.Message.Data"/> property will contain Tuple&lt;Guid, string[]&gt; (list id, deleted registration numbers). 
             </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.LPR.ClearLicensePlatesIndication">
            <summary>
            Is sent when all license plates are cleared from the list
            
            The <see cref="P:VideoOS.Platform.Messaging.Message.Data"/> property will contain Guid - the id of the list.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MessageId.Control">
            <summary>
            This class is a collection of static strings for controlling camera or triggering events.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.TriggerCommand">
            <summary>
            Send this message to trigger a specific action on an Item.<br/>
            Built-in actions supports: Outputs, Presets, Matrix and User-defined events.
            </summary>
            <remarks>
            The Message.RelatedFQID defines the Item to work with (e.g. the parameter). <br/>
            The PostMessage or SendMessage method will send the message to the destination FQID that is the point to perform the action.
            
            To trigger a User-Defined event with camaraFqid as parameter (Parameter only works with Corporate):
            <code>
                Message message = new Message(MessageId.Control.TriggerCommand, cameraFqid);
                EnvironmentManager.Instance.PostMessage(message, eventFqid);        
            </code>
            
            From 2017 R2 the message.Data field can also be filled with a List&lt;FQID&gt; to provide a list of items to be used 
            as parameters.  This is useful when defining a rule that uses multiple device ids as parameter to the rule.
            
            Note: The Management Client does not support triggering with camera FQID as paremeter(s).
            
            To trigger preset:
            <code>
                Message message = new Message(MessageId.Control.TriggerCommand);
                EnvironmentManager.Instance.PostMessage(message, presetFqid);        
            </code>
            
            Plug-ins executing in the Event Server Environment that has MAP support and context-menu actions, needs to Register a MessageReceiver
            for this message, as context menu actions will be send back from the Smart Client MAP to the EventServer plugin as 
            a TriggerCommand message. See the SensorMonitor (former AccessControl) sample for more.
            </remarks>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.StartRecordingCommand">
            <summary>
            Send this command to start recording on a specific camera.  Make sure to also send the StopRecording message at a later point.
            The Destination FQID is identifying the camera.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.StopRecordingCommand">
            <summary>
            Send this command to stop recording on a specific camera.  
            The Destination FQID is identifying the camera.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.PTZMoveCommand">
            <summary>
            The PTZMoveCommand will instruct a camera to perform one of the commands
            defined in the PTZMoveCommandData class.  <br/>
            The Data field must be filled with a PTZMoveCommandData structure.<br/>
            The Destination FQID is identifying the camera the command should be performed on.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.PTZCenterCommand">
            <summary>
            Instructs the camera to center and zoom based on a defined rectangle and zoom factor.<br/>
            The Data field must be filled with a PTZCenterCommandData structure.<br/>
            The Destination FQID is identifying the camera.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.PTZRectangleCommand">
            <summary>
            Send a PTZRectangleCommand to a camera. The Data field is a filled PTZRectangleCommandData structure. Destination contains camera FQID.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.PTZAUXCommand">
            <summary>
            Control one AUX device on a camera/video server. The Data field is a filled PTZAUXCommandData structure. Destination contains camera FQID.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.PTZMoveAbsoluteCommand">
            <summary>
            Instruct a camera to move to a specific position. Data needs to be set to a filled PTZMoveAbsoluteCommandData structure. Destination contains camera FQID.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.PTZMoveStartCommand">
            <summary>
            Instruct the camera to start moving in a specific direction. Data needs to be set to a filled PTZMoveStartCommandData  or PTZMoveStartCommandData2 structure. Destination contains camera FQID.<br/> 
            Use the PTZMoveStopCommand to stop it again. 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.PTZMoveStopCommand">
            <summary>
            This command will stop the movement issued by the PTZMoveStartCommand.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.PTZGetAbsoluteRequest">
            <summary>
            Get the current absolute position of the camera.  Result is returned in a PTZGetAbsoluteRequestData structure. Destination contains camera FQID.
            </summary>
            <example>
            Sample of how to get the absolute position for camera identified by _camera:
            <code>
            <![CDATA[
            Message msg = new Message(MessageId.Control.PTZGetAbsoluteRequest);
            Collection<object> result = EnvironmentManager.Instance.SendMessage(msg, _camera.FQID);
            if (result != null && result.Count > 0)
            {
                PTZGetAbsoluteRequestData data = (PTZGetAbsoluteRequestData)result[0];
                Trace.WriteLine("P="+data.Pan+", T="+data.Tilt+", Z="+data.Zoom);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.LensCommand">
            <summary>
            Used to instruct a camera to change some lens settings.<br/>  Destination contains camera FQID.<br/>
            Please note that actual support is limited by what the specific camera can support and when Milestone have implemented in the drivers.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.OutputActivate">
            <summary>
            Send this message to an output Item, and the output is activated.
            </summary>
            <remarks>Only supported for Corporate and Expert systems</remarks>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.OutputDeactivate">
            <summary>
            Send this message to an output Item, and the output is deactivated.
            </summary>
            <remarks>Only supported for Corporate and Expert systems</remarks>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.RecorderErrorIndication">
            <summary>
            Is send by MIP SDK .Net component when a protocol error has happened on the RecorderServerCommand SOAP interface.
            The Data field contains details of the error.  Can be used to understand if trigger commands and 
            PTZ commands was rejected by the server.
            
            The sender FQID identifies the camera or output the command was intended for.
            
            New from MIPSDK 2016.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.VideoWallPresetActivateCommand">
            <summary>
            Send this command to control what is displayed on a Video Wall monitor, by activating the Video Wall Preset.
            
            The Data is not used.<br/>
            The Destination FQID needs to be the MonitorPresetFQID to be activated.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.VideoWallShowTextCommand">
            <summary>
            Send this command to control what is displayed on a Video Wall monitor, by displaying a text string on a given position.
            
            The Data field must contain the <see cref="T:VideoOS.Platform.Messaging.VideoWallShowTextCommandData"/> class with instruction of what to change.<br/>
            The Destination FQID needs to be the MonitorFQID to handle the command.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.VideoWallSetLayoutCommand">
            <summary>
            Send this command to control the layout used on a Video Wall monitor.
            
            The Data field must contain the <see cref="T:VideoOS.Platform.Messaging.VideoWallSetLayoutCommandData"/> class with instruction of what to change.<br/>
            The Destination FQID needs to be the MonitorFQID to handle the command.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.VideoWallSetLayoutAndCamerasCommand">
            <summary>
            Send this command to control what is displayed on a Video Wall monitor, the layout to be applyed, and set specific devices on the monitor.
            
            The Data field must contain the <see cref="T:VideoOS.Platform.Messaging.VideoWallSetLayoutAndCamerasCommandData"/>  class with instruction of what to change.<br/>
            The Destination FQID needs to be the MonitorFQID to handle the command.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.VideoWallSetCamerasCommand">
            <summary>
            Send this command to control what is displayed on a Video Wall monitor, and set specific devices on the monitor.
            
            The Data field must contain the <see cref="T:VideoOS.Platform.Messaging.VideoWallSetCamerasCommandData"/> class with instruction of what to change.<br/>
            The Destination FQID needs to be the MonitorFQID to handle the command.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.VideoWallRemoveCamerasCommand">
            <summary>
            Send this command to control what is displayed on a Video Wall monitor, and remove specific devices from the monitor.
            
            The Data field must contain the <see cref="T:VideoOS.Platform.Messaging.VideoWallRemoveCamerasCommandData"/> class with instruction of what devices to remove.<br/>
            The Destination FQID needs to be the MonitorFQID to handle the command.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.VideoWallApplyXmlCommand">
            <summary>
            Send this command to control what is displayed on a Video Wall monitor, by constructing a new view as defined by the xml.
            This command will apply the inner list of xml items starting at the given position.
            
            The xml must have the following format:
            <code>
            <![CDATA[
            <viewitems>
                <viewitem>
                    <iteminfo ... attributes filled in here />
                    <properties>
                        ... a list of property nodes
                    </properties>
                </viewitem>
                <viewitem>
                   ... next viewitem
                </viewitem>
            </viewitems>
            ]]>
            </code>
            
            Please use the VideoVallController sample for complete content.
            
            The Data field must contain the <see cref="T:VideoOS.Platform.Messaging.VideoWallApplyXmlCommandData"/> class with the xml content to display.<br/>
            The Destination FQID needs to be the MonitorFQID to handle the command.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.VideoWallIndication">
            <summary>
            This indication is sent from the Event Server when changes to one of the Video Wall happens.
            
            The Data field contains the <see cref="T:VideoOS.Platform.Messaging.VideoWallIndicationData"/> class.
            
            Changes can be to the Video Wall itself, the monitors, or the view displayed on the monitors.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.DriverCommand">
            <summary>
            Used to send device specific commands to a device through the Recording Server.
            
            The Data field is filled with DriverCommandData, and the command is send with 'destination' FQID identifies the device.
            
            The response is received via the DriverResponse message.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MessageId.Control.DriverResponse">
            <summary>
            Response to a DriverCommand. The Data field contains the DriverResponseData.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.DriverCommandData">
            <summary>
            Use with MessageId = DriverCommand.  
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.DriverCommandData.SyncObject">
            <summary>
            Can be used by the sender to sync responses with commands, could e.g. be the camera Item.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.DriverCommandData.Command">
            <summary>
              <para>The command to be send by the driver to the device, as a relative URI.</para>
              <para>Set <see cref="P:VideoOS.Platform.Messaging.DriverCommandData.Parameter"/> to include a query string; do not include the query string in <see cref="P:VideoOS.Platform.Messaging.DriverCommandData.Command"/>.</para>
            </summary>
            <value>
              <para>You must prefix the command with either "GET:" or "POST:", e.g.:</para>
              <list type="table">
                <listheader>
                  <term>Method</term>
                  <description>Command</description>
                </listheader>
                <item>
                  <term>GET</term>
                  <description><code>"GET:cgi-bin/admin/param.cgi"</code></description>
                </item>
                <item>
                  <term>POST</term>
                  <description><code>"POST:api/param.cgi"</code></description>
                </item>
              </list>
            </value>
        </member>
        <member name="P:VideoOS.Platform.Messaging.DriverCommandData.Parameter">
            <summary>
              <para>The GET query string or POST data.</para>
              <para>Do not prepend the query string with "?".</para>
            </summary>
            <value>
              <list type="table">
                <listheader>
                  <term>Method</term>
                  <description>Parameter</description>
                </listheader>
                <item>
                  <term>GET</term>
                  <description><code>"action=list&amp;group=Network"</code></description>
                </item>
                <item>
                  <term>POST</term>
                  <description><code>"VideoInput.1.Brightness=42\r\nVideoInput.1.Contrast=51\r\n"</code></description>
                </item>
              </list>
            </value>
        </member>
        <member name="T:VideoOS.Platform.Messaging.DriverResponseData">
            <summary>
            The response coming back from sending a message with MessageId = DriverCommand
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.DriverResponseData.SyncObject">
            <summary>
            The same value as filled on the DriverCommandData
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.DriverResponseData.Response">
            <summary>
            The response from the device, or null if no response or error
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.DriverResponseData.Success">
            <summary>
            Indicates if the Response field contains a string received from the device. In case of this field being false
            the ErrorText contains exception text or driver reported issue.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.DriverResponseData.ErrorText">
            <summary>
            When command failed, this field contains the exception message or an error from the recording server or driver.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.VideoWallShowTextCommandData">
            <summary>
            Contains information for what to change on the Video Wall.
            
            Note: Configuration changes can be performed via the Configuration API and related classes.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.VideoWallShowTextCommandData.Text">
            <summary>
            The text to be displayed
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.VideoWallShowTextCommandData.Position">
            <summary>
            The position used to display the text, within the Layout.
            
            The position is numbered from 1 on the top,left going across to the right, and then down.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.VideoWallSetLayoutAndCamerasCommandData">
            <summary>
            Contains information for what to change on a video wall.
            
            Note: Configuration changes can be performed via the Configuration API and related classes.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.VideoWallSetLayoutAndCamerasCommandData.LayoutFQID">
            <summary>
            Filled to change the Layout before applying the text.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.VideoWallSetLayoutAndCamerasCommandData.CameraFQIDList">
            <summary>
            The list of cameras, to be placed on the defined monitor, starting in position as defined in property Position.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.VideoWallSetLayoutAndCamerasCommandData.Position">
            <summary>
            The position used to display the text, within the View.
            
            The position is numbered from 1 on the top,left going across to the right, and then down.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.VideoWallSetCamerasCommandData">
            <summary>
            Contains information for what to change on a video wall.
            
            Note: Configuration changes can be performed via the Configuration API and related classes.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.VideoWallSetCamerasCommandData.CameraFQIDList">
            <summary>
            The list of cameras, to be placed on the defined monitor, starting in position as defined in property Position.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.VideoWallSetCamerasCommandData.Position">
            <summary>
            The position used to display the text, within the View.
            
            The position is numbered from 1 on the top,left going across to the right, and then down.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.VideoWallSetLayoutCommandData">
            <summary>
            Contains information for what to change on a video wall.
            
            Note: Configuration changes can be performed via the Configuration API and related classes.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.VideoWallSetLayoutCommandData.LayoutFQID">
            <summary>
            Filled to change the Layout before applying the text.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.VideoWallRemoveCamerasCommandData">
            <summary>
            Contains information for what to change on a video wall.
            
            Note: Configuration changes can be performed via the Configuration API and related classes.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.VideoWallRemoveCamerasCommandData.CameraFQIDList">
            <summary>
            The list of cameras, to be placed on the defined monitor, starting in position as defined in property Position.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.VideoWallApplyXmlCommandData">
            <summary>
            Contains information for what to change on a video wall. The listed devices (cameras) are removed from the monitor.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.VideoWallApplyXmlCommandData.Xml">
            <summary>
            The xml to be applied on the monitor.  The Xml has an outer node "ViewItems" containing a list of "ViewItem" to be applyed on the
            monitor, starting at position defined by Position.
            
            The content of each "ViewItem" xml node is identical to what is used by the Smart Client.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.VideoWallApplyXmlCommandData.Position">
            <summary>
            The position is numbered from 1 on the top,left going across to the right, and then down.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.VideoWallIndicationData">
            <summary>
            Contains description of a change on a video wall.
            
            The changes can contain types of video wall, Monitor or View on a Monitor.
            
            The ActionId defines what change has occurred:<br/>
            - ADDED : When a video wall or Monitor has been added<br/>
            - DELETED : When a video wall or Monitor has been deleted<br/>
            - UPDATED : When name on video wall or Monitor has changed, or when the View / Layout has changed on a Monitor<br/>
            
            The 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.VideoWallIndicationData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.VideoWallIndicationData.#ctor(System.String,VideoOS.Platform.FQID,VideoOS.Platform.Messaging.ViewItemInformation[])">
            <summary>
            Internal constructor for class
            </summary>
            <param name="actionId"></param>
            <param name="fqid"></param>
            <param name="viewItemInformationArray"></param>
        </member>
        <member name="P:VideoOS.Platform.Messaging.VideoWallIndicationData.ActionId">
            <summary>
            Identifies what type of action has been performed:<br/>
            - ADDED<br/>
            - DELETED<br/>
            - UPDATED<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.VideoWallIndicationData.FQID">
            <summary>
            Identifies the item that has changed, can be of these Kinds:<br/>
            - VideoWall<br/>
            - VideoWallMonitor<br/>
            - View<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.VideoWallIndicationData.ViewItemInformationArray">
            <summary>
            Contains an array of configurations for the ViewItems. 
            
            This is filled when the FQID has Kind = Kind.View
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.VideoWallIndicationData.ToXml">
            <summary>
            Convert the properties and attributes to an XML string that can be used for setting an entire layout with ViewItems on a Video Wall, e.g. using Control.VideoWallApplyXmlCommand message.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Messaging.ViewItemInformation">
            <summary>
            Contains description of one ViewItem.<br/>
            The class is used by the VideoWallIndicationData class to inform about VideoWall View changes.
             
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.ViewItemInformation.#ctor">
            <summary>
            Empty constrcutor for Serialization
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.ViewItemInformation.#ctor(System.Drawing.Rectangle,System.Guid,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Internal constructor
            </summary>
            <param name="rectangle"></param>
            <param name="viewItemType"></param>
            <param name="properties"></param>
            <param name="attributes"></param>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ViewItemInformation.Rectangle">
            <summary>
            Defines where the view item is located, usually the value are within a 1000x1000 address space.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ViewItemInformation.ViewItemType">
            <summary>
            Defines what type of ViewItem, like CameraBuiltinId or the Id of a MIP Plugin's ViewItem's Id
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ViewItemInformation.Attributes">
            <summary>
            Contains the attributes parameters for this item. Used by Built-in Smart Client view items.
            
            Like the EmbeddedCameraFQIDProperty.
            </summary>        
        </member>
        <member name="P:VideoOS.Platform.Messaging.ViewItemInformation.Properties">
            <summary>
            Contains the properties for this item. Used mostly by MIP Plugins.
            </summary>        
        </member>
        <member name="M:VideoOS.Platform.Messaging.ViewItemInformation.ToXml">
            <summary>
            Convert the properties and attributes to an XML string that can be used for setting a ViewItem on a Video Wall, e.g. ApplyXml.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MyRectangle">
            <summary>
            Defines a version of rectangle that can be serialized.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.MyRectangle.X">
            <summary>        
            X position
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.MyRectangle.Y">
            <summary>
            Y position
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.MyRectangle.Width">
            <summary>
            Width of item
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.MyRectangle.Height">
            <summary>
            Height of item
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MyKeyValue">
            <summary>
            KeyValue to be used for serialization
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.MyKeyValue.Key">
            <summary>
            The key
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.MyKeyValue.Value">
            <summary>
            The value of Key
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.ChangedAlarmData">
            <summary>
            This class is contained on the Server.ChangedAlarmIndication.<br/>
            The content identifies what changes has been made.<br/>
            When changes only involved a single alarm, the ChangeHint is ChangeHintSingleAlarm and the AlarmId can be used to get the alarm again.<br/>
            When changes involves a number of alarms on a specific source, the ChangeHint is ChangeHistMassUpdateForSource, and the SourceId can be used to run though alarms for that source and check the changes.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ChangedAlarmData.AlarmId">
            <summary>
            The Id of the individual alarm.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ChangedAlarmData.SourceId">
            <summary>
            The Id of the source of the alarm, e.g. a camera or event Id.  
            Can be Guid.Empty when unknown.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ChangedAlarmData.AlarmsDeletedBefore">
            <summary>
            Some alarms before this date has been deleted.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ChangedAlarmData.AlarmsDeletedBeforeClosed">
            <summary>
            Some alarms before this time has been closed.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ChangedAlarmData.ChangeHint">
            <summary>Defines in what area the change has occurred, defined values are defined in this class, starting with 'ChangeHint...' names. </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ChangedAlarmData.ChangeHintSingleAlarm">
            <summary>
            One alarm has been changed, could be state or any other field.  The AlarmId is filled with the id of the alarm.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ChangedAlarmData.ChangeHintMultipleAlarmsDeleted">
            <summary>
            Multiple alarms has been deleted. They cannot be read from the database anymore. The two DateTime fields contains the xx  since last AlarmLine modified ..
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ChangedAlarmData.ChangeHintMassUpdateForSource">
            <summary>
            All alarms from a specific source has been changed. The SourceId identify the source.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.ChangedAlarmHistoriesData">
            <summary>
            This class is contained on the Server.ChangedAlarmHistoryIndication.<br/>
            The content identifies the changes made to alarm history. E.g. changing state or changing assignee on an alarm.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ChangedAlarmHistoriesData.Data">
            <summary> </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.AnalyticsMessageData">
            <summary>
            Contains a definition of one analytics event.
            
            Used by the GetAnalyticsMessagesResponse message.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.AnalyticsMessageData.Name">
            <summary>
            The name of the analytics event - used as event message.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.AnalyticsMessageData.Id">
            <summary>
            The Id of the analytics event.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.AnalyticsMessageData.Description">
            <summary>
            A description of the event.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.ChangedAlarmHistoryData">
            <summary>
            This class contains a single AlarmUpdateActivity, and is part of ChangedAlarmUpdateActivitiesData.
            See class AlarmUpdateKey for possible AlarmUpdateKeys.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ChangedAlarmHistoryData.AlarmId">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ChangedAlarmHistoryData.Author">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ChangedAlarmHistoryData.Time">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ChangedAlarmHistoryData.AlarmUpdateKey">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ChangedAlarmHistoryData.AlarmUpdateValue">
            <summary> </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.PTZMoveCommandData">
            <summary>
            A struct specifying the PTZ Move command of a PTZMoveCommand message, used in the message's Data field.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveCommandData.Down">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveCommandData.DownLeft">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveCommandData.DownRight">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveCommandData.Home">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveCommandData.Left">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveCommandData.Right">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveCommandData.Up">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveCommandData.UpLeft">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveCommandData.UpRight">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveCommandData.ZoomIn">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveCommandData.ZoomOut">
            <summary> </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.PTZAUXCommandData">
            <summary>
            A struct specifying the AUX specifics for the PTZAUXCommand message, used in the message's Data field.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZAUXCommandData.On">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZAUXCommandData.AuxNumber">
            <summary> </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.PTZMoveStartCommandData">
            <summary>
            A struct specifying the PTZ and speed of a PTZMoveStartCommand message, used in the message's Data field.
            </summary>
            <remarks>
            <para>
            Movement will continue until a PTZMoveStopCommand or some other PTZMoveStartCommand is received.
            The Pan, Tilt and Zoom values defines the direction to start moving.
            </para>
            <example>
            The PTZ movement is calculated from a combination of Pan, Tilt, Zoom and Speed. For example, the pan movement
            is a product of Pan and Speed. Here are some examples:
            <code>
            //move right; half speed:
            data.Pan = 1; data.Tilt = 0; data.Zoom = 0; data.Speed = 0.5;
            //move left; full speed:
            data.Pan = -1; data.Tilt = 0; data.Zoom = 0; data.Speed = 1;
            //stop pan (same as using the PTZMoveStopCommand):
            data.Pan = 0; data.Tilt = 0; data.Zoom = 0; data.Speed = 0;
            //move down; half speed:
            data.Pan = 0; data.Tilt = 1; data.Zoom = 0; data.Speed = 0.5;
            //move appriximately 30 degrees right/down; slow speed:
            data.Pan = 0.6; data.Tilt = -0.3; data.Zoom = 0; data.Speed = 0.5;
            //move up; full speed:
            data.Pan = 0; data.Tilt = -1; data.Zoom = 0; data.Speed = 1;
            //zoom out; half speed:
            data.Pan = 0; data.Tilt = 0; data.Zoom = 1; data.Speed = 0.5;
            //zoom in; full speed:
            data.Pan = 0; data.Tilt = 0; data.Zoom = -1; data.Speed = 1;
            </code>
            </example>
            Check also the PTZMoveStartCommandData2 class.
            </remarks>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveStartCommandData.Pan">
            <summary>
            A number indicating the "left - right" movement. Values must be between -1 and 1. See also samples in the details section.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveStartCommandData.Tilt">
            <summary>
            A number indicating the "up - down" movement. Values must be between -1 and 1. See also samples in the details section.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveStartCommandData.Zoom">
            <summary>
            A number indicating the zoom movement. Values must be between -1 and 1. See also samples in the details section.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveStartCommandData.Speed">
            <summary>
            A number indicating the speed of the movement. Values must be between 0 and 1. See also samples in the details section.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.PTZMoveStartCommandData2">
            <summary>
            A struct specifying the PTZ and speed of a PTZMoveStartCommand message, used in the message's Data field.
            </summary>
            <remarks>
            <para>
            Movement will continue until a PTZMoveStopCommand or some other PTZMoveStartCommand is received.
            The Pan, Tilt and Zoom values defines the direction to start moving.
            </para>
            <example>
            The PTZ movement is calculated from a combination of Pan, Tilt, Zoom and Speed. For example, the pan movement
            is a product of Pan and Speed. Here are some examples:
            <code>
            //move right; half speed:
            data.Pan = 1; data.Tilt = 0; data.Zoom = 0; data.PanSpeed = 0.5;
            //move left; full speed:
            data.Pan = -1; data.Tilt = 0; data.Zoom = 0; data.PanSpeed = 1;
            //stop pan (same as using the PTZMoveStopCommand):
            data.Pan = 0; data.Tilt = 0; data.Zoom = 0; data.Speed = 0;
            //move down; half speed:
            data.Pan = 0; data.Tilt = 1; data.Zoom = 0; data.TiltSpeed = 0.5;
            //move appriximately 30 degrees right/down; slow speed:
            data.Pan = 0.6; data.Tilt = -0.3; data.Zoom = 0; data.TiltSpeed = 0.5; data.PanSpeed = 0.5;
            //move up; full speed:
            data.Pan = 0; data.Tilt = -1; data.Zoom = 0; data.TiltSpeed = 1;
            //zoom out; half speed:
            data.Pan = 0; data.Tilt = 0; data.Zoom = 1; data.ZoomSpeed = 0.5;
            //zoom in; full speed:
            data.Pan = 0; data.Tilt = 0; data.Zoom = -1; data.ZoomSpeed = 1;
            </code>
            </example>
            Check also the PTZMoveStartCommandData class.
            </remarks>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveStartCommandData2.Pan">
            <summary>
            A number indicating the "left - right" movement. Values must be -1, 0 or 1. See also samples in the details section.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveStartCommandData2.Tilt">
            <summary>
            A number indicating the "up - down" movement. Values must be -1 , 0 or 1. See also samples in the details section.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveStartCommandData2.Zoom">
            <summary>
            A number indicating the zoom movement. Values must be -1, 0 or 1. See also samples in the details section.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveStartCommandData2.PanSpeed">
            <summary>
            A number indicating the speed of the Pan direction.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveStartCommandData2.TiltSpeed">
            <summary>
            A number indicating the speed of the Tilt direction.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveStartCommandData2.ZoomSpeed">
            <summary>
            A number indicating the speed of the Zoom. 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.PTZMoveAbsoluteCommandData">
            <summary>
            A struct specifying the PTZ and speed of a PTZMoveAbsoluteCommand message, used in the message's Data field.
            </summary>
            <remarks>
            The values for Pan an Tilt are between -1..1 or NaN if no movement should be performed.<br/>
            The value for Zoom are in interval 0..1 or Nan, where 0=full zoom out; 1=full zoom in; NaN=no zoom change.<br/>
            The value for Speed is in the interval 0..1.<br/>
            </remarks>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveAbsoluteCommandData.Pan">
            <summary>
            The values for Pan are between -1..1 or NaN.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveAbsoluteCommandData.Tilt">
            <summary>
            The values for Tilt are between -1..1 or NaN.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveAbsoluteCommandData.Zoom">
            <summary>
            The value for Zoom are in interval 0..1, where 0=full zoom out; 1=full zoom in; NaN=no zoom change.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveAbsoluteCommandData.Speed">
            <summary>
            The value for Speed is in the interval 0..1.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZMoveAbsoluteCommandData.AllowRepeats">
            <summary>
            Set to true, if you want all commands to be sent - even when the content has same values.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.PTZCenterCommandData">
            <summary>
            Defines a rectangle in witch to center and zoom.<br/>
             - RefWidth : Width of the image to center camera in. Value is in pixels.<br/>
             - RefHeight: Height of the image to center camera in. Value is in pixels.<br/>
             - CenterX  : X-coordinate of where to center camera. Value is in pixels.<br/>
             - CenterY  : Y-coordinate of where to center camera. Value is in pixels.<br/>
             - Zoom     : Zoom level where are in interval [0-1] and 0=full zoom out; 1=full zoom in; &lt;0=no change.<br/>	
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZCenterCommandData.RefWidth">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZCenterCommandData.RefHeight">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZCenterCommandData.CenterX">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZCenterCommandData.CenterY">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZCenterCommandData.Zoom">
            <summary></summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.PTZRectangleCommandData">
            <summary>
            Defines a rectangle to be displayed. All values are in pixels.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZRectangleCommandData.RefWidth">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZRectangleCommandData.RefHeight">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZRectangleCommandData.Left">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZRectangleCommandData.Top">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZRectangleCommandData.Bottom">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZRectangleCommandData.Right">
            <summary></summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.PTZGetAbsoluteRequestData">
            <summary>
            A struct defining the PTZ values returned by the PTZGetAbsoluteRequest message.<br/>
            The values for Pan an Tilt are between -1..1<br/>
            The value for Zoom are in interval 0..1, where 0=full zoom out; 1=full zoom in;
            </summary>
            <seealso cref="F:VideoOS.Platform.Messaging.MessageId.Control.PTZGetAbsoluteRequest"/>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZGetAbsoluteRequestData.Pan">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZGetAbsoluteRequestData.Tilt">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PTZGetAbsoluteRequestData.Zoom">
            <summary></summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.LensCommandData">
            <summary>
            A set of const strings to defined available values for the LensCommand message.
            
            Note that commands not supported by a given camera or driver, is ignored.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.BrightnessDown">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.BrightnessReset">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.BrightnessUp">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.FocusAuto">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.FocusDown">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.FocusDownStart">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.FocusStop">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.FocusUp">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.FocusUpStart">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.GainDown">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.GainReset">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.GainUp">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.IrisDown">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.IrisReset">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.IrisUp">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.ShutterDown">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.ShutterReset">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.LensCommandData.ShutterUp">
            <summary></summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.PlaybackCommandData">
            <summary>
            A class specifying how to start PlayBack. Used by the PlaybackCommand for instructing the Smart Client, 
            and by the PlaybackIndication when the Smart Client informs of user or other program commands.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackCommandData.Command">
            <summary>
            Refers to one of the commands in PlaybackData class.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackCommandData.DateTime">
            <summary>
            Is only filled for the PlaybackData.Goto command
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackCommandData.Speed">
            <summary>
            Speed used for PlayForward and PlayReverse commands. Negative values are not allowed and a value of 0.0 will leave the speed unchanged.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.PlaybackSkipModeData">
            <summary>
            The PlaybackSkipMode instruct the PlaybackController what to do when reaching a gap in
            the video.  <br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackSkipModeData.Noskip">
            <summary>
            Just continue at same speed and direction.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackSkipModeData.Skip">
            <summary>
            Skip to next recorded frame on any of the attached ImageViewers
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackSkipModeData.StopAtSequenceEnd">
            <summary>
            Stop playback at last frame
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.PlaybackData">
            <summary>
            Contains the possible values to be filled in the PlaybackCommandData.Command field. 
            This class is send as Data in messages with MessagesIds SmartClient.PlaybackCommand and SmartClient.PlaybackIndication.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackData.Begin">
            <summary>
            Goto beginning of all recordings for selected camera/device
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackData.End">
            <summary>
            Goto end of all reacording for selected camera/device.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackData.Goto">
            <summary>
            Goto a specific DateTime
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackData.Next">
            <summary>
            Goto next single frame
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackData.NextSequence">
            <summary>
            Goto next recorded sequence. 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackData.Play">
            <summary>
            If currently in PlaybackPlayModeData.Stop mode, then  starting playing in forward mode.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackData.PlayForward">
            <summary>
            Start playing in forward mode
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackData.PlayReverse">
            <summary>
            Start playing in backwards mode
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackData.PlayStop">
            <summary>
            Stop playback mode and hold. (Does not go into live mode)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackData.Previous">
            <summary>
            Go back one frame on selected camera
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackData.PreviousSequence">
            <summary>
            Go back to previous recorded sequence.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackData.PlayMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackData.Speed">
            <summary>
            Can be used to control the speed of a movement.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.PlaybackPlayModeData">
            <summary>
            class of strings specifying the playback modes
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackPlayModeData.Forward">
            <summary>
            Value indicating that forward playback is in progress 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackPlayModeData.Stop">
            <summary>
            Value indicating that no playback is in progress 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackPlayModeData.Reverse">
            <summary>
            Value indicating that reverse playback is in progress 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackPlayModeData.Custom">
            <summary>
            Value indicating that custom playback is in progress,
            Direction and speed is unknown.
            This is used when e.g. TimeLine is pulled in the Smart Client, then a PlaybackIndication with a PlaybackCommandData containing this content is send.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.PlaybackTimeInformationData">
            <summary>
            A class holding information about the currently received data to display.<br/>
            This class is sent to the PlaybackController to keep it updated with available data and possible skipping of gaps.<br/>
            Note: Only implemented for standalone MIP usage.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackTimeInformationData.Item">
            <summary>
            Identifies the primary item displayed
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackTimeInformationData.PreviousTime">
            <summary>
            Time stamp of the previous piece of information, in UTC format.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackTimeInformationData.CurrentTime">
            <summary>
            Contains the timestamp of the current piece of information, in UTC format.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PlaybackTimeInformationData.NextTime">
            <summary>
            Contains the timestamp of the next piece of information, in UTC format.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.ClearIndicatorCommandData">
            <summary>
            This class contains the commands to control clearing the red, yellow indicators on top of the Camera images.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ClearIndicatorCommandData.ClearAllIndicatorsInView">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ClearIndicatorCommandData.ClearAllIndicatorsOnSelectedCamera">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ClearIndicatorCommandData.ClearEventIndicatorInView">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ClearIndicatorCommandData.ClearEventIndicatorOnSelectedCamera">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ClearIndicatorCommandData.ClearMotionOccurredInView">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ClearIndicatorCommandData.ClearMotionOccurredOnSelectedCamera">
            <summary></summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.ApplicationControlCommandData">
            <summary>
            A set of const strings to defined available values for the ApplicationControlCommand message.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ApplicationControlCommandData.Close">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ApplicationControlCommandData.Maximize">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ApplicationControlCommandData.Minimize">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ApplicationControlCommandData.Restore">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ApplicationControlCommandData.Activate">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ApplicationControlCommandData.ShowSidePanel">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ApplicationControlCommandData.HideSidePanel">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ApplicationControlCommandData.EnterFullScreenMode">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ApplicationControlCommandData.ExitFullScreenMode">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ApplicationControlCommandData.ToggleFullScreenMode">
            <summary></summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.TalkToSpeakerData">
            <summary>
            The class send as data when sending a command to start or stop the 'talk' button.
            The command TalkToSpeakerCommand with this Data is implemented in the Smart Client.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.TalkToSpeakerData.Talk">
            <summary>
            Talk is ON when set to true.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.WindowStateChangedIndicationData">
            <summary>
            A set of const strings to define available values for the WindowStateChangedIndication message.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.WindowStateChangedIndicationData.MaximizeWindow">
            <summary>
            Send when the Maximize button is pressed, while not already maximized
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.WindowStateChangedIndicationData.RestoreWindow">
            <summary>
            Send when the window has been restored from maximized or minimized.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.WindowStateChangedIndicationData.MinimizeWindow">
            <summary>
            Send when window has been minimized.
            
            Consider to halt video retrieval and other CPU and Network demanding tasks.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.ViewItemControlCommandData">
            <summary>
            A set of const strings to defined available values for the ViewItemControlCommand message.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ViewItemControlCommandData.MaximizeSelectedViewItem">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ViewItemControlCommandData.RestoreSelectedViewItem">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ViewItemControlCommandData.EnableDigitalZoomOnSelectedViewItem">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.ViewItemControlCommandData.DisableDigitalZoomOnSelectedViewItem">
            <summary></summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MultiWindowCommand">
            <summary>
            A set of const strings to defined available values for the MultiWindowCommandData structure<br/>
            Please note this class has same name as a command, but should be used in the MultiWindowCommandData.MultiWindowCommand field.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommand.CloseAllWindows">
            <summary>
            Close all floating windows
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommand.CloseSelectedWindow">
            <summary>
            Close window identified by MultiWindowCommandData.Window
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommand.MaximizeWindow">
            <summary>
            Maximize floating window identified by MultiWindowCommandData.Window
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommand.MinimizeWindow">
            <summary>
            Minimize floating window identified by MultiWindowCommandData.Window
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommand.OpenFloatingWindow">
            <summary>
            Opens a new floating window with window id = MultiWindowCommandData.Window.
            On return an updated Window FQID returned.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommand.OpenFullScreenWindow">
            <summary>
            Opens a new floating window with window id = MultiWindowCommandData.Window.
            On return the detached window FQID is returned.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommand.RestoreWindow">
            <summary>
            Restore a floating window to normal size and position.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommand.SetViewInWindow">
            <summary>
            Insert a specific View in on a Window.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommand.SetWindowLocation">
            <summary>
            Place a Window at a specific location.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommand.SetWindowSize">
            <summary>
            Set size of a specific Window
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommand.SetNextViewInWindow">
            <summary>
            Select next View in on a Window.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommand.SetPreviousViewInWindow">
            <summary>
            Select previous View in on a Window.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommand.SelectWindow">
            <summary>
            Select the Window identified in by the Window FQID as the currently selected window.
            </summary>
            Be aware that within each Window a ViewItem is also selected.
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommand.LinkWindow">
            <summary>
            Link a floating window to the main window - e.g. the mode and playback time and linked.
            
            The Window field identifies the window to be linked.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommand.UnlinkWindow">
            <summary>
            Un-Link a floating window from the main window - e.g. the mode and playback time are not linked together anymore.
            
            The Window field identifies the window to be linked.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.SetCameraInViewCommandData">
            <summary>
            This structure is used when sending the SetCameraInViewCommand to tell the Smart Client what camera to insert in what position on current displayed view.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.SetCameraInViewCommandData.#ctor">
            <summary>
            Constructor, using default stream id
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.SetCameraInViewCommandData.CameraFQID">
            <summary>
            The FQID of the camera to be temporary inserted in the view.
            </summary>
            To remove the current camera you can assign null to the CameraFQID.
        </member>
        <member name="F:VideoOS.Platform.Messaging.SetCameraInViewCommandData.Index">
            <summary>
            A zero based index for where to update the cameraFQID.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.SetCameraInViewCommandData.StreamId">
            <summary>
            Fill this field if a specific Stream need to be selected.  When set to Guid.Empty the default stream is selected.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.SetSelectedViewItemData">
            <summary>
            This class is used by the SetSelectedViewItemCommand message id.  It describes what viewitem should be selected
            within the currently selected window.
            </summary>
            <remarks>
            To select a specific ViewItem, set the LayoutIndex to the index of the ViewItem, top left is index 0.
            To move from one ViewItem to another, specify the MoveCommand.MoveUp / MoveDown etc<br/>
            To De-Select current selected item, specify MoveCommand.Deselect<br/>
            Notice that when multiple Windows are open, a specific Window might also have to be selected. See the MultiWindowCommand message.
            </remarks>
        </member>
        <member name="F:VideoOS.Platform.Messaging.SetSelectedViewItemData.LayoutIndex">
            <summary>
            Specify an index when MoveCommand = MoveCommand.MoveIndex.
            Ignored for other commands
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.SetSelectedViewItemData.MoveCommand">
            <summary>
            Specify one of the commands under MessageId.MoveCommand
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MoveCommand">
            <summary>
            The commands available for the SetSelectedViewItemData message.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MoveCommand.MoveUp">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MoveCommand.MoveDown">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MoveCommand.MoveRight">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MoveCommand.MoveLeft">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MoveCommand.MoveIndex">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MoveCommand.Deselect">
            <summary></summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MultiWindowCommandData">
            <summary>
            The data structure filled when sending the MultiWindowCommand message.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommandData.Screen">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommandData.Window">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommandData.View">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommandData.X">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommandData.Y">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommandData.Width">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommandData.Height">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommandData.MultiWindowCommand">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MultiWindowCommandData.PlaybackSupportedInFloatingWindow">
            <summary>
            Set to true if Playback mode is supported when running in a flowating window, and a Playback button will appear.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.SmartClientMessageData">
            <summary>
            Contains a single message to be displayed in the message area of the Smart Client.<br/>
            This class is used to display new messages in the message area of the Smart Client, 
            as well as changing or removing existing messages.<br/>
            Fill this class when sending a message with id SmartClient.SmartClientMessageCommand.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.SmartClientMessageData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientMessageData.MessageId">
            <summary>
            A unique ID of this message. Can be used to update or remove the the message at a later time.<br/>
            All messages must have a unique ID.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientMessageData.Message">
            <summary>
            The text to be displayed. <br/>
            When the text is blank, an old message is removed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientMessageData.MessageType">
            <summary>
            Indicates type of message: None, Warning, Error, Task.<br/>
            The default value is SmartClientMessageDataType.Error
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientMessageData.Priority">
            <summary>
            The priority of the message: High, Normal, Low.<br/>
            This value is currently not user by the Smart Client.
            The default value is SmartClientMessageDataPriority.Normal.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientMessageData.IsClosable">
            <summary>
            Indicates whether the user can close/remove the message manually. 
            The default value is false.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientMessageData.ButtonText">
            <summary>
            The text of the button to show as part of the message. If the text is empty no button will be shown.
            The default value is string.Empty;.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientMessageData.TaskState">
            <summary>
            Indicates the current state of the task: Pending, Running, Complete, Canceled, Failed.<br/>
            Only used when the MessageType is set to SmartClientMessageDataType.Task.
            The default value is SmartClientMessageDataTaskState.Complete.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientMessageData.TaskProgress">
            <summary>
            Indicates the current progress of the task. The value must be between 0.0 and 1.0 (inclusive)<br/>
            Only used when the MessageType is set to SmartClientMessageDataType.Task.
            The default value is 0.0.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientMessageData.TaskText">
            <summary>
            Indicates the text associated with the curent task progress. Current this is displayed af part of the task progress indication in the Smart Client.<br/>
            Only used when the MessageType is set to SmartClientMessageDataType.Task.
            The default value is string.Empty.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.SmartClientMessageDataPriority">
            <summary>
            The priority of the message. Used by SmartClientMessageData.
            The content is currently not used by the Smart Client.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.SmartClientMessageDataPriority.High">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.SmartClientMessageDataPriority.Normal">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.SmartClientMessageDataPriority.Low">
            <summary></summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.SmartClientMessageDataType">
            <summary>
            The type of the message. Used by SmartClientMessageData.<br/>
            The content is used to show an icon beside the message.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.SmartClientMessageDataType.None">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.SmartClientMessageDataType.Warning">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.SmartClientMessageDataType.Error">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.SmartClientMessageDataType.Task">
            <summary></summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.SmartClientMessageDataTaskState">
            <summary>
            The state of a job. Used by SmartClientMessageData.<br/>
            The content is used control the visual appearance of the task progress in the Smart Client.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.SmartClientMessageDataTaskState.Pending">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.SmartClientMessageDataTaskState.Running">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.SmartClientMessageDataTaskState.Complete">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.SmartClientMessageDataTaskState.Canceled">
            <summary></summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.SmartClientMessageDataTaskState.Failed">
            <summary></summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.ShowCamerasInFloatingWindowData">
            <summary>
            Defines the state of a floeating window and the cameras it contains.<br/>
            Fill this class when sending a message with id SmartClient.ShowCamerasInFloatingWindowCommand.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ShowCamerasInFloatingWindowData.Cameras">
            <summary>
            List of camera items to shown in the floating window.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ShowCamerasInFloatingWindowData.Mode">
            <summary>
            The mode of the floating window. Should be set to either Mode.ClientLive or Mode.ClientPlayback
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.ShowCamerasInFloatingWindowData.BrowseTime">
            <summary>
            The initial browse time of the floating windows. Only used if the Mode is set to Mode.ClientPlayback.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.RecorderErrorIndicationData">
            <summary>
            Describes in detail the error 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.RecorderErrorIndicationData.UrlString">
            <summary>
            The Url reporting the error.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.RecorderErrorIndicationData.Command">
            <summary>
            The command being rejected
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.RecorderErrorIndicationData.RecorderWebInterfaceErrorCode">
            <summary>
            A code defining the error, see the RecorderWebInterfaceErrorCode class for details.
            This value is only filled when connected to a Corporate or Expert system.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.RecorderErrorIndicationData.PtzErrorDetail">
            <summary>
            When RecorderWebInterfaceErrorCode = 40295, this field contains Ptz detailed error code. See PtzErrorDetail class for details. 
            This value is only filled when connected to a Corporate or Expert system.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.RecorderErrorIndicationData.ErrorText">
            <summary>
            Explaination in English.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.RecorderWebInterfaceErrorCode">
            <summary>
            Error codes for SOAP and web connection interfaces
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.RecorderWebInterfaceErrorCode.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.RecorderWebInterfaceErrorCode.GeneralError">
            <summary>
            General communication error.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.RecorderWebInterfaceErrorCode.SoapVersionMismatchError">
            <summary>
            SOAP version is not supported.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.RecorderWebInterfaceErrorCode.InvalidSoapError">
            <summary>
            SOAP message is invalid.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.RecorderWebInterfaceErrorCode.UnknownSoapVersionError">
            <summary>
            SOAP version could not be recognized.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.RecorderWebInterfaceErrorCode.TokenError">
            <summary>
            There is a problem with the specified security token.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.RecorderWebInterfaceErrorCode.MediaNotReady">
            <summary>
            Not ready to deliver media or media information
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.RecorderWebInterfaceErrorCode.MethodHandlingError">
            <summary>
            An error occurred while executing this method.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.RecorderWebInterfaceErrorCode.PtzError">
            <summary>
            A PTZ error occurred.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.PtzErrorDetail">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.DeviceNotFound">
            <summary>
            Occurs when the device is not configured/loaded on the recording server.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.DeviceNotReady">
            <summary>
            Occurs when the device is not started or connection broken.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.PtzNotSupported">
            <summary>
            Occurs when the device does not support PTZ.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.PresetNotSupported">
            <summary>
            Occurs when the device does not support presets.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.PtzRequestPriorityTooLow">
            <summary>
            Occurs when the PTZ request is rejected because the PTZ request has lower priority than the current active ptz session priority.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.PtzRequestQueueTooLong">
            <summary>
            Occurs when the request is rejected because too many requests for the device has been queued.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.PtzSessionNoneActive">
            <summary>
            Occurs if trying to execute a PTZ request with having an active session.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.PtzSessionNotActive">
            <summary>
            Occurs if the session executing the request is not the currently active session.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.PtzSessionAlreadyStarted">
            <summary>
            Occurs when trying to start a PTZ session that is already started.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.PtzSessionNotRunning">
            <summary>
            Occurs when trying to pause a PTZ session that is not running (paused or stopped).
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.PatrollingNoSession">
            <summary>
            Occurs when trying to pause a patrolling when there is no active patrolling session.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.PatrollingResumedWhileNotPaused">
            <summary>
            Occurs when trying to resume patrolling for session that is not paused.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.PatrollingSessionAttemptedReleased">
            <summary>
            Occures when trying to release a patrolling session.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.PatrollingSessionHasHigherPriority">
            <summary>
            Occurs when the PTZ request is rejected because the PTZ request has lower priority than the current active patrolling session priority.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.PatrollingSchemaNotFound">
            <summary>
            Occurs when trying to start patrolling with a patrolling profile that doesn't exist.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.InsufficientPermission">
            <summary>
            Occurs when trying to release a PTZ session with insufficient permissions.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.AlreadyReserved">
            <summary>
            Occurs when trying to take exclusive session when you already have exclusive session.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.PtzSessionIsReserved">
            <summary>
            Occurs when the PTZ request is rejected because the current active ptz session is exclusive
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.PtzErrorDetail.OtherUserManualSessionAttemptedReleased">
            <summary>
            Occurs when release request is rejected because the current active ptz session is for another user
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MapRequestData">
            <summary>
            Class filled when sending a GetMapRequest
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MapRequestData.MapGuid">
            <summary>
            Identifies the map, where we would like to get the children for
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MapRequestData.SyncString">
            <summary>
            Can be used to sync request and response
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MapResponseData">
            <summary>
            Is part of the Message.Data field for a GetMapResponse message.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MapResponseData.SyncString">
            <summary>
            Can be used to sync request and response
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MapResponseData.ErrorText">
            <summary>
            In case of communication error to the Event Server, this field will contain a description of the error.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MapResponseData.MapGuid">
            <summary>
            Identifies the parent map
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MapResponseData.MapCollection">
            <summary>
            A collection of maps 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.MapResponseDataInstance">
            <summary>
            Short identification of a map
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MapResponseDataInstance.Id">
            <summary>
            The id of a Map.  Top level map has Id = "".
            
            The Id can be used to insert a Map ViewItem in a View.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MapResponseDataInstance.DisplayName">
            <summary>
            The display name defined by the user.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Messaging.MapResponseDataInstance.RecursiveMap">
            <summary>
            Indicates if this Map is actually a recursive link, e.g. to a parent-parents
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.SmartMapGoToPositionCommandData">
            <summary>
            This class is used with the <see cref="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SmartMapGoToPositionCommand"/> message.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapGoToPositionCommandData.Latitude">
            <summary>
            The latitude to center the Smart Map around. Range is -90...90.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapGoToPositionCommandData.Longitude">
            <summary>
            The longitude to center the Smart Map around. Range is -180...180.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapGoToPositionCommandData.ZoomLevel">
            <summary>
            The zoom level to set for the Smart Map. Must be a value between 0 and 1, where 1 is fully zoomed in.<br/>
            Please note that the Smart Map has a fixed set of supported zoom levels, so the value will be adjusted to the level making the closest match.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapGoToPositionCommandData.Window">
            <summary>
            FQID of the window containing the Smart Map. If this is null the message will control all currently open Smart Maps.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapGoToPositionCommandData.Index">
            <summary>
            Index of the view item containing the Smart Map in the window specified by the <see cref="P:VideoOS.Platform.Messaging.SmartMapGoToPositionCommandData.Window"/> property. 
            If the <see cref="P:VideoOS.Platform.Messaging.SmartMapGoToPositionCommandData.Window"/> property is null this property will be ignored.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.SmartMapGoToAreaCommandData">
            <summary>
            This class is used with the <see cref="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SmartMapGoToAreaCommand"/> message.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapGoToAreaCommandData.UpperLeftLatitude">
            <summary>
            The latitude of the upper left (north-western) corner of the area to show on the Smart Map. Range is -90...90.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapGoToAreaCommandData.UpperLeftLongitude">
            <summary>
            The longitude of the upper left (north-western) corner of the area to show on the Smart Map. Range is -180...180.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapGoToAreaCommandData.LowerRightLatitude">
            <summary>
            The latitude of the lower right (south-eastern) corner of the area to show on the Smart Map.  Range is -90...90.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapGoToAreaCommandData.LowerRightLongitude">
            <summary>
            The longitude of the lower right (south-eastern) corner of the area to show on the Smart Map. Range is -180...180.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapGoToAreaCommandData.Window">
            <summary>
            FQID of the window containing the Smart Map. If this is null the message will control all currently open Smart Maps.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapGoToAreaCommandData.Index">
            <summary>
            Index of the view item containing the Smart Map in the window specified by the <see cref="P:VideoOS.Platform.Messaging.SmartMapGoToAreaCommandData.Window"/> property. 
            If the <see cref="P:VideoOS.Platform.Messaging.SmartMapGoToAreaCommandData.Window"/> property is null this property will be ignored.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.SmartMapGoToLocationCommandData">
            <summary>
            This class is used with the <see cref="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SmartMapGoToLocationCommand"/> message.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapGoToLocationCommandData.Location">
            <summary>
            FQID of the location to go to.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapGoToLocationCommandData.Window">
            <summary>
            FQID of the window containing the Smart Map. If this is null the message will control all currently open Smart Maps.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapGoToLocationCommandData.Index">
            <summary>
            Index of the view item containing the Smart Map in the window specified by the <see cref="P:VideoOS.Platform.Messaging.SmartMapGoToLocationCommandData.Window"/> property. 
            If the <see cref="P:VideoOS.Platform.Messaging.SmartMapGoToLocationCommandData.Window"/> property is null this property will be ignored.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.SmartMapSelectItemCommandData">
            <summary>
            This class is used with the <see cref="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SmartMapSelectItemCommand"/> message.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapSelectItemCommandData.Item">
            <summary>
            FQID of the item to select.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapSelectItemCommandData.Window">
            <summary>
            FQID of the window containing the Smart Map. If this is null the message will control all currently open Smart Maps.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapSelectItemCommandData.Index">
            <summary>
            Index of the view item containing the Smart Map in the window specified by the <see cref="P:VideoOS.Platform.Messaging.SmartMapSelectItemCommandData.Window"/> property. 
            If the <see cref="P:VideoOS.Platform.Messaging.SmartMapSelectItemCommandData.Window"/> property is null this property will be ignored.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.SmartMapGetPositionRequestData">
            <summary>
            This class is used with the <see cref="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SmartMapGetPositionRequest"/> message.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapGetPositionRequestData.Window">
            <summary>
            FQID of the window containing the Smart Map. If this is null a response will be returned from all currently open Smart Maps.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapGetPositionRequestData.Index">
            <summary>
            Index of the view item containing the Smart Map in the window specified by the <see cref="P:VideoOS.Platform.Messaging.SmartMapGetPositionRequestData.Window"/> property. 
            If the <see cref="P:VideoOS.Platform.Messaging.SmartMapGetPositionRequestData.Window"/> property is null this property will be ignored.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.SmartMapPositionData">
            <summary>
            This class is used with the <see cref="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SmartMapPositionChangedIndication"/> or <see cref="F:VideoOS.Platform.Messaging.MessageId.SmartClient.SmartMapGetPositionRequest"/> message.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapPositionData.UpperLeftLatitude">
            <summary>
            The latitude of the upper left corner of the Smart Map. Range is -90...90.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapPositionData.UpperLeftLongitude">
            <summary>
            The longitude of the upper left corner of the Smart Map. Range is -180...180.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapPositionData.LowerRightLatitude">
            <summary>
            The latitude of the lower right corner of the Smart Map. Range is -90...90.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapPositionData.LowerRightLongitude">
            <summary>
            The longitude of the lower right corner of the Smart Map. Range is -180...180.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapPositionData.CenterLatitude">
            <summary>
            The latitude of the current center of the Smart Map. Range is -90...90.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapPositionData.CenterLongitude">
            <summary>
            The longitude of the current center of the Smart Map. Range is -180...180.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapPositionData.ZoomLevel">
            <summary>
            The current zoom level of the Smart Map. Range is 0...1, where 0 is full world view.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapPositionData.Window">
            <summary>
            The FQID of the window containing the Smart Map. If the FQID.ObjectId equals Kind.Window, then it is main window in Smart Client
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartMapPositionData.Index">
            <summary>
            Index of the view item containing the Smart Map in the window specified by the <see cref="P:VideoOS.Platform.Messaging.SmartMapPositionData.Window"/> property.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Messaging.SmartClientToastData">
            <summary>
            Abstract base class for the available toast message types. Use the specialized implementations to fill in information about the
            toast message to display. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientToastData.Id">
            <summary>
            Id identifying the toast message.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientToastData.Duration">
            <summary>
            The duration that the toast message should be displayed before it is automatically removed. It is recommended to set the value
            to Timespan.Zero, which will ensure ensure that the toast message is shown for the default amount of time.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientToastData.Dismissed">
            <summary>
            Action that is invoked when the user dismisses the toast message. The <see cref="T:VideoOS.Platform.Messaging.SmartClientToastData"/> that was
            used when creating or updating the toast message is provided as parameter to the action.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientToastData.Activated">
            <summary>
            Action that is invoked when the user clicks on the toast. We recommend that the action is only used for navigation to a
            location in the Smart Client (e.g. a tab or a window), and that the toast should be removed as a result of the activation.
            The <see cref="T:VideoOS.Platform.Messaging.SmartClientToastData"/> that was used when creating or updating the toast is provided as parameter to the
            action. To remove the toast use the <see cref="F:VideoOS.Platform.Messaging.MessageId.SmartClient.ToastHideCommand"/> message.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientToastData.Expired">
            <summary>
            Action that is invoked when the toast message expires and is automatically removed. The <see cref="T:VideoOS.Platform.Messaging.SmartClientToastData"/> that was
            used when creating or updating the toast message is provided as parameter to the action.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.SmartClientToastData.#ctor(System.Guid,System.TimeSpan,System.Action{VideoOS.Platform.Messaging.SmartClientToastData},System.Action{VideoOS.Platform.Messaging.SmartClientToastData},System.Action{VideoOS.Platform.Messaging.SmartClientToastData})">
            <summary>
            <see cref="T:VideoOS.Platform.Messaging.SmartClientToastData"/> constructor.
            </summary>
            <param name="id">Unique id identifying the toast message.</param>
            <param name="duration">The duration that the toast message should be displayed before it is automatically removed.
            See <see cref="P:VideoOS.Platform.Messaging.SmartClientToastData.Duration"/> for more information.</param>
            <param name="dismissed">Action (optional) that is invoked when the user dismisses the toast message.
            See <see cref="P:VideoOS.Platform.Messaging.SmartClientToastData.Dismissed"/> for more information.</param>
            <param name="activated">Action (optional) that is invoked when the user activates the toast message.
            See <see cref="P:VideoOS.Platform.Messaging.SmartClientToastData.Activated"/> for more information.</param>
            <param name="expired">Action (optional) that is invoked when the toast message expires and is automatically removed.
            See <see cref="P:VideoOS.Platform.Messaging.SmartClientToastData.Expired"/> for more information.</param>
        </member>
        <member name="T:VideoOS.Platform.Messaging.SmartClientTextToastData">
            <summary>
            Specialization of <see cref="T:VideoOS.Platform.Messaging.SmartClientToastData"/> that represents a text toast message. A text toast message contains an icon, primary text,
            secondary text and a count text. All are optional but it is recommended that at least a primary text is always provided.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientTextToastData.Icon">
            <summary>
            An icon representing the toast message.<br/>
            This icon must contain exactly 6 images of size 8x8, 16x16, 24x24, 32x32, 48x48, and 64x64 in that order.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientTextToastData.PrimaryText">
            <summary>
            The primary text of the toast message.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientTextToastData.SecondaryText">
            <summary>
            The secondary text of the toast message.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Messaging.SmartClientTextToastData.CountText">
            <summary>
            The count text of the toast message. This text should be used to indicate that one or more additional events (beyond the one represented by the toast) exists.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Messaging.SmartClientTextToastData.#ctor(System.Guid,System.TimeSpan,System.Action{VideoOS.Platform.Messaging.SmartClientToastData},System.Action{VideoOS.Platform.Messaging.SmartClientToastData},System.Action{VideoOS.Platform.Messaging.SmartClientToastData},System.Drawing.Icon,System.String,System.String,System.String)">
            <summary>
            <see cref="T:VideoOS.Platform.Messaging.SmartClientTextToastData"/> constructor.
            </summary>
            <param name="id">Unique id identifying the toast message.</param>
            <param name="duration">The duration that the toast message should be displayed before it is automatically removed.
            See <see cref="P:VideoOS.Platform.Messaging.SmartClientToastData.Duration"/> for more information.</param>
            <param name="dismissed">Action (optional) that is invoked when the user dismisses the toast message.
            See <see cref="P:VideoOS.Platform.Messaging.SmartClientToastData.Dismissed"/> for more information.</param>
            <param name="activated">Action (optional) that is invoked when the user activates the toast message.
            See <see cref="P:VideoOS.Platform.Messaging.SmartClientToastData.Activated"/> for more information.</param>
            <param name="expired">Action (optional) that is invoked when the toast message expires and is automatically removed.
            See <see cref="P:VideoOS.Platform.Messaging.SmartClientToastData.Expired"/> for more information.</param>
            <param name="icon">An icon representing the toast message.
            See <see cref="P:VideoOS.Platform.Messaging.SmartClientTextToastData.Icon"/> for more information.</param>
            <param name="primaryText">The primary text of the toast message.</param>
            <param name="secondaryText">The secondary text of the toast message.</param>
            <param name="countText">The count text of the toast message.</param>
        </member>
        <member name="T:VideoOS.Platform.Metadata.ClassCandidate">
            <summary>
            This class is responsible for representing an ONVIF XML class candidate used for conveying information on the type of object
            inside a bounding box.
            
            Instances of this class have value-identity, meaning that two classes with the same content are considered equal.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.ClassCandidate.Type">
            <summary>
            Gets or sets the type of the object
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.ClassCandidate.Likelihood">
            <summary>
            Gets or sets the likelihood that the type is correct
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.ClassCandidate.IsValid">
            <summary>
            Gets whether the class candidate is valid according to the ONVIF standard, meaning it has a type
            and a likelihood greater in the interval ]0 ; 1].
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.ClassCandidate.GetSchema">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.ClassCandidate.ReadXml(System.Xml.XmlReader)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.ClassCandidate.WriteXml(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.ClassCandidate.Equals(VideoOS.Platform.Metadata.ClassCandidate)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.ClassCandidate.Equals(System.Object)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.ClassCandidate.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Metadata.DisplayColor">
            <summary>
            This class is responsible for containing information on the color used to draw metadata objects.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.DisplayColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Create a new instance of a <see cref="T:VideoOS.Platform.Metadata.DisplayColor"/> with its R, G and B components set.
            The A (alpha) channel is set to fully opaque (i.e. 255).
            </summary>
            <param name="r">The red component value</param>
            <param name="g">The green component value</param>
            <param name="b">The blue component value</param>
        </member>
        <member name="M:VideoOS.Platform.Metadata.DisplayColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Create a new instance of a <see cref="T:VideoOS.Platform.Metadata.DisplayColor"/> with its A, R, G and B components set.
            </summary>
            <param name="a">The alpha component value</param>
            <param name="r">The red component value</param>
            <param name="g">The green component value</param>
            <param name="b">The blue component value</param>
        </member>
        <member name="M:VideoOS.Platform.Metadata.DisplayColor.#ctor(System.Int32)">
            <summary>
            Create a new instance of a <see cref="T:VideoOS.Platform.Metadata.DisplayColor"/> from a 32-bit ARGB value.
            </summary>
            <param name="argb">A value specifying the 32-bit ARGB value.</param>
        </member>
        <member name="M:VideoOS.Platform.Metadata.DisplayColor.TryParseArgbString(System.String,VideoOS.Platform.Metadata.DisplayColor@)">
            <summary>
            Attempts to parse and ARGB string in the format "#A545F3B5" into an instance of <see cref="T:VideoOS.Platform.Metadata.DisplayColor"/>.
            </summary>
            <param name="argbValue">A string with a hexadecimal representation of a ARGB color.
            The string must start with '#' followed by 8 hex digits. Example: "#FFBB5D60"</param>
            <param name="color">The parsed color. This is null if the parse fails.</param>
            <returns>True if <paramref name="argbValue"/> could be converted to an instance of <see cref="T:VideoOS.Platform.Metadata.DisplayColor"/>, false otherwise</returns>
        </member>
        <member name="M:VideoOS.Platform.Metadata.DisplayColor.ParseArgbString(System.String)">
            <summary>
            Parses and ARGB string in the format "#A545F3B5" into an instance of <see cref="T:VideoOS.Platform.Metadata.DisplayColor"/>.
            </summary>
            <param name="argbValue">A string with a hexadecimal representation of a ARGB color.
            The string must start with '\#' followed by 8 hex digits. Example: "\#FFBB5D60"</param>
            <returns>The parsed color</returns>
            <exception cref="T:System.FormatException">If the color format was incorrect</exception>
        </member>
        <member name="P:VideoOS.Platform.Metadata.DisplayColor.A">
            <summary>
            Gets the alpha component value.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.DisplayColor.R">
            <summary>
            Gets the red component value.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.DisplayColor.G">
            <summary>
            Gets the green component value.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.DisplayColor.B">
            <summary>
            Gets the blue component value.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.DisplayColor.ArgbString">
            <summary>
            Gets the ARGB value of the color as a string in the format \#FF00FF00
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.DisplayColor.Argb">
            <summary>
            Gets the ARGB value of the color as an integer
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.DisplayColor.Equals(VideoOS.Platform.Metadata.DisplayColor)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.DisplayColor.Equals(System.Object)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.DisplayColor.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Metadata.OnvifClass">
            <summary>
            This class is responsible for representing an ONVIF XML class.
            
            Instances of this class have value-identity, meaning that two classes with the same content are considered equal.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.OnvifClass.ClassCandidates">
            <summary>
            Gets the list of class candidate elements contained in this instance
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.OnvifClass.GetSchema">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.OnvifClass.ReadXml(System.Xml.XmlReader)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.OnvifClass.WriteXml(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.OnvifClass.Equals(VideoOS.Platform.Metadata.OnvifClass)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.OnvifClass.Equals(System.Object)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.OnvifClass.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Metadata.DisplayText">
            <summary>
            This class is responsible for representing text than can be embedded as part of metadata.
            This text can then be presented to the users in some form.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.DisplayText.CenterX">
            <summary>
            Gets or sets the X coordinate of the text. The coordinate is the horizontal center of the text in the ONVIF coordinate system.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.DisplayText.CenterY">
            <summary>
            Gets or sets the Y coordinate of the text. The coordinate is the vertical center of the text in the ONVIF coordinate system.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.DisplayText.IsBold">
            <summary>
            Gets or sets whether the text should be drawn with a bold face.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.DisplayText.IsItalic">
            <summary>
            Gets or sets whether the text should be drawn with an italic face.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.DisplayText.FontFamily">
            <summary>
            Gets or sets a string describing the font family. There is no guarantee that the font family is available on the target system.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.DisplayText.Size">
            <summary>
            Gets or sets the relative vertical size of the text. It must be a number between 0 and 2 and is measured in the ONVIF coordinate system.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.DisplayText.Color">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.DisplayText.Value">
            <summary>
            Gets or sets the actual text to display.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.DisplayText.GetSchema">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.DisplayText.ReadXml(System.Xml.XmlReader)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.DisplayText.WriteXml(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.DisplayText.Apply(VideoOS.Platform.Metadata.Transformation)">
            <summary>
            Apply a transformation to this instance of a <see cref="T:VideoOS.Platform.Metadata.DisplayText"/>. This will modify the current
            instance coordinates.
            </summary>
            <param name="transformation">The <see cref="T:VideoOS.Platform.Metadata.Transformation"/> to apply to this instance</param>
        </member>
        <member name="T:VideoOS.Platform.Metadata.Appearance">
            <summary>
            This class is responsible for representing an ONVIF XML appearance.
            
            Instances of this class have value-identity, meaning that two classes with the same content are considered equal.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Appearance.Transformation">
            <summary>
            Gets or sets the transformation of the appearance
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Appearance.Shape">
            <summary>
            Gets or sets the shape of the appearance
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Appearance.Class">
            <summary>
            Gets or sets the class type of the Appearance
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Appearance.Description">
            <summary>
            Gets or sets the description of the object. This can be used to display a short text on the screen along with the shape.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Appearance.GetSchema">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Appearance.ReadXml(System.Xml.XmlReader)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Appearance.WriteXml(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Appearance.Equals(VideoOS.Platform.Metadata.Appearance)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Appearance.Equals(System.Object)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Appearance.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Metadata.Behaviour">
            <summary>
            This class is responsible for representing an ONVIF XML behavior for objects
            
            Instances of this class have value-identity, meaning that two classes with the same content are considered equal.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Behaviour.HasBehaviours">
            <summary>
            Gets whether there are any behaviors present
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Behaviour.IsIdle">
            <summary>
            Gets or sets that the behavior for the object is in the idle state
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Behaviour.IsRemoved">
            <summary>
            Gets or sets that the behavior for the object is in the removed state
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Behaviour.GetSchema">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Behaviour.ReadXml(System.Xml.XmlReader)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Behaviour.WriteXml(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Behaviour.Equals(VideoOS.Platform.Metadata.Behaviour)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Behaviour.Equals(System.Object)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Behaviour.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Metadata.Frame">
            <summary>
            This class is responsible for representing a Frame in ONVIF XML.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Frame.#ctor">
            <summary>
            Create a new instance of a <see cref="T:VideoOS.Platform.Metadata.Frame"/> with the <see cref="P:VideoOS.Platform.Metadata.Frame.UtcTime"/> property set to <see cref="F:System.DateTime.MinValue"/>.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Frame.#ctor(System.DateTime)">
            <summary>
            Create a new instance of a <see cref="T:VideoOS.Platform.Metadata.Frame"/> and set the <see cref="P:VideoOS.Platform.Metadata.Frame.UtcTime"/> property.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Frame.Transformation">
            <summary>
            Gets or sets the transformation part of the frame
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Frame.Objects">
            <summary>
            Gets the list of objects contained in the frame
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Frame.UtcTime">
            <summary>
            Gets or sets the UTC timestamp of the frame.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Frame.UtcTimeAttributeWasPresent">
            <summary>
            Gets whether <see cref="P:VideoOS.Platform.Metadata.Frame.UtcTime"/> was present in the XML that populated this instance.
            This property is false if the instance was not populated by XML.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Frame.GetSchema">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Frame.ReadXml(System.Xml.XmlReader)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Frame.WriteXml(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Frame.Equals(VideoOS.Platform.Metadata.Frame)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Frame.Equals(System.Object)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Frame.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Metadata.MetadataContent">
            <summary>
            This class is responsible for containing metadata received from the VMS system.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.MetadataContent.#ctor(System.Byte[])">
            <summary>
            Create an instance of <see cref="T:VideoOS.Platform.Metadata.MetadataContent"/> and initialize the metadata
            </summary>
            <param name="data">The metadata as an UTF-8 encoded byte array</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="data"/> is null</exception>
        </member>
        <member name="M:VideoOS.Platform.Metadata.MetadataContent.GetMetadataString">
            <summary>
            Get the metadata as a string. This is simply the constructor parameter decoded as UTF-8.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Metadata.MetadataContent.GetMetadataStream">
            <summary>
            Gets the metadata as deserialized objects
            </summary>
            <returns>A <see cref="T:VideoOS.Platform.Metadata.MetadataStream"/> that acts as the root node for the ONVIF XML.</returns>
            <exception cref="T:System.Xml.XmlException">If the data cannot be deserialized</exception>
        </member>
        <member name="T:VideoOS.Platform.Metadata.MetadataSerializer">
            <summary>
            This class is responsible for serializing metadata to the ONVIF XML metadata format
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.MetadataSerializer.WriteMetadataXml(VideoOS.Platform.Metadata.MetadataStream)">
            <summary>
            Write metadata and return the written data as a string.
            </summary>
            <param name="metadata">The metadata to write</param>
            <returns>The metadata XML.</returns>
        </member>
        <member name="M:VideoOS.Platform.Metadata.MetadataSerializer.WriteMetadataXml(System.IO.Stream,VideoOS.Platform.Metadata.MetadataStream)">
            <summary>
            Write metadata to a client-supplied stream.
            </summary>
            <param name="output">The output <see cref="T:System.IO.Stream"/> where the result will be written</param>
            <param name="metadata">The metadata to write</param>
        </member>
        <member name="T:VideoOS.Platform.Metadata.MetadataStream">
            <summary>
            This class is responsible for representing a Frame in ONVIF XML.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.MetadataStream.VideoAnalyticsItems">
            <summary>
            Gets the list of video analytics elements contained in this instance
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.MetadataStream.OriginalData">
            <summary>
            Gets the list of original data bytes.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.MetadataStream.NavigationalData">
            <summary>
            Gets or sets the navigational data.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.MetadataStream.GetAllFrames">
            <summary>
            Gets all frames included in all video analytics elements. In other words, this method returns all
            frames in this metadata stream instance.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all frames in the metadata</returns>
        </member>
        <member name="M:VideoOS.Platform.Metadata.MetadataStream.GetFrame">
            <summary>
            Gets the first frame or null if there are no frames. This is useful if the client of this class
            can only handle a single frame per metadata stream anyway.
            </summary>
            <returns>The first frame or null</returns>
        </member>
        <member name="M:VideoOS.Platform.Metadata.MetadataStream.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.MetadataStream.ReadXml(System.Xml.XmlReader)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.MetadataStream.WriteXml(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.MetadataStream.Equals(VideoOS.Platform.Metadata.MetadataStream)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.MetadataStream.Equals(System.Object)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.MetadataStream.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Metadata.NavigationalData">
            <summary>
            This class is responsible for holding navigational metadata.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Metadata.NavigationalData.MaxAzimuth">
            <summary>
            The maximum value that can be assigned to <see cref="P:VideoOS.Platform.Metadata.NavigationalData.Azimuth"/>.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Metadata.NavigationalData.MinAzimuth">
            <summary>
            The minimum value that can be assigned to <see cref="P:VideoOS.Platform.Metadata.NavigationalData.Azimuth"/>.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Metadata.NavigationalData.MaxLatitude">
            <summary>
            The maximum value that can be assigned to <see cref="P:VideoOS.Platform.Metadata.NavigationalData.Latitude"/>.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Metadata.NavigationalData.MinLatitude">
            <summary>
            The minimum value that can be assigned to <see cref="P:VideoOS.Platform.Metadata.NavigationalData.Latitude"/>.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Metadata.NavigationalData.MaxLongitude">
            <summary>
            The maximum value that can be assigned to <see cref="P:VideoOS.Platform.Metadata.NavigationalData.Longitude"/>.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Metadata.NavigationalData.MinLongitude">
            <summary>
            The minimum value that can be assigned to <see cref="P:VideoOS.Platform.Metadata.NavigationalData.Longitude"/>.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Metadata.NavigationalData.MinSpeed">
            <summary>
            The minimum value that can be assigned to <see cref="P:VideoOS.Platform.Metadata.NavigationalData.Speed"/>.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Metadata.NavigationalData.MinAccuracy">
            <summary>
            The minimum value that can be assigned to <see cref="P:VideoOS.Platform.Metadata.NavigationalData.VerticalAccuracy"/> and <see cref="P:VideoOS.Platform.Metadata.NavigationalData.HorizontalAccuracy"/>.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.NavigationalData.#ctor">
            <summary>
            Instantiate a new instance of <see cref="T:VideoOS.Platform.Metadata.NavigationalData"/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.NavigationalData.Altitude">
            <summary>
            Gets or set the altitude. It is measured in meters
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.NavigationalData.Azimuth">
            <summary>
            Gets or set the azimuth (aka bearing or course). It is measured in degrees and is in the range from -180 to 180
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is not in the range [-180; 180]</exception>
        </member>
        <member name="P:VideoOS.Platform.Metadata.NavigationalData.GeodeticSystem">
            <summary>
            Gets or set the geodetic system. If a system is not set, WGS84 is assumed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.NavigationalData.HorizontalAccuracy">
            <summary>
            Gets or set the horizontal accuracy. It is measured in meters and is a positive number
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is not positive</exception>
        </member>
        <member name="P:VideoOS.Platform.Metadata.NavigationalData.Latitude">
            <summary>
            Gets or set the latitude. It is measured in degrees and is in the range from -90 to 90
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is not in the range [-90; 90]</exception>
        </member>
        <member name="P:VideoOS.Platform.Metadata.NavigationalData.Longitude">
            <summary>
            Gets or set the longitude. It is measured in degrees and is in the range from -180 to 180
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is not in the range [-180; 180]</exception>
        </member>
        <member name="P:VideoOS.Platform.Metadata.NavigationalData.VerticalAccuracy">
            <summary>
            Gets or set the vertical accuracy. It is measured in meters and is a positive number
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is not positive</exception>
        </member>
        <member name="P:VideoOS.Platform.Metadata.NavigationalData.Speed">
            <summary>
            Gets or set the speed. It is measured in m/s and is a non-negative number
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value is negative</exception>
        </member>
        <member name="P:VideoOS.Platform.Metadata.NavigationalData.Version">
            <summary>
            Gets or sets the version of the Navigation Data XML
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.NavigationalData.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.NavigationalData.ReadXml(System.Xml.XmlReader)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.NavigationalData.WriteXml(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.NavigationalData.Equals(VideoOS.Platform.Metadata.NavigationalData)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.NavigationalData.Equals(System.Object)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.NavigationalData.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Metadata.MetadataDeserializer">
            <summary>
            This class is responsible for deserializing metadata stored in the ONVIF metadata format
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.MetadataDeserializer.ParseMetadataXml(System.String)">
            <summary>
            Parses the ONVIF metadata in the <paramref name="xml"/> into an instance of <see cref="T:VideoOS.Platform.Metadata.MetadataStream"/>
            </summary>
            <param name="xml">A string containing the XML representation of the metadata</param>
            <returns>An instance of <see cref="T:VideoOS.Platform.Metadata.MetadataStream"/> with the deserialized metadata</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="xml"/> is null</exception>
            <exception cref="T:System.Xml.XmlException">If the XML is not well-formed</exception>
        </member>
        <member name="M:VideoOS.Platform.Metadata.MetadataDeserializer.ParseMetadataXml(System.IO.Stream)">
            <summary>
            Parses the ONVIF metadata in the <paramref name="dataStream"/> into an instance of <see cref="T:VideoOS.Platform.Metadata.MetadataStream"/>
            </summary>
            <param name="dataStream">A stream containing the XML representation of the metadata</param>
            <returns>An instance of <see cref="T:VideoOS.Platform.Metadata.MetadataStream"/> with the deserialized metadata</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="dataStream"/> is null</exception>
            <exception cref="T:System.Xml.XmlException">If the XML is not well-formed</exception>
        </member>
        <member name="M:VideoOS.Platform.Metadata.MetadataDeserializer.ParseMetadataXml(System.Byte[])">
            <summary>
            Parses the ONVIF metadata in the <paramref name="metadataContent"/> into an instance of <see cref="T:VideoOS.Platform.Metadata.MetadataStream"/>
            </summary>
            <param name="metadataContent">A byte array containing the XML representation of the metadata encoded as UTF-8</param>
            <returns>An instance of <see cref="T:VideoOS.Platform.Metadata.MetadataStream"/> with the deserialized metadata</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="metadataContent"/> is null</exception>
            <exception cref="T:System.Xml.XmlException">If the XML is not well-formed</exception>
        </member>
        <member name="T:VideoOS.Platform.Metadata.MetadataXml">
            <summary>
            A nametable for Metadata XML used for speeding up processing and centralizing names.
            This works by only instantiating a specific string once, thereby making reference
            comparisons possible for string matching. All XML names (elements and attributes)
            *must* be public static read-only string. Otherwise the reflection logic will fail
            to add the names to the <see cref="T:System.Xml.XmlNameTable"/>.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Metadata.OnvifObject">
            <summary>
            This class is responsible for representing an ONVIF XML object.
            
            Instances of this class have value-identity, meaning that two classes with the same content are considered equal.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.OnvifObject.#ctor">
            <summary>
            Create a new instance of <see cref="T:VideoOS.Platform.Metadata.OnvifObject"/> and initialize <see cref="P:VideoOS.Platform.Metadata.OnvifObject.ObjectId"/> to zero.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.OnvifObject.#ctor(System.Int32)">
            <summary>
            Create a new instance of <see cref="T:VideoOS.Platform.Metadata.OnvifObject"/> and initialize <see cref="P:VideoOS.Platform.Metadata.OnvifObject.ObjectId"/>.
            </summary>
            <param name="objectId">The value to set <see cref="P:VideoOS.Platform.Metadata.OnvifObject.ObjectId"/> to</param>
        </member>
        <member name="P:VideoOS.Platform.Metadata.OnvifObject.ObjectId">
            <summary>
            Gets or sets the ID of the object. This is to track objects from frame to frame.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.OnvifObject.Appearance">
            <summary>
            Gets or sets the appearance of the object.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.OnvifObject.Behaviour">
            <summary>
            Gets or sets the behavior of the object.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.OnvifObject.GetSchema">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.OnvifObject.ReadXml(System.Xml.XmlReader)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.OnvifObject.WriteXml(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.OnvifObject.Equals(VideoOS.Platform.Metadata.OnvifObject)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.OnvifObject.Equals(System.Object)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.OnvifObject.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.OnvifObject.op_Equality(VideoOS.Platform.Metadata.OnvifObject,VideoOS.Platform.Metadata.OnvifObject)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.OnvifObject.op_Inequality(VideoOS.Platform.Metadata.OnvifObject,VideoOS.Platform.Metadata.OnvifObject)">
            <summary>
            Provides value type inequality semantics
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Metadata.Rectangle">
            <summary>
            This class is responsible for representing an ONVIF XML rectangle.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Rectangle.Bottom">
            <summary>
            Gets or sets the y-coordinate of the bottom of the rectangle
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Rectangle.Top">
            <summary>
            Gets or sets the y-coordinate of the top of the rectangle
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Rectangle.Right">
            <summary>
            Gets or sets the x-coordinate of the right side of the rectangle
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Rectangle.Left">
            <summary>
            Gets or sets the x-coordinate of the left side of the rectangle
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Rectangle.LineColor">
            <summary>
            Gets or sets the color of the line used to draw the bounding box.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Rectangle.LineDisplayPixelThickness">
            <summary>
            Gets or sets the thickness of the line used to draw the bounding box. This thickness is absolute, even if the image is resized.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Rectangle.FillColor">
            <summary>
            Gets or sets the color of the fill of the bounding box.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Rectangle.GetSchema">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Rectangle.ReadXml(System.Xml.XmlReader)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Rectangle.WriteXml(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Rectangle.Apply(VideoOS.Platform.Metadata.Transformation)">
            <summary>
            Apply a transformation to this instance of a <see cref="T:VideoOS.Platform.Metadata.Rectangle"/>. This will modify the current
            instance.
            </summary>
            <param name="transformation">The <see cref="T:VideoOS.Platform.Metadata.Transformation"/> to apply to this rectangle</param>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Rectangle.ToString">
            <summary>
            Provides a friendly print of the rectangle coordinates.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Rectangle.Equals(VideoOS.Platform.Metadata.Rectangle)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Rectangle.Equals(System.Object)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Rectangle.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Metadata.Shape">
            <summary>
            This class is responsible for representing an ONVIF XML shape.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Shape.BoundingBox">
            <summary>
            Gets or sets the bounding box of the shape.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Shape.CenterOfGravity">
            <summary>
            Gets or sets the CenterOfGravity of the shape.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Shape.IsValid">
            <summary>
            Gets whether the shape is valid according to the ONVIF standard, except that we also
            allow a missing CenterOfGravity. A valid shape has a bounding box defined (i.e different from null).
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Shape.GetSchema">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Shape.ReadXml(System.Xml.XmlReader)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Shape.WriteXml(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Shape.Equals(VideoOS.Platform.Metadata.Shape)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Shape.Equals(System.Object)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Shape.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Metadata.Transformation">
            <summary>
            This class is responsible for representing an ONVIF XML transformation.
            
            Instances of this class have value-identity, meaning that two classes with the same content are considered equal.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Transformation.Translate">
            <summary>
            Gets or sets the translation coordinates of the transformation.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Transformation.Scale">
            <summary>
            Gets or sets the scale of the transformation.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Transformation.GetSchema">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Transformation.ReadXml(System.Xml.XmlReader)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Transformation.WriteXml(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Transformation.Equals(VideoOS.Platform.Metadata.Transformation)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Transformation.Equals(System.Object)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Transformation.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Transformation.op_Equality(VideoOS.Platform.Metadata.Transformation,VideoOS.Platform.Metadata.Transformation)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Transformation.op_Inequality(VideoOS.Platform.Metadata.Transformation,VideoOS.Platform.Metadata.Transformation)">
            <summary>
            Provides value type inequality semantics
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Metadata.Vector">
            <summary>
            This class is responsible for representing a two-dimensional vector in ONVIF XML.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Vector.X">
            <summary>
            Gets or sets the x component of the vector
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.Vector.Y">
            <summary>
            Gets or sets the y component of the vector
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Vector.GetSchema">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Vector.ReadXml(System.Xml.XmlReader)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Vector.WriteXml(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Vector.Equals(VideoOS.Platform.Metadata.Vector)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Vector.Equals(System.Object)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.Vector.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Metadata.VideoAnalytics">
            <summary>
            This class is responsible for representing a VideoAnalytics in ONVIF XML.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Metadata.VideoAnalytics.Frames">
            <summary>
            Gets the list of frames contained in this instance
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.VideoAnalytics.GetSchema">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.VideoAnalytics.ReadXml(System.Xml.XmlReader)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.VideoAnalytics.WriteXml(System.Xml.XmlWriter)">
            <summary>
            <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.VideoAnalytics.Equals(VideoOS.Platform.Metadata.VideoAnalytics)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.VideoAnalytics.Equals(System.Object)">
            <summary>
            Provides value type equality semantics
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Metadata.VideoAnalytics.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode"/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.GisMapLocation">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.horizontalsliderthumb">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_bookmark_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_firstsequence_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_firstsequence_default1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_lastsequence_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_nextsequence_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_normalspeed_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_outofscope_allmarkersout">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_outofscope_allmarkersoutright">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_outofscope_bookmarksleft">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_outofscope_bookmarksright">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_outofscope_endmarker">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_outofscope_startmark">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_pause_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_play_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_playpause_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_playpausebackward_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_previoussequence_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_selectionmode_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_stepbackward_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_stepforward_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_timebutton_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.icn16x16_light_timelineoptions_default">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.Separator_Light">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.Single_View_16_h_p">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.Smart_Wall_Preset">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.Video_Wall_16_n_i8">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.View_group_closed_16_n_p">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.ViewItem">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Resources.Window_16_h_p">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Properties.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Strings.PlaybackWpfUserControlMini_FirstSequence_Tooltip">
            <summary>
              Looks up a localized string similar to First Sequence.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Strings.PlaybackWpfUserControlMini_LastSequence_Tooltip">
            <summary>
              Looks up a localized string similar to Last Sequence.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Strings.PlaybackWpfUserControlMini_NextFrame_Tooltip">
            <summary>
              Looks up a localized string similar to Next Frame.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Strings.PlaybackWpfUserControlMini_NextSequence_Tooltip">
            <summary>
              Looks up a localized string similar to Next Sequence.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Strings.PlaybackWpfUserControlMini_PlayBackward_Tooltip">
            <summary>
              Looks up a localized string similar to Play Backward.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Strings.PlaybackWpfUserControlMini_PlayForward_Tooltip">
            <summary>
              Looks up a localized string similar to Play Forward.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Strings.PlaybackWpfUserControlMini_PreviousFrame_Tooltip">
            <summary>
              Looks up a localized string similar to Previous Frame.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Strings.PlaybackWpfUserControlMini_PreviousSequence_Tooltip">
            <summary>
              Looks up a localized string similar to Previous Sequence.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Properties.Strings.SearchResultStateLoading">
            <summary>
              Looks up a localized string similar to Loading ....
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper">
            <summary>
            This class is intended to be used as the base class for all ConfigurationItem strong typed classes.
            a wrapper and utility class, making it easy to implement those.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.#ctor(VideoOS.Platform.ServerId,System.String)">
            <summary>
            
            </summary>
            <param name="serverId"></param>
            <param name="path"></param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.ConfigurationItem">
            <summary>
            The underlaying ConfigurationItem
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.IsValid">
            <summary>
            Returns true when the underlaying class is valid
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.MethodIds">
            <summary>
            Returns the methodid valid for this item
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.IsDirty">
            <summary>
            Defines if the underlaying class needs to be saved on the server
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.DisplayName">
            <summary>
            The displayable name of the item
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.Path">
            <summary>
            The identification of the item represented as a path
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.Id">
            <summary>
            Guid identification of the item, when available.
            For non-specific items this property is Guid.Empty
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.GetPropertyValue(System.String)">
            <summary>
            Gets the value of a specific property.
            
            If property is not found, null is returned. Otherwise the string is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.GetPropertySecureValue(System.String)">
            <summary>
            Gets the value of a specific property.
            
            If property is not found, null is returned. Otherwise the string is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.GetPropertyValueBool(System.String)">
            <summary>
            Gets the value of a specific property.
            
            If property is not found, false is returned. Otherwise the bool value of the property is returned.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.Children">
            <summary>
            Returns the children of this item
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.ClearChildrenCache">
            <summary>
            Clear the internal cache of children.  Can be used to force a new set of children to be 
            fetched from the server at next access.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.ExecuteMethod(System.String)">
            <summary>
            Executes a method on this item.  A new ConfigurationItem is returned - either same item or a new paremeter type item.
            </summary>
            <param name="methodId"></param>
            <exception cref="T:System.ArgumentException">If the methodId is not is not valid</exception>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.GetItem(System.String)">
            <summary>
            Get one specific Item from the server
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.ValidateItem">
            <summary>
            Validate the current Item
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.SaveItem(VideoOS.ConfigurationApi.ClientService.ConfigurationItem)">
            <summary>
            Save the specified Item (NOT the class owned Item)
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiItemWrapper.Save">
            <summary>
            Save memory version of class on server
            </summary>
            <exception cref="T:VideoOS.Platform.Proxy.ConfigApi.ValidateResultException"></exception>
            <exception cref="T:VideoOS.Platform.ArgumentMIPException">If LoginSettings for server not found</exception>
        </member>
        <member name="T:VideoOS.Platform.Proxy.ConfigApi.ValidateResultException">
            <summary>
            Thrown when the server validation found an error.  The ValidateResult contains a set of found issues.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ValidateResultException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ValidateResultException.#ctor(VideoOS.ConfigurationApi.ClientService.ValidateResult)">
            <summary>
            
            </summary>
            <param name="validateResult"></param>
        </member>
        <member name="P:VideoOS.Platform.Proxy.ConfigApi.ValidateResultException.ValidateResult">
            <summary>
            Contains one or more descriptions of the errors found during the server validation.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiManager">
            <summary>
            Class containing proxy classes for towards all servers this usercontext is working with
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ConfigurationApiManager.GetConfigurationService(VideoOS.Platform.ServerId)">
            <summary>
            
            </summary>
            <param name="serverId"></param>
            <exception cref="T:System.ArgumentException">When LoginSettings not found for serverId</exception>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Proxy.ConfigApi.ConfigurationItemPath">
            <summary>
            Class that represents a path in the configuration API
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.ConfigApi.ConfigurationItemPath.Path">
            <summary>
            Gets the text representation of this <see cref="T:VideoOS.Platform.Proxy.ConfigApi.ConfigurationItemPath"/> instance.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.ConfigApi.ConfigurationItemPath.IsFolder">
            <summary>
            Gets a boolean indicating whether this <see cref="T:VideoOS.Platform.Proxy.ConfigApi.ConfigurationItemPath"/> represents a folder path
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.ConfigApi.ConfigurationItemPath.ParentItemType">
            <summary>
            Gets the parent item type if this <see cref="T:VideoOS.Platform.Proxy.ConfigApi.ConfigurationItemPath"/> represents a folder path; otherwise <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.ConfigApi.ConfigurationItemPath.ItemType">
            <summary>
            Gets the item type for the path.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.ConfigApi.ConfigurationItemPath.Id">
            <summary>
            Gets the id of the parent item if this <see cref="T:VideoOS.Platform.Proxy.ConfigApi.ConfigurationItemPath"/> represents a folder path; otherwise the id of item - or <see cref="F:System.String.Empty"/> for the system type.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ConfigurationItemPath.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ConfigurationItemPath.#ctor(VideoOS.Platform.FQID)">
            <summary>
            Construct a ConfigurationItem Path from a FQID
            </summary>
            <param name="fqid"></param>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ConfigurationItemPath.#ctor(System.String,System.Guid)">
            <summary>
            Construct the class from a Configuration itemtype, and a id
            </summary>
            <param name="itemType"></param>
            <param name="guid"></param>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ConfigurationItemPath.#ctor(System.String,System.String)">
            <summary>
            Construct the class from a Configuration itemtype, and a id
            </summary>
            <param name="itemType"></param>
            <param name="id"></param>
        </member>
        <member name="M:VideoOS.Platform.Proxy.ConfigApi.ConfigurationServiceClientDecorator.GetItem(System.String)">
            <summary>
            All methods can throw same exceptions
            </summary>
            <param name="path"></param>
            <exception cref="T:System.ServiceModel.CommunicationException"></exception>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Proxy.AlarmClient.AlarmClientFactory">
            <summary>
            Factory to create alarm clients
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.AlarmClientFactory.Create(VideoOS.Platform.ServerId,System.String,System.Version,System.Boolean)">
            <summary>
            Creates IAlarmClient based on server identification.<br/>
            The serverId is used to identify the VMS system that contains the EventServer you are about to communicate with.  
            For a single VMS system, you can use the EnvironmentManager.Instance.MasterSite.FQID.ServerId, as there is only one server 
            to login to in the system.<br/>
            Note, that for a Federated Architecture deployment, each federated site will have each own EventServer and alarm database.<br/>
            If XProtect Enterprise or Professional with slave setup might be used by your customers or XProtect Corporate, then the ServerId
            should be stored in relation to the AlarmClient where you received the Alarm in the first place. This could be done
            by simply walk through all the sites in the EnvironmentManager.Instance.MasterSite, and create one AlarmClient for each site - a Dictionary with ServerId, AlarmClient would then be contain the required information for managing the alarms later.<br/>
            Another choice is to pick the ServerId from the Alarm (or EventBase) source FQID.  Be aware that the system will then 
            automatically try to get from the provided FQID.ServerId (if it points to a Recorder), to the ServerId where the VMS Server where the Recorder belongs. This is 
            done via the FQID.GetParent() method.<br/>
            </summary>
            <param name="serverId">Server id</param>
            <param name="eventServerURI">Event server uri</param>
            <param name="eventServerVersion">Event server version</param>
            <param name="basicUser">If is Basic user</param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Proxy.AlarmClient.AlarmClientManager">
            <summary>
            The alarm client manager can be used in order to handle alarm client <see cref="T:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient"/>. 
            The alarm client manager will create a alarm client to
            use when handling alarms. The client is created based on a server id which is the server
            to get the alarms from. In order to receive alarms from the server it must have a Event 
            Server running.
            The alarm client manager will keep track of created clients and handle caching of the
            clients.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.AlarmClientManager.GetAlarmClient(VideoOS.Platform.ServerId)">
            <summary>
            Get an alarm client for a specific server. This call can be called on every
            alarm client execution without overhead.
            </summary>
            <param name="serverId">The server id of the server to connect to</param>
            <exception cref="T:VideoOS.Platform.MIPException">Thrown if either the event server is not registered or if the client fails to be constructed</exception>
            <returns>Alarm client</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.AlarmClientManager.Clear(VideoOS.Platform.ServerId)">
            <summary>
            Clears the manager for the client related to the given server
            </summary>
            <param name="serverId">Id of the server for which to close and remove the client</param>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.AlarmClientManager.Clear">
            <summary>
            Clears and closes all clients from the manager
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.AlarmClientManager.GetParentServerId(VideoOS.Platform.ServerId)">
            <summary>
            If we have the ServerId of a XPCORS, or a XPE slave, try get hold of the ServerId for the Mgt Server, as it points to the Registered services.
            </summary>
            <param name="serverId"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.AlarmClientManager.CreateAlarmCommandClient(VideoOS.Platform.ServerId)">
            <summary>
            Create alarm command client.
            </summary>
            <param name="serverId">Server id</param>
            <returns>Alarm client</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.AlarmClientManager.GetEventServerVersion(VideoOS.Platform.Configuration.ServiceURIInfo)">
            <summary>
            Gets the event server version including major, minor and revision information. 
            </summary>
            <param name="eventServerURIInfo">Event Server URI Info</param>
            <returns>Version</returns>
        </member>
        <member name="T:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient">
            <summary>
            The alarm client is used to handle alarm specific actions. The client can
            be used to both add and get alarms. Updates of already existing alarms can 
            be done primarily updating the alarm management field such as alarm state 
            and and owner. The alarm history can also be received which is the collection 
            of all the changes made to a specific alarm. 
            This interface wrappes both alarm clients against XProtect Enterprise and 
            XProtect Corporate.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.Add(VideoOS.Platform.Data.Alarm)">
            <summary>
            Add an alarm to the Event Server. No filtering and manipulation is done 
            on the way to the database and the alarm structure is preserved in the 
            database. This means that adding the alarm and getting it afterwards using 
            the Alarm.Eventheader.ID will result in an alarm containing the same data 
            fields. 
            </summary>
            <param name="alarm">Alarm</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication error.</exception> 
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.AddAsEvent(VideoOS.Platform.Data.Alarm)">
            <summary>
            Add alarm as event (deprecated)
            </summary>
            <param name="alarm">Alarm</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication error.</exception>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.AddEvent(VideoOS.Platform.Data.BaseEvent)">
            <summary>
            Add an event to the Event Server. The event is checked and filtered in 
            the Event Server against the user defined alarm definitions. Alarms are 
            created based on the baseEvent data on every matching alarm definition. 
            The match criteria is the BaseEvent.EventHeader.Message which match the 
            alarm definition event message and the 
            BaseEvent.EventHeader.Source.FQID.ObjectId which matches the source. The 
            alarms created gets the alarm definition details added as data and the 
            alarm is given a unique id.
            </summary>
            <param name="baseEvent">Event</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication error.</exception> 
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.Get(System.Guid)">
            <summary>
            Gets a specific alarm based on the input id.
            </summary>
            <param name="id">Alarm id</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication error.</exception> 
            <returns>Alarm</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.GetEvent(System.Guid)">
            <summary>
            Gets a specific event based on the input id.
            </summary>
            <param name="id">Event id</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the id is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication error.</exception> 
            <returns>Event</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.GetHeader(System.Guid)">
            <summary>
            Gets the event header from a specific alarm.
            </summary>
            <param name="id">Alarm id</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication error.</exception> 
            <returns>Event header</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.GetSnapshots(System.Guid)">
            <summary>
            Get the snapshot list from a specific alarm. 
            </summary>
            <param name="id">Alarm id</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication error.</exception> 
            <returns>Snapshot list</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.AttachSnapshot(System.Guid,VideoOS.Platform.Data.Snapshot)">
            <summary>
            Attach a snapshot to a specific alarm. 
            </summary>
            <param name="id">Alarm id</param>
            <param name="snapshot">Snapshot to attach</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication error.</exception> 
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.UpdateAlarm(System.Guid,System.String,System.Int32,System.Int32,System.DateTime,System.String)">
            <summary>
            Updates a specific alarm with the input parameters. Only valid input 
            parameters is updated.
            </summary>
            <param name="id">Id of the alarm to be updated</param>
            <param name="text">The text will not be added to the alarm but to the 
            alarm history which contains the history of alarm updates 
            <see cref="T:VideoOS.Platform.Proxy.Alarm.AlarmHistory"/>. 
            If null no text is written</param>
            <param name="state">The new alarm state. Only states greater than 0 is 
            valid</param>
            <param name="priority">The new alarm priority. Only priorities greater 
            than 0 is valid</param>
            <param name="time">The time of the update</param>
            <param name="assignedTo">The new assigned to owner. If null no owner is 
            assigned</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication error.</exception> 
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.UpdateMultipleAlarms(System.Guid,System.Int32,System.Int32,System.DateTime,System.String)">
            <summary>
            Updates multiple alarms. The method updates all alarms which is created by a 
            specific object. The object is defined by the 
            Alarm.EventHeader.Source.FQID.ObjectId. Both state and the assigned to will 
            be updated. 
            </summary>
            <param name="objectId">Object id of the alarms to update. The id is matched to 
            Alarm.EventHeader.Source.FQID.ObjectId in the alarm.</param>
            <param name="oldState">Old state. Only alarms with the this state will be 
            updated.</param>
            <param name="newState">New state.</param>
            <param name="time">The time of the update</param>
            <param name="assignedTo">New assigned to user</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication error.</exception> 
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.Acknowledge(System.Guid)">
            <summary>
            Acknowledges a specific alarm. Acknowledge alarms wil get the state set to In
            Progress (state = 4) and the owner will be set to the user calling.
            </summary>
            <param name="id">Id of the alarm to be updated</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication error.</exception> 
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.AcknowledgeMultipleAlarms(System.Guid)">
            <summary>
            Acknowledges multiple alarms. The method will acknowledge all alarms which is 
            created by a specific object. The object is defined by the 
            Alarm.EventHeader.Source.FQID.ObjectId. The acknowledge alarms wil get the state 
            set to In Progress (state = 4) and the owner will be set to the user calling.
            </summary>
            <param name="objectId">Object id of the alarms to update. The id is matched to 
            Alarm.EventHeader.Source.FQID.ObjectId in the alarm.</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication error.</exception> 
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.GetAlarmLines(System.Int32,System.Int32,VideoOS.Platform.Proxy.Alarm.AlarmFilter)">
            <summary>
            Gets alarm lines based on alarm filter. The lines received is a subset of the
            full set of alarm lines that satisfies the filter conditions. The subset is
            received based on the "from" and "maxCount" input parameters. 
            An example:
            Get the newest 100 alarm lines where the alarm state is In Progress (state = 4). 
            The alarm lines should be returned in descending time order. Help on constructing
            the alarm filter matching this, see the Alarm filter documentation. The "from"
            parameter should be set to 0 meaning the start of the resulting matching set and the
            "maxCount" parameter is set to 100.
            </summary>
            <param name="from">Start of alarm lines.</param>
            <param name="maxCount">Max count of received alarm lines</param>
            <param name="filter">The alarm filter</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication error.</exception> 
            <returns>List of alarm lines</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.GetEventLines(System.Int32,System.Int32,VideoOS.Platform.Proxy.Alarm.EventFilter)">
            <summary>
            Gets event lines based on event filter. The lines received is a subset of the
            full set of event lines that satisfies the filter conditions. The subset is
            received based on the "from" and "maxCount" input parameters. 
            An example:
            Get the newest 100 event lines where the event name contains "My event". 
            The event lines should be returned in descending time order. Help on constructing
            the event filter matching this, see the event filter documentation. The "from"
            parameter should be set to 0 meaning the start of the resulting matching set and the
            "maxCount" parameter is set to 100.
            </summary>
            <param name="from">Start of event lines.</param>
            <param name="maxCount">Max count of received event lines</param>
            <param name="filter">The event filter</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the event id is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication errors.</exception> 
            <returns>List of event lines</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.GetStatistics">
            <summary>
            Gets the alarm statistics. The statistics contains overall informations on alarm
            count based on different alarm properties like state and priority 
            <see cref="T:VideoOS.Platform.Proxy.Alarm.Statistic"/> 
            for more information about the content.
            </summary>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication errors.</exception> 
            <returns>Alarm statistics</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.GetAlarmHistory(System.Guid)">
            <summary>
            Gets the alarm history. This methods returns a collection alarm history 
            objects which contains information on the changes made to the alarm.
            The alarm history reflects the alarm updates made 
            Check <see cref="T:VideoOS.Platform.Proxy.Alarm.AlarmHistory"/>
            for details.
            </summary>
            <param name="id">Id of the alarm to get the history about</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication errors.</exception> 
            <returns>Alarm history</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.GetAlarmUpdateHistory(System.Guid)">
            <summary>
            Gets the alarm update history. This method returns a collection of alarm update history
            objects which contains the information on the changes made to the alarm.
            The alarm update history reflects the alarm updates
            Check <see cref="T:VideoOS.Platform.Proxy.Alarm.AlarmUpdate"/>
            for details.
            </summary>
            <param name="id">Id for the alarm to get the history about</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication errors.</exception> 
            <returns>Alarm update history</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.GetAlarmMessages">
            <summary>
            Gets all the different alarm messages received up to this point in time. 
            The alarm message is the Alarm.EventHeader.Message field in the alarm.
            </summary>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">
            Thrown if the alarm is rejected by the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communication error.</exception> 
            <returns>Messages</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.OpenClient">
            <summary>
            Opens the alarm client for use.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.CloseClient">
            <summary>
            Closes the alarm client.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.State">
            <summary>
            Gets the alarm client commnication state.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.StartAlarmLineSession(VideoOS.Platform.Proxy.Alarm.AlarmFilter)">
            <summary>
            Starts a session which creates an alarm lines queue on the server, which
            matches the filter
            </summary>
            <param name="filter">Filter on alarm lines</param>
            <returns>The session id</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.GetSessionAlarmLines(System.Int32,System.Guid)">
            <summary>
            Get the specified number of alarm lines in the session 
            </summary>
            <param name="maxCount">Maximum number of alarm lines to return</param>
            <param name="sessionId">The session id returned by <see cref="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.StartAlarmLineSession(VideoOS.Platform.Proxy.Alarm.AlarmFilter)"/></param>
            <returns>Alarm update data</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.StopAlarmLineSession(System.Guid)">
            <summary>
            Stops the session of alarm lines queue
            </summary>
            <param name="sessionId">The session id returned by  <see cref="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.StartAlarmLineSession(VideoOS.Platform.Proxy.Alarm.AlarmFilter)"/>, used by <see cref="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.GetSessionAlarmLines(System.Int32,System.Guid)"/> </param>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.StartEventLineSession(VideoOS.Platform.Proxy.Alarm.EventFilter)">
            <summary>
            Starts a session which creates an event line queue on the server, which
            matches the filter
            </summary>
            <param name="filter">Filter on the event lines</param>
            <returns>The session id</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.GetSessionEventLines(System.Int32,System.Guid)">
            <summary>
            Gets the specified number of event lines in the session
            </summary>
            <param name="maxCount">Maximum number of event lines to return</param>
            <param name="sessionId">The session id returned by <see cref="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.StartEventLineSession(VideoOS.Platform.Proxy.Alarm.EventFilter)"/></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.StopEventLineSession(System.Guid)">
            <summary>
            Stops the session of the event lines queue
            </summary>
            <param name="sessionId">The session id returned by <see cref="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.StartEventLineSession(VideoOS.Platform.Proxy.Alarm.EventFilter)"/>, used by <see cref="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.GetSessionEventLines(System.Int32,System.Guid)"/> </param>
        </member>
        <member name="M:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient.UpdateAlarmValues(System.Guid,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Updates a set of fields on a given alarm. The alarm to update is identified by the id.
            
            The updates parameter defines what fields to update, and what value to assign to them.
            
            The following fields can be updated:<br/>
            - "AssignedTo"<br/>
            - "Comment"<br/>
            - "Priority"<br/>
            - "PriorityInt"<br/>
            - "PriorityName"<br/>
            - "ReasonCode"<br/>
            - "State"<br/>
            - "StateInt"<br/>
            - "StateName"<br/>
            </summary>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">
            Thrown if invalid field key or value</exception>
            <param name="id">Id of alarm to update</param>
            <param name="updates">KeyValuePair of fields to update</param>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.AlarmFilter">
            <summary>
            The Alarm Filter is used to filter alarm lines.
            Alarm filter has conditions to filter by and
            order in which to return the alarm list.
            Ordering priority is done by position in the array.
            First position in the array has highest priority.
            The filter should use '[]' to wrap up special characters,
            otherwise special characters are treated as wildcard
            characters and will be removed from the database.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmFilter.ExtensionData">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmFilter.Conditions">
            <summary>
            Conditions of the filter
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmFilter.Orders">
            <summary>
            Orders of the filter.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.EventFilter">
            <summary>
            The Event Filter is used to filter event lines.
            Event filter has conditions to filter by and
            order in which to return the event list.
            Ordering priority is done by position in the array.
            First position in the array has highest priority.
            The filter should use '[]' to wrap up special characters,
            otherwise special characters are treated as wildcard
            characters and will be removed from the database.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventFilter.ExtensionData">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventFilter.Conditions">
            <summary>
            Conditions of the filter
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventFilter.Orders">
            <summary>
            Orders of the filter.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.Condition">
            <summary>
            The condition is used in the alarm filter to define the filter constains.
            Note: The value has to match the target object type.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.Condition.ExtensionData">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.Condition.Operator">
            <summary>
            The condition operator.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.Condition.Target">
            <summary>
            The condition target.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.Condition.Value">
            <summary>
            The condition value. The value type must match the
            target type in order to be valid.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.OrderBy">
            <summary>
            Order by is used when defining a order of the filter result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.OrderBy.ExtensionData">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.OrderBy.Order">
            <summary>
            The order.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.OrderBy.Target">
            <summary>
            The target of the order.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">
            <summary>
            The alarm service fault is thrown when a alarm action either is rejected
            or fails for some reason.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault.ExtensionData">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault.ErrorDescription">
            <summary>
            The error description.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault.ErrorReason">
            <summary>
            The error reason.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.AlarmFaultType">
            <summary>
            The alarm fault type defines the reason of the alarm fault. 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.Operator">
            <summary>
            The operator is used in the filter conditions.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.Target">
            <summary>
            The target is the data field on which both the filter conditions
            and order by statements are constructed.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.LocalId">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.Id">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.State">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.Priority">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.SourceName">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.Name">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.AssignedTo">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.Type">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.RuleType">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.Location">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.Message">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.CustomTag">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.VendorName">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.ObjectValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.Description">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.ObjectId">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.Modified">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.PriorityName">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.Category">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.CategoryName">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.StateName">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Target.CameraId">
            <summary>
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.Order">
            <summary>
            Filter order defines in on which data field the resulting data is ordered.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Order.Ascending">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Proxy.Alarm.Order.Descending">
            <summary>
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.AlarmUpdateData">
            <summary>
            The alarm line is a subset of the alarm. The fields contained in the alarm line
            are also the fields which are searchable using the alarm filter 
            <see cref="T:VideoOS.Platform.Proxy.Alarm.AlarmFilter"/>.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmUpdateData.ExtensionData">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmUpdateData.Deleted">
            <summary>
            Deleted alarm line ids
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmUpdateData.Inserted">
            <summary>
            Inserted alarm lines. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmUpdateData.Updated">
            <summary>
            Updated alarm lines. 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.EventUpdateData">
            <summary>
            The event line is a subset of the alarm. The fields contained in the event line
            are also the fields which are searchable using the alarm filter 
            <see cref="T:VideoOS.Platform.Proxy.Alarm.AlarmFilter"/>.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventUpdateData.ExtensionData">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventUpdateData.Deleted">
            <summary>
            Deleted event line ids
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventUpdateData.Inserted">
            <summary>
            Inserted event lines. 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.AlarmLine">
            <summary>
            The alarm line is a subset of the alarm. The fields contained in the alarm line
            are also the fields which are searchable using the alarm filter 
            <see cref="T:VideoOS.Platform.Proxy.Alarm.AlarmFilter"/>.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.ExtensionData">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.AssignedTo">
            <summary>
            Assigned to coreesponds to Alarm.AssignedTo
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.CameraId">
            <summary>
            The camera id either of the source camera or if the source
            is not a camera then the first related camera.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.CustomTag">
            <summary>
            Custom tag corresponds to Alarm.EventHeader.CustomTag
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.Description">
            <summary>
            Description corresponds to Alarm.Description
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.Id">
            <summary>
            Id corresponds to Alarm.EventHeader.ID
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.LocalId">
            <summary>
            LocalId is a human readable alarm id that is unique on a server.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.Location">
            <summary>
            Location corresponds to Alarm.Location
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.Message">
            <summary>
            Message corresponds to Alarm.EventHeader.Message
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.Name">
            <summary>
            Name corresponds to Alarm.EventHeader.Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.ObjectValue">
            <summary>
            Object value is the first AnalyticsObject value in the alarm.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.Priority">
            <summary>
            Priority corresponds to Alarm.EventHeader.Priority
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.PriorityName">
            <summary>
            Priority corresponds to Alarm.EventHeader.PriorityName
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.RuleType">
            <summary>
            Rule type is the type of the first rule in the alarm
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.SourceId">
            <summary>
            Source id corresponds to Alarm.EventHeader.EventSource.FQID.ObjectId
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.SourceName">
            <summary>
            Source name corresponds to Alarm.EventHeader.EventSource.Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.State">
            <summary>
            State corresponds to Alarm.State
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.StateName">
            <summary>
            StateName corresponds to Alarm.StateName
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.Category">
            <summary>
            Category corresponds to Alarm.Category
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.CategoryName">
            <summary>
            StateName corresponds to Alarm.CategoryName
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.Timestamp">
            <summary>
            Timestamp corresponds to Alarm.EventHeader.Timestamp
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.Type">
            <summary>
            Type corresponds to Alarm.EventHeader.Type
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.VendorName">
            <summary>
            Vendor name corresponds to Alarm.Vendor.Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.Modified">
            <summary>
            Modified is time of the last alarm modification done.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmLine.FilterMatch">
            <summary>
            Modified is time of the last alarm modification done.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.EventLine">
            <summary>
            The event line is a subset of the event. The fields contained in the event line
            are also the fields which are searchable using the event filter 
            <see cref="T:VideoOS.Platform.Proxy.Alarm.EventFilter"/>.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventLine.MessageId">
            <summary>
            The ID of the message
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventLine.ExtensionData">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventLine.CameraId">
            <summary>
            The camera id either of the source camera or if the source
            is not a camera then the first related camera.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventLine.CustomTag">
            <summary>
            Custom tag corresponds to Alarm.EventHeader.CustomTag
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventLine.Id">
            <summary>
            Id corresponds to Alarm.EventHeader.ID
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventLine.LocalId">
            <summary>
            LocalId is a human readable alarm id that is unique on a server.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventLine.Message">
            <summary>
            Message corresponds to Alarm.EventHeader.Message
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventLine.Name">
            <summary>
            Name corresponds to Alarm.EventHeader.Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventLine.ObjectValue">
            <summary>
            Object value is the first AnalyticsObject value in the alarm.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventLine.RuleType">
            <summary>
            Rule type is the type of the first rule in the alarm
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventLine.SourceId">
            <summary>
            Source id corresponds to Alarm.EventHeader.EventSource.FQID.ObjectId
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventLine.SourceName">
            <summary>
            Source name corresponds to Alarm.EventHeader.EventSource.Name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventLine.Timestamp">
            <summary>
            Timestamp corresponds to Alarm.EventHeader.Timestamp
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventLine.Type">
            <summary>
            Type corresponds to Alarm.EventHeader.Type
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.EventLine.VendorName">
            <summary>
            Vendor name corresponds to Alarm.Vendor.Name
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.Statistic">
            <summary>
            This class contains a alarm statistic. The statistic has a type 
            <see cref="T:VideoOS.Platform.Proxy.Alarm.StatisticType"/>,
            a number which categorize the specific type and a value. An example could
            be a statistic containing StatisticType.State number = 4 has value = 100.
            which means that there is 100 alarms of state = 4.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.Statistic.ExtensionData">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.Statistic.Number">
            <summary>
            The number connected to the statistic type.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.Statistic.Type">
            <summary>
            The statistic type.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.Statistic.Value">
            <summary>
            The statistic value.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.StatisticType">
            <summary>
            Enumerator defining the statistic type.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.AlarmHistory">
            <summary>
            Alarm history contains data reflecting a alarm change. The history contains
            the data fields that was changed, the time of the change and the user how did
            the change.
            The changes made to an alarm is normally done on alarm updates, and the data
            fields in the alarm histry object reflects this.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmHistory.ExtensionData">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmHistory.AssignedTo">
            <summary>
            The changed owner. If null the owner was not changed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmHistory.Author">
            <summary>
            The user making the alarm change.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmHistory.Priority">
            <summary>
            The changed priority. If 0 the priority was not changed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmHistory.State">
            <summary>
            The changed state. If 0 the state was not changed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmHistory.Text">
            <summary>
            The text added when changing the alarm. This is the update
            text.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmHistory.Time">
            <summary>
            The time of the alarm change.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.AlarmUpdate">
            <summary>
            Alarm history update contains data reflecting a alarm change. The update contains
            the data key and value that was changed, the time of the change and the user how did
            the change.
            The changes made to an alarm is normally done on alarm updates
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmUpdate.ExtensionData">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmUpdate.Key">
            <summary>
            The data field key defining the target to update.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmUpdate.Value">
            <summary>
            The update value.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmUpdate.Time">
            <summary>
            The time of the update.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Proxy.Alarm.AlarmUpdate.Author">
            <summary>
            The author of the update.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient">
            <summary>
            The alarm command token client is a WCF client used against XProtect Enterprice to handle 
            alarms. <see cref="T:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient"/> for a description of the 
            available methods. Use <see cref="T:VideoOS.Platform.Proxy.AlarmClient.AlarmClientManager"/> whenever
            possible, to make sure the correct AlarmCommand version is constructed.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient.Add(System.String,VideoOS.Platform.Data.Alarm)">
            <summary>
            Add an alarm to the Event Server. No filtering and manipulation is done 
            on the way to the database and the alarm structure is preserved in the 
            database. This means that adding the alarm and getting it afterwards using 
            the Alarm.Eventheader.ID will result in an alarm containing the same data 
            fields. 
            </summary>
            <param name="token">The login token</param>
            <param name="alarm">Alarm</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
        </member>
        <member name="M:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient.AddEvent(System.String,VideoOS.Platform.Data.BaseEvent)">
            <summary>
            Add an event to the Event Server. The event is checked and filtered in 
            the Event Server against the user defined alarm definitions. Alarms are 
            created based on the baseEvent data on every matching alarm definition. 
            The match criteria is the BaseEvent.EventHeader.Message which match the 
            alarm definition event message and the 
            BaseEvent.EventHeader.Source.FQID.ObjectId which matches the source. The 
            alarms created gets the alarm definition details added as data and the 
            alarm is given a unique id.
            </summary>
            <param name="token">The login token</param>
            <param name="baseEvent">Event</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
        </member>
        <member name="M:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient.Get(System.String,System.Guid)">
            <summary>
            Gets a specific alarm based on the input id.
            </summary>
            <param name="token">The login token</param>
            <param name="id">Alarm id</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>Alarm</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient.GetEvent(System.String,System.Guid)">
            <summary>
            Gets a specific event based on the input id.
            </summary>
            <param name="token">The login token</param>
            <param name="id">Event id</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the id is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>Event</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient.GetHeader(System.String,System.Guid)">
            <summary>
            Gets the event header from a specific alarm.
            </summary>
            <param name="token">The login token</param>
            <param name="id">Alarm id</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>Event header</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient.GetSnapshots(System.String,System.Guid)">
            <summary>
            Get the snapshot list from a specific alarm. 
            </summary>
            <param name="token">The login token</param>
            <param name="id">Alarm id</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>Snapshot list</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient.AttachSnapshot(System.String,System.Guid,VideoOS.Platform.Data.Snapshot)">
            <summary>
            Attach a snapshot to a specific alarm. 
            </summary>
            <param name="token">The login token</param>
            <param name="id">Alarm id</param>
            <param name="snapshot">Snapshot to attach</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
        </member>
        <member name="M:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient.UpdateAlarmValues(System.String,System.Guid,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Updates a set of fields on a given alarm.  The alarm to update is identofied by the id.
            
            The updates defines what fields to update, and what value to assign to them.
            
            The following fields can be updated:<br/>
            - "AssignedTo"<br/>
            - "Comment"<br/>
            - "Priority"<br/>
            - "PriorityInt"<br/>
            - "PriorityName"<br/>
            - "ReasonCode"<br/>
            - "State"<br/>
            - "StateInt"<br/>
            - "StateName"<br/>
            </summary>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">
            Thrown if invalid field key or value</exception>
            <param name="token">The login token</param>
            <param name="id">Id of alarm to update</param>
            <param name="updates">KeyValuePair of fields to update</param>
        </member>
        <member name="M:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient.UpdateAlarm(System.String,System.Guid,System.String,System.Int32,System.Int32,System.DateTime,System.String)">
            <summary>
            Updates a specific alarm with the input parameters. Only valid input 
            parameters is updated.
            </summary>
            <param name="token">The login token</param>
            <param name="id">Id of the alarm to be updated</param>
            <param name="text">The text will not be added to the alarm but to the 
            alarm history which contains the history of alarm updates 
            <see cref="T:VideoOS.Platform.Proxy.Alarm.AlarmHistory"/>. 
            If null no text is written</param>
            <param name="state">The new alarm state. Only states greater than 0 is 
            valid</param>
            <param name="priority">The new alarm priority. Only priorities greater 
            than 0 is valid</param>
            <param name="time">The time of the update</param>
            <param name="assignedTo">The new assigned to owner. If null no owner is 
            assigned</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
        </member>
        <member name="M:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient.Acknowledge(System.String,System.Guid)">
            <summary>
            Acknowledges a specific alarm. Acknowledge alarms wil get the state set to In
            Progress (state = 4) and the owner will be set to the user calling.
            </summary>
            <param name="token">The login token</param>
            <param name="id">Id of the alarm to be updated</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
        </member>
        <member name="M:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient.UpdateMultipleAlarms(System.String,System.Guid,System.Int32,System.Int32,System.DateTime,System.String)">
            <summary>
            Updates multiple alarms. The method updates all alarms which is created by a 
            specific object. The object is defined by the 
            Alarm.EventHeader.Source.FQID.ObjectId. Both state and the assigned to will 
            be updated. 
            </summary>
            <param name="token">The login token</param>
            <param name="objectId">Object id of the alarms to update. The id is matched to 
            Alarm.EventHeader.Source.FQID.ObjectId in the alarm.</param>
            <param name="oldState">Old state. Only alarms with the this state will be 
            updated.</param>
            <param name="newState">New state.</param>
            <param name="time">The time of the update</param>
            <param name="assignedTo">New assigned to user</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
        </member>
        <member name="M:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient.AcknowledgeMultipleAlarms(System.String,System.Guid)">
            <summary>
            Acknowledges multiple alarms. The method will acknowledge all alarms which is 
            created by a specific object. The object is defined by the 
            Alarm.EventHeader.Source.FQID.ObjectId. The acknowledge alarms wil get the state 
            set to In Progress (state = 4) and the owner will be set to the user calling.
            </summary>
            <param name="token">The login token</param>
            <param name="objectId">Object id of the alarms to update. The id is matched to 
            Alarm.EventHeader.Source.FQID.ObjectId in the alarm.</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
        </member>
        <member name="M:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient.GetAlarmLines(System.String,System.Int32,System.Int32,VideoOS.Platform.Proxy.Alarm.AlarmFilter)">
            <summary>
            Gets alarm lines based on alarm filter. The lines received is a subset of the
            full set of alarm lines that satisfies the filter conditions. The subset is
            received based on the "from" and "maxCount" input parameters. 
            An example:
            Get the newest 100 alarm lines where the alarm state is In Progress (state = 4). 
            The alarm lines should be returned in descending time order. Help on constructing
            the alarm filter matching this, see the Alarm filter documentation. The "from"
            parameter should be set to 0 meaning the start of the resulting matching set and the
            "maxCount" parameter is set to 100.
            </summary>
            <param name="token">The login token</param>
            <param name="from">Start of alarm lines.</param>
            <param name="maxCount">Max count of received alarm lines</param>
            <param name="filter">The alarm filter</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>List of alarm lines</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient.GetEventLines(System.String,System.Int32,System.Int32,VideoOS.Platform.Proxy.Alarm.EventFilter)">
            <summary>
            Gets event lines based on event filter. The lines received is a subset of the
            full set of event lines that satisfies the filter conditions. The subset is
            received based on the "from" and "maxCount" input parameters. 
            An example:
            Get the newest 100 event lines where the event name contains "My event". 
            The event lines should be returned in descending time order. Help on constructing
            the event filter matching this, see the event filter documentation. The "from"
            parameter should be set to 0 meaning the start of the resulting matching set and the
            "maxCount" parameter is set to 100.
            </summary>
            <param name="token">The login token</param>
            <param name="from">Start of event lines.</param>
            <param name="maxCount">Max count of received event lines</param>
            <param name="filter">The event filter</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the event id is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>List of event lines</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient.GetStatistics(System.String)">
            <summary>
            Gets the alarm statistics. The statistics contains overall informations on alarm
            count based on different alarm properties like state and priority 
            <see cref="T:VideoOS.Platform.Proxy.Alarm.Statistic"/> 
            for more information about the content.
            </summary>
            <param name="token">The login token</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>Alarm statistics</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient.GetAlarmHistory(System.String,System.Guid)">
            <summary>
            Gets the alarm history. This methods returns a collection alarm history 
            objects which contains information on the changes made to the alarm.
            The alarm history reflects the alarm updates made 
            <see cref="T:VideoOS.Platform.Proxy.Alarm.AlarmHistory"/>
            for details.
            </summary>
            <param name="token">The login token</param>
            <param name="id">Id of the alarm to get the history about</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>Alarm history</returns>
        </member>
        <member name="M:VideoOS.Platform.Proxy.Alarm.AlarmCommandTokenClient.GetAlarmMessages(System.String)">
            <summary>
            Gets all the different alarm messages received up to this point in time. 
            The alarm message is the Alarm.EventHeader.Message field in the alarm.
            </summary>
            <param name="token">The login token</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">
            Thrown if the alarm is rejected by the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>Messages</returns>
        </member>
        <member name="T:VideoOS.Platform.Proxy.LicenseServiceProxy">
            <summary>
            Encapsulates the LicenseServiceClient.  Any errors in getting to the service will throw the LicenseServiceMIPException.
            This class is intended for internal use by the ConcurrentLicenseManager.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.RuleAction.ActionDefinition">
            <summary>
            Definition of an action.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.RuleAction.ActionDefinition.Id">
            <summary>
            Action id.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.RuleAction.ActionDefinition.Name">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.RuleAction.ActionDefinition.SelectionText">
            <summary>
            Action text shown for rule editing.
            
            This text should contain one {0} for when one item can be selected, using ActionItemKind,
            and both {0} and {1} when two selections are needed. The {0} is of ActionItemKind, and {1} is
            of ActionItemKind2.
            
            If a third {2} is added, then this will be a selection of timer delayed action.
            
            Sample: "Use video from {0} and display camera on my display {1}"
            
            Where {0} will be of Kind.Camera, and {1} will be of a MIP Plugin Kind.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.RuleAction.ActionDefinition.DescriptionText">
            <summary>
            Formatted action text.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.RuleAction.ActionDefinition.ActionItemKind">
            <summary>
            The selectable element in the action.
            
            The ActionElement contains an array of Kinds.  Add one Kind when the selection is done for item type without a hierarchy.
            Use multiple Kinds when a hierarchy of items is available. Sampæle: if controllers are defined on top level and doors on the next level,
            then the controllers need to be selected before the doors can be selected.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.RuleAction.ActionDefinition.ActionItemKind2">
            <summary>
            The selectable selement in the action. (2nd selection)
            
            Set to null if this selection is not enabled.
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.RuleAction.ActionElement">
            <summary>
            Selectable element in the action.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.RuleAction.ActionElement.ItemKinds">
            <summary>
            The item kinds, which can be selected for this action element.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.RuleAction.ActionElement.DefaultText">
            <summary>
            Default element text.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.RuleAction.ActionManager">
            <summary>
            Manager for plug-ins to specify and execute actions.
            
            Note: Your assembly must contain an Event Server BackgroundPlugin otherwise your assembly will not be loaded by the Event Server 
            and your ActionManager will not work.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.RuleAction.ActionManager.ActionConfigurationChanged">
            <summary>
            Indicate that the action configuration has changed
            </summary>
        </member>
        <member name="M:VideoOS.Platform.RuleAction.ActionManager.ExecuteAction2(System.Guid,System.Collections.ObjectModel.Collection{VideoOS.Platform.FQID},System.Collections.ObjectModel.Collection{VideoOS.Platform.FQID},VideoOS.Platform.Data.BaseEvent)">
            <summary>
            Instructs the plug-in to execute an action, which was triggered by the source event.
            </summary>
            <param name="actionId">Refers to the ActionDefinition.Id</param>
            <param name="actionItems">The FQIDs of the first selection, multiple FQIDs is possible when groups was selected.</param>
            <param name="actionItems2">The FQIDs of the second selection, multiple FQIDs is possible when groups was selected.</param>
            <param name="sourceEvent">Contains information about the event that triggered the rule</param>
        </member>
        <member name="M:VideoOS.Platform.RuleAction.ActionManager.ExecuteAction(System.Guid,System.Collections.ObjectModel.Collection{VideoOS.Platform.FQID},VideoOS.Platform.Data.BaseEvent)">
            <summary>
            Instructs the plug-in to execute an action, which was triggered by the source event.
            </summary>
            <param name="actionId">Refers to the ActionDefinition.Id</param>
            <param name="actionItems">The FQIDs of the first selection, multiple FQIDs is possible when groups was selected.</param>
            <param name="sourceEvent">Contains information about the event that triggered the rule</param>
        </member>
        <member name="M:VideoOS.Platform.RuleAction.ActionManager.GetActionDefinitions">
            <summary>
            Get a collection of actions, which the plug-in can execute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.RuleAction.ActionManager.OnActionConfigurationChanged(System.EventArgs)">
            <summary>
            Default event execution.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:VideoOS.Platform.BitmapFormat">
            <summary>
            Use for defining the format of a Bitmap coming from the multi media Toolkit
            </summary>
        </member>
        <member name="F:VideoOS.Platform.BitmapFormat.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.BitmapFormat.RGB24">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.BitmapFormat.BGR24">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.BitmapFormat.RGB32">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.BitmapFormat.BGR32">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.BitmapFormat.YCbCr420_Planar">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.BitmapFormat.YCbCr422_Planar">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.BitmapFormat.YCbCr444_Planar">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.BitmapFormat.RGBA">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.BitmapFormat.BGRA">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.BitmapFormat.Gray">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.BitmapColorSpace">
            <summary>
            Specifies the ColorSpace for bitmaps coming from the multimedia toolkit when one of the YCbCr formats are returned.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.BitmapColorSpace.NotApplicable">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.BitmapColorSpace.YCbCr_JFIF">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.BitmapColorSpace.YCbCr_RecBT601">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.BitmapColorSpace.YCbCr_FullRange">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.CroppingInfo">
            <summary>
            Class returned as part of the BitmapData class
            </summary>
        </member>
        <member name="P:VideoOS.Platform.CroppingInfo.CroppingDefined">
            <summary>
            Is set to true if the returned content has been cropped 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.CroppingInfo.CropX">
            <summary>
            When the CroppingDefined is true, this field contains the cropping definition.  The definition contains the same values as used on the SetCropping call. <br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.CroppingInfo.CropY">
            <summary>
            When the CroppingDefined is true, this field contains the cropping definition.  The definition contains the same values as used on the SetCropping call. <br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.CroppingInfo.CropWidth">
            <summary>
            When the CroppingDefined is true, this field contains the cropping definition.  The definition contains the same values as used on the SetCropping call. <br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.CroppingInfo.CropHeight">
            <summary>
            When the CroppingDefined is true, this field contains the cropping definition.  The definition contains the same values as used on the SetCropping call. <br/>
            </summary>
            
        </member>
        <member name="T:VideoOS.Platform.ISourceData">
            <summary>
            Base interface for common properties between different video source datas
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ISourceData.DateTime">
            <summary>
            The date and time the image was taken.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ISourceData.IsNextAvailable">
            <summary>
            Defines if the NextDateTime is filled.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ISourceData.NextDateTime">
            <summary>
            The time stamp for the next image.<br/>
            This field is not always available.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ISourceData.IsPreviousAvailable">
            <summary>
            Defines if the PreviousDateTime is filled.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ISourceData.PreviousDateTime">
            <summary>
            The time stamp for the previous image.<br/>
            This field is not always available.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.IVideoSourceData">
            <summary>
            Interface for common properties between different video source datas
            </summary>
        </member>
        <member name="P:VideoOS.Platform.IVideoSourceData.HardwareDecodingStatus">
            <summary>
            Defines how the decoding of the current frame is performed.<br/>
            Values can be:<br/>
              'hardware' - Decoded by GPU<br/>
              'software' - Decoded by Intel Media SDK<br/>
              'fallback' - Decoded by Intel Media SDK, even though it was requested to be Hardware (or Auto)<br/>
              'ipp'      - Decoded by Intel UMC<br/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.License.ResolvedLicenseCount">
            <summary>
            Container for various license count information
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.ResolvedLicenseCount.Available">
            <summary>
            Number of total available licenses.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.ResolvedLicenseCount.Used">
            <summary>
            Number of used licenses.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.ResolvedLicenseCount.Activated">
            <summary>
            Number of activated licenses.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.ResolvedLicenseCount.TotalActivated">
            <summary>
            Number of activated licenses accross all sites in an MFA setup.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.ResolvedLicenseCount.Temporary">
            <summary>
            Number of temporary licenses (trial or grace), that are not expired.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.ResolvedLicenseCount.Expired">
            <summary>
            Number of expired licenses.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.ResolvedLicenseCount.Missing">
            <summary>
            Number of missing licenses.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.ResolvedLicenseCount.#ctor(System.Guid,VideoOS.Platform.License.LicenseInformation)">
            <summary>
            Calculate the license counts based on a license request and the corresponding activated license, if any.
            </summary>
            <param name="pluginId">Plug-in id used to resolve the activated license</param>
            <param name="licenseRequest">License request</param>
        </member>
        <member name="T:VideoOS.Platform.License.OemResourceManager">
            <summary>
            Used internally for extranting OEM resources. Only used for light weight OEM solutions.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.OemResourceManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.OemResourceManager.GetOemResource(System.String)">
            <summary>
            Get one specific resource from the Co-Branding license.
            </summary>
            <param name="key"></param>
            <returns>
            Depending on the type of the resource, the following .Net types can be returned:<br/>
            null - key not found<br/>
            String, Bitmap, Icon, RichText, Int<br/>
            </returns>
        </member>
        <member name="T:VideoOS.Platform.License.LicenseResponse">
            <summary>
            This class is used for license responses and inherits LicenseInformation.
            When a license response it obtained as a LicenseInformation, it can be cast to a an instance of this class to access additional license response properties.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseResponse.Slc">
            <summary>
            The software license code.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseResponse.Activated">
            <summary>
            Number of activated licenses.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseResponse.TotalActivated">
            <summary>
            Number of activated licenses accross all sites in an MFA setup.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.LicenseResponse.Clone">
            <summary>
            Create a clone from current LicenseResponse
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.License.ConcurrentLicenseManager">
            <summary>
            This class is used for handling the use of concurrent licenses.<br/>
            Concurrent license is basically a license with a counter, and the counter is used
            to check how many can run at the same time. What to be counted is up to the Plug-In,
            it could be number of plug-ins executing in Smart Clients or number of sessions to some server.<br/>
            The main difference between this class and the ReservedLicenseManager, is that the ReservedLicenseManager
            assist with reserving licenses for specific items by storing an identification for each licensed item.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.ConcurrentLicenseManager.SaveLicenseInformation(VideoOS.Platform.License.LicenseInformation)">
            <summary>
            Save the LicenseInformation in the storage area for retrieval from outside the administration application.<br/>
            This method is only valid while running in the Administrator.
            </summary>
            <param name="licenseInformation"></param>
        </member>
        <member name="M:VideoOS.Platform.License.ConcurrentLicenseManager.GetLicenseInformation(System.Guid,System.String)">
            <summary>
            Get a saved LicenseInformation for a given plug-in and LicenseType.
            For implementing concurrent checking, use the Counter field, TrialMode and Expire fields.
            </summary>
            <param name="pluginId"></param>
            <param name="licenseType"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.License.ConcurrentLicenseManager.GetConcurrentUseList(System.Guid,System.String)">
            <summary>
            Get a list of the plug-ins currently registered.<br/>
            Use the returned information to check with the counter returned in the GetLicenseInformation. If the size of the collection
            returned by this call is higher than the counter in the LicenseInformation, you can choose to allow one or two more to start up
            or you can simply disable or dim the UI, so user is aware that too many application are executing right now.
            </summary>
            <param name="pluginId"></param>
            <param name="licenseType"></param>
            <returns></returns>
            <exception cref="T:VideoOS.Platform.LicenseServiceMIPException">Is thrown when the License service is unavailable</exception>
        </member>
        <member name="M:VideoOS.Platform.License.ConcurrentLicenseManager.RegisterConcurrentLicense(System.Guid,System.String)">
            <summary>
            The caller would like to take one of the concurrent licenses for the time being.
            </summary>
            <param name="pluginId"></param>
            <param name="licenseType"></param>
            <returns>A unique Guid to be used for Unregistration</returns>
            <exception cref="T:VideoOS.Platform.LicenseServiceMIPException">Is thrown when the License service is unavailable</exception>
        </member>
        <member name="M:VideoOS.Platform.License.ConcurrentLicenseManager.UnRegisterConcurrentLicense(System.Guid)">
            <summary>
            The called is no longer using the license.<br/>
            This method should be called when the application is about to close down, or when the counted item is no longer used 
            to allow others to use the license.
            </summary>
            <param name="registerGuid"></param>
            <exception cref="T:VideoOS.Platform.LicenseServiceMIPException">Is thrown when the License service is unavailable</exception>
        </member>
        <member name="T:VideoOS.Platform.License.UnknownCompressionTypeException">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.UnknownCompressionTypeException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.UnknownCompressionTypeException.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.UnknownCompressionTypeException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
        </member>
        <member name="T:VideoOS.Platform.License.EncryptionAlgorithm">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.License.EncryptionAlgorithm.None">
            <summary>
            Not Initialized
            </summary>
        </member>
        <member name="F:VideoOS.Platform.License.EncryptionAlgorithm.DES">
            <summary>
            DES is an old, slow and relatively weak algorithm.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.License.EncryptionAlgorithm.RC2">
            <summary>
            RC2 is a generally good algorithm, but uses a faily short block size.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.License.EncryptionAlgorithm.Rijndael">
            <summary>
            Rijndael is the newest algorithm supporting the longest key and block sizes. A new 
            algorithm is one that has not withstood the same scrutiny and test of time as an 
            older, more seasoned algorithm.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.License.EncryptionAlgorithm.TripleDES">
            <summary>
            Triple DES – Triple DES is simply a strengthened version of DES. Better but also slower than DES.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.License.CompressionType">
            <summary>
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.License.CompressionType.None">
            <summary>
            No compression is used.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.License.CompressionType.Deflate">
            <summary>
            The deflate algorithm is used on the data before encrypting it and after decrypting it.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.License.CryptoHelper">
            <summary>
            Can encrypt and decrypt data
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.CryptoHelper.#ctor(VideoOS.Platform.License.EncryptionAlgorithm)">
            <summary>
            
            </summary>
            <param name="encryptionAlgorithm"></param>
        </member>
        <member name="M:VideoOS.Platform.License.CryptoHelper.#ctor(System.String)">
            <summary>
            Initializes a new instance with an algorithm and key
            as specified in the symmetricAlgorithmConfigurationXml.
            </summary>
            <param name="symmetricAlgorithmConfigurationXml">
            Xml string containing symmetric cryptography settings returned by the GetSymmetricAlgorithmConfigurationXml functions.
            </param>
        </member>
        <member name="P:VideoOS.Platform.License.CryptoHelper.EncryptionAlgorithm">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.CryptoHelper.CryptoServiceProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.CryptoHelper.Compression">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.CryptoHelper.EncryptStringData(System.String,System.String@)">
            <summary>
            (overloaded) Encrypts a string using a newly created input vector (IV)
            </summary>
            <param name="inputData">The input string data to encrypt</param>
            <param name="encryptionIV">The newly created encryption input vector that must be used to decrypt the string again</param>
            <returns>An array of bytes containing the encrypted string</returns>
            <remarks>
            The returned encrypted string data can be decrypted using the DecryptStringData functions that in 
            addition to the encrypted data  also takes an input vector (IV) as parameter. The out parameter 'encryptIV' must 
            be passed as parameter when decrypting the string again.
            </remarks>
        </member>
        <member name="M:VideoOS.Platform.License.CryptoHelper.EncryptStringData(System.String,System.Byte[]@)">
            <summary>
            (overloaded) Encrypts a string using a newly created input vector (IV)
            </summary>
            <param name="inputData">The input string data to encrypt</param>
            <param name="encryptionIV">The newly created encryption input vector that must be used to decrypt the string again</param>
            <returns>An array of bytes containing the encrypted string</returns>
            <remarks>
            The returned encrypted string data can be decrypted using the DecryptStringData functions that in
            addition to the encrypted data also takes an input vector (IV) as parameter. The out parameter 'encryptIV' must
            be passed as parameter when decrypting the string again.
            </remarks>
        </member>
        <member name="M:VideoOS.Platform.License.CryptoHelper.EncryptStringData(System.String)">
            <summary>
            (overloaded) Encrypts a string using the input vector that this instance is already initialized with.
            </summary>
            <param name="inputData">The input string data to encrypt</param>
            <returns>An array of bytes containing the encrypted string</returns>
        </member>
        <member name="M:VideoOS.Platform.License.CryptoHelper.DecryptStringData(System.Byte[],System.String)">
            <summary>
            (overloaded) Decrypts an array of bytes containing an encrypted string using the specified input vector (IV)
            </summary>
            <param name="encrypted">An array of bytes containing the data to decrypt and convert to a string</param>
            <param name="encryptionIV">The input vector to use for decrypting the data into an unencrypted string</param>
            <returns>The unencrypted string</returns>
            <remarks>
            This function should be used in conjunction with the EncryptStringData functions that returns as an
            out parameter a new encryption input vector. The out parameter from the EncryptStringData functions
            should be used a input parameter for this function.
            </remarks>
        </member>
        <member name="M:VideoOS.Platform.License.CryptoHelper.DecryptStringData(System.Byte[],System.Byte[])">
            <summary>
            (overloaded) Decrypts an array of bytes containing an encrypted string using the specified input vector (IV)
            </summary>
            <param name="encrypted">An array of bytes containing the data to decrypt and convert to a string</param>
            <param name="encryptionIV">The input vector to use for decrypting the data into an unencrypted string</param>
            <returns>The unencrypted string</returns>
            <remarks>
            This function should be used in conjunction with the EncryptStringData functions that returns as an
            out parameter a new encryption input vector. The out parameter from the EncryptStringData functions
            should be used a input parameter for this function.
            </remarks>
        </member>
        <member name="M:VideoOS.Platform.License.CryptoHelper.DecryptStringData(System.Byte[])">
            <summary>
            (overloaded) Decrypts an array of bytes containing an encrypted string using input vector (IV)
            that this instance of the <see cref="T:VideoOS.Platform.License.CryptoHelper"/> is already initialized with.
            </summary>
            <param name="encrypted">An array of bytes containing the data to decrypt and convert to a string</param>
            <returns>The unencrypted string</returns>
            <remarks>
            This function should be used in conjunction with the EncryptStringData functions that returns as an
            out parameter a new encryption input vector. The out paramter from the EncryptStringData functions
            should be used a input paramter for this function.
            </remarks>
        </member>
        <member name="M:VideoOS.Platform.License.CryptoHelper.GetSecretKeyAsXml">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.License.CryptoHelper.SetSecretKeyFromXml(System.String)">
            <summary>
            
            </summary>
            <param name="secretKeyXml"></param>
        </member>
        <member name="M:VideoOS.Platform.License.CryptoHelper.CreateSymmetricAlgorithmConfigurationXml(VideoOS.Platform.License.EncryptionAlgorithm,System.Byte[],System.Byte[],VideoOS.Platform.License.CompressionType)">
            <summary>
            
            </summary>
            <param name="encryptionAlgorithm"></param>
            <param name="key"></param>
            <param name="iv"></param>
            <param name="compression"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.License.CryptoHelper.GetSymmetricAlgorithmConfigurationXml">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.License.CryptoHelper.GetSymmetricAlgorithmConfigurationXml(System.Boolean)">
            <summary>
            
            </summary>
            <param name="includeIV"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.License.ILicenseService">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.ILicenseService.RegisterConcurrentUse(VideoOS.Platform.License.ConcurrentLicenseUsed)">
            <summary>
            For internal use only
            </summary>
            <param name="concurrentLicenseUsed"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.License.ILicenseService.ReRegisterConcurrentUse(System.Guid)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.ILicenseService.UnRegisterConcurrentUse(System.Guid)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.ILicenseService.GetConcurrentLicenses(System.Guid,System.String)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:VideoOS.Platform.License.LicenseItem">
            <summary>
            Contains information for one single reserved licensed item.  <br/>
            This class can be used to ear-mark the specific items to have a valid license, or are in trial mode. 
            The items that are added above the licensed max and therefore are extra items in trial mode.<br/>
            The plug-in will decided how may items can be added above the licensed count, and for how long they
            can be in this mode before an activation is required.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseItem.Id">
            <summary>
            The Id of a specific item.  Often the FQID.ObjectId.ToString() can be used.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseItem.Name">
            <summary>
            The Name of the item.  This field is for information only.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseItem.ItemTrial">
            <summary>
            Identify if this item is in trial mode.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseItem.ItemTrialEnd">
            <summary>
            Identify when this item will end the trial mode. 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.License.LicenseManager">
            <summary>
            The LicenseManager assist the plugins in managing licenses for a plugin or stand alone application.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.LicenseManager.#ctor(VideoOS.Platform.UserContext)">
            <summary>
            To retrieve license and product information from other systems than the one identified by
            the Configuration class, the LicenseManager can be constructed with a defined UserContext.
            The First added server is used for getting it's license information.
            </summary>
            <param name="userContext"></param>
        </member>
        <member name="M:VideoOS.Platform.License.LicenseManager.GetLicense(System.Guid)">
            <summary>
            Get the activated license for a plug-in.<br/>
            If no activation has taken place, or this plugin does not have a license, the return collection will be empty.
            </summary>
            <param name="pluginid"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.License.LicenseManager.GetLicense(System.Guid,System.String)">
            <summary>
            Get the activated license for a plug-in for a specific license type.<br/>
            If no activation has taken place, or this plugin does not have a license, null will be returned.
            </summary>
            <param name="pluginid">The Guid of the PluginDefinition.Id</param>
            <param name="licenseType">The string identifying a licenseType</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.License.LicenseManager.GetLicenses">
            <summary>
            Get list of all MIP Licenses activated for this SLC
            </summary>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseManager.Features">
            <summary>
            Returns the list of features defined in the product license.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseManager.SLC">
            <summary>
            Contains the VMS Software License Code.
            
            Note that the field is populated as part of getting the license information from the server, just after 
            connection has been established.  When executing in the Event Server, wait for the LicenseChangedIndication
            message before reading the SLC property.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseManager.Expire">
            <summary>
            Defines if the system SLC will expire
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.LicenseManager.GetExpirationDate(System.String)">
            <summary>
            Provides an expiration date for a given feature.
            
            If there is no expiration date defined, the returning result will be DateTime.MaxDate
            </summary>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseManager.ProductCode">
            <summary>
            Defines the product via a number.<br/>
            Supported from MIP v4.0
            </summary>
            <remarks>
            The following product codes are defined:<br/>
            000 - Unknown<br/>
            001-099 - Reserved for Arcus products<br/>
            100 - Go<br/>
            200 - Essential<br/>
            250 - Express<br/>
            300 - Professional<br/>
            400 - Enterprise<br/>
            440 - Essential+<br/>
            460 - Express+<br/>
            480 - Professional+<br/>
            500 - Expert<br/>
            600 - Corporate<br/>
            </remarks>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseManager.CudaPublicKey">
            <summary>
            A public key used for sending information into the Milestone Customer Dash board
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseManager.ConcurrentLicenseManager">
            <summary>
            Returns the ConcurrentLicenseManager
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseManager.ReservedLicenseManager">
            <summary>
            Returns the ReservedLicenseManager
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseManager.OemResourceManager">
            <summary>
            Returns the OemResourceManager holding Co-Branding resources
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.LicenseManager.#ctor(VideoOS.Platform.UserContext,VideoOS.Platform.Item,VideoOS.Platform.Item)">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseManager.Dirty">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.LicenseManager.Save">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.LicenseManager.ReloadActivatedLicense">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="T:VideoOS.Platform.License.LicenseInformation">
            <summary>
            This class is used for both license requests and license responses.<br/>
            It contains the information flowing from a plugin to and from the license server.<br/>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.License.LicenseInformation.CounterMethodEnum">
            <summary>
            Defines how to display the license information for the "used" field.<br/>
            Default is "Auto".
            </summary>
        </member>
        <member name="F:VideoOS.Platform.License.LicenseInformation.CounterMethodEnum.Auto">
            <summary>
            When ItemIdentifications are available, use that counter - otherwise use the Counter property
            </summary>
        </member>
        <member name="F:VideoOS.Platform.License.LicenseInformation.CounterMethodEnum.CountByItemIdentifications">
            <summary>
            The ItemIdentifications list represent the actual used count
            </summary>
        </member>
        <member name="F:VideoOS.Platform.License.LicenseInformation.CounterMethodEnum.CountByCounter">
            <summary>
            The Counter represent the actual used count
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.LicenseInformation.#ctor">
            <summary>
            Constructs an empty set of license information.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseInformation.PluginId">
            <summary>
            The Id of the plugin that owns this license.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseInformation.Name">
            <summary>
            Display name of the plug-in.  Displayed in the license overview in the administrator.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseInformation.LicenseType">
            <summary>
            The identification of the license.  This MUST match the LicenseType defined on the license server at Milestone.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseInformation.Counter">
            <summary>
            The number of items requested to be licensed, or actually licensed when in a response.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseInformation.CounterMethod">
            <summary>
            Specifies how counting is to be done, default is Auto
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseInformation.TrialMode">
            <summary>
            Indicate if the current license mode is in trial.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseInformation.Expire">
            <summary>
            Expire date can be valid for both Trials and for normal operation.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseInformation.CustomData">
            <summary>
            Any custom data a plugin should like to attach to a license request, to be used upon receiving the license response.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.LicenseInformation.ItemIdentifications">
            <summary>
            A collection of the Items being licensed. The field is optional, and only used by the plugin.<br/>
            A plug-in can use this collection to ensure that already licensed items will continue to be licensed.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.LicenseInformation.GetConfiguredLicenseItem(System.String)">
            <summary>
            Get the licenseItem identified by its id.
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.License.LicenseInformation.RegisterConfiguredLicenseItem(VideoOS.Platform.License.LicenseItem)">
            <summary>
            This method can be used to reserve one of the licenses to a specific item.
            The specific item is defined by the LicenseItem.
            </summary>
            <param name="licenseItem"></param>
        </member>
        <member name="M:VideoOS.Platform.License.LicenseInformation.UnRegisterConfiguredLicenseItem(VideoOS.Platform.License.LicenseItem)">
            <summary>
            Call this method to remove a license from a specific item, identified by the LicenseItem. The
            license can afterwards be configured to be used for another LicenseItem.
            </summary>
            <param name="licenseItem"></param>
        </member>
        <member name="M:VideoOS.Platform.License.LicenseInformation.ActivateTrialsConfiguredLicenseItems(System.Int32)">
            <summary>
            Walk through all registered license and activate unused licenses on the trial ones
            </summary>
            <param name="maxCount"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.License.LicenseInformation.Clone">
            <summary>
            Create a clone from current LicenseInformation
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.License.ReservedLicenseManager">
            <summary>
            This class is used for handling licenses to be reserved for specific items.<br/>
            All the items to have a licensed reserved for them need to have a LicenseItem saved in the LicenseInformation.
            The LicenseItem contains the id of the item to have a license, and the current state of the license.
            The state can be that it is a normal license, an item in trial mode and a trial end date.<br/>
            The main difference between this class and the ConcurrentLicenseManager, is that the ConcurrentLicenseManager
            assist with checking for concurrent use of the licenses.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.ReservedLicenseManager.SaveLicenseInformation(VideoOS.Platform.License.LicenseInformation)">
            <summary>
            Save the LicenseInformation in the storage area for retrieval from outside the administration application.<br/>
            This method is only valid while running in the Administrator.
            </summary>
            <param name="licenseInformation"></param>
        </member>
        <member name="M:VideoOS.Platform.License.ReservedLicenseManager.GetLicenseInformation(System.Guid,System.String)">
            <summary>
            Get a saved LicenseInformation for a given plug-in and LicenseType.
            </summary>
            <param name="pluginId"></param>
            <param name="licenseType"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.License.SystemLicense">
            <summary>
            Contains information about the general license for the installed XProtect product.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.SystemLicense.SLC">
            <summary>
            The SLC for the main product
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.SystemLicense.Issued">
            <summary>
            The date it was issued
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.SystemLicense.ProductCode">
            <summary>
            Defines the product via a number.<br/>
            Supported from MIP v4.0
            </summary>
            <remarks>
            The following product codes are defined:<br/>
            000 - Unknown<br/>
            001-099 - Reserved for Arcus products<br/>
            100 - Go<br/>
            200 - Essential<br/>
            250 - Express<br/>
            300 - Professional<br/>
            400 - Enterprise<br/>
            440 - Essential+<br/>
            460 - Express+<br/>
            480 - Professional+<br/>
            500 - Expert<br/>
            600 - Corporate<br/>
            </remarks>
        </member>
        <member name="P:VideoOS.Platform.License.SystemLicense.Expire">
            <summary>
            The date it expires.  
            Plugins have their own expire dates, that does not relate to the main product.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.SystemLicense.GracePeriod">
            <summary>
            The default grace period for how long the end-user has to activate newly added items.
            The value is in days.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.SystemLicense.CudaPublicKey">
            <summary>
            This is used to identify current install (=customer) on the Milestone Customer Dash Board (Cuda)
            </summary>
        </member>
        <member name="M:VideoOS.Platform.License.SystemLicense.IsFeatureEnabled(System.String)">
            <summary>
            Validates if the current license allows a specific feature be enabled.<br/>
            This method is intended for internal Milestone use only.
            </summary>
            <param name="featureName">The name of the feature to check</param>
            <returns>true - if the feature is allowed.</returns>
        </member>
        <member name="P:VideoOS.Platform.License.SystemLicense.FeatureFlags">
            <summary>
            Return all defined features for this product.<br/>
            This method is intended for internal use.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.License.SystemLicense.ExpirationDateTimes">
            <summary>
            Return all expiration dates.
            
            The table is a clone.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Log.LogClient">
            <summary>
            This class is used for storing log messages in the server side logs. Currently only supported in standalone.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Log.LogClient.Initialized">
            <summary>
            Identify if this class is initialized and the log messages are supported.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Log.LogClient.Instance">
            <summary>
            Used to access the methods on this class.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Log.LogClient.SetCulture(System.String)">
            <summary>
            
            </summary>
            <param name="culture"></param>
        </member>
        <member name="M:VideoOS.Platform.Log.LogClient.RegisterDictionary(VideoOS.Platform.Log.LogMessageDictionary)">
            <summary>
            Applications that need to log messages on the server VMS system will need to register a LogMessageDictionary first for
            each language they support.  
            </summary>
            <param name="logMessageDictionary"></param>
        </member>
        <member name="M:VideoOS.Platform.Log.LogClient.NewEntry(System.String,System.String,System.String,VideoOS.Platform.Item,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Log a new entry on the server. the application, component and id need to match an already registered LogMessage within one of the 
            registered dictionaries. The parameters will need to match the specific log message, with one key for each part that contains a 
            string like: {p1}. Here the key is "p1".
            </summary>
            <param name="application"></param>
            <param name="component"></param>
            <param name="messageId"></param>
            <param name="relatedItem">The item that this message relates to. If no Item is available you can supply the Item representing the server</param>
            <param name="parameters"></param>
        </member>
        <member name="M:VideoOS.Platform.Log.LogClient.AuditEntry(System.String,System.String,System.String,VideoOS.Platform.Item,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Log an Auit entry on the server. The application, component and id need to match an already registered LogMessage within one of the 
            registered dictionaries. The parameters will need to match the specific log message, with one key for each part that contains a 
            string like: {p1}. Here the key is "p1".
            </summary>
            <param name="application"></param>
            <param name="component"></param>
            <param name="messageId"></param>
            <param name="relatedItem">The item that this message relates to. If no Item is available you can supply the Item representing the server</param>
            <param name="parameters"></param>
            <param name="permissionState">One of the values in PermissionState class</param>
        </member>
        <member name="M:VideoOS.Platform.Log.LogClient.ReadGroups(VideoOS.Platform.ServerId)">
            <summary>
            For Corpoate and Expert will return the goups of events available. Usually System, Audit, Rule and if configured Event
            </summary>
            <param name="serverId"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Log.LogClient.GetCount(VideoOS.Platform.ServerId,System.String,System.DateTime,System.DateTime)">
            <summary>
            Return how many log entries exists within the timespan defined on a given group of logs.
            </summary>
            <param name="serverId"></param>
            <param name="group"></param>
            <param name="beginTime"></param>
            <param name="endTime"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Log.LogClient.ReadLog(VideoOS.Platform.ServerId,System.Int32,System.Collections.ArrayList@,System.Collections.ArrayList@,System.String)">
            <summary>
            Read max 1000 log entries from the defined log group, from defined page.
            
            The fields read for each line are currently limited to:
            
            Time, Severity, Message, ObjectId, ObjectName
            </summary>
            <param name="serverId"></param>
            <param name="page"></param>
            <param name="result"></param>
            <param name="names"></param>
            <param name="group"></param>
        </member>
        <member name="M:VideoOS.Platform.Log.LogClient.ReadLog(VideoOS.Platform.ServerId,System.Int32,System.Collections.ArrayList@,System.Collections.ArrayList@,System.String,System.DateTime,System.DateTime)">
            <summary>
            Read max 1000 log entries from the defined log group, from defined page, and within the defined timespan.
            
            The fields read for each line are currently limited to:
            
            Time, Severity, Message, ObjectId, ObjectName
            </summary>
            <param name="serverId"></param>
            <param name="page"></param>
            <param name="result"></param>
            <param name="names"></param>
            <param name="group"></param>
            <param name="beginTime"></param>
            <param name="endTime"></param>
        </member>
        <member name="M:VideoOS.Platform.Log.LogClient.Close(System.Guid)">
            <summary>
            For internal use only
            </summary>
            <param name="serverGuid"></param>
        </member>
        <member name="T:VideoOS.Platform.Log.LogMessageDictionary">
            <summary>
            Represent a set of log messages that a MIP plugin would like to define in the log system.
            Used when using the LogClient to register messages for later use.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Log.LogMessageDictionary.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,VideoOS.Platform.Log.LogMessage},System.String)">
            <summary>
            Identifies for what language/version this dictionary is relevant
            </summary>
            It is assumed 
            <param name="culture">A string like "en-US"</param>
            <param name="version">A string you decide, could be "v1.0"</param>
            <param name="application"></param>
            <param name="component"></param>
            <param name="logMessages"></param>
            <param name="resourceType"></param>
        </member>
        <member name="M:VideoOS.Platform.Log.LogMessageDictionary.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Identifies for what language/version this dictionary is relevant
            </summary>
            <param name="culture">A string like "en-US"</param>
            <param name="version">A string you decide, could be "v1.0"</param>
            <param name="application"></param>
            <param name="component"></param>
            <param name="resourceType"></param>
        </member>
        <member name="P:VideoOS.Platform.Log.LogMessageDictionary.InstanceId">
            <summary>
            Used to identify what needs to be uploaded to the SQL database.  New InstanceId's is always uploaded 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Log.LogMessageDictionary.Culture">
            <summary/>
        </member>
        <member name="P:VideoOS.Platform.Log.LogMessageDictionary.Version">
            <summary/>
        </member>
        <member name="P:VideoOS.Platform.Log.LogMessageDictionary.Application">
            <summary/>
        </member>
        <member name="P:VideoOS.Platform.Log.LogMessageDictionary.Component">
            <summary/>
        </member>
        <member name="P:VideoOS.Platform.Log.LogMessageDictionary.ResourceType">
            <summary/>
        </member>
        <member name="P:VideoOS.Platform.Log.LogMessageDictionary.LogMessages">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Log.LogMessage">
            <summary>
            Contains one log message
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Log.LogMessage.Id">
            <summary>
            A string identifying the log message (not the message itself!)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Log.LogMessage.RelatedObjectKind">
            <summary>
            The id of an object that this message relates to.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Log.LogMessage.Group">
            <summary>
            The group this message should be saved under (see Group class)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Log.LogMessage.Category">
            <summary>
            The Category further specifying what area this message relates to under the Group.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Log.LogMessage.Status">
            <summary>
            Indicate if this message changes any states
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Log.LogMessage.Severity">
            <summary>
            The Severity of this message
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Log.LogMessage.Message">
            <summary>
            The message text in the defined Culture (as this LogMessage is part of a LogMessageDictionary for one Culture only)
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Log.Group">
            <summary>
            Contains constants defining the different type of logs
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Log.Group.System">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Log.Group.Audit">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Log.Group.Event">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Log.Group.Rules">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Log.Severity">
            <summary>
            Contains constants definining the severity levels available
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Log.Severity.Error">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Log.Severity.Warning">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Log.Severity.Info">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Log.Severity.Debug">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Log.Status">
            <summary>
            Contains constants defining if a message also should be considered to change a state
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Log.Status.StatusQuo">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Log.Status.Success">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Log.Status.Failure">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Log.PermissionState">
            <summary>
            Used when performing audit logging - specify result of an permission check.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Log.PermissionState.Granted">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Log.PermissionState.Denied">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Log.PermissionState.Default">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Search.ActivateResult">
            <summary>
            Result of the <see cref="M:VideoOS.Platform.Search.SearchToolbarPluginInstance.Activate(System.Collections.Generic.IEnumerable{VideoOS.Platform.Search.SearchResultData})"/> method.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.ActivateResult.Default">
            <summary>
            Default activation result without any data attached.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.ActivateResult.ModifiedResults">
            <summary>
            A list of modified <see cref="T:VideoOS.Platform.Search.SearchResultData"/> if any.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.ActivateResult.DeletedResults">
            <summary>
            A list of deleted <see cref="T:VideoOS.Platform.Search.SearchResultData"/> if any.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterValues.BoolFilterValue">
            <summary>
            Search filter value representing a boolean
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterValues.BoolFilterValue.Value">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.BoolFilterValue.FallbackDisplayValue">
            <summary>
            Fallback value displayed in the UI if <see cref="M:VideoOS.Platform.Search.SearchFilter.GetDisplayValue(VideoOS.Platform.Search.FilterValues.FilterValueBase)"/> is not overridden in the search filter.
            </summary>
            <returns>A (fallback) <see cref="T:System.String"/> representation of the filter value to be displayed in a graphical user interface.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.BoolFilterValue.Serialize">
            <summary>
            Save filter value into a string.
            </summary>
            <returns>String representation of the filter value.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.BoolFilterValue.Deserialize(System.String)">
            <summary>
            Restore filter value from the string.
            </summary>
            <param name="data">String representation of the filter value.</param>
            <returns>True if successfully deserialized. False otherwise.</returns>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterValues.SelectionFilterValue">
            <summary>
            Search filter value representing a selection of entries.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterValues.SelectionFilterValue.SelectedIds">
            <summary>
            A list of unique identifiers for the selected entries.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.SelectionFilterValue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.SelectionFilterValue.FallbackDisplayValue">
            <summary>
            Fallback value displayed in the UI if <see cref="M:VideoOS.Platform.Search.SearchFilter.GetDisplayValue(VideoOS.Platform.Search.FilterValues.FilterValueBase)"/> is not overridden in the search filter.
            </summary>
            <returns>A (fallback) <see cref="T:System.String"/> representation of the filter value to be displayed in a graphical user interface.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.SelectionFilterValue.SetSelectedIds(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Sets the selected ids.
            </summary>
            <param name="selectedIds">The selected ids</param>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.SelectionFilterValue.Serialize">
            <summary>
            Save filter value into a string.
            </summary>
            <returns>String representation of the filter value.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.SelectionFilterValue.Deserialize(System.String)">
            <summary>
            Restore filter value from the string.
            </summary>
            <param name="data">String representation of the filter value.</param>
            <returns>True if successfully deserialized. False otherwise.</returns>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterValues.DoubleRangeFilterValue">
            <summary>
            Search filter value representing a range (of doubles) selection.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterValues.DoubleRangeFilterValue.High">
            <summary>
            The range high value.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterValues.DoubleRangeFilterValue.Low">
            <summary>
            The range low value.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.DoubleRangeFilterValue.FallbackDisplayValue">
            <summary>
            Fallback value displayed in the UI if <see cref="M:VideoOS.Platform.Search.SearchFilter.GetDisplayValue(VideoOS.Platform.Search.FilterValues.FilterValueBase)"/> is not overridden in the search filter.
            </summary>
            <returns>A (fallback) <see cref="T:System.String"/> representation of the filter value to be displayed in a graphical user interface.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.DoubleRangeFilterValue.Serialize">
            <summary>
            Save filter value into a string.
            </summary>
            <returns>String representation of the filter value.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.DoubleRangeFilterValue.Deserialize(System.String)">
            <summary>
            Restore filter value from the string.
            </summary>
            <param name="data">String representation of the filter value.</param>
            <returns>True if successfully deserialized. False otherwise.</returns>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterValues.RegionSelectionFilterValue">
            <summary>
            Search filter value representing region selections for a collection of cameras.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterValues.RegionSelectionFilterValue.Selections">
            <summary>
            Collection of regions selections.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.RegionSelectionFilterValue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.RegionSelectionFilterValue.FallbackDisplayValue">
            <summary>
            Fallback value displayed in the UI if <see cref="M:VideoOS.Platform.Search.SearchFilter.GetDisplayValue(VideoOS.Platform.Search.FilterValues.FilterValueBase)"/> is not overridden in the search filter.
            </summary>
            <returns>A (fallback) <see cref="T:System.String"/> representation of the filter value to be displayed in a graphical user interface.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.RegionSelectionFilterValue.Serialize">
            <summary>
            Save filter value into a string.
            </summary>
            <returns>String representation of the filter value.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.RegionSelectionFilterValue.Deserialize(System.String)">
            <summary>
            Restore filter value from the string.
            </summary>
            <param name="data">String representation of the filter value.</param>
            <returns>True if successfully deserialized. False otherwise.</returns>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterValues.RegionSelection">
            <summary>
            Regions selection for a single camera item
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterValues.RegionSelection.Item">
            <summary>
            The camera item.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterValues.RegionSelection.Size">
            <summary>
            The size of the frames from the camera.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterValues.RegionSelection.Mask">
            <summary>
            The mask identifying which areas are included/excluded.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterValues.RegionSelection.Threshold">
            <summary>
            The threshold of the region selection sensitivity.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterValues.FilterValueBase">
             <summary>
             Filter value abstraction which must be the base class for all search filter values. The sub-classes must be serializable to allow
             storing/retrieving filter values to/from disk.
            
             NOTE: Standard filter values do not need to derive from this class as they are mere data objects returned to an agent on-demand.
             </summary>
        </member>
        <member name="E:VideoOS.Platform.Search.FilterValues.FilterValueBase.Changed">
            <summary>
            Event fired when the search filter value changes.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.FilterValueBase.FallbackDisplayValue">
            <summary>
            Fallback value displayed in the UI if <see cref="M:VideoOS.Platform.Search.SearchFilter.GetDisplayValue(VideoOS.Platform.Search.FilterValues.FilterValueBase)"/> is not overridden in the search filter.
            </summary>
            <returns>A (fallback) <see cref="T:System.String"/> representation of the filter value to be displayed in a graphical user interface.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.FilterValueBase.FireChangedEvent">
            <summary>
            Fires the <see cref="E:VideoOS.Platform.Search.FilterValues.FilterValueBase.Changed"/> event which indicates the search filter value has changed.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.FilterValueBase.Serialize">
            <summary>
            Save filter value into a string.
            </summary>
            <returns>String representation of the filter value.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.FilterValueBase.Deserialize(System.String)">
            <summary>
            Restore filter value from the string.
            </summary>
            <param name="data">String representation of the filter value.</param>
            <returns>True if successfully deserialized. False otherwise.</returns>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterValues.DoubleFilterValue">
            <summary>
            Search filter value representing a double
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterValues.DoubleFilterValue.Value">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.DoubleFilterValue.FallbackDisplayValue">
            <summary>
            Fallback value displayed in the UI if <see cref="M:VideoOS.Platform.Search.SearchFilter.GetDisplayValue(VideoOS.Platform.Search.FilterValues.FilterValueBase)"/> is not overridden in the search filter.
            </summary>
            <returns>A (fallback) <see cref="T:System.String"/> representation of the filter value to be displayed in a graphical user interface.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.DoubleFilterValue.Serialize">
            <summary>
            Save filter value into a string.
            </summary>
            <returns>String representation of the filter value.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.DoubleFilterValue.Deserialize(System.String)">
            <summary>
            Restore filter value from the string.
            </summary>
            <param name="data">String representation of the filter value.</param>
            <returns>True if successfully deserialized. False otherwise.</returns>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterValues.Standard.PersonAgeFilterValue">
            <summary>
            Filter value representing an age span for a person.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterValues.Standard.PersonAgeFilterValue.MinimumAge">
            <summary>
            Gets the minimum age of the person.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterValues.Standard.PersonAgeFilterValue.MaximumAge">
            <summary>
            Gets the maximum age of the person.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterValues.Standard.PersonGenderFilterValue">
            <summary>
            Filter value representing genders of a person.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterValues.Standard.PersonGenderFilterValue.Gender">
            <summary>
            Genders of a person.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.FilterValues.Standard.PersonGenderFilterValue.Gender.Female">
            <summary>
            Female gender.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.FilterValues.Standard.PersonGenderFilterValue.Gender.Male">
            <summary>
            Male gender.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterValues.Standard.PersonGenderFilterValue.Genders">
            <summary>
            Gets the genders of the person.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterValues.Standard.VehicleColorFilterValue">
            <summary>
            Filter value representing colors of a vehicle.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterValues.Standard.VehicleColorFilterValue.Colors">
            <summary>
            Gets the colors of the vehicle.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterValues.Standard.VehicleLicensePlateFilterValue">
            <summary>
            Filter value representing the license plate of a vehicle.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterValues.Standard.VehicleLicensePlateFilterValue.LicensePlate">
            <summary>
            Gets the license plate of the vehicle.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterValues.StringFilterValue">
            <summary>
            Search filter value representing a string
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterValues.StringFilterValue.Text">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.StringFilterValue.FallbackDisplayValue">
            <summary>
            Fallback value displayed in the UI if <see cref="M:VideoOS.Platform.Search.SearchFilter.GetDisplayValue(VideoOS.Platform.Search.FilterValues.FilterValueBase)"/> is not overridden in the search filter.
            </summary>
            <returns>A (fallback) <see cref="T:System.String"/> representation of the filter value to be displayed in a graphical user interface.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.StringFilterValue.Serialize">
            <summary>
            Save filter value into a string.
            </summary>
            <returns>String representation of the filter value.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterValues.StringFilterValue.Deserialize(System.String)">
            <summary>
            Restore filter value from the string.
            </summary>
            <param name="data">String representation of the filter value.</param>
            <returns>True if successfully deserialized. False otherwise.</returns>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterConfigurations.EditControlDisplayMode">
            <summary>
            Display modes for the edit control of the filter value.
            Availability: 2020R1 or higher
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.FilterConfigurations.EditControlDisplayMode.None">
            <summary>
            Default display mode, defined by the hosting application.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.FilterConfigurations.EditControlDisplayMode.FixedWidth">
            <summary>
            Display control in-line, do not resize control to the parent controls width.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.FilterConfigurations.EditControlDisplayMode.SnapToParentWidth">
            <summary>
            Display control in-line, snap to the width of the parent control.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.FilterConfigurations.EditControlDisplayMode.InPopupFixedWidth">
            <summary>
            Display control in the popup, do not resize control to the parent controls width.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.FilterConfigurations.EditControlDisplayMode.InPopupSnapToParentWidth">
            <summary>
            Display control in the popup, inherit the control width from the parent popup control.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.FilterConfigurations.EditControlDisplayMode.InDialog">
            <summary>
            Display control in the modal dialog.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterConfigurations.FilterConfigurationBase">
            <summary>
            Base class for all search filter configuration types. These types are used as input
            to the user control resolver when creating a <see cref="T:VideoOS.Platform.Search.SearchFilterEditControl"/>.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterConfigurations.FilterConfigurationBase.DisplayMode">
            <summary>
            Get or set desired display mode for the control.
            Availability: 2020R1 or higher
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterConfigurations.CheckBoxFilterConfiguration">
            <summary>
            Configuration for a check box edit control.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterConfigurations.CheckBoxFilterConfiguration.CheckBoxTextValue">
            <summary>
            Gets or sets the value of the CheckBox
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterConfigurations.ListSelectionFilterConfiguration">
            <summary>
            Configuration for a (e.g. checkbox-) list-selection edit control.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterConfigurations.ListSelectionFilterConfiguration.SearchBoxWatermark">
            <summary>
            Gets or sets the watermark (hint-text) shown in the search box when it is empty. When set to null (default) a default hint text will be used.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterConfigurations.ListSelectionFilterConfiguration.Items">
            <summary>
            Gets the available items. Each item has a unique ID (Guid) and a display value (string) encapsulated by the dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterConfigurations.RangeSliderFilterConfiguration">
            <summary>
            Configuration for a range slider edit control.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterConfigurations.RangeSliderFilterConfiguration.Minimum">
            <summary>
            Gets or sets the minimum value of the range selector.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterConfigurations.RangeSliderFilterConfiguration.Maximum">
            <summary>
            Gets or sets the maximum value of the range selector.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterConfigurations.RangeSliderFilterConfiguration.RangeMin">
            <summary>
            Gets or sets the lower bound of the selected range.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterConfigurations.RangeSliderFilterConfiguration.RangeMax">
            <summary>
            Gets or sets the upper bound of the selected range.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterConfigurations.RangeSliderFilterConfiguration.StepSize">
            <summary>
            Gets or sets the step size (tick frequency) on the range selector.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterConfigurations.RegionSelectionFilterConfiguration">
            <summary>
            Configuration for a region selection edit control.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterConfigurations.RegionSelectionFilterConfiguration.MaximumRegionsAllowed">
            <summary>
            Gets or sets the maximum number of regions the edit control can select. Defaults to <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterConfigurations.SliderFilterConfiguration">
            <summary>
            Configuration for a slider edit control.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterConfigurations.SliderFilterConfiguration.Minimum">
            <summary>
            Gets or sets the minimum value of the range selector.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterConfigurations.SliderFilterConfiguration.Maximum">
            <summary>
            Gets or sets the maximum value of the range selector.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterConfigurations.SliderFilterConfiguration.StepSize">
            <summary>
            Gets or sets the step size (tick frequency) on the slider.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterConfigurations.TextBoxFilterConfiguration">
            <summary>
            Configuration for a text box edit control.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterConfigurations.TextBoxFilterConfiguration.MaxLength">
            <summary>
            Gets or sets the maximum length of the user input.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterConfigurations.TextBoxFilterConfiguration.Watermark">
            <summary>
            Gets or sets the watermark (hint-text) shown in the text box when it is empty.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.Errors.CustomSearchError">
            <summary>
            Custom search error for showing a message or a complete exception.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Errors.CustomSearchError.Exception">
            <summary>
            The exception to display. This can be null.
            This is usually used for logging.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.Errors.CustomSearchError.#ctor">
            <summary>
            Initialize a new custom search error.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.Errors.CustomSearchError.#ctor(System.String)">
            <summary>
            Initalize a new custom search error with a message.
            </summary>
            <param name="message">The message to display for this error.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.Errors.CustomSearchError.#ctor(System.String,VideoOS.Platform.Search.Errors.SearchErrorType)">
            <summary>
            Initalize a new custom search error with a message and error type.
            </summary>
            <param name="message">The message to display for this error.</param>
            <param name="errorType">The search error type.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.Errors.CustomSearchError.#ctor(System.Exception)">
            <summary>
            Initialize a new custom search error with an exception.
            The message from the exception is used as message in the search error.
            </summary>
            <param name="exception">The exception used to display full exception.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.Errors.CustomSearchError.#ctor(System.Exception,VideoOS.Platform.Search.Errors.SearchErrorType)">
            <summary>
            Initialize a new custom search error with an exception and error type.
            The message from the exception is used as message in the search error.
            </summary>
            <param name="exception">The exception used to display full exception.</param>
            <param name="errorType">The search error type.</param>
        </member>
        <member name="P:VideoOS.Platform.Search.Errors.CustomSearchError.DisplayMessage">
            <summary>
            Get the message used for displaying the search error.
            This message could be a localized message (if available)
            used to display what is wrong to the user.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.Errors.DeviceSearchError">
            <summary>
            Search error for when there is an error searching on a specific device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Errors.DeviceSearchError.DeviceName">
            <summary>
            Name of the device that the search failed on.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.Errors.DeviceSearchError.#ctor(System.String)">
            <summary>
            Initialize a new device search error.
            </summary>
            <param name="deviceName"></param>
        </member>
        <member name="T:VideoOS.Platform.Search.Errors.InvalidFilterSearchError">
            <summary>
            Search error for when an filter value is not valid.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Errors.InvalidFilterSearchError.FilterName">
            <summary>
            Name of the filter that is invalid.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Errors.InvalidFilterSearchError.FilterValue">
            <summary>
            Value of the filter that is invalid.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.Errors.InvalidFilterSearchError.#ctor(System.String,System.String)">
            <summary>
            Initialize a invalid filter search error.
            </summary>
            <param name="filterName"></param>
            <param name="filterValues"></param>
        </member>
        <member name="T:VideoOS.Platform.Search.Errors.NoItemsSupportedSearchError">
            <summary>
            Search error for when none of the items supplied is supported by the search agent.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.Errors.NoItemsSupportedSearchError.#ctor">
            <summary>
            Initliaze a no items supported search error.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.Errors.SearchError">
            <summary>
            Abstract base class for all search errors.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Errors.SearchError.Message">
            <summary>
            The error/warning message to display. This can be null.
            This is usually a non localized message used for logging.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Errors.SearchError.ErrorType">
            <summary>
            Should the search error be treated as an error or a warning?
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.Errors.SearchError.#ctor">
            <summary>
            Internal constructor used to disallow MIP plugins to derive from this type.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.Errors.SearchErrorType">
            <summary>
            Used for indicating whether a search error will be treated as an error or a warning.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.Errors.SearchErrorType.Error">
            <summary>
            Error will be treated as an error message (default).
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.Errors.SearchErrorType.Warning">
            <summary>
            Error will be treated as a warning message.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.Errors.ServerNotAvailableSearchError">
            <summary>
            Search error for when a server is not available to complete the search.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Errors.ServerNotAvailableSearchError.ServerName">
            <summary>
            Name of the server that is not available.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.Errors.ServerNotAvailableSearchError.#ctor(System.String)">
            <summary>
            Initialize a new server not available search error.
            </summary>
            <param name="serverName"></param>
        </member>
        <member name="T:VideoOS.Platform.Search.Errors.UnauthorizedDeviceAccessSearchError">
            <summary>
            Search error for when the user does not have rights to access a device.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Errors.UnauthorizedDeviceAccessSearchError.DeviceName">
            <summary>
            Name of the device that the user does not have access to.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.Errors.UnauthorizedDeviceAccessSearchError.#ctor(System.String)">
            <summary>
            Initialize a new unauthorized device access search error.
            </summary>
            <param name="deviceName"></param>
        </member>
        <member name="T:VideoOS.Platform.Search.Errors.UnknownSearchError">
            <summary>
            Search error where an unknown error occued.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Errors.UnknownSearchError.Exception">
            <summary>
            The exception to display. This can be null.
            This is usually used for logging.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.Errors.UnknownSearchError.#ctor(System.Exception)">
            <summary>
            Initialize a new unknown search error.
            The message from the exception is used as message in the search error.
            </summary>
            <param name="exception">The exception used to display full exception.</param>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterCategories.OtherSearchFilterCategory">
            <summary>
             Filter category for a non-standard category.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterCategories.OtherSearchFilterCategory.#ctor(System.String,System.Drawing.Icon,System.Collections.Generic.IEnumerable{VideoOS.Platform.Search.SearchFilter})">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Name of the category. Cannot be null or empty.</param>
            <param name="icon">Icon (optional) representing the category.</param>
            <param name="customSearchFilters">Enumerable of custom search filters to add to the category.</param>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterCategories.PersonSearchFilterCategory">
            <summary>
            Standard filter category for the "Person" group.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterCategories.PersonSearchFilterCategory.AgeSearchFilterName">
            <summary>
            Gets the display name of the age search filter.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterCategories.PersonSearchFilterCategory.GenderSearchFilterName">
            <summary>
            Gets the display name of the gender search filter.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterCategories.PersonSearchFilterCategory.StandardSearchFilters">
            <summary>
            Standard search filters available in the <see cref="T:VideoOS.Platform.Search.FilterCategories.PersonSearchFilterCategory"/>.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.FilterCategories.PersonSearchFilterCategory.StandardSearchFilters.None">
            <summary>
            No standard filters.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.FilterCategories.PersonSearchFilterCategory.StandardSearchFilters.Age">
            <summary>
            Age (range) of the person.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.FilterCategories.PersonSearchFilterCategory.StandardSearchFilters.Gender">
            <summary>
            Gender(s) of the person.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterCategories.PersonSearchFilterCategory.#ctor(System.String,System.Drawing.Icon,VideoOS.Platform.Search.FilterCategories.PersonSearchFilterCategory.StandardSearchFilters,System.Collections.Generic.IEnumerable{VideoOS.Platform.Search.SearchFilter})">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Name of the category. Cannot be null or empty.</param>
            <param name="icon">Optional icon representing the category (only used in "not grouped" scenarios).</param>
            <param name="standardSearchFilters">Flags enumeration indicating which standard filters to include.</param>
            <param name="customSearchFilters">Enumerable of custom search filters to add to the category.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterCategories.PersonSearchFilterCategory.GetAgeFilterValues(VideoOS.Platform.Search.SearchCriteria)">
            <summary>
            Gets the value(s) of the standard age filter.
            </summary>
            <param name="searchCriteria">The search criteria containing the filter values.</param>
            <exception cref="T:System.ArgumentNullException">If the provided search criteria is null.</exception>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterCategories.PersonSearchFilterCategory.GetGenderFilterValues(VideoOS.Platform.Search.SearchCriteria)">
            <summary>
            Gets the selected genders value(s) of the standard gender filter.
            </summary>
            <param name="searchCriteria">The search criteria containing the filter values.</param>
            <exception cref="T:System.ArgumentNullException">If the provided search criteria is null.</exception>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterCategories.VehicleSearchFilterCategory">
            <summary>
            Standard filter category for the "Vehicle" group.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterCategories.VehicleSearchFilterCategory.ColorSearchFilterName">
            <summary>
            Gets the display name of the color search filter.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.FilterCategories.VehicleSearchFilterCategory.LicensePlateSearchFilterName">
            <summary>
            Gets the display name of the license plate search filter.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.FilterCategories.VehicleSearchFilterCategory.StandardSearchFilters">
            <summary>
            Standard search filters available in the <see cref="T:VideoOS.Platform.Search.FilterCategories.VehicleSearchFilterCategory"/>.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.FilterCategories.VehicleSearchFilterCategory.StandardSearchFilters.None">
            <summary>
            No standard filters.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.FilterCategories.VehicleSearchFilterCategory.StandardSearchFilters.Color">
            <summary>
            Color(s) of the vehicle.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.FilterCategories.VehicleSearchFilterCategory.StandardSearchFilters.LicensePlate">
            <summary>
            License plate of the vehicle.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterCategories.VehicleSearchFilterCategory.#ctor(System.String,System.Drawing.Icon,VideoOS.Platform.Search.FilterCategories.VehicleSearchFilterCategory.StandardSearchFilters,System.Collections.Generic.IEnumerable{VideoOS.Platform.Search.SearchFilter})">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Name of the category. Cannot be null or empty.</param>
            <param name="icon">Optional icon representing the category (only used in "not grouped" scenarios).</param>
            <param name="standardSearchFilters">Flags enumeration indicating which standard filters to include.</param>
            <param name="customSearchFilters">Enumerable of custom search filters to add to the category.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterCategories.VehicleSearchFilterCategory.GetColorFilterValues(VideoOS.Platform.Search.SearchCriteria)">
            <summary>
            Gets the selected colors value(s) of the standard color filter.
            </summary>
            <param name="searchCriteria">The search criteria containing the filter values.</param>
            <exception cref="T:System.ArgumentNullException">If the provided search criteria is null.</exception>
        </member>
        <member name="M:VideoOS.Platform.Search.FilterCategories.VehicleSearchFilterCategory.GetLicensePlateFilterValue(VideoOS.Platform.Search.SearchCriteria)">
            <summary>
            Gets the value(s) of the standard license plate filter.
            </summary>
            <param name="searchCriteria">The search criteria containing the filter values.</param>
            <exception cref="T:System.ArgumentNullException">If the provided search criteria is null.</exception>
        </member>
        <member name="T:VideoOS.Platform.Search.Results.BookmarkSearchResultData">
            <summary>
            Bookmark search result
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Results.BookmarkSearchResultData.Bookmark">
            <summary>
            The actual bookmark associated with this bookmark search result.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.Results.BookmarkSearchResultData.#ctor(VideoOS.Platform.Data.Bookmark)">
            <summary>
            Creates a new BookmarkSearchResultData.
            </summary>
            <param name="bookmark">The actual bookmark associated with this bookmark search result.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.Results.BookmarkSearchResultData.UpdateBookmark(VideoOS.Platform.Data.Bookmark)">
            <summary>
            Update the existing bookmark
            The bookmark ObjectId can not be changed.
            </summary>
            <param name="bookmark">The new bookmark to update with.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.Results.BookmarkSearchResultData.GetPropertiesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a collection of key-value pairs, associated with the SearchResultData instance. See
            <see cref="T:VideoOS.Platform.Search.SearchResultData"/> for more information.
            </summary>
            <returns>Collection of key-value pairs, associated with the SearchResultData instance</returns>
        </member>
        <member name="T:VideoOS.Platform.Search.Results.BoundingShape">
            <summary>
            Abstract base class for all supported bounding shapes. Do not create custom implementation of the class
            but instead always use the built-in implementations that are available in the framework.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.Results.BoundingShape.#ctor">
            <summary>
            Internal constructor used to disallow MIP plugins to derive from this type.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.Results.RectangleBoundingShape">
            <summary>
            Class defining a rectangular bounding shape.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Results.RectangleBoundingShape.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of this rectangle bounding shape. The value are in normalized format in the range 0 to 1.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Results.RectangleBoundingShape.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of this rectangle bounding shape. The value are in normalized format in the range 0 to 1.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Results.RectangleBoundingShape.Width">
            <summary>
            Gets or sets the width of this rectangle bounding shape. The value are in normalized format in the range 0 to 1.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Results.RectangleBoundingShape.Height">
            <summary>
            Gets or sets the height of this rectangle bounding shape. The value are in normalized format in the range 0 to 1.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.Results.EllipseBoundingShape">
            <summary>
            Class defining a ellyptical bounding shape.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Results.EllipseBoundingShape.X">
            <summary>
            Gets or sets the x-coordinate of the center of this ellipse bounding shape. The value are in normalized format in the range 0 to 1.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Results.EllipseBoundingShape.Y">
            <summary>
            Gets or sets the y-coordinate of the center of this ellipse bounding shape. The value are in normalized format in the range 0 to 1.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Results.EllipseBoundingShape.Width">
            <summary>
            Gets or sets the width of this ellipse bounding shape. The value are in normalized format in the range 0 to 1.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Results.EllipseBoundingShape.Height">
            <summary>
            Gets or sets the height of this ellipse bounding shape. The value are in normalized format in the range 0 to 1.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.Results.PolygonBoundingShape">
            <summary>
            Class defining a polygonic bounding shape.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Results.PolygonBoundingShape.Points">
            <summary>
            Gets collection of <see cref="T:System.Windows.Point"/> defining the points of the polygon. The point coordinates are in normalized format in the range 0 to 1.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.Results.PolygonBoundingShape.#ctor">
            <summary>
            Default empty constructor
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.Results.PolygonBoundingShape.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Point})">
            <summary>
            Constructor taking an enumerable of points as parameter.
            </summary>
            <param name="points">The enumeration of points to add.</param>
        </member>
        <member name="T:VideoOS.Platform.Search.Results.MetadataSearchResultData">
            <summary>
            Metadata search result
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.Results.MetadataSearchResultData.#ctor(System.Guid)">
            <summary>
            Constructor taking the search result id as parameter.
            </summary>
            <param name="id">The unique identifier of the search result.</param>
        </member>
        <member name="P:VideoOS.Platform.Search.Results.MetadataSearchResultData.ObjectId">
            <summary>
            Object Id.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Results.MetadataSearchResultData.MetadataItem">
            <summary>
            Metadata item associated with this metadata search result.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.Results.MetadataSearchResultData.GetPropertiesAsync(System.Threading.CancellationToken)">
            <summary>
            Get properties associated with this metadata search result asynchronously.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.Results.MetadataSearchResultData.GetBoundingShapesAsync(System.Threading.CancellationToken)">
            <summary>
            Get bounding shapes associated with this metadata search result asynchronously.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.Results.ResultProperty">
            <summary>
            Search result property.
            Property has Title and typed value (for example, DateTimeValue).
            <c>Value</c> always contains string representation of the type value.
            There only one typed value is not empty/null.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Results.ResultProperty.Title">
            <summary>
            Localized name for the ResultProperty instance (displayed in UI)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Results.ResultProperty.Value">
            <summary>
            Typed value, formatted into string or plain string value.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.Results.ResultProperty.DateTimeValue">
            <summary>
            DateTime typed value.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.Results.ResultProperty.#ctor(System.String,System.String)">
            <summary>
            Constructor for the class.
            </summary>
            <param name="title">Localized string title.</param>
            <param name="value">Associated string value. Null replaced with <see cref="F:System.String.Empty"/>.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.Results.ResultProperty.#ctor(System.String,System.DateTime)">
            <summary>
            Constructor for the class.
            </summary>
            <param name="title">Localized string title.</param>
            <param name="value">Associated value as <see cref="T:System.DateTime"/> (UTC) - cannot be empty.</param>
        </member>
        <member name="T:VideoOS.Platform.Search.Results.SearchResultUserControlTypes">
            <summary>
            Contains the ids for built in search results for the built in visual representation
            of search results.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.Results.SearchResultUserControlTypes.Video">
            <summary>
            Video search result.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchAgentErrorEventArgs">
            <summary>
            Event args attached to the <see cref="E:VideoOS.Platform.Search.SearchDefinition.ErrorOccurred"/>-event
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchAgentErrorEventArgs.SessionId">
            <summary>
            The unique session id identifing the search originated from.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchAgentErrorEventArgs.SearchError">
            <summary>
            A search error associated with the event or <c>null</c>.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchCriteriaChangedEventArgs">
            <summary>
            Event args used when the <see cref="T:VideoOS.Platform.Search.SearchCriteria"/> changes.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchCriteriaChangedEventArgs.ChangeType">
            <summary>
            Gets the type of change.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchCriteriaChangedEventArgs.SearchFilter">
            <summary>
            Gets the associated <see cref="P:VideoOS.Platform.Search.SearchCriteriaChangedEventArgs.SearchFilter"/> if any.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchCriteriaChangedEventArgs.SearchFilterValue">
            <summary>
            Gets the associated <see cref="P:VideoOS.Platform.Search.SearchCriteriaChangedEventArgs.SearchFilterValue"/> if any.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchCriteriaChangeType">
            <summary>
            Enumeration of the change types that can occur on a <see cref="T:VideoOS.Platform.Search.SearchCriteria"/>.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchCriteriaChangeType.FilterValueUpdated">
            <summary>
            Filter value updated
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchCriteriaChangeType.FilterValueRemoved">
            <summary>
            Filter value removed
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchCriteriaChangeType.FilterValueAdded">
            <summary>
            Filter value added
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchCriteriaChangeType.SearchScopeUpdated">
            <summary>
            The <see cref="T:VideoOS.Platform.Search.SearchScope"/> was updated in the <see cref="T:VideoOS.Platform.Search.SearchCriteria"/>.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchDoneEventArgs">
            <summary>
            Event arguments used when a <see cref="T:VideoOS.Platform.Search.SearchDefinition"/> has finished its search.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchDoneEventArgs.SearchDefinition">
            <summary>
            The <see cref="T:VideoOS.Platform.Search.SearchDefinition"/> which has finished.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchInput">
            <summary>
            Data class representing the input to the <see cref="M:VideoOS.Platform.Search.SearchDefinition.Search(VideoOS.Platform.Search.SearchInput,System.Threading.CancellationToken)"/> method.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchInput.SessionId">
            <summary>
            Gets or sets the unique session id identifying the started search.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchInput.From">
            <summary>
            Gets or sets the start of the time span in which to search.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchInput.To">
            <summary>
            Gets or sets the end of the time span in which to search.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchInput.Items">
            <summary>
            Gets or sets the items (i.e. cameras) to include in the search.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchInput.SortOrder">
             <summary>
             Gets or sets the order in which the results should be delivered.
            
             NOTE: In order for plugins to be forward-compatible with new sort order values added in the future, please ensure
             to have a "default" (fallback) case when inspecting the provided sort order.
             </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchResultReadyEventArgs">
            <summary>
            Event arguments used when a partial search result is ready from the <see cref="T:VideoOS.Platform.Search.SearchManager"/>.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchResultReadyEventArgs.SearchResults">
            <summary>
            The enumerable representing a chunk of <see cref="T:VideoOS.Platform.Search.SearchResultData"/>s ready to be offloaded.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchResultReadyEventArgs.SearchDefinition">
            <summary>
            The associated <see cref="T:VideoOS.Platform.Search.SearchDefinition"/> which initiated the search.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchErrorEventArgs">
            <summary>
            Event args attached to the <see cref="E:VideoOS.Platform.Search.ISearchManager.ErrorOccurred"/>-event
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchErrorEventArgs.SearchError">
            <summary>
            A search error associated with the event or <c>null</c>.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchErrorEventArgs.SearchDefinition">
            <summary>
            The associated <see cref="T:VideoOS.Platform.Search.SearchDefinition"/> which initiated the search.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.ISearchManager">
            <summary>
            A single-entry point for performing searches across the VMS system. The search manager will expose all
            available searches supplied by loaded search agent plugins. A search can be started across multiple
            search agents and run simultaneously by the search manager.<br/>
            1. A dedicated thread will run per definition for a started search.<br/>
            2. Only one search per criteria can be performed at a time. (This means that a second search for a criteria will cancel the first search)<br/>
            3. The criteriaLimit is per criteria. Meaning that searching for 3 criteria with a limit of 50 will return a maximum of 150 results in total.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Search.ISearchManager.SearchResultReady">
            <summary>
            An event used to inform the caller that a set of results is ready.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Search.ISearchManager.ErrorOccurred">
            <summary>
            An event used to inform the caller about run-time error(s) while doing search in search plugins.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Search.ISearchManager.SearchDone">
            <summary>
            An event used to inform the caller that a started search has completed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.ISearchManager.SearchFilterCategories">
            <summary>
            Returns all search filter categories from all the loaded search agent plugins.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.ISearchManager.CreateSearchDefinition(VideoOS.Platform.Search.SearchFilterCategory,VideoOS.Platform.Search.SearchScope)">
            <summary>
            Creates a new search definition based on a search category.
            </summary>
            <param name="searchFilterCategory">The category to base the definition on.</param>
            <param name="searchScope">The search scope associated with the definition.</param>
            <returns>A new search definition.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.ISearchManager.DestroySearchDefinition(VideoOS.Platform.Search.SearchDefinition)">
            <summary>
            Destroys the provided search definition.
            </summary>
            <param name="searchDefinition">The search definition to destroy.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.ISearchManager.StartSearch(VideoOS.Platform.Search.SearchDefinition,System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{VideoOS.Platform.Item})">
            <summary>
            Starts a new search based on the given search definition.<br/>
            Only one search can be started at a time. If a new search is started the previous search is
            canceled, and any subsequent result is ignored. This is equivalent to calling CancelSearch first.
            </summary>
            <param name="definition">A search definition on which to start a search.</param>
            <param name="from">The start of the time span in which to search.</param>
            <param name="to">The end of the time span in which to search.</param>
            <param name="items">The items (i.e. cameras) to include in the search.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.ISearchManager.StartSearch(VideoOS.Platform.Search.SearchDefinition,System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{VideoOS.Platform.Item},VideoOS.Platform.Search.SearchSortOrder)">
            <summary>
            Starts a new search based on the given search definition.<br/>
            Only one search can be started at a time. If a new search is started the previous search is
            canceled, and any subsequent result is ignored. This is equivalent to calling CancelSearch first.
            </summary>
            <param name="definition">A search definition on which to start a search.</param>
            <param name="from">The start of the time span in which to search.</param>
            <param name="to">The end of the time span in which to search.</param>
            <param name="items">The items (i.e. cameras) to include in the search.</param>
            <param name="sortOrder">The order in which the results should be delivered.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.ISearchManager.CancelSearch(System.Collections.Generic.IEnumerable{VideoOS.Platform.Search.SearchDefinition})">
            <summary>
            Attempt to cancel the currently running search based on there search definition.<br/>
            This will only signal the search agent plugin to cancel a search and then return.<br/>
            After calling this, no more results from the cancel search will be returned.
            </summary>
            <param name="definitions">A list of search definitions to cancel.</param>
            <returns>True if at least one search was signaled to cancel.</returns>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchCriteria">
            <summary>
            Data class containing all search criteria data (i.e. values of selected <see cref="T:VideoOS.Platform.Search.SearchFilter"/>s) which is
            to be used in the <see cref="T:VideoOS.Platform.Search.SearchDefinition"/> it belongs to.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Search.SearchCriteria.Changed">
            <summary>
            Indication that the search criteria has changed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchCriteria.SearchScope">
            <summary>
            Gets the search scope associated with the search criteria.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchCriteria.AllFilterValues">
            <summary>
            This is for internal use only. To get filter values, you should use <see cref="M:VideoOS.Platform.Search.SearchCriteria.GetFilterValues(VideoOS.Platform.Search.SearchFilter)"/>.
            
            Gets an enumeration of all the search filters and their corresponding values. This will only return
            search filters that actually have a value assigned.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchCriteria.#ctor(VideoOS.Platform.Search.SearchScope)">
            <summary>
            Constructor taking the search scope as parameter.
            </summary>
            <param name="searchScope">The search scope associated with the search criteria.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchCriteria.AddFilterValue(VideoOS.Platform.Search.SearchFilter)">
            <summary>
            Adds a filter value for the given search filter by invoking <see cref="M:VideoOS.Platform.Search.SearchFilter.CreateValue"/>.
            </summary>
            <param name="searchFilter">The search filter for which to add a search filter value.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchCriteria.AddFilterValue(VideoOS.Platform.Search.SearchFilter,VideoOS.Platform.Search.FilterValues.FilterValueBase)">
            <summary>
            Adds a filter value for the given search filter./>.
            </summary>
            <param name="searchFilter">The search filter for which to add a search filter value.</param>
            <param name="filterValue">The filter value to add.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchCriteria.RemoveFilterValue(VideoOS.Platform.Search.SearchFilter,VideoOS.Platform.Search.FilterValues.FilterValueBase)">
            <summary>
            Removes the provided search filter value from the search criteria.
            </summary>
            <param name="searchFilter">The search filter which the filterValue was previously added to.</param>
            <param name="filterValue">The search filter value to remove.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchCriteria.ClearFilterValues(VideoOS.Platform.Search.SearchFilter)">
            <summary>
            Clears all search filter values for the provided search filter.
            </summary>
            <param name="searchFilter">The search filter for which to clear all values.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchCriteria.GetFilterValues(VideoOS.Platform.Search.SearchFilter)">
            <summary>
            Gets the value(s) of the given filter.
            </summary>
            <param name="searchFilter">The filter to get the value(s) for.</param>
            <returns>The value(s) of the given search filter.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchCriteria.GetFilterValues``1(VideoOS.Platform.Search.SearchFilter)">
            <summary>
            Gets the value(s) of the given filter as the provided generic type.
            </summary>
            <typeparam name="T">The type of filter values to return a collection of.</typeparam>
            <param name="searchFilter">The filter to get the value for.</param>
            <returns>The value(s) of the given search filter as the provided generic type.</returns>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchDefinition">
            <summary>
            Represents an independent search definition.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchDefinition.SearchAgentPluginId">
            <summary>
            The ID of the <see cref="T:VideoOS.Platform.Search.SearchAgentPlugin"/> which created this search definition.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Search.SearchDefinition.SearchResultReady">
            <summary>
            Event fired when a chunk of <see cref="T:VideoOS.Platform.Search.SearchResultData"/>s are ready.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Search.SearchDefinition.ErrorOccurred">
            <summary>
            Event fired when a run-time error occurs during search.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchDefinition.SearchScope">
            <summary>
            Gets the search scope associated with the edit control.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchDefinition.SearchCriteria">
            <summary>
            The search criteria container associated with this search definition. There is always a 1-to-1
            relationship between a <see cref="T:VideoOS.Platform.Search.SearchDefinition"/> and a <see cref="T:VideoOS.Platform.Search.SearchCriteria"/>.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchDefinition.#ctor(VideoOS.Platform.Search.SearchScope)">
            <summary>
            Default constructor invoked by all base classes
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchDefinition.FireSearchResultsReadyEvent(System.Guid,System.Collections.Generic.IEnumerable{VideoOS.Platform.Search.SearchResultData})">
            <summary>
            Invoke this method when a partial result is ready to be offloaded.
            </summary>
            <param name="sessionId">The session id identifying the current search.</param>
            <param name="searchResults">The chunk of search results ready to be offloaded.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchDefinition.InternalFireSearchResultsReadyEvent(System.Guid,System.Collections.Generic.IEnumerable{VideoOS.Platform.Search.SearchResultData})">
            <summary>
            Used for Unittesting. This method is meant to be called as part for unittest run.
            Invoke this method when a partial result is ready to be offloaded.
            </summary>
            <param name="sessionId">The session id identifying the current search.</param>
            <param name="searchResults">The chunk of search results ready to be offloaded.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchDefinition.FireErrorOccurredEvent(System.Guid,VideoOS.Platform.Search.Errors.SearchError)">
            <summary>
            Invoke this method when a run-time error occurred.
            The search could continue after calling this method.
            </summary>
            <param name="sessionId">The session id identifying the current search.</param>
            <param name="searchError">The search error that occurred.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchDefinition.InternalFireErrorOccuredEvent(System.Guid,VideoOS.Platform.Search.Errors.SearchError)">
            <summary>
            Used for Unittesting. This method is meant to be called as part for unittest run.
            Invoke this method when a run-time error occurred.
            </summary>
            <param name="sessionId">The session id identifying the current search.</param>
            <param name="searchError">The search error that occurred.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchDefinition.CallSearch(System.Guid,System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{VideoOS.Platform.Item},VideoOS.Platform.Search.SearchSortOrder,System.Threading.CancellationToken)">
            <summary>
            Performs a search based on the provided scope and the filter values set in the generated search filter user controls.
            This method is supposed to be called by the <see cref="T:VideoOS.Platform.Search.SearchManager"/>
            </summary>
            <param name="sessionId">A unique session id identifying the started search.</param>
            <param name="from">The start of the time span in which to search.</param>
            <param name="to">The end of the time span in which to search.</param>
            <param name="items">The items (i.e. cameras) to include in the search.</param>
            <param name="sortOrder">The order in which the results should be delivered.</param>
            <param name="cancellationToken">Cancellation token which can be used to cancel an ongoing search (if the implementation allows it).</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchDefinition.Search(System.Guid,System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{VideoOS.Platform.Item},System.Threading.CancellationToken)">
            <summary>
            Override this method to implement your search for pre 2020 R1 VMS.
            To support search in 2020 R1 VMS and newer, please override the overload <see cref="M:VideoOS.Platform.Search.SearchDefinition.Search(VideoOS.Platform.Search.SearchInput,System.Threading.CancellationToken)"/>.
            Note: The search is considered finished when this method returns. Use <see cref="M:VideoOS.Platform.Search.SearchDefinition.FireSearchResultsReadyEvent(System.Guid,System.Collections.Generic.IEnumerable{VideoOS.Platform.Search.SearchResultData})"/> when search results are ready.
            </summary>
            <param name="sessionId">A unique session id identifying the started search.</param>
            <param name="from">The start of the time span in which to search.</param>
            <param name="to">The end of the time span in which to search.</param>
            <param name="items">The items (i.e. cameras) to include in the search.</param>
            <param name="cancellationToken">Cancellation token which can be used to cancel an ongoing search (if the implementation allows it).</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchDefinition.Search(VideoOS.Platform.Search.SearchInput,System.Threading.CancellationToken)">
            <summary>
            Override this method to implement your search.
            Note: The search is considered finished when this method returns. Use <see cref="M:VideoOS.Platform.Search.SearchDefinition.FireSearchResultsReadyEvent(System.Guid,System.Collections.Generic.IEnumerable{VideoOS.Platform.Search.SearchResultData})"/> when search results are ready. 
            </summary>
            <param name="searchInput">Input for the search</param>
            <param name="cancellationToken">Cancellation token which can be used to cancel an ongoing search (if the implementation allows it).</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchDefinition.Init">
            <summary>
            This method is called when the search definition has been created.
            This could be used if the search definition need to initialize variables.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchDefinition.Close">
            <summary>
            Called when the search definition is no longer needed for searching.
            After this is called, no searches will be called on this definition.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchFilterCategory">
            <summary>
            Represents a single searchable category containing all the filters associated with that category.
            
            Example: Person, Vehicle, Animal, Weapon.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchFilterCategory.SearchAgentPluginId">
            <summary>
            The ID of the <see cref="T:VideoOS.Platform.Search.SearchAgentPlugin"/> that this search filter category belongs to.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchFilterCategory.Name">
            <summary>
            Name of the searchable category.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchFilterCategory.Icon">
            <summary>
            An Icon to be used for visualizing the searchable category.<br/>
            This icon must contain exactly 6 images of size 8x8, 16x16, 24x24, 32x32, 48x48, and 64x64 in that order.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchFilterCategory.Filters">
            <summary>
            Searchable filters within the category
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchFilterCategory.#ctor(System.String,System.Drawing.Icon,System.Collections.Generic.IEnumerable{VideoOS.Platform.Search.SearchFilter})">
            <summary>
            Default constructor.
            </summary>
            <param name="name">Name of the category. Cannot be null or empty.</param>
            <param name="icon">Icon (optional) representing the category.</param>
            <param name="filters">Enumerable of search filters to add to the category.</param>
            <exception cref="T:System.ArgumentException">If the name is null or empty.</exception>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchFilter">
            <summary>
            Represents a single searchable filter.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchFilter.Id">
            <summary>
            Unique id of this filter.
            <c>Id</c> is used to identify the search filter in serialization:
            must be constant (static) for the filter type.
            If Id is Guid.Empty, then SearchFilter may not serialize properly.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchFilter.Name">
            <summary>
            Filter name.
            
            Example: Age, Speed, Height.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchFilter.Description">
            <summary>
            Filter description.
            
            Help text to the user describing the filter.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchFilter.MultipleValuesAllowed">
            <summary>
            Indicates whether multiple values for this search filter is allowed (supported by search agent) or not.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchFilter.UseInlineEdit">
            <summary>
            Gets or sets whether or not the edit control should be shown "inline" (as opposed to the default where it is shown in a drop down).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchFilter.UsesScopeItems">
            <summary>
            Gets or sets whether this filter uses the items in the scope (<see cref="P:VideoOS.Platform.Search.SearchScope.Items"/>). Most filters will not need this, but some do, and that impacts how a search
            should be saved (i.e. serialized) 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchFilter.GetFilterConfiguration">
            <summary>
            Gets the configuration for the search filter. This is used to instantiate an appropriate
            edit control to edit the value of the filter.
            </summary>
            <returns>Filter configuration specifying details for the edit control used to edit the value of the filter.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchFilter.CreateValue">
            <summary>
            Creates an filter value for the search filter. Apply default values here if desired.
            </summary>
            <returns>Search filter value for the search filter.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchFilter.ResetValue(VideoOS.Platform.Search.FilterValues.FilterValueBase)">
            <summary>
            Resets the specified filter value back to its initial state. If this causes a change to the filter value then its Changed event will be signalled.
            </summary>
            <param name="value">The filter value that should be reset.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchFilter.GetDisplayValue(VideoOS.Platform.Search.FilterValues.FilterValueBase)">
            <summary>
            Override this to create a custom display value for the provided search filter value.
            </summary>
            <param name="value">The search filter value to summarize into a display value.</param>
            <returns>String representation of the provided filter value.</returns>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchFilterEditControl">
            <summary>
            Represents a user control used to set the values for a given <see cref="T:VideoOS.Platform.Search.FilterValues.FilterValueBase"/>. Implementations of
            this class are responsible for constructing the UI allowing the user to create/modify the value(s) of the associated
            <see cref="T:VideoOS.Platform.Search.FilterValues.FilterValueBase"/>.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchFilterEditControl.FilterValue">
            <summary>
            Gets the value of the associated search filter. Available when <see cref="M:VideoOS.Platform.Search.SearchFilterEditControl.Init"/> is called.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchFilterEditControl.SearchScope">
            <summary>
            Gets the search scope. Available when <see cref="M:VideoOS.Platform.Search.SearchFilterEditControl.Init"/> is called.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchFilterEditControl.SnapToDefaultWidth">
            <summary>
            Gets or sets whether or not the edit control should snap to the width of the parent control (i.e. the size of the drop down)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchFilterEditControl.FilterConfiguration">
            <summary>
            Gets the filter configuration. Available when <see cref="M:VideoOS.Platform.Search.SearchFilterEditControl.Init"/> is called.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchFilterEditControl.Init">
            <summary>
            Initializes the control.
            Override this to provide custom initialization logic.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchFilterEditControl.Close">
            <summary>
            Closes the control.
            Override this to provide custom close logic.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchManager">
            <summary>
            A single-entry point for performing searches across the VMS system. The search manager will expose all
            available searches supplied by loaded search agent plugins. A search can be started across multiple
            search agents and run simultaneously by the search manager.<br/>
            1. A dedicated thread will run per criteria for a started search.<br/>
            2. Only one search per criteria can be performed at a time. (This means that a second search for a criteria will cancel the first search)<br/>
            3. The criteriaLimit is per criteria. Meaning that searching for 3 criteria with a limit of 50 will return a maximum of 150 results in total.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchManager._searchAgentPlugins">
            <summary>
            Holds a list of all loaded search agent plugins.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchManager._runningJobs">
            <summary>
            Holds a list of all the latest searches for each search definition and their corresponding job data.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchManager._runningTasks">
            <summary>
            Holds a list of all running tasks, and their corresponding job data.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchManager.START_TASK_TIMEOUT">
            <summary>
            A timeout for when a fetch task is allowed to continue.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Search.SearchManager.SearchResultReady">
            <summary>
            An event used to inform that a set of results is ready.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Search.SearchManager.ErrorOccurred">
            <summary>
            An event used to inform the caller about run-time error.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Search.SearchManager.SearchDone">
            <summary>
            An event used to inform the caller that a started search has completed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchManager.SearchFilterCategories">
            <summary>
            Returns all search filter categories from all the loaded search agent plugins.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchManager.#ctor">
            <summary>
            Creates a new SearchManager for performing searches across the VMS system.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchManager.#ctor(System.Collections.Generic.IEnumerable{VideoOS.Platform.Search.SearchAgentPlugin})">
            <summary>
            Creates a new SearchManager for performing searches across the VMS system using
            the provided search agent plugins.
            </summary>
            <param name="searchAgentPlugins">Search agent plugins to add to the search manager.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchManager.CreateSearchDefinition(VideoOS.Platform.Search.SearchFilterCategory,VideoOS.Platform.Search.SearchScope)">
            <summary>
            Creates a new search definition based on a search category.
            </summary>
            <param name="searchFilterCategory">The category to base the definition on.</param>
            <param name="searchScope">The search scope associated with the definition.</param>
            <returns>A new search definition.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchManager.DestroySearchDefinition(VideoOS.Platform.Search.SearchDefinition)">
            <summary>
            Destroys the provided search definition.
            </summary>
            <param name="searchDefinition">The search definition to destroy.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchManager.StartSearch(VideoOS.Platform.Search.SearchDefinition,System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{VideoOS.Platform.Item})">
            <summary>
            Starts a new search based on the given search criteria.<br/>
            Only one search can be started at a time. If a new search is started the previous search is
            canceled, and any subsequent result is ignored. This is equivalent to calling CancelSearch first.
            </summary>
            <param name="definition">A search definition on which to start a search.</param>
            <param name="from">The start of the time span in which to search.</param>
            <param name="to">The end of the time span in which to search.</param>
            <param name="items">The items (i.e. cameras) to include in the search.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchManager.StartSearch(VideoOS.Platform.Search.SearchDefinition,System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{VideoOS.Platform.Item},VideoOS.Platform.Search.SearchSortOrder)">
            <summary>
            Starts a new search based on the given search criteria.<br/>
            Only one search can be started at a time. If a new search is started the previous search is
            canceled, and any subsequent result is ignored. This is equivalent to calling CancelSearch first.
            </summary>
            <param name="definition">A search definition on which to start a search.</param>
            <param name="from">The start of the time span in which to search.</param>
            <param name="to">The end of the time span in which to search.</param>
            <param name="items">The items (i.e. cameras) to include in the search.</param>
            <param name="sortOrder">The order in which the results should be delivered.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchManager.FirePartialResultReady(System.Collections.Generic.IEnumerable{VideoOS.Platform.Search.SearchResultData},VideoOS.Platform.Search.SearchDefinition,System.Guid)">
            <summary>
            Fire <see cref="E:VideoOS.Platform.Search.SearchManager.SearchResultReady"/> events.
            </summary>
            <param name="searchResults">The enumerable representing a chunk of <see cref="T:VideoOS.Platform.Search.SearchResultData"/>s ready to be offloaded.</param>
            <param name="searchDefinition">The <see cref="T:VideoOS.Platform.Search.SearchDefinition"/> which initiated the search.</param>
            <param name="sessionId">A unique session id identifying the search where the result originated from.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchManager.FireErrorOccurred(VideoOS.Platform.Search.Errors.SearchError,VideoOS.Platform.Search.SearchDefinition,System.Guid)">
            <summary>
            Fire <see cref="E:VideoOS.Platform.Search.SearchManager.ErrorOccurred"/> events.
            </summary>
            <param name="searchError">The search error that occurred.</param>
            <param name="searchDefinition">The <see cref="T:VideoOS.Platform.Search.SearchDefinition"/> which initiated the search.</param>
            <param name="sessionId">A unique session id identifing the search where the exception originated from.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchManager.FireSearchDone(VideoOS.Platform.Search.SearchDefinition,System.Guid)">
            <summary>
            Fire <see cref="E:VideoOS.Platform.Search.SearchManager.SearchDone"/> events.
            </summary>
            <param name="searchDefinition">The search definition that has completed.</param>
            <param name="sessionId">The sessionId firing the search done event.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchManager.CancelSearch(System.Collections.Generic.IEnumerable{VideoOS.Platform.Search.SearchDefinition})">
            <summary>
            Attempt to cancel the currently running search based on there search criteria.
            This will only signal the search agent plugin to cancel a search and then return.
            After calling this, no more results from the cancel search will be returned.
            </summary>
            <param name="definitions">A list of search definitions to cancel.</param>
            <returns>True if at least one search was signaled to cancel.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchManager.Dispose(System.Boolean)">
            <summary>
            Override to handle disposing objects in inherited classes.
            </summary>
            <param name="disposing">Indicate if the method is called from Dispose() or the finalizer.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchManager.Dispose">
            <summary>
            Dispose the SearchManager, and then signal all running searches to cancel.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.ConcurrentDictionaryExtension">
            <summary>
            Extension method for thread-safe removal of elements if both the user-provided key and value match the
            corresponding pair currently stored in the dictionary.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchAgentPlugin">
            <summary>
            Defines the search agent plugin interface. Inherit this class to create an implementation of a specific type of
            search agent.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchAgentPlugin.Id">
            <summary>
            Unique id of this plugin. If copying any of the sample plugins - be sure to replace this id with a new one. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchAgentPlugin.Name">
            <summary>
            Name of the plugin.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchAgentPlugin.SearchFilterCategory">
            <summary>
            The filter category which this agent can search in.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchAgentPlugin.CreateSearchDefinition(VideoOS.Platform.Search.SearchScope)">
            <summary>
            Creates a new search definition.
            </summary>
            <param name="searchScope">The search scope.</param>
            <returns>A new search definition.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchAgentPlugin.Init">
            <summary>
            This method is called when the user has logged in and configuration is accessible.
            If a user logs out and in again, this method will be called at every login.
            This should be used if the plugin is accessing configuration items.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchAgentPlugin.Close">
            <summary>
            Called by the Environment when the user log's off. Disposes of any resources. 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchResultData">
            <summary>
            Represents a single search result. A search performed on a <see cref="T:VideoOS.Platform.Search.SearchDefinition"/> instance may yield
            many instances of derivatives of this class.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Search.SearchResultData.DataChanged">
            <summary>
            Event used to signal that any of the data has been modified.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchResultData.SearchDefinition">
            <summary>
            Gets the <see cref="T:VideoOS.Platform.Search.SearchDefinition"/> this search result originates from.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchResultData.Title">
            <summary>
            The title of the search result.
            If set to null (default) then the name of the Item property will be used as fallback value in the UI.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchResultData.WarningText">
            <summary>
            Warning text presented to the user as part of the search result.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchResultData.BeginTime">
            <summary>
            The timestamp (UTC) marking the beginning of the sequence.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchResultData.TriggerTime">
            <summary>
            The timestamp (UTC) marking the beginning of the event which triggered the sequence.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchResultData.EndTime">
            <summary>
            The timestamp (UTC) marking the end of the sequence.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchResultData.Id">
            <summary>
            The unique identifier of the search result.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchResultData.#ctor(System.Guid)">
            <summary>
            Create instance of the <see cref="T:VideoOS.Platform.Search.SearchResultData"/>.
            <see cref="P:VideoOS.Platform.Search.SearchResultData.Id"/> is used to identify the search result between searches:
            it is desired that a search repeated with same filters produce results with same ids.
            It is allowed to generate results with new id's, but that will disable certain functionality.
            For example, result items selection may not function for such items. 
            </summary>
            <param name="id">The unique identifier of the search result.</param>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchResultData.Item">
            <summary>
            The item which this search result is associated with.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchResultData.RelatedItems">
            <summary>
            Enumerable of related items (if any). Can be null or empty.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchResultData.IgnoredSearchFilters">
            <summary>
            Enumerable of search filters that are not supported (therefore ignored) on the search results. Can be null or empty.
            This property is used for informing the user about hidden results with ignored filters, so that they can choose to display those results if they want to.
            Under normal circumstances, there shouldn't be any search filters that are ignored. 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchResultData.GetCachedPropertiesAsync(System.Threading.CancellationToken)">
             <summary>
             Gets a collection of key-value pairs, associated with the SearchResultData instance.
             Use these properties to customize display of the SearchResult depending on result type.
             Properties will be displayed in UI in the order they was added into this collection.
            
             Note: This method implements caching such that the properties are only fetched once.
             Note: Do not override this method, but rather override <see cref="M:VideoOS.Platform.Search.SearchResultData.GetPropertiesAsync(System.Threading.CancellationToken)"/>.
             </summary>
             <param name="cancellationToken">A cancellation token that can be used to cancel the work.</param>
             <returns>Collection of key-value pairs, associated with the SearchResultData instance</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchResultData.GetPropertiesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a collection of key-value pairs, associated with the SearchResultData instance.
            Use these properties to customize display of the SearchResult depending on result type.
            Properties will be displayed in UI in the order they was added into this collection.
            </summary>
            <param name="cancellationToken">A cancellation token that can be used to cancel the work.</param>
            <returns>Collection of key-value pairs, associated with the SearchResultData instance</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchResultData.GetCachedBoundingShapesAsync(System.Threading.CancellationToken)">
             <summary>
             Gets a collection of <see cref="T:VideoOS.Platform.Search.Results.BoundingShape"/>, associated with the SearchResultData instance.
             Use these shapes to highlight relevant parts of the image displayed together with the SearchResult in the UI.
            
             Note: This method implements caching such that the bounding shapes are only fetched once.
             Note: Do not override this method, but rather override <see cref="M:VideoOS.Platform.Search.SearchResultData.GetBoundingShapesAsync(System.Threading.CancellationToken)"/>.
             </summary>
             <param name="cancellationToken">A cancellation token that can be used to cancel the work.</param>
             <returns>Collection of <see cref="T:VideoOS.Platform.Search.Results.BoundingShape"/>, associated with the SearchResultData instance.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchResultData.GetBoundingShapesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a collection of <see cref="T:VideoOS.Platform.Search.Results.BoundingShape"/>, associated with the SearchResultData instance.
            Use these shapes to highlight relevant parts of the image displayed together with the SearchResult in the UI.
            </summary>
            <param name="cancellationToken">A cancellation token that can be used to cancel the work.</param>
            <returns>Collection of <see cref="T:VideoOS.Platform.Search.Results.BoundingShape"/>, associated with the SearchResultData instance.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchResultData.FireDataChangedEvent">
            <summary>
            Invoke this method whenever a custom property or field changes value.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchResultData.SetData``1(``0@,``0)">
            <summary>
            Sets a new value for a specific data field.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="storageField">The existing value to update.</param>
            <param name="value">The new value to update with.</param>
            <returns>True if the value was updated.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchResultData.ResetPropertiesCache">
            <summary>
            Reset the property cache, and force the <see cref="M:VideoOS.Platform.Search.SearchResultData.GetPropertiesAsync(System.Threading.CancellationToken)"/> to be recalled next time properties are displayed.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchResultData.ResetBoundingShapesCache">
            <summary>
            Reset the bounding shapes cache, and force the <see cref="M:VideoOS.Platform.Search.SearchResultData.GetBoundingShapesAsync(System.Threading.CancellationToken)"/> to be recalled next time bounding shapes are displayed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchResultData.SearchResultUserControlType">
            <summary>
            Specified which visual representation of the search result that shall be used when the
            result is displayed. Use values in <see cref="T:VideoOS.Platform.Search.Results.SearchResultUserControlTypes"/> for built
            in visual representation or create a custom representation using a
            <see cref="T:VideoOS.Platform.Search.SearchUserControlResolver"/>.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchAgentResultReadyEventArgs">
            <summary>
            Event arguments used when a partial search result is ready.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchAgentResultReadyEventArgs.SessionId">
            <summary>
            The unique search session id identifing where the result originated from.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchAgentResultReadyEventArgs.SearchResults">
            <summary>
            The enumerable representing a chunk of <see cref="T:VideoOS.Platform.Search.SearchResultData"/>s ready to be offloaded.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchResultTypes">
            <summary>
            Static list of <see cref="T:VideoOS.Platform.Search.SearchResultData"/> types (i.e. <see cref="T:System.Guid"/>s).
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchResultTypes.ListVideoSearchResult">
            <summary>
            Video search result type for displaying in a list view
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchResultTypes.TileVideoSearchResult">
            <summary>
            Video search result type for displaying in a tile view
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchResultTypes.ListVideoBoundingBoxSearchResult">
            <summary>
            Video search result type including bounding box information in a list view
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchResultTypes.TileVideoBoundingBoxSearchResult">
            <summary>
            Video search result type including bounding box information in a tile view
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchResultUserControl">
            <summary>
            User control used to visualize a given <see cref="T:VideoOS.Platform.Search.SearchResultData"/>.
            
            Inherit this class to create your own visualization of a <see cref="T:VideoOS.Platform.Search.SearchResultData"/>. In order to use the type you create,
            you must also add a <see cref="T:VideoOS.Platform.Search.SearchUserControlsPlugin"/> to your plugin definition.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Search.SearchResultUserControl.PropertyChanged">
            <summary>
            Event which is fired whenever a property changes. This is primarily used for UI bindings.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Search.SearchResultUserControl.IsLoadingChanged">
            <summary>
            Event which is fired whenever the <see cref="P:VideoOS.Platform.Search.SearchResultUserControl.IsLoading"/> property changes.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchResultUserControl.IsLoading">
            <summary>
            Indicates whether or not a general loading visualization should be visible. Set this property to True if the content of your result
            view is not displayed instantly, and set it back to False when the view is done loading.
            <remarks>To suppress default visualization, call <see cref="P:VideoOS.Platform.Search.SearchResultUserControl.SuppressDefaultLoadingVisualization"/></remarks>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchResultUserControl.SuppressDefaultLoadingVisualization">
            <summary>
            Set to <c>true</c>/<c>false</c> to disable/enable general "loading in progress"-visualization.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchResultUserControl.DefaultLoadingVisualizationMargin">
            <summary>
            Margin for default visualization of the loading progress. 
            Override this property to adjust placement of the default visualization.
            Default placement is center of the control.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchResultUserControl.Init(VideoOS.Platform.Search.SearchResultData)">
            <summary>
            Initializes the user control with the provided <see cref="T:VideoOS.Platform.Search.SearchResultData"/>.
            </summary>
            <param name="searchResultData">Search result to visualize.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchResultUserControl.Close">
            <summary>
            Closes the control.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchResultUserControl.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:VideoOS.Platform.Search.SearchResultUserControl.PropertyChanged"/> event with the provided propertyName in the event args.
            </summary>
            <param name="propertyName">The property for which to raise a <see cref="E:VideoOS.Platform.Search.SearchResultUserControl.PropertyChanged"/> event.</param>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchSortOrder">
            <summary>
            Sort order enumeration indicating the currently selected sort order in the client.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchSortOrder.Unspecified">
            <summary>
            Sort order not specified by client.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchSortOrder.NewestStartTime">
            <summary>
            Sort by start time with the most recent start times first.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchSortOrder.OldestStartTime">
            <summary>
            Sort by start time with the oldest start times first.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchSortOrder.NewestEventTime">
            <summary>
            Sort by event time with the most recent event times first.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchSortOrder.OldestEventTime">
            <summary>
            Sort by event time with the oldest event times first.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchUserControlsPlugin">
            <summary>
            Defines the search user controls plugin interface. Inherit this class to create custom UI controls to
            visualize <see cref="T:VideoOS.Platform.Search.SearchResultData"/> and/or <see cref="T:VideoOS.Platform.Search.FilterConfigurations.FilterConfigurationBase"/> instances.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchUserControlsPlugin.Id">
            <summary>
            Unique id of this plugin. If copying any of the sample plugins - be sure to replace this id with a new one. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchUserControlsPlugin.Name">
            <summary>
            Name of the plugin.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchUserControlsPlugin.SearchResultUserControlTypes">
            <summary>
            Gets an enumerable of search result user control types indicating which
            search results you wish to add a (or override the default) user control for.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchUserControlsPlugin.SearchFilterConfigurationTypes">
            <summary>
            Gets an enumerable of search filter configuration types (i.e. types deriving from <see cref="T:VideoOS.Platform.Search.FilterConfigurations.FilterConfigurationBase"/>) indicating which
            search filter types you wish to add a (or override the default) user control for.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchUserControlsPlugin.CreateSearchResultUserControl(System.Guid)">
            <summary>
            Creates a <see cref="T:VideoOS.Platform.Search.SearchResultUserControl"/> which can visualize the given search result type.
            </summary>
            <param name="searchResultUserControlType">The search result user control type which to create a <see cref="T:VideoOS.Platform.Search.SearchResultUserControl"/>.</param>
            <returns>User control to display a search result based on the provided search result user control type.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchUserControlsPlugin.CreateSearchFilterEditControl(VideoOS.Platform.Search.FilterConfigurations.FilterConfigurationBase)">
            <summary>
            Creates a <see cref="T:VideoOS.Platform.Search.SearchFilterEditControl"/> used to allow the user to edit a search filter based on the given filter configuration.
            </summary>
            <param name="filterConfiguration">The configuration of the search filter with which to create a <see cref="T:VideoOS.Platform.Search.SearchFilterEditControl"/>.</param>
            <returns>User control to display the search filter edit control based on the provided filter configuration.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchUserControlsPlugin.Init">
            <summary>
            This method is called when the user has logged in and configuration is accessible.
            If a user logs out and in again, this method will be called at every login.
            This should be used if the plugin is accessing configuration items.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchUserControlsPlugin.Close">
            <summary>
            Called by the Environment when the user log's off. Disposes of any resources. 
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchScope">
            <summary>
            Search scope used when starting a search. Includes a timespan and list of items in which to limit the search.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Search.SearchScope.Changed">
            <summary>
            Event fired when the scope changes
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchScope.From">
            <summary>
            The timestamp marking the beginning of the time scope in which to search.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchScope.To">
            <summary>
            The timestamp marking the end of the time scope in which to search.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchScope.Items">
            <summary>
            List of items to limit the search to.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchScope.FireChangedEvent">
            <summary>
            Fires the Changed event indicating that the scope changed.
            Invoke this whenever any properties of the scope that affects the search are changed.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchScope.Equals(System.Object)">
            <summary>
            Returns a value indicating whether two SearchScope objects are Equal.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns>true if the value parameter equals the value of this instance; otherwise, false.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchScope.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchUserControlResolver">
            <summary>
            Singleton used to resolve/instantiate user controls for search results and/or search filters.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Search.SearchUserControlResolver.MilestoneSearchAgentPluginId">
            <summary>
            This is a copy of the Guid (ID) of the Milestone specific Search Agent plugin. We need this here in
            order to ensure we read in mappings from this plugin first, and allow others to overwrite the mappings
            in custom/3rd party plugins.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchUserControlResolver.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:VideoOS.Platform.Search.SearchUserControlResolver"/>.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchUserControlResolver.AddSearchUserControlsPlugin(VideoOS.Platform.Search.SearchUserControlsPlugin)">
             <summary>
             Adds a <see cref="T:VideoOS.Platform.Search.SearchUserControlsPlugin"/> to the internal configuration. All standard plugins are added automatically,
             so you should only use this method if you have a custom (ad-hoc) plugin which does not reside in a MIPPlugins folder.
            
             XProtect Smart Client uses this to add itself as a plugin for generating result and edit criteria user controls.
             </summary>
             <param name="plugin">The plugin instance to add</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchUserControlResolver.CreateSearchResultUserControl(System.Guid)">
            <summary>
            Creates a <see cref="T:VideoOS.Platform.Search.SearchResultUserControl"/> which can visualize the given search result type.
            </summary>
            <param name="searchResultUserControlType">The search result user control type which to create a <see cref="T:VideoOS.Platform.Search.SearchResultUserControl"/>.</param>
            <returns>User control to display a search result based on the provided search result.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchUserControlResolver.CreateSearchFilterEditControl(VideoOS.Platform.Search.FilterConfigurations.FilterConfigurationBase,VideoOS.Platform.Search.FilterValues.FilterValueBase,VideoOS.Platform.Search.SearchScope)">
            <summary>
            Creates a <see cref="T:VideoOS.Platform.Search.SearchFilterEditControl"/> used to allow the user to edit a search criteria filter based on the given filter configuration.
            </summary>
            <param name="filterConfiguration">The configuration of the search filter with which to create a <see cref="T:VideoOS.Platform.Search.SearchFilterEditControl"/>.</param>
            <param name="filterValue">The filter value which the edit control is initialized with.</param>
            <param name="searchScope">The search scope which the edit control is initialized with.</param>
            <returns>User control to display the search filter edit control based on the provided filter configuration.</returns>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchUserControlResolver.CreateSearchFilterEditControl(VideoOS.Platform.Search.FilterConfigurations.FilterConfigurationBase,VideoOS.Platform.Search.SearchFilter,VideoOS.Platform.Search.FilterValues.FilterValueBase,VideoOS.Platform.Search.SearchScope)">
            <summary>
            Creates a <see cref="T:VideoOS.Platform.Search.SearchFilterEditControl"/> used to allow the user to edit a search criteria filter based on the given filter configuration.
            </summary>
            <param name="filterConfiguration">The configuration of the search filter with which to create a <see cref="T:VideoOS.Platform.Search.SearchFilterEditControl"/>.</param>
            <param name="filter">The filter which the edit control is associated with.</param>
            <param name="filterValue">The filter value which the edit control is initialized with.</param>
            <param name="searchScope">The search scope which the edit control is initialized with.</param>
            <returns>User control to display the search filter edit control based on the provided filter configuration.</returns>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchToolbarPlugin">
            <summary>
            The SearchToolbarPlugin defines a plugin that resides in the action/preview area of the Search tab in Smart Client
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchToolbarPlugin.Id">
            <summary>
            Gets the unique id identifying this plugin component
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchToolbarPlugin.Name">
            <summary>
            The plugin name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchToolbarPlugin.SupportedSearchAgentPluginIds">
            <summary>
            Collection of <see cref="T:System.Guid"/>s representing the <see cref="T:VideoOS.Platform.Search.SearchAgentPlugin"/>s that this search toolbar plugin supports search results from.
            Return null or an empty enumeration to accept all <see cref="T:VideoOS.Platform.Search.SearchAgentPlugin"/>s.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchToolbarPlugin.ToolbarPluginOverflowMode">
            <summary>
            Gets the overflow behaviour of this search toolbar plugin.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchToolbarPlugin.Init">
            <summary>
            This method is called when the user has logged in and configuration is accessible.
            If a user logs out and in again, this method will be called at every login.
            This should be used if the plugin is accessing configuration items.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchToolbarPlugin.Close">
            <summary>
            This method is called by the Environment when the user logs off.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchToolbarPlugin.GenerateSearchToolbarPluginInstance">
            <summary>
            Called for every instance of this toolbar plugin that is added to the UI. 
            </summary>
            <returns>A search toolbar plugin instance</returns>
        </member>
        <member name="T:VideoOS.Platform.Search.SearchToolbarPluginInstance">
            <summary>
            Instance of a <see cref="T:VideoOS.Platform.Search.SearchToolbarPlugin"/>. An instance is needed for every place in the UI where the toolbar action is shown.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Search.SearchToolbarPluginInstance.PropertyChanged">
            <summary>
            Event fired when a property changes.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchToolbarPluginInstance.Title">
            <summary>
            Gets or sets the title of the plugin
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchToolbarPluginInstance.Tooltip">
            <summary>
            Gets or sets the tooltip of the plugin
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchToolbarPluginInstance.Icon">
            <summary>
            Gets or sets the icon of the plugin.
            This icon must contain exactly 6 images of size 8x8, 16x16, 24x24, 32x32, 48x48, and 64x64 in that order.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Search.SearchToolbarPluginInstance.Enabled">
            <summary>
            Gets or sets whether the plugin will be enabled.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchToolbarPluginInstance.FirePropertyChanged(System.String)">
            <summary>
            Notifies that the property with the given name has been changed. Call this in your custom property setters.
            </summary>
            <param name="propertyName">Name of the property which changed.</param>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchToolbarPluginInstance.Init">
            <summary>
            This method is called when the instance is created.
            This should be used if the plugin is accessing configuration items.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchToolbarPluginInstance.Close">
            <summary>
            This method is called when the containing view is disposed.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Search.SearchToolbarPluginInstance.Activate(System.Collections.Generic.IEnumerable{VideoOS.Platform.Search.SearchResultData})">
            <summary>
            Activates the plugin with the given set of search results.
            </summary>
            <param name="searchResults">The search results to activate the plugin with.</param>
            <returns>An <see cref="T:VideoOS.Platform.Search.ActivateResult"/> representing the result of the operation (for future use).</returns>
        </member>
        <member name="T:VideoOS.Platform.UI.ScrollableWindowsFormsHost">
            <summary>This class is a Windows Forms host which supports being inside a scroll container.</summary>
            <remarks>
            When you nest Windows Forms controls inside a WPF visual container the Windows Forms control actually 
            sits on top of the WPF window and maintains its own HWND. If the container is a scroll container (ScrollView),
            the clipping will not be done correctly. This windows forms sub class does the clipping.
            See http://www.mycsharp.de/wbb2/thread.php?threadid=76625.
            </remarks>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost._oldLeft">
            <summary>Top left x position of window region</summary>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost._oldTop">
            <summary>Top left y position of window region</summary>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost._oldRight">
            <summary>Bottom right x position of window region</summary>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost._oldBottom">
            <summary>Bottom right x position of window region</summary>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost._boundingBox">
            <summary>
            The rectangle that the host is currently adjusted to.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost._disposed">
            <summary>Track whether Dispose has been called.</summary>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost._scrollViewer">
            <summary>
            The scroll viewer that contains this host.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost._windowHwnd">
            <summary>
            Contains the WINAPI window handle
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.ScrollableWindowsFormsHost.#ctor">
            <summary>Creates a scrollabel Windows Forms host.</summary>
        </member>
        <member name="M:VideoOS.Platform.UI.ScrollableWindowsFormsHost.Dispose(System.Boolean)">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
            <param name="disposing"><b>true</b> if the method has been called by applicaton code.</param>
        </member>
        <member name="M:VideoOS.Platform.UI.ScrollableWindowsFormsHost.OnWindowPositionChanged(System.Windows.Rect)">
            <summary>
            Called when the hosted window's position changes.
            </summary>
            <param name="rcBoundingBox">The window's position.</param>
        </member>
        <member name="M:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.CreateRectRgn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a handle to a region specified through upper left and bottom right corner.</summary>
            <param name="x1">Upper left X</param>
            <param name="y1">Upper left Y</param>
            <param name="x2">Bottom right X</param>
            <param name="y2">Bottom right Y</param>
            <returns>Returns a handle to the created region.</returns>
        </member>
        <member name="M:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.SetWindowRgn(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>Sets the specified region to the specified window. That means the specified window can paint
            itself only in the specified region.</summary>
            <param name="hWnd">Handle to the window</param>
            <param name="hRgn">Hanlde to the region</param>
            <param name="bRedraw">Boolean indicating whether the specified region should be redrawn.</param>
            <returns>Returns nonzero if success, otherwise zero.</returns>
        </member>
        <member name="M:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.InvalidateRect(System.IntPtr,VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.RECT@,System.Boolean)">
            <summary>
            Invalidates a rectangle for a given window
            </summary>
            <param name="handle">Window handle</param>
            <param name="rect">Rectangle to invalidate</param>
            <param name="erase">True to erase the background, false otherwise</param>
            <remarks>See the documentation for the WinCE version of InvalidateRect</remarks>
        </member>
        <member name="M:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.UpdateWindow(System.IntPtr)">
            <summary>
            The UpdateWindow function updates the client area of the specified window by sending a WM_PAINT message to the window 
            if the window's update region is not empty. The function sends a WM_PAINT message directly to the window procedure of 
            the specified window, bypassing the application queue. If the update region is empty, no message is sent.
            </summary>
            <param name="handle">Window handle</param>
            <returns></returns>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.SetWindowPosFlags.AsynchronousWindowPosition">
            <summary>If the calling thread and the thread that owns the window are attached to different input queues, 
            the system posts the request to the thread that owns the window. This prevents the calling thread from 
            blocking its execution while other threads process the request.</summary>
            <remarks>SWP_ASYNCWINDOWPOS</remarks>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.SetWindowPosFlags.DeferErase">
            <summary>Prevents generation of the WM_SYNCPAINT message.</summary>
            <remarks>SWP_DEFERERASE</remarks>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.SetWindowPosFlags.DrawFrame">
            <summary>Draws a frame (defined in the window's class description) around the window.</summary>
            <remarks>SWP_DRAWFRAME</remarks>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.SetWindowPosFlags.FrameChanged">
            <summary>Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message to 
            the window, even if the window's size is not being changed. If this flag is not specified, WM_NCCALCSIZE 
            is sent only when the window's size is being changed.</summary>
            <remarks>SWP_FRAMECHANGED</remarks>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.SetWindowPosFlags.HideWindow">
            <summary>Hides the window.</summary>
            <remarks>SWP_HIDEWINDOW</remarks>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.SetWindowPosFlags.DoNotActivate">
            <summary>Does not activate the window. If this flag is not set, the window is activated and moved to the 
            top of either the topmost or non-topmost group (depending on the setting of the hWndInsertAfter 
            parameter).</summary>
            <remarks>SWP_NOACTIVATE</remarks>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.SetWindowPosFlags.DoNotCopyBits">
            <summary>Discards the entire contents of the client area. If this flag is not specified, the valid 
            contents of the client area are saved and copied back into the client area after the window is sized or 
            repositioned.</summary>
            <remarks>SWP_NOCOPYBITS</remarks>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.SetWindowPosFlags.IgnoreMove">
            <summary>Retains the current position (ignores X and Y parameters).</summary>
            <remarks>SWP_NOMOVE</remarks>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.SetWindowPosFlags.DoNotChangeOwnerZOrder">
            <summary>Does not change the owner window's position in the Z order.</summary>
            <remarks>SWP_NOOWNERZORDER</remarks>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.SetWindowPosFlags.DoNotRedraw">
            <summary>Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to 
            the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent 
            window uncovered as a result of the window being moved. When this flag is set, the application must 
            explicitly invalidate or redraw any parts of the window and parent window that need redrawing.</summary>
            <remarks>SWP_NOREDRAW</remarks>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.SetWindowPosFlags.DoNotReposition">
            <summary>Same as the SWP_NOOWNERZORDER flag.</summary>
            <remarks>SWP_NOREPOSITION</remarks>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.SetWindowPosFlags.DoNotSendChangingEvent">
            <summary>Prevents the window from receiving the WM_WINDOWPOSCHANGING message.</summary>
            <remarks>SWP_NOSENDCHANGING</remarks>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.SetWindowPosFlags.IgnoreResize">
            <summary>Retains the current size (ignores the cx and cy parameters).</summary>
            <remarks>SWP_NOSIZE</remarks>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.SetWindowPosFlags.IgnoreZOrder">
            <summary>Retains the current Z order (ignores the hWndInsertAfter parameter).</summary>
            <remarks>SWP_NOZORDER</remarks>
        </member>
        <member name="F:VideoOS.Platform.UI.ScrollableWindowsFormsHost.NativeMethods.SetWindowPosFlags.ShowWindow">
            <summary>Displays the window.</summary>
            <remarks>SWP_SHOWWINDOW</remarks>
        </member>
        <member name="F:VideoOS.Platform.UI.WindowsFormsHostConstants.FontSize">
            <summary>
            Font size to be used in WindowsFormsHost to ensure correct anchor functionality in WinForms
            11.33pixel = 8.5pt * 1/72inch/pt * 96pixel/inch
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.WindowsFormsHostConstants.FontFamily">
            <summary>
            Font family to be used in WindowsFormsHost to ensure correct anchor functionality in WinForms
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.DependencyObjectExtension.GetAncestors``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Enumerates through the ancestors of this object that satisfy the specified type and predicate conditions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="predicate"></param>
            <param name="includeSelf"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.UI.DependencyObjectExtension.GetAncestors``1(System.Windows.DependencyObject)">
            <summary>
            Enumerates through the ancestors of this object, not including itself.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.UI.DependencyObjectExtension.GetAncestors(System.Windows.DependencyObject,System.Func{System.Windows.DependencyObject,System.Boolean},System.Boolean)">
            <summary>
            Enumerates through the ancestors of this object that satisfy the predicate condition.
            </summary>
            <param name="self"></param>
            <param name="includeSelf"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.UI.DependencyObjectExtension.GetAncestors(System.Windows.DependencyObject)">
            <summary>
            Enumerates through the ancestors of this object, not including itself.
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.UI.DependencyObjectExtension.GetDescendants``1(System.Windows.DependencyObject)">
            <summary>
            Enumerates through the descendants of this object that satisfy the specified type condition.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.UI.WpfWaitCursor">
            <summary>
            A simple class to be used around code taking a bit of time to execute.
            This should be used in WPF application.
            
            using (new WpfWaitCursor())
            {
            	// Do something 
            }
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.WpfWaitCursor.#ctor">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.UI.WpfWaitCursor.#ctor(System.Windows.Input.Cursor)">
            <summary>
            Save current cursor and show waitcursor.
            </summary>
            <param name="newCursor"></param>
        </member>
        <member name="M:VideoOS.Platform.UI.WpfWaitCursor.Dispose">
            <summary>
            Clean up resources, and return to default cursor.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.WpfWaitCursor.Dispose(System.Boolean)">
            <summary>
            Clean up resources, and return to default cursor.
            </summary>
            <param name="all"></param>
        </member>
        <member name="T:VideoOS.Platform.UI.ItemPickerForm">
            <summary>
            A form used for selecting a single Item.<br/>
            After this form has been created, the properties should be set, and the Init() method should ALWAYS be called.<br/>
            </summary>
            To select a camera the following can be used:<br/>
            @code			
            ItemPickerForm form = new ItemPickerForm();
            form.KindFilter = Kind.Camera;				//We just want camera type of Items
            form.SelectedItem = _selectedCameraItem;	//The previous selected camera
            form.AutoAccept = true;						//Single click on Camera
            form.Init();								//Initialize the form and pull from entire configuration
            if (form.ShowDialog() == DialogResult.OK)	//Show dialog and test for user exit
            {
            	_selectedCameraItem = form.SelectedItem;
            	if (_selectedCameraItem != null)
            	{
            		buttonCameraSelect.Text = _selectedCameraItem.Name;
            	}
            }
            @endcode
            <br/>
            To select any Item that can be triggered, the following code can be used:<br/>
            @code
            ItemPickerForm form = new ItemPickerForm();
            form.CategoryFilter = Category.TriggerOut;
            form.SelectedItem = _selectedItem;
            form.AutoAccept = true;
            form.Init();
            if (form.ShowDialog()==DialogResult.OK)
            {
                _selectedItem = form.SelectedItem;
            }
            @endcode
        </member>
        <member name="M:VideoOS.Platform.UI.ItemPickerForm.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerForm.CategoryFilter">
            <summary>
            Sets what Category the user can choose from.  Can be a single Category or null for any category.
            This property need to be set before showing the dialog.
            </summary>
            <remarks>The CategoryFilter should be used when configuring items that can be triggered.
            By setting this property instead of the KindFilter, you will provide the end-user with
            the choice of all kinds of Items that can be triggered, and not just one kind.
            </remarks>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerForm.KindFilter">
            <summary>
            Sets what Kind the user can choose from.  Can be one Kind or Guid.Empty for all kinds.
            This property need to be set before showing the dialog.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerForm.TopLabel">
            <summary>
            Overrides the heading text on the form.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerForm.AutoAccept">
            <summary>
            When set to True, closes the form returns immediately as the user selects a valid Item.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerForm.AutoExpand">
            <summary>
            Identifies if single treenodes should automatically expand to next level.
            Default is true.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.ItemPickerForm.Init">
            <summary>
            Initializes the Form.  <br/>
            One of the Init methods must be called before the Form is opened.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.ItemPickerForm.Init(System.Collections.Generic.List{VideoOS.Platform.Item})">
            <summary>
            Initializes the Form.  <br/>
            One of the Init methods must be called before the Form is opened.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.ItemPickerForm.Init(System.Collections.Generic.List{VideoOS.Platform.Item},VideoOS.Platform.ItemHierarchy)">
            <summary>
            Initializes the Form.  <br/>
            One of the Init methods must be called before the Form is opened.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerForm.SelectedItem">
            <summary>
            Identifies a previous selected Item.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerForm.ShowDisabledItems">
            <summary>
            Used to filter on or off the devices that may be disabled.
            Default is to hide disabled items.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.UI.ItemPickerForm.ValidateSelectionEvent">
            <summary>
            Use for custom control of what Items are valid selection.
            This event will be called for every click the user makes on an Item
            for the client program to validate if the selections is a valid selection.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.UI.ItemPickerForm.IsItemVisibleEvent">
            <summary>
            This event is called when the TreeView TreeNode is about to be displayed.<br/>
            The controlling plug-in can evaluate if a given Item should be available in the TreeView
            </summary>
        </member>
        <member name="T:VideoOS.Platform.UI.ItemPickerForm.ValidateSelectionHandler">
            <summary>
            Defines the ValidateSelectionEvent event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:VideoOS.Platform.UI.ItemPickerForm.ValidateEventArgs">
            <summary>
            Is used on the ValidateSelectionEvent event - when the client application can validate if an Item is selectable.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerForm.ValidateEventArgs.Item">
            <summary>
            Filled with the Item the user has just clicked on
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerForm.ValidateEventArgs.AcceptSelection">
            <summary>
            Your response to whether the selected Item is a valid selection.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.UI.ItemPickerForm.IsItemVisibleHandler">
            <summary>
            Defining the IsItemVisibleEvent event
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:VideoOS.Platform.UI.ItemPickerForm.IsItemVisibleEventArgs">
            <summary>
            Send on the IsItemVisibleEvent event for checking if an Item should be visible.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerForm.IsItemVisibleEventArgs.Item">
            <summary>
            Filled with the Item to be evaluated
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerForm.IsItemVisibleEventArgs.Visible">
            <summary>
            Your response to whether the selected Item is to be visiable as a treenode
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.ItemPickerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.ItemPickerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VideoOS.Platform.UI.ItemPickerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.UI.ItemPickerUserControl">
            <summary>
            The ItemPickerUserControl is used to select one or multiple items.
            The control has a layout of a TreeView with items to select from
            and a ListView with the selected items.<br/>
            Category and Kind dropdowns can be hidden.<br/>
            <br/>
            This control requires a call to Init() for the Icons to show up correctly.<br/>
            <br/>
            For adding this UserControl to a Form for selecting one or more cameras and one or more events, the following code could be used:<br/>
            <code>
            <![CDATA[
            public MyOwnDevicePickerForm( )
            {
            	InitializeComponent();
            	itemPickerUserControl.KindFilter = new List<Guid>() 
            			{ Kind.Camera, Kind.InputEvent }; 
            }
            private void OnLoad(object sender, EventArgs e)
            {
            	itemPickerUserControl.Init();
            	Configuration.Instance.GetItemsAsync(AsyncItemsHandler, this, null);			
            }
            private void AsyncItemsHandler(List<Item> list, object callerref)
            {
            	itemPickerUserControl.ItemsToSelectFrom = list;
            }
            ]]>
            </code>
            Note that the Form OnLoad method is used for the initialization of the ItemPickerUserControl, 
            as this sample is using the window handle in the asynchronous calls for BeginInvoke.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.UI.ItemPickerUserControl.CloseDialog">
            <summary>
            Event is fired when the dialog is closing as a result of a single select
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.ItemPickerUserControl.#ctor">
            <summary>
            Basic construction of the UserControl.<br/>
            Later, calls to Init(), and setting ItemsToSelectFrom = items; must be set.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.ItemPickerUserControl.Init">
            <summary>
            Initialize static fields, including icons, dropdowns and name of kinds.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.UI.ItemPickerUserControl.ValidateSelectionEvent">
            <summary>
            Use for custom control of what Items are valid selection.
            This event will be called for every click the user makes on an Item
            for the client program to validate if the selections is a valid selection.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.UI.ItemPickerUserControl.IsItemVisibleEvent">
            <summary>
            This event is called when the TreeView TreeNode is about to be displayed.<br/>
            The controlling plug-in can evaluate if a given Item should be available in the TreeView
            </summary>
        </member>
        <member name="E:VideoOS.Platform.UI.ItemPickerUserControl.ItemsSelectedChangedEvent">
            <summary>
            This event is called whenever the selected items collection is changed, e.g. added or removed items.
            </summary>
            Use the ItemsSelected property to get hold of the currently selected items.
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerUserControl.ItemsToSelectFrom">
            <summary>
            There are 3 ItemsToSelectFrom methods:<br/>
             - ItemsToSelectFrom will fill both Server and Group tab the best way possible it can select.<br/>
             - ItemsToSelectFromServer - will just fill the Server tab<br/>
             - ItemsToSelectFromGroup  - will just fill the Group tab<br/>
            At least one of the 3 properties need to be set.<br/>
            If all items type are valid, can be initialized from the Configuration class:<br/>
            <code>
            itemPickerUserControl.ItemsToSelectFrom = Configuration.Instance.GetItems();
            </code>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerUserControl.ItemsToSelectFromGroup">
            <summary>
            Will fill the Group tab, usually this should be filled with items from the UserDefined hierarchy.<br/>
            If all items type are valid, can be initialized from the Configuration class:<br/>
            <code>
            itemPickerUserControl.ItemsToSelectFromGroup = Configuration.Instance.GetItems(ItemHierarchy.UserDefined);
            </code>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerUserControl.ItemsToSelectFromServer">
            <summary>
            Will fill the Server tab, usually this should be filled with items from the SystemDefined hierarchy.<br/>
            If all items type are valid, can be initialized from the Configuration class:<br/>
            <code>
            itemPickerUserControl.ItemsToSelectFromServer = Configuration.Instance.GetItems(ItemHierarchy.SystemDefined);
            </code>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerUserControl.ItemsSelected">
            <summary>
            Property to be set upon start to show the already selected items.<br/>
            When complete, is used for retrieving the selected items.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerUserControl.CategoryFilter">
            <summary>
            Property to set what Categories the user can choose from.
            If not initialized, all categories are allowed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerUserControl.CategoryUserSelectable">
            <summary>
            Tells if the Category dropdown should be visible.
            If set to false - the CategoryFilter need to set.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerUserControl.KindFilter">
            <summary>
            Property to set what Kind of Items is available for selection.
            If not set, all Item Kinds are allowed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerUserControl.KindUserSelectable">
            <summary>
            Tells if the Kind dropdown should be visible.
            If set to false - the KindFilter need to be set.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerUserControl.KindSelected">
            <summary>
            Gets or sets selected kind in the kind dropdown.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerUserControl.GroupTabVisible">
            <summary>
            Used to show or hide the Group tab.  Tab is always hidden for XProtect Enterprise.
            Default is to show the group tab.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerUserControl.ServerTabVisible">
            <summary>
            Used to show or hide the Server tab.  Hide is not an option in XProtect Enterprise.
            Default is to show the Server tab.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerUserControl.ShowDisabledItems">
            <summary>
            Used to filter on or off the devices that may be disabled.
            Default is to hide disabled items.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.ItemPickerUserControl.SingleSelect">
            <summary>
            Determine if only one item can be selected.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.ItemPickerUserControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.ItemPickerUserControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VideoOS.Platform.UI.ItemPickerUserControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.UI.TaggedItem">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:VideoOS.Platform.UI.HelpUserControl">
            <summary>
            This class can be used to display the general help or information page when the administrator selects the plug-in node.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.HelpUserControl.#ctor">
            <summary>
            Construct an empty help page.  Consider to use one of the other constructors to show relevant help information.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.HelpUserControl.#ctor(System.Drawing.Image,System.String,System.String)">
            <summary>
            Create help page with an Image, a header text and a description.
            </summary>
            <param name="image">Should be a image of size 32x32 pixels.  If it this size, it will be scaled to 32x32.</param>
            <param name="header">Single line with the name</param>
            <param name="description">A text string to be inserted into a RichTextBox</param>
        </member>
        <member name="M:VideoOS.Platform.UI.HelpUserControl.#ctor(System.Drawing.Image,System.String,System.Windows.Forms.UserControl)">
            <summary>
            Create help page with an Image, a header text and a description.
            </summary>
            <param name="image">Should be a image of size 32x32 pixels.  If it this size, it will be scaled to 32x32.</param>
            <param name="header">Single line with the name</param>
            <param name="userControl">The UserControl to be displayed just below the header image and header text.</param>
        </member>
        <member name="P:VideoOS.Platform.UI.HelpUserControl.Image">
            <summary>
            Provide the image /icon to show beside the header line.<br/>
            The ideal image is a 32x32 pixel icon or bitmap.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.HelpUserControl.HelpName">
            <summary>
            The name of the ItemNode.  This will normally be the name on the ItemNode, but can be expanded for clarity.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.HelpUserControl.UserControl">
            <summary>
            When more then just a text is required for explanation, a UserControl can be provided with any content.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.HelpUserControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.HelpUserControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VideoOS.Platform.UI.HelpUserControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.UI.Util">
            <summary>
            A utility class to collect all Icons used in the system for both plug-ins and for the Environment.<br/>
            Lookup to an Icon is done via KindToImageIndex, and KindToCategory can be used for the default Category if an Kind.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.DisabledOverlay">
            <summary>
            The little red cross to place on top of other icons
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.ActiveOverlay">
            <summary>
            The little green arrow to place on top of other icons
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.AttentionOverlay">
            <summary>
            The little exclamation point to place on top of other icons
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.ServerIconIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.FolderIconIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.AlertIconIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.InputIconIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.OutputIconIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.MatrixIconIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.TransactIconIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.PresetIconIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.CameraIconIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.CustomEventIconIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.SpeakerIconIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.MicrophoneIconIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.RecorderIconIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.ViewGroupIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.GroupIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.VideoWallGroupIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.VideoWallIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.ViewIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.ViewItemIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.PluginIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.SDK_VSIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.SDK_GeneralIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.SDK_ToolIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.WindowIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.RoleIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.UserIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.WorkSpaceIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.TimeProfileIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.HardwareIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.InterConnectedIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.CameraPtzIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.MetadataIx">
            <summary>
            Index into ImageList property.  (Consider to use method: BuiltInItemToImageIndex(Item) to get an Icon)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.VideoWallPreset">
            <summary>
            Index to Video Wall Preset
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.GisMapLocationIx">
            <summary>
            Index of the GisMapLocation icon
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UI.Util.FirstFreeIx">
            <summary>
            Index into ImageList property. Identify size of ImageList.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.Util.Init">
            <summary>
            Initialize static fields, including icons, dropdowns and name of kinds.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.Util.IsBuiltInKind(System.Guid)">
            <summary>
            Validates if a specific kind is a built-in kind or from a plug-in.<br/>
            </summary>
            <param name="kind">The Kind to check</param>
            <returns>True if the Kind is a built-in Kind</returns>
        </member>
        <member name="M:VideoOS.Platform.UI.Util.FindItemNodes">
            <summary>
            Build and return a complete list of all ItemNodes provided by all plug-ins.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.UI.Util.ImageList">
            <summary>
            Returns a complete list of all Images for all Kinds
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.Util.ImageList32">
            <summary>
            Returns a complete list of all Images for all Kinds - in size 32, if available from plugin
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.Util.BuiltInItemToImage(VideoOS.Platform.Item)">
            <summary>
            Finetune a few of the Icons used for built-in items, e.g. camera PTZ icon instead of just a camera icon.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.UI.Util.BuiltInItemToImageIndex(VideoOS.Platform.Item)">
            <summary>
            Finetune a few of the Icons used for built-in items, e.g. camera PTZ icon instead of just a camera icon.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.UI.Util.ImageListClone">
            <summary>
            Returns a complete list of all Images for all Kinds
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.Util.KindToImageIndex">
            <summary>
            Returns a dictionary where the index of the ImageList is index by kind
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UI.Util.KindToCategory">
            <summary>
            Returns a dictionary where the Category of all Kinds can be found
            </summary>
        </member>
        <member name="T:VideoOS.Platform.UI.WaitCursor">
            <summary>
            A simple class to be used around code taking a bit of time to execute.
            
            using (new WaitCursor())
            {
            	// Do something 
            }
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.WaitCursor.#ctor">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.UI.WaitCursor.#ctor(System.Windows.Forms.Cursor)">
            <summary>
            Save current cursor and show waitcursor.
            </summary>
            <param name="newCursor"></param>
        </member>
        <member name="M:VideoOS.Platform.UI.WaitCursor.Dispose">
            <summary>
            Cleanup up resources, and return to default cursor.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UI.WaitCursor.Dispose(System.Boolean)">
            <summary>
            Cleanup up resources, and return to default cursor.
            </summary>
            <param name="all"></param>
        </member>
        <member name="T:VideoOS.Platform.Util.AdaptiveStreaming.StreamSelectionType">
            <summary>
            Enumeration defining stream selection types
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.AdaptiveStreaming.StreamSelectionType.DefaultStream">
            <summary>
            Choosing default video stream
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.AdaptiveStreaming.StreamSelectionType.MaximalResolution">
            <summary>
            Choosing camera stream with maximal resolution
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.AdaptiveStreaming.StreamSelectionType.AdaptiveToResolution">
            <summary>
            Dynamic change of video stream based on target display resolution
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.AdaptiveStreaming.IStreamSelectionParams">
            <summary>
            Interface fro setting stream selection parameters
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.AdaptiveStreaming.IStreamSelectionParams.StreamSelectionType">
            <summary>
            Selection of stream type (default, maximal resolution or adaptive)
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.AdaptiveStreaming.IStreamSelectionParams.SetStreamAdaptiveResolution(System.Int32,System.Int32)">
            <summary>
            Setting target display resolution that would be used by adaptive streaming
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.AdaptiveStreaming.IStreamSelectionParams.GetStreamAdaptiveResolution(System.Int32@,System.Int32@)">
            <summary>
            Getting target display resolution, that was previously set
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="T:VideoOS.Platform.Util.AnalyticsOverlayBuilder">
            <summary>
            A utility class to construct a bitmap that can be used as an overlay on top of video.
            </summary>
            The following type of classes can be used as parameters:<br/>
            - BaseEvent<br/>
            - AnalyticsEvent<br/>
            - Alarm<br/>
            - Simple text strings<br/>
            <br/>
            For AnalyticsEvents and Alarms that contain an ObjectList or RuleList, a graphical representation is constructed with bounding boxes and/or polygons.
            When these are not available a simple 2 line text is constructed from the source name and the message.
        </member>
        <member name="M:VideoOS.Platform.Util.AnalyticsOverlayBuilder.BuildOverlay(System.Int32,System.Int32,VideoOS.Platform.Data.BaseEvent)">
            <summary>
            Build overlay based on a BaseEvent. The ObjectList and Rule list is used when available, otherwise the 
            text Message is used.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="baseEvent"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.AnalyticsOverlayBuilder.BuildShapeOverlay(System.Int32,System.Int32,VideoOS.Platform.Data.BaseEvent)">
            <summary>
            Build overlay based on a BaseEvent. The ObjectList and Rule list is used when available, otherwise the 
            text Message is used.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="baseEvent"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.AnalyticsOverlayBuilder.BuildOverlay(System.Int32,System.Int32,VideoOS.Platform.Data.Alarm)">
            <summary>
            Build overlay based on an Alarm. The ObjectList and Rule list is used when available, otherwise the 
            text Message is used.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="alarm"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.AnalyticsOverlayBuilder.BuildShapeOverlay(System.Int32,System.Int32,VideoOS.Platform.Data.Alarm)">
            <summary>
            Build overlay based on an Alarm. The ObjectList and Rule list is used when available, otherwise the 
            text Message is used.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="alarm"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.AnalyticsOverlayBuilder.BuildOverlayFromText(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Build overlay based on the text Message
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="source"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.AnalyticsOverlayBuilder.BuildShapeOverlayFromText(System.String,System.String)">
            <summary>
            Build overlay based on the text Message
            </summary>
            <param name="source"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.AnalyticsOverlayBuilder.BuildOverlay(System.Int32,System.Int32,VideoOS.Platform.Data.AnalyticsObjectList,VideoOS.Platform.Data.RuleList)">
            <summary>
            Build overlay based on AnalyticsObjectList and/or RuleList.  
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="analyticsObjectList">Ignored when null</param>
            <param name="ruleList">Ignored when null</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.AnalyticsOverlayBuilder.BuildShapeOverlay(System.Int32,System.Int32,VideoOS.Platform.Data.AnalyticsObjectList,VideoOS.Platform.Data.RuleList)">
            <summary>
            Build overlay based on AnalyticsObjectList and/or RuleList.  
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="analyticsObjectList"></param>
            <param name="ruleList"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Util.ByteArrayHelper">
            <summary>
            Helper class for work with byte arrays
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ByteArrayHelper.Combine(System.Byte[][])">
            <summary>
            Combine few byte arrays in optimal way
            </summary>
            <param name="arrays"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.ByteArrayHelper.ByteArrayToIntArray(System.Byte[],System.Int32,System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="byteArray"></param>
            <param name="startIndexByteArray"></param>
            <param name="intArray"></param>
            <param name="startIndexIntArray"></param>
            <param name="intCounts"></param>
            <param name="bytesPerInt"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.ByteArrayHelper.ByteArrayToIntArray(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="byteArray"></param>
            <param name="startIndex"></param>
            <param name="intCounts"></param>
            <param name="bytesPerInt"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.ByteArrayHelper.IntArrayToByteArray(System.Int32[],System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="intArray"></param>
            <param name="startIndexIntArray"></param>
            <param name="byteArray"></param>
            <param name="startIndexByteArray"></param>
            <param name="intCounts"></param>
            <param name="bytesPerInt"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.ByteArrayHelper.IntArrayToByteArray(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="intArray"></param>
            <param name="startIndexIntArray"></param>
            <param name="intCounts"></param>
            <param name="bytesPerInt"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Util.Error.IErrorHandler`1">
            <summary>
            Interface for subscribing to generic error (of type exception)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:VideoOS.Platform.Util.Error.IErrorHandler`1.LastError">
            <summary>
             Last error (exception) occured in the component
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Util.Error.IErrorHandler`1.OnError">
            <summary>
            Callback for notification when error (exception) occur
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.EventServerDummyBackgroundPlugin">
            <summary>
            Helper class to be used by build-in plugin definitions that do not have a background plugin themselves, but want to ensure they are loaded in Event Server
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.ConfigurationCache">
            <summary>
            Cache for MIP Item configurations from one VMS server (site)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ConfigurationCache.ServerId">
            <summary>
            Identify the Server this cache holds ItemConfiguration for
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ConfigurationCache.FlushCheckInterval">
            <summary>
            The interval the cache is checked for old items to flush.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ConfigurationCache.CacheLifeTime">
            <summary>
            The max time items will stay in cache, when no access has been done for a given kind.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ConfigurationCache.GetItem(System.Guid,System.Guid)">
            <summary>
            Lookup one Item
            </summary>
            <param name="kind"></param>
            <param name="objectId"></param>
            <returns>Item or null</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.ConfigurationCache.GetItems(System.Guid)">
            <summary>
            Lookup all items for one kind.
            </summary>
            <param name="kind"></param>
            <returns>List of Items or null if not all are available</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.ConfigurationCache.GetChildItems(System.Guid,System.Guid)">
            <summary>
            Get all child items for one parent.
            </summary>
            <param name="kind"></param>
            <param name="parentId"></param>
            <returns>List of Items or null if not all are available</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.ConfigurationCache.Store(VideoOS.Platform.Item)">
            <summary>
            Store one item in the cache
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.ConfigurationCache.StoreList(System.Guid,System.Collections.Generic.List{VideoOS.Platform.Item},System.Guid,System.Boolean)">
            <summary>
            Store a list of items in cache.  Can be a list of children to one
            parent, or a list of all items for a kind.
            </summary>
            <param name="kind"></param>
            <param name="items"></param>
            <param name="parentId"></param>
            <param name="allItems"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.ConfigurationCache.Flush(System.Guid)">
            <summary>
            Remove cache items of one kind
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.ConfigurationCache.FlushAll">
            <summary>
            Flush entire cache
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ConfigurationCache.GetLastModified(System.Guid)">
            <summary>
            Return the LastModified datetime with the latest value across all cached Items.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.ConfigurationCache.CheckToFlushCacheElements">
            <summary>
            Will once in while check for flushing of unused Items
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.KindConfiguration">
            <summary>
            Holds a cache for items of one kind
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.KindConfiguration.GetItems">
            <summary>
            Returns all items, if available. If only some are available null is returned.
            </summary>
            <returns>List of items, or null</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.KindConfiguration.GetItem(System.Guid)">
            <summary>
            Get one item
            </summary>
            <param name="objectId"></param>
            <returns>Item or null if not found</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.KindConfiguration.StoreItem(VideoOS.Platform.Item)">
            <summary>
            Store one item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.KindConfiguration.CloneItem(VideoOS.Platform.Item)">
            <summary>
            Creates a clone of the provided Item
            </summary>
            <param name="item">Item to clone</param>
            <returns>The new clone</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.KindConfiguration.StoreItems(System.Guid,System.Collections.Generic.List{VideoOS.Platform.Item},System.Boolean)">
            <summary>
            Store a list of items, received from the server.  
            The list is either children for one parent, or all items of this kind.
            </summary>
            <param name="parentId"></param>
            <param name="items"></param>
            <param name="containsAllObjects"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.KindConfiguration.GetItems(System.Guid)">
            <summary>
            Get all children to a parent.
            
            Result of null indicates that cache does not have a complete list
            </summary>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.KindConfiguration.UpdateLastModified(VideoOS.Platform.Item)">
            <summary>
            Update this class's 'LastModified' if the current item has a later 'LastModified'
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:VideoOS.Platform.Util.Images.CropDefaultValues">
            <summary>
            Static class representing cropping rectangle default values (eg. no cropping)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.Images.CropDefaultValues.X">
            <summary>
            Default cropping starting point X (horizontal axis of top-left starting point)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.Images.CropDefaultValues.Y">
            <summary>
            Default cropping starting point Y (vertical axis of top-left starting point)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.Images.CropDefaultValues.Width">
            <summary>
            Default cropping rectangle width
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.Images.CropDefaultValues.Height">
            <summary>
            Default cropping rectangle height
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.Images.DecoderDefaultValues">
            <summary>
            Static class representing decoder default values
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.Images.DecoderDefaultValues.DoNotRescale">
            <summary>
            Value instructing the decoder to not make any resize of the original picture
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.IStringSplitter">
            <summary>
            Splits the strings using a custom array of separators. The result is the array of any level of nesting, according to number of separators you pass.
            Joins the arrays to the strings the same way.
            See the methods' documentation for more details.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.IStringSplitter.JoinString(System.Collections.IEnumerable,System.Char[])">
            <summary>
            <see cref="T:VideoOS.Platform.Util.StringSplitter"/>
            </summary>
            <param name="enumerable"></param>
            <param name="separators"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.IStringSplitter.SplitString(System.String,System.Char[])">
            <summary>
            <see cref="T:VideoOS.Platform.Util.StringSplitter"/>
            </summary>
            <param name="input"></param>
            <param name="separators"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.IStringSplitter.Escape(System.String,System.Char[])">
            <summary>
            <see cref="T:VideoOS.Platform.Util.StringSplitter"/>
            </summary>
            <param name="input"></param>
            <param name="separators"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.IStringSplitter.Unescape(System.String,System.Char[])">
            <summary>
            <see cref="T:VideoOS.Platform.Util.StringSplitter"/>
            </summary>
            <param name="input"></param>
            <param name="separators"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Util.IPcmSourceSettings">
            <summary>
            Interface for gegging audio parameters
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.IPcmSourceSettings.Channels">
            <summary>
            Gets number of chnanles. Mono or Stereo are only supported.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.IPcmSourceSettings.BitsPerSample">
            <summary>
            Gets number of bits per sample. 8 and 16 only supported
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.IPcmSourceSettings.SamplingRate">
            <summary>
            Gets sampling rate.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.PcmSourceSettings">
            <summary>
            Class that encapsulates PCM source settings
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.PcmSourceSettings.#ctor(System.Action{VideoOS.Platform.Util.PcmSourceSettings})">
            <summary>
            Constructor
            </summary>
            <param name="onChange">Callback on change</param>
        </member>
        <member name="T:VideoOS.Platform.Util.PcmSourceSettings.ChannelsType">
            <summary>
            Defines number of channels in the output audio
            Possible values:
            1 for Mono
            2 for Stereo
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.PcmSourceSettings.ChannelsType.Mono">
            <summary>
            Single channel output (Mono)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.PcmSourceSettings.ChannelsType.Stereo">
            <summary>
            Dual (two) channels output (Stereo)
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.PcmSourceSettings.BitsPerSampleType">
            <summary>
            Difenes number of bits per single sample
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.PcmSourceSettings.BitsPerSampleType.OneByteInt">
            <summary>
            8 bits per sample
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.PcmSourceSettings.BitsPerSampleType.TwoBytesInt">
            <summary>
            16 bits per sample
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.PcmSourceSettings.Channels">
            <summary>
            Settings for number of chnanles. Mono or Stereo are only supported.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.PcmSourceSettings.BitsPerSample">
            <summary>
            Setting for number of bits per sample. 8 and 16 only supported
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.PcmSourceSettings.SamplingRate">
            <summary>
            Setting for sampling rate.
            In general should work with any positive integer.
            Confirmed and regulary tested (unit and automation testing) with following set of values
            8 kHz, 12 kHz, 16 kHz, 22050 Hz, 24 kHz, 32 kHz and 44100 Hz
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.PcmSourceSettings.InitFromAnother(VideoOS.Platform.Util.PcmSourceSettings)">
            <summary>
            Initialization from other settings
            </summary>
            <param name="other"></param>
        </member>
        <member name="T:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrector">
            <summary>
            Helper class dealing with discontinuity of the Pcm audio stream.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrector.#ctor(VideoOS.Platform.Util.PcmSourceSettings,System.Action{VideoOS.Platform.Live.LiveSourcePcmContent,VideoOS.Platform.Live.LiveSourcePcmContent,System.Int32,VideoOS.Platform.Util.IPcmSourceSettings})">
            <summary>
            Constructor
            </summary>
            <param name="pcmSourceSettings"></param>
            <param name="actualCorrector"></param>
        </member>
        <member name="P:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrector.PcmSourceSettings">
            <summary>
            PCM source setting of the corrector
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrector.OnPcmContent(VideoOS.Platform.Live.LiveSourcePcmContent)">
            <summary>
            Method called on valid Pcm data.
            </summary>
            <param name="pcmContent"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrector.AdjustNextSampleTime(VideoOS.Platform.Live.LiveSourcePcmContent,VideoOS.Platform.Live.LiveSourcePcmContent)">
            <summary>
            Shifting time of next sample right after time of previous one
            </summary>
            <param name="previous"></param>
            <param name="next"></param>
        </member>
        <member name="F:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrector.OnCorrectedPcmContent">
            <summary>
            Callback called on successfull data correction
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrector.PopLast">
            <summary>
            Method for poping last packet.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrectorPrevious">
            <summary>
            Helper class dealing with discontinuity of the Pcm audio stream.
            Corrected package is the previous one.
            </summary>
            <inheritdoc cref="T:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrector"/>
        </member>
        <member name="M:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrectorPrevious.#ctor(VideoOS.Platform.Util.PcmSourceSettings)">
            <summary>
            Constructor
            </summary>
            <param name="pcmSourceSettings"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrectorPrevious.ActualCorrector(VideoOS.Platform.Live.LiveSourcePcmContent,VideoOS.Platform.Live.LiveSourcePcmContent,System.Int32,VideoOS.Platform.Util.IPcmSourceSettings)">
            <summary>
            Actual corrector method
            </summary>
            <param name="previous"></param>
            <param name="next"></param>
            <param name="bytesToBeRemoved"></param>
            <param name="pcmSourceSettings"></param>
        </member>
        <member name="T:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrectorNext">
            <summary>
            Helper class dealing with discontinuity of the Pcm audio stream.
            Corrected package is the next one.
            </summary>
            <inheritdoc cref="T:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrector"/>
        </member>
        <member name="M:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrectorNext.#ctor(VideoOS.Platform.Util.PcmSourceSettings)">
            <summary>
            Constructor
            </summary>
            <param name="pcmSourceSettings"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrectorNext.ActualCorrector(VideoOS.Platform.Live.LiveSourcePcmContent,VideoOS.Platform.Live.LiveSourcePcmContent,System.Int32,VideoOS.Platform.Util.IPcmSourceSettings)">
            <summary>
            Actual corrector method
            </summary>
            <param name="previous"></param>
            <param name="next"></param>
            <param name="bytesToBeRemoved"></param>
            <param name="pcmSourceSettings"></param>
        </member>
        <member name="T:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrectorCrossfade">
            <summary>
            Helper class dealing with discontinuity of the Pcm audio stream.
            Corrected package is the next one.
            </summary>
            <inheritdoc cref="T:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrector"/>
        </member>
        <member name="M:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrectorCrossfade.#ctor(VideoOS.Platform.Util.PcmSourceSettings)">
            <summary>
            Constructor
            </summary>
            <param name="pcmSourceSettings"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrectorCrossfade.ActualCorrector(VideoOS.Platform.Live.LiveSourcePcmContent,VideoOS.Platform.Live.LiveSourcePcmContent,System.Int32,VideoOS.Platform.Util.IPcmSourceSettings)">
            <summary>
            Actual corrector method
            </summary>
            <param name="previous"></param>
            <param name="next"></param>
            <param name="bytesToBeRemoved"></param>
            <param name="pcmSourceSettings"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.Pcm.OverlappingPcmContentCorrectorCrossfade.Crossfade(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Performs cross fade of two int arrays.
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <param name="result"></param>
        </member>
        <member name="T:VideoOS.Platform.Util.Pcm.PcmHelper">
            <summary>
            Helper class containing different utilities 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.Pcm.PcmHelper.MillisecondsToBytesCount(System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts milliseconds to bytes count
            </summary>
            <param name="milliseconds"></param>
            <param name="sampleRate"></param>
            <param name="numberOfChannels"></param>
            <param name="bytesPerSample"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.Pcm.PcmHelper.BytesCountToMilliseconds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts number of bytes in the buffer to corresponding milliseconds
            </summary>
            <param name="bytesCount"></param>
            <param name="sampleRate"></param>
            <param name="numberOfChannels"></param>
            <param name="bytesPerSample"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.Pcm.PcmHelper.BytesCountToMilliseconds(System.Int32,VideoOS.Platform.Util.IPcmSourceSettings)">
            <summary>
            Converts number of bytes in the buffer to corresponding milliseconds
            </summary>
            <param name="bytesCount"></param>
            <param name="pcmSourceSettings"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Util.Performance.PerformanceInformation">
            <summary>
            Is used to store performance information, used by somee Environments
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.Performance.PerformanceInformation.ElapseTimeTrackers">
            <summary>
            Collection of any elepse time measurements done in the system
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.Performance.ElapseTimeTracker.ToStringBuilder(System.Text.StringBuilder)">
            <summary>
            Dump the current information into the string builder in a human readable format.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="T:VideoOS.Platform.Util.Queue.ConcurrentQueueSlim`1">
            <summary>
            Simplistic implementation of a thread safe FIFO queue.
            </summary>
            <typeparam name="TQueueItem">The type of items the queue contains.</typeparam>
        </member>
        <member name="P:VideoOS.Platform.Util.Queue.ConcurrentQueueSlim`1.IsStopped">
            <summary>
            Yields whether the queue is stopped (i.e. <see cref="M:VideoOS.Platform.Util.Queue.ConcurrentQueueSlim`1.Stop"/> has been called and the queue has been emptied).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.Queue.ConcurrentQueueSlim`1.IsStopping">
            <summary>
            Yields whether the queue is stopping (i.e. <see cref="M:VideoOS.Platform.Util.Queue.ConcurrentQueueSlim`1.Stop"/> has been called).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.Queue.ConcurrentQueueSlim`1.Count">
            <summary>
            Gets the number of items currently in the queue.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.Queue.ConcurrentQueueSlim`1.Enqueue(`0)">
            <summary>
            Adds the provided item to the queue.
            </summary>
            <param name="item">Item to queue</param>
            <returns>True if the item was added to the queue, false otherwise.</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.Queue.ConcurrentQueueSlim`1.Remove(`0)">
            <summary>
            Removes the provided item from the queue.
            </summary>
            <param name="item">Item to remove from queue</param>
        </member>
        <member name="M:VideoOS.Platform.Util.Queue.ConcurrentQueueSlim`1.Dequeue(System.Int32)">
            <summary>
            Dequeues an item from the queue.
            </summary>
            <param name="timeout">Maximum time to wait for an item to be added to the queue if the queue is empty when called.</param>
            <returns>The dequeued item or null if the operation timed out or the queue was stopped.</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.Queue.ConcurrentQueueSlim`1.Peek(System.Int32)">
            <summary>
            Peeks at the next item in the queue.
            </summary>
            <param name="timeout">Maximum time to wait for an item to be added to the queue if the queue is empty when called.</param>
            <returns>The next item in the queue or null if the operation timed out or the queue was stopped.</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.Queue.ConcurrentQueueSlim`1.Stop">
            <summary>
            Stops the queue.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.Queue.ConcurrentQueueSlim`1.Clear">
            <summary>
            Clears the contents of the queue
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.Queue.ICancelable">
            <summary>
            Defines a cancelable queue request.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.Queue.ICancelable.Canceled">
            <summary>
            Gets or sets whether or not the request is canceled.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.Queue.MultiLevelResourceQueue`1.Diagnostics">
            <summary>
            Provides a snapshot view of the current state of the queue. Note that values may vary slightly from the
            actual values as they are continuously updated.
            Invoking this causes some locks to be taken, and thus will have affect the performance of the queue if called too often.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.StringSplitter">
            <summary>
            String splitter for the lists of any levels using custome separators.
            Supports escaping.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.StringSplitter.Escaper">
            <summary>
            Escaper for your own separator characters that should not act as separators
            Also escape escaper characters with this one
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.StringSplitter.Escape(System.String,System.Char[])">
            <summary>
            Escapes the string.
            Example: Escape(@"my;string,tag\", new[] {';', ','}) will result in: @"my\;string\,tag\\"
            </summary>
            <param name="input"></param>
            <param name="separators"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.StringSplitter.Unescape(System.String,System.Char[])">
            <summary>
            Unescapes the string.
            Example: Escape(@"my\;string\,tag\\", new[] {';', ','}) will result in: @"my;string,tag\"
            </summary>
            <param name="input"></param>
            <param name="separators"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.StringSplitter.JoinString(System.Collections.IEnumerable,System.Char[])">
            <summary>
            Joins the collection of any level of scoping to string using separators in the order of precedence.
            The strings in the collection should be escaped for separators characters if any by using Escaper in front. Escaper itself should also be escaped
            Example: JoinString(new[] {new[] {"a", "b"}, new[] {"c", "d"}}, new[] {';', ','}) will result in the following string: "a,b;c,d"
            </summary>
            <param name="enumerable"></param>
            <param name="separators"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.StringSplitter.SplitString(System.String,System.Char[])">
            <summary>
            Splits string into a collection of separators.Length level of scoping, using separators in the order of precedence
            The string should be escaped for separators characters if any are part of user input, by using Escaper in front. 
            Escaper itself should also be escaped if it should appear as part of the text. All non-escaped separator characters will be used to split.
            Example: SplitString("a,b;c,d", new[] {';', ','}) will result in the following 2 dimensional array: new[] {new[] {"a", "b"}, new[] {"c", "d"}}
            </summary>
            <param name="input"></param>
            <param name="separators"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Util.ToolkitXmlProviders.AudioDecoderXmlProvider">
            <summary>
            Class representing audio decoder toolkit with it's parameters
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.AudioDecoderXmlProvider.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.AudioDecoderXmlProvider.#ctor(VideoOS.Platform.Util.InternalMediaService.PcmAudioConnectParams)">
            <summary>
            ctor
            </summary>
            <param name="connectParams"></param>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.AudioDecoderXmlProvider.Channels">
            <summary>
            Number of audio channels to be delivered in the output
            Currently 1 and 2 are supported values
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.AudioDecoderXmlProvider.SamplingRate">
            <summary>
            Sampling rate of the audio.
            Any valid integer > 0 should be supported
            Tested however with limitted range of values: 8 kHz, 12 kHz, 16 kHz, 22050 Hz, 24 kHz, 32 kHz and 44100 Hz
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.AudioDecoderXmlProvider.BitsPerSample">
            <summary>
            Bits per Sample of the Audio
            Supported values 8 and 16
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.AudioDecoderXmlProvider.WriteTransformationStart(System.Xml.XmlWriter)">
            <summary>
            BaseToolkitXmlProvider method
            </summary>
            <param name="xw"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.AudioDecoderXmlProvider.WriteTransformationEnd(System.Xml.XmlWriter)">
            <summary>
            BaseToolkitXmlProvider method
            </summary>
            <param name="xw"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.AudioDecoderXmlProvider.UpdateConfiguration(System.Action{System.String,System.String})">
            <summary>
            BaseToolkitXmlProvider method
            </summary>
            <param name="configurationUpdater"></param>
        </member>
        <member name="T:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitTypes">
            <summary>
            Tookit types
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitTypes.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitTypes.Source">
            <summary>
            Source
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitTypes.Export">
            <summary>
            Export
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitTypes.Generic">
            <summary>
            Generic
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitProviders">
            <summary>
            Toolkit providers
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitProviders.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitProviders.IsSource">
            <summary>
            Image Server Source (is)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitProviders.IsSourceArcus">
            <summary>
            Image Server source for Arcus (msp)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitProviders.Fork">
            <summary>
            Forking toolkit (mfork)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitProviders.MediaProcessing">
            <summary>
            Media Processing (mmp)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitProviders.MetaData">
            <summary>
            Metadata toolkit (mtd)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitProviders.Media025">
            <summary>
            Media025 (mm025) toolkit
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitProviders.MediaServer">
            <summary>
            Media server toolkit (mpms)
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.ToolkitXmlProviders.IToolkitXmlProviderParams">
            <summary>
            base interface for toolkit provider params
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.IToolkitXmlProviderParams.ToolkitProvider">
            <summary>
            toolkit provider
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.IToolkitXmlProviderParams.ToolkitType">
            <summary>
            toolkit type
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.ToolkitXmlProviders.IToolkitXmlProvider">
            <summary>
            interface for chaining the toolkit xml providers
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.IToolkitXmlProvider.Chain(VideoOS.Platform.Util.ToolkitXmlProviders.IToolkitXmlProvider)">
            <summary>
            Chain the child providero to current or to last child in the chain
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Util.ToolkitXmlProviders.BaseToolkitXmlProvider">
            <summary>
            Base class for toolkit xml provider
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.BaseToolkitXmlProvider.ToolkitProvider">
            <summary>
            IToolkitXmlProviderParams property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.BaseToolkitXmlProvider.ToolkitType">
            <summary>
            IToolkitXmlProviderParams property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.BaseToolkitXmlProvider.ConfigurationXml">
            <summary>
            Get the configuration xml
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.BaseToolkitXmlProvider.GetConfigurationXml">
            <summary>
            get the configuration xml (method)
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.BaseToolkitXmlProvider.WriteTransformationStart(System.Xml.XmlWriter)">
            <summary>
            abstract method to be overwritten in the inheritors
            </summary>
            <param name="xw"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.BaseToolkitXmlProvider.WriteTransformationEnd(System.Xml.XmlWriter)">
            <summary>
            abstract method to be overwritten in the inheritors
            </summary>
            <param name="xw"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.BaseToolkitXmlProvider.Chain(VideoOS.Platform.Util.ToolkitXmlProviders.IToolkitXmlProvider)">
            <summary>
            IToolkitXmlProvider method
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.BaseToolkitXmlProvider.UpdateConfiguration(System.Action{System.String,System.String})">
            <summary>
            abstract method to be overwritten in the inheritors
            </summary>
            <param name="configurationUpdater"></param>
        </member>
        <member name="T:VideoOS.Platform.Util.ToolkitXmlProviders.IsSourceXmlProvider">
            <summary>
            Class wrapping the IS (Image server) source
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.IsSourceXmlProvider.Fqid">
            <summary>
            FQID of the item' data that will be used
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.IsSourceXmlProvider.StreamId">
            <summary>
            ID of the stream
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.IsSourceXmlProvider.ToolkitProvider">
            <summary>
            IToolkitXmlProvider property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.IsSourceXmlProvider.ToolkitType">
            <summary>
            IToolkitXmlProvider property
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.IsSourceXmlProvider.WriteTransformationStart(System.Xml.XmlWriter)">
            <summary>
            BaseToolkitXmlProvider method
            </summary>
            <param name="xw"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.IsSourceXmlProvider.WriteTransformationEnd(System.Xml.XmlWriter)">
            <summary>
            BaseToolkitXmlProvider method
            </summary>
            <param name="xw"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.IsSourceXmlProvider.UpdateConfiguration(System.Action{System.String,System.String})">
            <summary>
            BaseToolkitXmlProvider method - should never been called !
            </summary>
            <param name="configurationUpdater"></param>
        </member>
        <member name="T:VideoOS.Platform.Util.ToolkitXmlProviders.MediaProcessingToolkitXmlProvider">
            <summary>
            Base class for media processing toolkits
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.MediaProcessingToolkitXmlProvider.ToolkitProvider">
            <summary>
            BaseToolkitXmlProvider (iToolkitXmlProvider) property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.MediaProcessingToolkitXmlProvider.ToolkitType">
            <summary>
            BaseToolkitXmlProvider (iToolkitXmlProvider) property
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.ToolkitXmlProviders.ProxyXmlProvider">
            <summary>
            Class wrapping the common source depending the FQID
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.ProxyXmlProvider.#ctor(VideoOS.Platform.Util.ToolkitXmlProviders.BaseToolkitXmlProvider)">
            <summary>
            Constructor
            </summary>
            <param name="inner">Object to be proxied</param>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.ProxyXmlProvider.ToolkitProvider">
            <summary>
            IToolkitXmlProvider property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.ProxyXmlProvider.ToolkitType">
            <summary>
            IToolkitXmlProvider property
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.ProxyXmlProvider.WriteTransformationStart(System.Xml.XmlWriter)">
            <summary>
            BaseToolkitXmlProvider method
            </summary>
            <param name="xw"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.ProxyXmlProvider.WriteTransformationEnd(System.Xml.XmlWriter)">
            <summary>
            BaseToolkitXmlProvider method
            </summary>
            <param name="xw"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.ProxyXmlProvider.UpdateConfiguration(System.Action{System.String,System.String})">
            <summary>
            BaseToolkitXmlProvider method - should never been called !
            </summary>
            <param name="configurationUpdater"></param>
        </member>
        <member name="T:VideoOS.Platform.Util.ToolkitXmlProviders.ToMediaConverter">
            <summary>
            Class providing convertions form item, fquid and kind to media string
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.ToMediaConverter.ToMedia(VideoOS.Platform.Item)">
            <summary>
            Converts Item to media string
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.ToMediaConverter.ToMedia(VideoOS.Platform.FQID)">
            <summary>
            Converts FQUID type to media string
            </summary>
            <param name="fqid"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.ToMediaConverter.ToMedia(System.Guid)">
            <summary>
            Converts Kind Guid to media string
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitParams">
            <summary>
            Class wrapping toolkit type and provider to string conversion
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitParams.Unknown">
            <summary>
            Unknown constant
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitParams.ToolkitTypesNames">
            <summary>
            Dictionary for ToolkitTypes to Names
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitParams.ToolkitProvidersNames">
            <summary>
            Dictionary for Toolkit providers to Names
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitParams.NameFromTypes(VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitTypes)">
            <summary>
            Comfort method for getting name from toolkit type
            </summary>
            <param name="toolkitTypes"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitParams.NameFromProviders(VideoOS.Platform.Util.ToolkitXmlProviders.ToolkitProviders)">
            <summary>
            Comfort method for getting name from toolkit provider
            </summary>
            <param name="toolkitProviders"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Util.ToolkitXmlProviders.XpcoDbSourceXmlProvider">
            <summary>
            Class wrapping the XPCO DB source (BLK files)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.XpcoDbSourceXmlProvider.Fqid">
            <summary>
            FQID of the item' data that will be used
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.XpcoDbSourceXmlProvider.ToolkitProvider">
            <summary>
            IToolkitXmlProvider property
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ToolkitXmlProviders.XpcoDbSourceXmlProvider.ToolkitType">
            <summary>
            IToolkitXmlProvider property
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.XpcoDbSourceXmlProvider.WriteTransformationStart(System.Xml.XmlWriter)">
            <summary>
            BaseToolkitXmlProvider method
            </summary>
            <param name="xw"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.XpcoDbSourceXmlProvider.WriteTransformationEnd(System.Xml.XmlWriter)">
            <summary>
            BaseToolkitXmlProvider method
            </summary>
            <param name="xw"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.ToolkitXmlProviders.XpcoDbSourceXmlProvider.UpdateConfiguration(System.Action{System.String,System.String})">
            <summary>
            BaseToolkitXmlProvider method - should never been called !
            </summary>
            <param name="configurationUpdater"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.VideoWall.VideoWallMessageHandler.VideoWallShowTextHandler(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            Can set a text into a given position on a Monitor.
            
            If the LayoutFQID is != null, the layout is changed to the defined layout
            </summary>
            <param name="message"></param>
            <param name="dest"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Util.ServiceUtilCache">
            <summary>
            Used by ServiceUtil - cache service list for 10 minutes
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.SpnFactory">
            <summary>
            The SpnFactory is a helper class to get the right SPN for a connection
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.SpnFactory.GetSpn(System.Uri)">
            <summary>
            GetSpn returns the right SPN for a connection on the specified URI
            </summary>
            <param name="serverUri">The URI of the service to be connected</param>
            <returns>A valid SPN for the service</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.AlarmBuilder.CreateAlarmFromEvent(VideoOS.Platform.Data.BaseEvent)">
            <summary>
            Create alarm based on event data
            </summary>
            <param name="baseEvent">Event data</param>
            <returns>Alarm</returns>
        </member>
        <member name="T:VideoOS.Platform.Util.ConfigurationChangedService">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ConfigurationChangedService.Init">
            <summary>
            This method will create a thread to check for any changes.<br/>
            It is called internally by the MessageManager when a plug-in registers for the ConfigurationChanged message.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ConfigurationChangedService.Close">
            <summary>
            Called by the MessageManager when closing down.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ConfigurationChangedService.CheckInterval">
            <summary>
            Set the interval for checking for new configuration to a specific number of seconds.
            Values less than 4 are ignored.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.ConfigurationUtil">
            <summary>
            This class is for internal use, and should not be called from any plugins.
            This code is used by each of the Implementation Enviroments for common
            methods.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ConfigurationUtil.SaveItemConfiguration(System.Xml.XmlNode,System.Xml.XmlNode,VideoOS.Platform.Item)">
            <summary>
            Reserved for internal use
            </summary>
            <param name="topNode"></param>
            <param name="currentItemNode"></param>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.ConfigurationUtil.GetItemsForItemKind(System.Xml.XmlNode,VideoOS.Platform.Item,System.Guid)">
            <summary>
            Return a list of Items configured for this ItemNode.Id ( ItemType )
            As there is not parent, this is often a list of Servers of that type.
            </summary>
            <param name="node"></param>
            <param name="parentItem">The Parent that owns the configurations to look for</param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.ConfigurationUtil.DeserializeItem(System.Xml.XmlNode)">
            <summary>
            Deserialize the XML describing one Item
            </summary>
            <param name="xmlNode"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.ConfigurationUtil.GetParentForItemNode(System.Collections.Generic.List{VideoOS.Platform.Admin.ItemNode},System.Guid)">
            <summary>
            Look through parents of an ItemNode, until perentKind is found
            </summary>
            <returns>ItemNode or null</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.ImageServer.TokenValidationEx.DoRequest(System.String,System.Int32,System.String)">
            <summary>
            Validate the actual token string against an image server or corporate management server using http
            web request.
            OBS: Support for 5.6 style tokens not implemented.
            </summary>
            <param name="address">The address of the validation server.</param>
            <param name="port">The port number of the validation server.</param>
            <param name="tokenString">The token string to validate.</param>
            <returns>The userName of the user the token has been issued to, or null if invalid token.</returns>
        </member>
        <member name="T:VideoOS.Platform.Util.ImageServer.UserIdentification">
            <summary>
            Class handling identity of a user.
            Since the class handles users from Corporate and Enterprise, not all fields will be filled for a given user.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ImageServer.UserIdentification.Name">
            <summary>
            The windows logon name.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ImageServer.UserIdentification.Sid">
            <summary>
            The security identifier (SID) for the user.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ImageServer.UserIdentification.AllSids">
            <summary>
            Returns all available SIDs build from the user SID and all the memberof SID.
            This method will filter out any memberof guids.
            The user SID is always first in the result if available.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ImageServer.UserIdentification.Location">
            <summary>
            The IP or address of the UserID.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ImageServer.UserIdentification.Deleted">
            <summary>
            Is deleted?
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ImageServer.UserIdentification.Description">
            <summary>
            User description.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ImageServer.UserIdentification.DisplayName">
            <summary>
            Has the form 'Egon Olsen'
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ImageServer.UserIdentification.DistinguishedName">
            <summary>
            LDAP name
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ImageServer.UserIdentification.MemberOf">
            <summary>
            Group memberships.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ImageServer.UserIdentification.Members">
            <summary>
            Members of this group.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ImageServer.UserIdentification.Type">
            <summary>
            Type of User (Windows user, Basic user, Group...)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ImageServer.UserIdentification.AccountName">
            <summary>
            Account part of name.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ImageServer.UserIdentification.Domain">
            <summary>
            Domain part of name. (sometimes)
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ImageServer.UserIdentification.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ImageServer.UserIdentification.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String[],System.String[],VideoOS.Platform.Util.ImageServer.UserIdType.UserIDType)">
            <summary>
            Constructor.
            </summary>
            <param name="name">The windows logon name.</param>
            <param name="sid">The security identifier (SID) for the user.</param>
            <param name="location">The IP or address of the UserID.</param>
            <param name="deleted">Is deleted?</param>
            <param name="description">User description.</param>
            <param name="displayName">Has the form 'Egon Olsen'</param>
            <param name="distinguishedName">LDAP name</param>
            <param name="memberOf">Group memberships.</param>
            <param name="members">Members of this group.</param>
            <param name="userIdType">Type of User (Windows user, Basic user, Group...)</param>
        </member>
        <member name="M:VideoOS.Platform.Util.ImageServer.UserIdentification.GetCurrentWindowsIdentityUserID">
            <summary>
            Get the UserID object of the current windows identity.
            </summary>
            <returns>The new UserID object.</returns>
        </member>
        <member name="T:VideoOS.Platform.Util.ImageServer.UserIdType">
            <summary>
            Class containing definitions of different user types.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.ImageServer.UserIdType.UserIDType">
            <summary>
            Type of user.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ImageServer.UserIdType.UserIDType.InvalidIdentity">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Util.ImageServer.UserIdType.UserIDType.UnknownIdentityType">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Util.ImageServer.UserIdType.UserIDType.WindowsUser">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Util.ImageServer.UserIdType.UserIDType.WindowsGroup">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Util.ImageServer.UserIdType.UserIDType.Role">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Util.ImageServer.UserIdType.UserIDType.BasicUser">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Util.ImageServer.UserIdType.UserIDTypeConstants">
            <summary>
            Constant class for UserID specific information.
            E.g. Guids for UserId types.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ImageServer.UserIdType.UserIDTypeConstants.InvalidIdentityGuid">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Util.ImageServer.UserIdType.UserIDTypeConstants.UnknownIdentityGuid">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Util.ImageServer.UserIdType.UserIDTypeConstants.WindowsUserGuid">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Util.ImageServer.UserIdType.UserIDTypeConstants.WindowsGroupGuid">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Util.ImageServer.UserIdType.UserIDTypeConstants.RoleGuid">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Util.ImageServer.UserIdType.UserIDTypeConstants.BasicUserGuid">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Util.ImageServer.UserIdType.InternalSID">
            <summary>
            Handles 'fake' SID's for basic users. 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ImageServer.UserIdType.InternalSID.CreateInternalSID(System.String)">
            <summary>
            Create internal SID for the basic user with the given username.
            </summary>
            <param name="userName">User name of the basic user.</param>
            <returns>The internal SID</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.ImageServer.UserIdType.InternalSID.GetUserNameFromInternalSID(System.String)">
            <summary>
            Get the username part of an internal SID.
            </summary>
            <param name="sid"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.ImageServer.WebRequest.DoRequestDocument(System.Uri,System.String,System.Byte[])">
            <summary>
            Makes an HTTP request to specified URI with the speicfied method and content.
            Returns the response as an XML document.
            Note: This method may throw WebException on failure to contact URI,
            and XmlException in failure to parse response.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="method">The method (e.g. "GET" or "POST").</param>
            <param name="content">The content. May be null for no content.</param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Util.InternalConfigService">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalConfigService.Instance">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalConfigService.Initialized">
            <summary>
            Indicate if this class / module has been initialized.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalConfigService.GetStreamTypes(VideoOS.Platform.FQID)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalConfigService.GetMetadataTypes(VideoOS.Platform.FQID)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalConfigService.IsPrivacyMaskLiftingApproved">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.InternalMediaService">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.Instance">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.Initialized">
            <summary>
            Indicate if this class / module has been initialized.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.LiveVideoRawConnect(VideoOS.Platform.FQID,System.Guid,System.String,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.LiveVideoRawConnect(VideoOS.Platform.FQID,System.Guid,System.String,System.Boolean,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnect(VideoOS.Platform.FQID,System.Int32,System.Int32)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnect(VideoOS.Platform.FQID,System.Int32,System.Int32,VideoOS.Platform.BitmapFormat)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnect(VideoOS.Platform.FQID,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnect(VideoOS.Platform.FQID,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnect(VideoOS.Platform.FQID,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Guid)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnect(VideoOS.Platform.Util.InternalMediaService.LiveVideoConnectParams)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnect(VideoOS.Platform.FQID,System.Int32,System.Int32,System.Boolean,System.Boolean,VideoOS.Platform.BitmapFormat)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnect(VideoOS.Platform.FQID,System.Int32,System.Int32,System.Boolean,System.Boolean,VideoOS.Platform.BitmapFormat,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnect(VideoOS.Platform.FQID,System.Int32,System.Int32,System.Boolean,System.Boolean,VideoOS.Platform.BitmapFormat,System.Boolean,System.Guid)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnect(VideoOS.Platform.FQID,System.Int32,System.Int32,System.Boolean,System.Boolean,VideoOS.Platform.BitmapFormat,System.Boolean,System.Guid,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.LiveAudioConnect(VideoOS.Platform.Util.InternalMediaService.PcmAudioConnectParams)">
            <summary>
            For internal use only
            </summary>
            <param name="connectParameters"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.LiveGet(System.Object,System.TimeSpan)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.LiveGet(System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.LiveDisconnect(System.Object)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.SetLiveModeStart(System.Object,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.SetLiveModeStart(System.Object,System.Boolean,VideoOS.Platform.Util.AdaptiveStreaming.IStreamSelectionParams)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.SetNewToken(System.Object,System.String)">
            <summary>
            For internal use only
            </summary>
            <param name="sessionId"></param>
            <param name="token"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.SetRemovableMasksLifted(System.Object,System.Boolean)">
            <summary>
            For internal use only
            </summary>
            <param name="sessionId"></param>
            <param name="lifted"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.SetFps(System.Object,System.Double)">
            <summary>
            For internal use only
            </summary>
            <param name="sessionId"></param>
            <param name="fps"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.SetWidthHeight(System.Object,System.Int32,System.Int32)">
            <summary>
            For internal use only
            </summary>
            <param name="sessionId"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.SetWidthHeight(System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            For internal use only
            </summary>
            <param name="sessionId"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="allowUpscaling"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.SetCropRectangle(System.Object,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            For internal use only
            </summary>
            <param name="sessionId"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.SetQuality(System.Object,System.Int32)">
            <summary>
            For internal use only
            </summary>
            <param name="sessionId"></param>
            <param name="quality"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.SetDecoderWidthHeight(System.Object,System.Int32,System.Int32)">
            <summary>
            For internal use only
            </summary>
            <param name="sessionId"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.SetPcmParameters(System.Object,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            For internal use only
            </summary>
            <param name="sessionId"></param>
            <param name="channels"></param>
            <param name="samplingRate"></param>
            <param name="bitsPerSample"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.MarkSessionForNoReuse(System.Object)">
            <summary>
            For internal use only
            </summary>
            <param name="sessionId"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.SetupMulticast(VideoOS.Platform.FQID)">
            <summary>
            For internal use only
            </summary>
            <param name="deviceFqid"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Util.InternalMediaService.MulticastConfigDoneEventArgs">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.MulticastConfigDoneEventArgs.#ctor(System.Guid)">
            <summary>
            For internal use only
            </summary>
            <param name="deviceId"></param>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.MulticastConfigDoneEventArgs.DeviceId">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Util.InternalMediaService.MulticastConfigDoneEvent">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.FireMulticastConfigDone(System.Guid)">
            <summary>
            For internal use only
            </summary>
            <param name="deviceId"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.SetStreamSelectionParams(System.Object,VideoOS.Platform.Util.AdaptiveStreaming.IStreamSelectionParams)">
            <summary>
            SetStreamSelectionParams method
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnectParams">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnectParams.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnectParams.DeviceFqid">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnectParams.Width">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnectParams.Height">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnectParams.KeepAspectRatio">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnectParams.FillSpace">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnectParams.KeyFramesOnly">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnectParams.StreamId">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnectParams.Fps">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnectParams.AllowUpscaling">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnectParams.HardwareDecodingMode">
            <summary>
            The mode for each stream, as selected by MIP
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.LiveVideoConnectParams.EnableMulticast">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.InternalMediaService.PcmAudioConnectParams">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalMediaService.PcmAudioConnectParams.#ctor">
            <summary>
            Default Contructor
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.PcmAudioConnectParams.DeviceFqid">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.PcmAudioConnectParams.StreamId">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.PcmAudioConnectParams.Channels">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.PcmAudioConnectParams.SampleRate">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalMediaService.PcmAudioConnectParams.BitsPerSample">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.ServiceInfo">
            <summary>
            Contains the information for one service point on a server. This class is constructed based on the XML returned
            by the server on the ServiceRegistration service.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ServiceInfo.type">
            <summary>
            Type of service
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ServiceInfo.instance">
            <summary>
            Instance id for the given server (different server has different Instance Id's)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ServiceInfo.uri">
            <summary>
            Array of valid URI's - multi URI's are provided when multiple network adaptors are installed on the server
            or when internal and external addresses are configured for the management server
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ServiceInfo.name">
            <summary>
            Name of service
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ServiceInfo.description">
            <summary>
            Description of a service
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ServiceInfo.trusted">
            <summary>
            Defines if the services needs login
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ServiceInfo.endpointDefinitions">
            <summary>
            XML representation of ArrayOfEndpointDefinitions
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.ServiceInfo.endpoints">
            <summary>
            Array of all available endpoints for this service type
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.ServiceInfo.ServiceEndpoints">
            <summary>
            Get hold of all defined service endpoints within this type
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.ArrayOfString">
            <summary>
            And array of uri's
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ArrayOfString.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ArrayOfString.#ctor(System.String[])">
            <summary>
            
            </summary>
            <param name="strings"></param>
        </member>
        <member name="T:VideoOS.Platform.Util.JpegUtil">
            <summary>
            Util to analyze JPEG content
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.JpegUtil.FindWidthHeight(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Look for the width and height inside the JPEG bytes
            </summary>
            <param name="data">The JPEG as bytes[]</param>
            <param name="width">filled with found width of JPEG</param>
            <param name="height">filled with found height of JPEG</param>
            <returns>true if width and height has been filled</returns>
        </member>
        <member name="T:VideoOS.Platform.Util.Migration">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.Migration.NewEventMigrate">
            <summary>
            Defines if "EventCommand" messages should be converted to "NewEventCommand"
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.Migration.Initialize">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.Migration.BaseEventHandler(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            Send a new Event into the alarm handling of EventServer
            </summary>
            <param name="message"></param>
            <param name="dest"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.Migration.NewEventsHandler(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            This method will provide backwards compatibility, for plugins listening to NewEventIndication, 
            while the event server might issue as NewEventsIndication.
            </summary>
            <param name="message"></param>
            <param name="dest"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Util.SecurityAccess">
            <summary>
            This class assists in maintaining security access for Items and validating what Items a user can access.
            The plug-in must be sure to register and unregister the Items that is under access control, e.g. has a SecurityAccess
            defined. 
            This could be done in the <see cref="M:VideoOS.Platform.Admin.ItemManager.ValidateAndSaveUserControl"/> method with a call
            to <see cref="M:VideoOS.Platform.Util.SecurityAccess.RegisterItem(VideoOS.Platform.Item)"/> and in the <see cref="M:VideoOS.Platform.Admin.ItemManager.DeleteItem(VideoOS.Platform.Item)"/> with a call to <see cref="M:VideoOS.Platform.Util.SecurityAccess.UnregisterItem(VideoOS.Platform.Item)"/>.
            
            The configuration of the actual access for each item is performed via standard Administration UI - no
            plugin development is required here.
            
            Checking for application level security access must be done entirely by the plug-in, where relevant.
            SecurityAccess.CheckPermission is called for getting valid action for the Plug-in.
            
            Checking for access to Items should be done in the ItemManager for maintenance actions, e.g. create/delete/view,
            but could be used other places if specific actions are defined.
             
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.SecurityAccess.AdministratorRoleId">
            <summary>
            Identify the administrator role
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.Save">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.Flush">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.Reload">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.Logout(VideoOS.Platform.Login.LoginSettings)">
            <summary>
            Called when one user logs out
            </summary>
            <param name="loginSettings"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.Logoff">
            <summary>
            Is called internally when the user logs off.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.RegisterItem(VideoOS.Platform.Item)">
            <summary>
            When a new Item is created and is under security check, this method need to be called.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.UnregisterItem(VideoOS.Platform.Item)">
            <summary>
            When an Item is being deleted, this method need to be called
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.CheckPermission(VideoOS.Platform.Item,System.String)">
            <summary>
            This method will check if current user can perform the requested action on this Item.
            Will throw Exception if access is denied.
            </summary>
            <param name="item"></param>
            <param name="actionId"></param>		
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.CheckPermission(VideoOS.Platform.Item,System.String,System.String)">
            <summary>
            This method will check if current user can perform the requested action on this Item.
            Will throw Exception if access is denied.  The user to check is identified by the SID.
            </summary>
            <param name="item"></param>
            <param name="actionId"></param>		
            <param name="SID">A SID or Guid when XPE basic user.  The string should be uppercase.</param>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.CheckPermission(VideoOS.Platform.Item,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            This method will check if current user can perform the requested action on this Item.
            Will throw Exception if access is denied.  The user to check is identified by the SID.
            </summary>
            <param name="item"></param>
            <param name="actionId"></param>		
            <param name="SID">SID or Guid (for basic users). This must be uppercased.</param>
            <param name="groups">AD groups the user is member of (Only used for towards XPE servers)</param>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.CheckPermission(VideoOS.Platform.Item,System.String,VideoOS.Platform.ServerId)">
            <summary>
            This method will check if current user can perform the requested action on this Item.
            Will throw Exception if access is denied.
            </summary>
            <param name="item"></param>
            <param name="actionId"></param>		
            <param name="serverId"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.CheckPermission(VideoOS.Platform.PluginDefinition,System.String)">
            <summary>
            This method will check if current user can perform the requested action on this Plug-in.
            Will throw Exception if access is denied.
            </summary>
            <param name="pluginDefinition"></param>
            <param name="actionId"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.CheckPermission(System.Guid,System.String)">
            <summary>
            This method will check if current user can perform the requested action on this Plugin. 
            Will throw Exception if access is denied.
            </summary>
            <param name="pluginDefinitionId"></param>
            <param name="actionId"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.CheckPermission(System.Guid,System.String,System.String)">
            <summary>
            This method will check if current user can perform the requested action on this Plug-in. 
            Will throw Exception if access is denied.
            </summary>
            <param name="pluginDefinitionId"></param>
            <param name="actionId"></param>
            <param name="SID">The SID or Guid when basic user.  Must be uppercase.</param>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.CheckPermission(System.Guid,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            This method will check if current user can perform the requested action on this Plug-in. 
            Will throw Exception if access is denied.
            </summary>
            <param name="pluginDefinitionId"></param>
            <param name="actionId"></param>
            <param name="SID">The SID og Guid identifying the user.  Guid used for basic users, must be uppercase.</param>
            <param name="groups">List of AD groups the user is a member of (Only used for connection to XPE servers)</param>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.CheckPermission(VideoOS.Platform.PluginDefinition,System.String,VideoOS.Platform.ServerId)">
            <summary>
            This method will check if current user can perform the requested action on this Plug-in.
            Will throw Exception if access is denied.
            </summary>
            <param name="pluginDefinition"></param>
            <param name="actionId"></param>
            <param name="serverId"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.CheckPermission(System.Guid,System.String,VideoOS.Platform.ServerId)">
            <summary>
            This method will check if current user can perform the requested action on this Plug-in, when working on items from a given server.
            Will throw Exception if access is denied.
            </summary>
            <param name="pluginDefinitionId"></param>
            <param name="actionId"></param>
            <param name="serverId"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.GetPermittedActionList(VideoOS.Platform.Item,System.String)">
            <summary>
            Get the permitted action list for a specific user working with specific Item.
            </summary>
            <param name="item"></param>
            <param name="SID">SID or Guid for the user.  Must be uppercase.</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.GetPermittedActionList(VideoOS.Platform.Item,System.String,VideoOS.Platform.ServerId)">
            <summary>
            Get the permitted action list for a specific user working with specific Item on a specific Server.
            </summary>
            <param name="item"></param>
            <param name="SID"></param>
            <param name="serverId"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.BuildPermissionList(System.Collections.Generic.List{VideoOS.Platform.Item},System.String)">
            <summary>
            Check authorization for a list of Items. The items the current user can access with defined action is returned.
            </summary>
            <param name="items"></param>
            <param name="actionId"></param>
            <returns>Authorized list</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.BuildPermissionList(System.Collections.Generic.List{VideoOS.Platform.Item},System.String,VideoOS.Platform.ServerId)">
            <summary>
            Check authorization for a list of Items. The items the current user can access with defined action is returned.
            </summary>
            <param name="items"></param>
            <param name="actionId"></param>
            <param name="serverId"></param>
            <returns>Authorized list</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.BuildPermissionList(System.Collections.Generic.List{VideoOS.Platform.Item},System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Check authorization for a list of Items. The items the specified user can access with defined action is returned.
            </summary>
            <param name="items"></param>
            <param name="actionId"></param>
            <param name="SID"></param>
            <param name="groups"></param>
            <returns>Authorized list</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.CheckIdentities(System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            For internal use only.
            </summary>
            <param name="identities"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.IsMember(VideoOS.Platform.ServerId,System.String,System.String)">
            <summary>
            This method will check if the user identified by the provided identity is part of a specific role.
            
            RoleId for administrator is: 
            </summary>
            <param name="serverId">Server on which the role exists</param>
            <param name="sidIdentity">Identity of the user to check</param>
            <param name="roleId">The role to check</param>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.SetGroupMembers(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            For internal use only.
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.SetGeneralRights(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.GetUserIdentificationViaSid(System.String,VideoOS.Platform.Login.LoginSettings)">
            <summary>
            Get hold of information about an AD user, or a basic user.
            
            Note: Supported for C-Code products from 2017 R2
            </summary>
            <param name="sid"></param>
            <param name="loginSettings"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.IsClientAllowed(VideoOS.Platform.ServerId,System.String)">
            <summary>
            Can be used to check if a given client type is allowed to connect to the VMS server.
            
            The Environment is using this during login
            
            clientType can be: <br/>
              - "SmartClient"<br/>
              - "MobileClient"<br/>
              - "WebClient"
            
            Supported from Corporate/Expert 2017 R1
            
            When connected to older versions, false will be returned.<br/>
            When connected to E-Code base products, true will be returned
            </summary>
            <param name="serverId"></param>
            <param name="clientType"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.HasOverallPermission(VideoOS.Platform.ServerId,System.String,System.String)">
            <summary>
            Check to see if current user has permission on an overall area
            </summary>
            <param name="serverId"></param>
            <param name="securityNamespaceName">Is usually a Guid, camera is "623D03F8-C5D5-46BC-A2F4-4C03562D4F85"</param>
            <param name="securityAction">The action id that is changed for permission</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.Test(System.String,System.String[])">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.InitializationCheck">
            <summary>
            Used internally by the VMS management client/application.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.SecurityAccess.DifferentiatedAdministrationRights">
            <summary>
            Used internally by the VMS management client
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.SetPermittedAction(System.String,VideoOS.Platform.Item,System.String,System.Boolean)">
            <summary>
            Used internally by the VMS management client/application.
            </summary>
            <param name="identity"></param>
            <param name="item"></param>
            <param name="actionId"></param>
            <param name="permit"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.GetPermittedActionList(System.String,VideoOS.Platform.PluginDefinition)">
            <summary>
            Retrieve a list of plugin actions that a specific user is authorized to perform.
            </summary>
            <param name="identity"></param>
            <param name="pluginDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.GetPermittedActionList(System.String,VideoOS.Platform.Admin.ItemNode,VideoOS.Platform.Item)">
            <summary>
            Get the list of actions a user can perform on a specific Item that has another Item as a parent.
            </summary>
            <param name="identity"></param>
            <param name="itemNode"></param>
            <param name="parentItem"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.GetOverallPermittedActionList(System.String,VideoOS.Platform.Admin.ItemNode)">
            <summary>
            Get the list of permitted actions configured on the overall role tab, for a specific Kind (identified by an ItemNode).
            </summary>
            <param name="identity"></param>
            <param name="itemNode"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.GetOverallPermittedActionList(System.String,VideoOS.Platform.PluginDefinition)">
            <summary>
            Get the list of permitted actions configured on the overall role tab, for a plugin.
            </summary>
            <param name="identity"></param>
            <param name="pluginDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.GetPermittedActionList(System.String,VideoOS.Platform.Item)">
            <summary>
            Get the list of actions a user can perform on a specific top level Item.
            </summary>
            <param name="identity"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.SetPermittedAction(System.String,VideoOS.Platform.PluginDefinition,System.String,System.Boolean)">
            <summary>
            Used internally by the VMS management client/application.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.SetPermittedAction(System.String,VideoOS.Platform.Admin.ItemNode,VideoOS.Platform.Item,System.String,System.Boolean)">
            <summary>
            Used internally by the VMS management client/application.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.CheckRegisteredSecurityObjects">
            <summary>
            Changed in 2018-March to only be called for XPE systems
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.SecurityAccess.GetCurrentActions(System.String)">
            <summary>
            Will return defined permission actions for a security NameSpace, e.g. "Camera"
            </summary>
            <param name="objectClassId"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Util.DifferentiatedAdministrationRights">
            <summary>
            This class is only relevant for Corporate VMS systems, while running inside the Management Client
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.DifferentiatedAdministrationRights.IsReadAllowed(VideoOS.Platform.Admin.ItemNode)">
            <summary>
            Respond is current administrator is allowed to view (read) items defined by the ItemNode
            </summary>
            <param name="itemNode"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.DifferentiatedAdministrationRights.IsCreateAllowed(VideoOS.Platform.Admin.ItemNode)">
            <summary>
            Respond is current administrator is allowed to Create new items defined by the ItemNode
            </summary>
            <param name="itemNode"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.DifferentiatedAdministrationRights.IsDeleteAllowed(VideoOS.Platform.Admin.ItemNode)">
            <summary>
            Respond is current administrator is allowed to delete items defined by the ItemNode
            </summary>
            <param name="itemNode"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.DifferentiatedAdministrationRights.IsEditAllowed(VideoOS.Platform.Admin.ItemNode)">
            <summary>
            Respond is current administrator is allowed to edit items defined by the ItemNode
            </summary>
            <param name="itemNode"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.DifferentiatedAdministrationRights.ShowNotAllowedDialog">
            <summary>
            This method will show a generic message box with 'you are not allowed to perform this action'
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.Security.ConnectionSettings">
            <summary>
            The <b>ConnectionSettings</b> class represents the settings used by a connection
            to the server.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.Security.ConnectionSettings.ServerName">
            <summary>
            Gets or sets the name of the server.
            </summary>
            <value>
            A <see cref="T:System.String"/> value that specifies the 
            name of the server.
            </value>
        </member>
        <member name="P:VideoOS.Platform.Util.Security.SecurityClientBase.ServerType">
            <summary>
            Defines the type of server that is used by this instance
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.Security.SecurityClientXPCOWrapper.RegisterObject(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="objectId"></param>
            <param name="classId">Now namespaceid</param>
            <param name="parentObjectId"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.Security.SecurityClientXPCOWrapper.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="T:VideoOS.Platform.Util.Security.SecurityClientXPE">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.Security.SecurityClientXPE._classIds">
            <summary>
            The _classIds dictionary contains all valid classes and their possible actions.
            Key is by classId
            
            This class is intended to be used for XPE when a relative small set of security
            items is expected.
            All configuration is saved in the CustomSettings item with all IDs= above Guid.
            The SID for AD users are correct, while for basic users is a GUID to be translated
            by the ImageServer to a user.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.Security.SecurityClientXPE._objects">
            <summary>
            The _objects dictionary contains all defined objects.  each object have a reference to a 
            classId, e.g. what class are they defining and a possible rarent object to inherit from.
            Key is by ObjectId
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.Security.SecurityClientXPE._permissions">
            <summary>
            The _permission table contains all configured permissions or 'tick-marks' the administrator have done.
            Key is by ObjectId, SID = List of ActionId's
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.Security.SecurityClientXPE._groupMembers">
            <summary>
            Contains the XPE groups, and the members of that group.  All strings are SID or GUIDs.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.Security.SecurityClientXPE._generalPermissions">
            <summary>
            Contains the XPE users, and the general permissions for each.  All keys strings are SID or GUIDs. 
            "managementaccess" indicates that user has right to access all objects
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.Security.SecurityClientXPE._currentSID">
            <summary>
            Contains the current SID for AD users and a Guid for basic users
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.Security.SecurityClientXPE._currentSIDGroups">
            <summary>
            Contains the AD-groups a AD-user is a member of
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.Security.SecurityClientXPE.CurrentSID">
            <summary>
            Only find and build CurrentSID when requested.
            Access to this property can take a few seconds the first time after a login.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.Security.RoleType.Adminstrative">
            <summary>
            The administrative role has access to all information
            in the system. This role cannot be deleted.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.Security.RoleType.UserDefined">
            <summary>
            A user-defined role has access to the specified security
            attributes described for the role.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.Security.MessageParameter">
            <summary/>
        </member>
        <member name="P:VideoOS.Platform.Util.Security.MessageParameter.Index">
            <summary/>
        </member>
        <member name="P:VideoOS.Platform.Util.Security.MessageParameter.Name">
            <summary/>
        </member>
        <member name="P:VideoOS.Platform.Util.Security.MessageParameter.Value">
            <summary/>
        </member>
        <member name="P:VideoOS.Platform.Util.Security.MessageParameter.Localizable">
            <summary/>
        </member>
        <member name="P:VideoOS.Platform.Util.Security.MessageParameter.ResourceName">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.Util.Security.MessageParameter.#ctor(System.Int32,System.String,System.String)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.Util.Security.MessageParameter.#ctor(System.Int32,System.String,System.String,System.Boolean,System.String)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Util.Security.VMOExceptionDetail">
            <summary>
            Used internally by SecurityAction. Converted to NotAuthorizedMIPException
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.Security.VMOExceptionDetail.VMOErrorId">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Util.Security.VMOExceptionDetail.MsgParams">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.Util.Security.VMOExceptionDetail.#ctor(System.Exception,System.Collections.Generic.IEnumerable{VideoOS.Platform.Util.Security.MessageParameter})">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Util.InternalCommandService">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalCommandService.Instance">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.InternalCommandService.Initialized">
            <summary>
            Indicate if this class / module has been initialized.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.AlertsGetAroundWithSpan(VideoOS.Platform.FQID,System.DateTime,System.TimeSpan,System.Int32,System.TimeSpan,System.Int32)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.AsyncAlertsGetAroundWithSpan(VideoOS.Platform.FQID,System.Object,System.DateTime,System.TimeSpan,System.Int32,System.TimeSpan,System.Int32,VideoOS.Platform.Data.AsyncCallbackHandler)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.SequencesGetTypes(VideoOS.Platform.FQID)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.AsyncSequencesGetTypes(VideoOS.Platform.FQID,System.Object,VideoOS.Platform.Data.AsyncCallbackHandler)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.SequencesGetAroundWithSpan(VideoOS.Platform.FQID,System.Guid,System.DateTime,System.TimeSpan,System.Int32,System.TimeSpan,System.Int32)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.SequencesGetAroundWithSpan(VideoOS.Platform.FQID,System.Guid,System.DateTime,System.TimeSpan,System.Int32,System.TimeSpan,System.Int32,System.Boolean)">
            <summary>
            For internal use only
            This method is not usable in SDK standalone apps since all exceptions will be ignored anyway.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.AsyncSequencesGetAroundWithSpan(VideoOS.Platform.FQID,System.Object,System.Guid,System.DateTime,System.TimeSpan,System.Int32,System.TimeSpan,System.Int32,VideoOS.Platform.Data.AsyncCallbackHandler)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterConnect(VideoOS.Platform.FQID)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterConnect(VideoOS.Platform.FQID,System.Int32,System.Int32)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterConnect(VideoOS.Platform.FQID,System.Int32,System.Int32,VideoOS.Platform.BitmapFormat)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterConnect(VideoOS.Platform.FQID,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterConnect(VideoOS.Platform.FQID,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterConnect(VideoOS.Platform.FQID,System.Int32,System.Int32,System.Boolean,System.Boolean,VideoOS.Platform.BitmapFormat)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterConnect(VideoOS.Platform.FQID,System.String,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.PcmAudioConnect(VideoOS.Platform.Util.InternalMediaService.PcmAudioConnectParams)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterDisconnect(System.Object)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterJPEGGetAt(System.Object,VideoOS.Platform.FQID,System.DateTime)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterJPEGGetNearest(System.Object,VideoOS.Platform.FQID,System.DateTime)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterJPEGGetAtOrBefore(System.Object,VideoOS.Platform.FQID,System.DateTime)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterCommand(System.Object,System.String)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterGoTo(System.Object,System.DateTime,System.String)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterGoTo2(System.Object,System.DateTime,System.String)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterBitmapGetAt(System.Object,VideoOS.Platform.FQID,System.DateTime)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterBitmapGetNearest(System.Object,VideoOS.Platform.FQID,System.DateTime)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterBitmapGetAtOrBefore(System.Object,VideoOS.Platform.FQID,System.DateTime)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterBitmapCommand(System.Object,System.String)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterRawGetAt(System.Object,VideoOS.Platform.FQID,System.DateTime)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterRawGetAt(System.Object,VideoOS.Platform.FQID,System.DateTime,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterRawGetNearest(System.Object,VideoOS.Platform.FQID,System.DateTime)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterRawGetNearest(System.Object,VideoOS.Platform.FQID,System.DateTime,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterRawGetAtOrBefore(System.Object,VideoOS.Platform.FQID,System.DateTime)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterRawGetAtOrBefore(System.Object,VideoOS.Platform.FQID,System.DateTime,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterRawCommand(System.Object,System.String)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterRawCommand(System.Object,System.String,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterRawGetBefore(System.Object,VideoOS.Platform.FQID,System.DateTime)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterRawGetBefore(System.Object,VideoOS.Platform.FQID,System.DateTime,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterRawGetAfter(System.Object,VideoOS.Platform.FQID,System.DateTime)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.ImageExporterRawGetAfter(System.Object,VideoOS.Platform.FQID,System.DateTime,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.PcmAudioGetAt(System.Object,VideoOS.Platform.FQID,System.DateTime)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.PcmAudioGetNearest(System.Object,VideoOS.Platform.FQID,System.DateTime)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.PcmAudioGetAtOrBefore(System.Object,VideoOS.Platform.FQID,System.DateTime)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.PcmAudioCommand(System.Object,System.String)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.SetNewToken(System.Object,System.String)">
            <summary>
            For internal use only
            </summary>
            <param name="sessionId"></param>
            <param name="token"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.SetRemovableMasksLifted(System.Object,System.Boolean)">
            <summary>
            For internal use only
            </summary>
            <param name="sessionId"></param>
            <param name="lifted"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.SetWidthHeight(System.Object,System.Int32,System.Int32)">
            <summary>
            For internal use only
            </summary>
            <param name="sessionId"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.SetWidthHeight(System.Object,System.Int32,System.Int32,System.Boolean)">
            <summary>
            For internal use only
            </summary>
            <param name="sessionId"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="allowUpscaling"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.SetCropRectangle(System.Object,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.SetCompression(System.Object,System.Int32)">
            <summary>
            For internal use only
            </summary>
            <param name="sessionId"></param>
            <param name="quality"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.SetCustomData(System.Object,System.Object)">
            <summary>
            For internal use only
            </summary>
            <param name="sessionId"></param>
            <param name="customData"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.SetDecoderWidthHeight(System.Object,System.Int32,System.Int32)">
            <summary>
            For internal use only
            </summary>
            <param name="sessionId"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.CreateDBExporter">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.CreateDBExporter(System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.CreateAVIExporter">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.CreateWAVExporter">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.CreateMKVExporter">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.CreateWorkSpaceViewAndLayoutItem(System.Guid)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.SmartSearchStart(VideoOS.Platform.FQID,System.DateTime,System.DateTime,System.Int32,System.TimeSpan,VideoOS.Platform.Util.SmartSearchMask,System.Boolean,VideoOS.Platform.Util.SmartSearchSize,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.SmartSearchCancel(VideoOS.Platform.FQID,System.Guid,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.SmartSearchGetStatus(VideoOS.Platform.FQID,System.Guid,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.InternalCommandService.SmartSearchGetResult(VideoOS.Platform.FQID,System.Guid,System.Boolean,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.SequenceEntry">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.SequenceEntry.TimeBeginField">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.SequenceEntry.TimeTriggedField">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.SequenceEntry.TimeEndField">
            <summary> </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.SequenceType">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.SequenceType.Id">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.SequenceType.Name">
            <summary> </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.StreamType">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.StreamType.Id">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.StreamType.Name">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.StreamType.Properties">
            <summary> </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.AlertOccurrence">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.AlertOccurrence.AlertId">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.AlertOccurrence.DateTime">
            <summary> </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.AsyncState">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.AsyncState.CallerAsyncState">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.AsyncState.CallerCallbackHandler">
            <summary> </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.SmartSearchMask">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.SmartSearchMask.Size">
            <summary> </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.SmartSearchMask.Mask">
            <summary> </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.SmartSearchSize">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.SmartSearchSize.Width">
            <summary> </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.SmartSearchSize.Height">
            <summary> </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.SmartSearchStatus">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.SmartSearchStatus.StatusUnspecifiedError">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.SmartSearchStatus.StatusSearchInProgress">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.SmartSearchStatus.StatusSearchResultReady">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.SmartSearchStatus.StatusSearchEndTimeReached">
            <summary> </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.SmartSearchStatus.StatusSearchCanceled">
            <summary> </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.SmartSearchStatus.CurrentSearchTime">
            <summary> </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.SmartSearchStatus.Status">
            <summary> </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.SmartSearchResult">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.SmartSearchResult.ImageTime">
            <summary> </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.SmartSearchResult.MotionMask">
            <summary> </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.SmartSearchResult.MotionAreas">
            <summary> </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.SmartSearchMotionAreaInfos">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.SmartSearchMotionAreaInfos.Resolution">
            <summary> </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.SmartSearchMotionAreaInfos.MotionAreaInfo">
            <summary> </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.SmartSearchMotionAreaInfo">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.SmartSearchMotionAreaInfo.X">
            <summary> </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.SmartSearchMotionAreaInfo.Y">
            <summary> </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.SmartSearchMotionAreaInfo.Width">
            <summary> </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.SmartSearchMotionAreaInfo.Height">
            <summary> </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.PluginManager">
            <summary>
            Class used by the different MIP environments to load and manage plugins.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.PluginManager.Initialize">
            <summary>
            Load all MIP plugins from the default location on disk. All previous loaded plugins are ignored.
            For internal use only!
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.PluginManager.AddEmbeddedPlugins(System.Collections.Generic.List{VideoOS.Platform.PluginDefinition})">
            <summary>
            Add embedded PluginDefinitions to the already loaded plugins.
            Please call the Initialize() first!
            Also, this call MUST be done before the plugins are called on the Init() method.
            </summary>
            <param name="plugins"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.PluginManager.InitializeMore(System.String)">
            <summary>
            Load MIP plugins from additional path.  The Initialize() must be called first.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.PluginManager.InitializeOnly(System.String)">
            <summary>
            Onload DLLs from given path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.PluginManager.PluginInitCheckForStandalone">
            <summary>
            Used internal for standalone environments
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.PluginManager.PluginCloseCheckForStandalone">
            <summary>
            Used internal for standalone environments
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.PluginManager.UnloadPluginDefinition(VideoOS.Platform.PluginDefinition)">
            <summary>
            Reserved for future use (plugin is taken out of list, but DLL is not unloaded)
            </summary>
            <param name="pluginDefinition"></param>
        </member>
        <member name="M:VideoOS.Platform.Util.PluginManager.ReadRegistryValue(System.String,System.String)">
            <summary>
            Read a string value from the registry.  If not found the default value is returned.
            </summary>
            <param name="propertyName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.PluginManager.GetPluginDefinitions">
            <summary>
            Used internally.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.PluginManager.GetPluginDefinition(System.Guid)">
            <summary>
            Used internally
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.PluginManager.GetViewItemPlugins(System.Guid,VideoOS.Platform.Client.ViewItemPlugin@)">
            <summary>
            Used internally
            </summary>
            <param name="clientId"></param>
            <param name="viewItemPlugin"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.PluginManager.GetPluginDefinitionFromKind(System.Guid)">
            <summary>
            Find the plugin that manages a specific Kind
            </summary>
            <param name="kind"></param>
            <returns>The PluginDefinition owning the kind, or null</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.PluginManager.GetItemNode(System.Guid)">
            <summary>
            Find a specific ItemNode from it's Kind
            </summary>
            <param name="kind"></param>
            <returns>ItemNode or null</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.PluginManager.PlatformDefinitionIdExists(System.Guid)">
            <summary>
            Check if a specific plugin has ben loaded.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.PluginManager.PlatformCustomSettingsIdExists(System.Guid)">
            <summary>
            Used by mgt client to check if a specific id is found in the loaded plugins.
            This method is called to find out what CustomSettings to load from the server during logon.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.PluginManager.LoadCustomPlugins(System.Type,System.String)">
            <summary>
            Loads plug-ins of any type. Used internally by MIP.
            </summary>
            <param name="pluginType">The class or interface type to search for</param>
            <param name="pluginDefName">The file to check for loading. Default is 'plugin.def'</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.PluginManager.LoadFromFolder(System.String,System.Type,System.String)">
            <summary>
            Load all DLLs in the defined folderPath and find the identified class of pluginInterfaceType.
            A plugin.def file is required for defining witch DLLs to load.
            </summary>
            <param name="folderPath"></param>
            <param name="pluginInterfaceType"></param>
            <param name="pluginDefName">The name of the def file, default is "plugin.def"</param>
            <returns>List of clases of defined type</returns>
        </member>
        <member name="T:VideoOS.Platform.Util.ServiceUtil">
            <summary>
            The ServiceUtil class is used as common point to register services and later retrieve a list of the registered services.<br/>
            <br/>
            The Log service is a build-in service.<br/>
            <br/>
            Service types are identified by a Guid, and in case of multiple registration of the same service type,
            an instance field is used to distinguish them apart.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ServiceUtil.GetRegisteredServiceUriInfo(VideoOS.Platform.ServerId,System.Net.NetworkCredential)">
            <summary>
            Get all Registered services on the server identified by ServerId.
            </summary>
            <param name="serverId">Identifies the server to be contacted</param>
            <param name="credential">Credentials for accessing the server service.</param>
            <returns></returns>
            <exception cref="T:VideoOS.Platform.CommunicationMIPException">When unable to contact the registration service</exception>
        </member>
        <member name="M:VideoOS.Platform.Util.ServiceUtil.GetRegisteredServiceUriInfo(System.Guid,VideoOS.Platform.ServerId,System.Net.NetworkCredential)">
            <summary>
            Get all Registered services on from server identified by ServerId, that has a specific serviceType.<br/>
            Built in service types are:<br/>
            	MAPServiceType<br/>
            	LogServiceType<br/>
             </summary>
            <param name="serviceType"></param>
            <param name="serverId">Identifies the server to be contacted</param>
            <param name="credential">Credentials for accessing the server service.</param>
            <returns></returns>
            <exception cref="T:VideoOS.Platform.CommunicationMIPException">When unable to contact the registration service</exception>
        </member>
        <member name="M:VideoOS.Platform.Util.ServiceUtil.RegisterServiceUri(System.Guid,VideoOS.Platform.ServerId,System.Guid,System.Net.NetworkCredential,System.Uri,System.String,System.String,System.String)">
            <summary>
            Register own service on a login server. <br/>
            Can be used when your have multiple servers involved in performing a CPU heavy task, and still want to access all
            servers from the different plug-ins. <br/>
            If trying to register a service on an XProtect Enterprise (or smaller products), you will <i>have</i> to be logged in before calling this method.
            </summary>
            <param name="serviceType"></param>
            <param name="serverId"></param>
            <param name="instance"></param>
            <param name="credential">Credentials for accessing the server service.</param>
            <param name="uri"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="customData"></param>
            <exception cref="T:VideoOS.Platform.CommunicationMIPException">When unable to contact the registration service</exception>
        </member>
        <member name="M:VideoOS.Platform.Util.ServiceUtil.RegisterServiceUri(System.Guid,VideoOS.Platform.ServerId,System.Guid,System.Net.NetworkCredential,System.Uri,System.String,System.String,System.String,System.Collections.Generic.List{VideoOS.Platform.Configuration.RegistrationServiceEndpoint})">
            <summary>
            Register own service on a login server. <br/>
            Can be used when your have multiple servers involved in performing a CPU heavy task, and still want to access all
            servers from the different plug-ins. <br/>
            If trying to register a service on an XProtect Enterprise (or smaller products), you will <i>have</i> to be logged in before calling this method.<br/>
            The endpoints is a new parameter supported from products released in 2013. It is possible to specific multiple endpoints, to make it easier for the users of
            the registered services to construct the correct URL.
            </summary>
            <param name="serviceType"></param>
            <param name="serverId"></param>
            <param name="instance"></param>
            <param name="credential">Credentials for accessing the server service.</param>
            <param name="uri"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="customData"></param>
            <param name="endpoints"></param>
            <exception cref="T:VideoOS.Platform.CommunicationMIPException">When unable to contact the registration service</exception>
        </member>
        <member name="M:VideoOS.Platform.Util.ServiceUtil.UnRegisterServiceUri(VideoOS.Platform.ServerId,System.Guid,System.Net.NetworkCredential)">
            <summary>
            UnRegister own service from a server
            </summary>
            <param name="serverId"></param>
            <param name="instance"></param>
            <param name="credential">Credentials for accessing the server service.</param>
            <exception cref="T:VideoOS.Platform.CommunicationMIPException">When unable to contact the registration service</exception>
        </member>
        <member name="M:VideoOS.Platform.Util.ServiceUtil.GetServiceData(VideoOS.Platform.ServerId,System.Guid,System.Net.NetworkCredential)">
            <summary>
            Get the specific service data for a registered service. The content is service type specific.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ServiceUtil.SetServiceData(VideoOS.Platform.ServerId,System.Guid,System.Net.NetworkCredential,System.String)">
            <summary>
            Set a specific string as the service data for a particular instance of a service.<br/>
            If the same service is running at multiple machines in the same network, the service data can be used to distinguish between them.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ServiceUtil.FlushCache">
            <summary>
            Flush the cache of registered services.
            
            The cache holds the information for default 10 minutes.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.ServiceUtil.AddTokenMessageInspector">
            <summary>
            A SOAP message inspector assisting in adding the Token to the soap headers.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ServiceUtil.AddTokenMessageInspector.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.Util.ServiceUtil.AddTokenMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.Util.ServiceUtil.AddTokenMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Util.ServiceUtil.AddTokenBehavior">
            <summary>
            A SOAP behavior assisting in adding the Token to the soap headers.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ServiceUtil.AddTokenBehavior.#ctor(VideoOS.Platform.Login.LoginSettings)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.Util.ServiceUtil.AddTokenBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.Util.ServiceUtil.AddTokenBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.Util.ServiceUtil.AddTokenBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.Util.ServiceUtil.AddTokenBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)">
            <summary/>
        </member>
        <member name="P:VideoOS.Platform.Util.ServiceUtil.AddTokenBehavior.BehaviorType">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.Util.ServiceUtil.AddTokenBehavior.CreateBehavior">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.Util.Sort">
            <summary>
            Contains method for Sorting assistance
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.Sort.NumericStringCompare(System.String,System.String)">
            <summary>
            Compares two numeric strings, so that e.g. "a10" is greater than "a2".
            </summary>
            <param name="str1">The first string.</param>
            <param name="str2">The second string.</param>
            <returns>Returns -1 if str1 is less than str2; 1 if str1 is greater than str2; and 0 if str1 is equal to str2.</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.Sort.LongValueCompare(System.Int64,System.Int64)">
            <summary>
            
            </summary>
            <param name="l1"></param>
            <param name="l2"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.Svc.ClientPool`1.TakeClient(System.Boolean)">
            <summary>
            Take a client from the pool.
            If the pool is empty, a new client instance is created and returned.
            </summary>
            <param name="forceNew">Setting this to true will force the method to always create a new client</param>
            <returns>A client instance (not known to be closed or faulted)</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.Svc.ClientPool`1.PutClient(`0)">
            <summary>
            Put a client into the pool.
            The client will be accepted only if it is not closing/closed/faulted and this class has not been closed.
            </summary>
            <param name="client">The client instance.</param>
        </member>
        <member name="T:VideoOS.Platform.Util.Svc.ServiceInfo">
            <summary>
            Class assisting in getting available registration service points from the management server.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.Svc.ServiceInfo.ServiceEndpoints">
            <summary>
            Returns all registration service endpoints, received from Corporate/Expert from the SVC service point(443)
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Util.TimeConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.TimeConvert.ToGmtString(System.DateTime,System.Boolean)">
            <summary>
            Format a DateTime to a string like:<br/>
             2012-12-16T13:51:39+01:00, or<br/>
             2012-12-16T13:51:39.123+01:00
            </summary>
            <param name="dateTime">The datetime to convert</param>
            <param name="includeMilliSeconds">true if milliseconds should be included.</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Util.TimeConvert.ToGmtString(System.DateTime)">
            <summary>
            Format a DateTime to a string like:<br/>
             2016-12-16T13:51:39+01:00
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Util.TimeInterval">
            <summary>
            Responsible for representing a time interval. It is up to the consumer to handle the <see cref="T:System.DateTimeKind"/> of the <see cref="T:VideoOS.Platform.Util.TimeInterval"/> instance.
            In any case, all <see cref="T:System.DateTimeKind"/>s are supported, but we highly recommend to use only UTC time! Instances are immutable.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Util.TimeInterval.Zero">
            <summary>
            An empty time interval - corresponds to no interval.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.TimeInterval.#ctor(System.DateTime,System.TimeSpan)">
            <summary>
            Create a new instance of <see cref="T:VideoOS.Platform.Util.TimeInterval"/>.
            </summary>
            <param name="startTime">The start time of the time interval</param>
            <param name="duration">The duration of the time interval</param>
        </member>
        <member name="M:VideoOS.Platform.Util.TimeInterval.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Create a new instance of <see cref="T:VideoOS.Platform.Util.TimeInterval"/>.
            </summary>
            <param name="startTime">The start time of the time interval</param>
            <param name="endTime">The end time of the time interval</param>
            <exception cref="T:System.ArgumentException">If <paramref name="startTime"/> and <paramref name="endTime"/> do not have the same <see cref="T:System.DateTimeKind"/>.</exception>
        </member>
        <member name="P:VideoOS.Platform.Util.TimeInterval.StartTime">
            <summary>
            Gets the start time of the time interval
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.TimeInterval.Duration">
            <summary>
            Gets the duration of the time interval
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.TimeInterval.EndTime">
            <summary>
            Gets the end time of the time interval
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Util.TimeInterval.Kind">
            <summary>
            Gets the <see cref="T:System.DateTimeKind"/> of the time interval. This is defined as the <see cref="T:System.DateTimeKind"/> of the <see cref="P:VideoOS.Platform.Util.TimeInterval.StartTime"/>.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.TimeInterval.ToUniversalTime">
            <summary>
            Creates a new instance, where the start time has been converted to UTC time. The duration is unchanged.
            </summary>
            <returns>A new instance as UTC time.</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.TimeInterval.ToLocalTime">
            <summary>
            Creates a new instance, where the start time has been converted to local time. The duration is unchanged.
            </summary>
            <returns>A new instance as local time.</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.TimeInterval.OverlapsWith(VideoOS.Platform.Util.TimeInterval)">
            <summary>
            Check if this instance overlaps with another <see cref="T:VideoOS.Platform.Util.TimeInterval"/> instance.
            </summary>
            <param name="interval">The other <see cref="T:VideoOS.Platform.Util.TimeInterval"/> instance.</param>
            <returns>True if they overlap; false if not. Two intervals just touching each other do not overlap</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.TimeInterval.OverlapsWith(System.DateTime,System.DateTime)">
            <summary>
            Check if this instance overlaps with a time interval given by a start and end time.
            </summary>
            <param name="startTime">The start of the time interval</param>
            <param name="endTime">The start of the time interval</param>
            <returns>True if they overlap; false if not. Two intervals just touching each other do not overlap</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="startTime"/> and <paramref name="endTime"/> do not have the same <see cref="T:System.DateTimeKind"/>.</exception>
        </member>
        <member name="M:VideoOS.Platform.Util.TimeInterval.OverlapsWith(System.DateTime,System.TimeSpan)">
            <summary>
            Check if this instance overlaps with a time interval given by a start and length.
            </summary>
            <param name="startTime">The start of the time interval</param>
            <param name="timeSpan">The length of the timespan</param>
            <returns>True if they overlap; false if not. Two intervals just touching each other do not overlap</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.TimeInterval.op_Inequality(VideoOS.Platform.Util.TimeInterval,VideoOS.Platform.Util.TimeInterval)">
            <summary>
            Determines whether two specified instances of <see cref="T:VideoOS.Platform.Util.TimeInterval"/> are not equal.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="first"/> and <paramref name="second"/> do not represent the same time interval; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.TimeInterval.op_Equality(VideoOS.Platform.Util.TimeInterval,VideoOS.Platform.Util.TimeInterval)">
            <summary>
            Determines whether two specified instances of <see cref="T:VideoOS.Platform.Util.TimeInterval"/> are equal.
            </summary>
            <param name="first">The first object to compare.</param>
            <param name="second">The second object to compare.</param>
            <returns><c>true</c> if <paramref name="first"/> and <paramref name="second"/> represent the same time interval; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.TimeInterval.ToString">
            <summary>
            Returns a string representing the instance by its start and end time.
            </summary>
            <returns>A string representing the instance.</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.TimeInterval.Equals(VideoOS.Platform.Util.TimeInterval)">
            <summary>
            Returns a value indicating whether the value of this instance is equal to the value of the specified <see cref="T:VideoOS.Platform.Util.TimeInterval"/> instance.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if the <paramref name="other"/> parameter equals the value of this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.TimeInterval.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> is an instance of <see cref="T:VideoOS.Platform.Util.TimeInterval"/> and equals the value of this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.TimeInterval.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.TimeInterval.Minimize(System.Collections.Generic.IEnumerable{VideoOS.Platform.Util.TimeInterval})">
            <summary>
            Minimizes the list of time intervals so that overlapping intervals are collapsed.
            </summary>
            <param name="intervals">The list of time intervals.</param>
            <returns>A minimized list of time intervals.</returns>
        </member>
        <member name="T:VideoOS.Platform.Util.UrlUtil">
            <summary>
            Utility for URL formatting
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.UrlUtil.BuildUri(System.String)">
            <summary>
            Build URL and ensure scheme is set
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Util.ViewItemUtility">
            <summary>
            Construct an XML node containg the definition of a View, as used by Video Wall 
            
            It contains a topnode viewitems, with a set of viewitem as child nodes.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.ViewItemUtility.ConvertToXml(VideoOS.Platform.Messaging.ViewItemInformation,System.Boolean)">
            <summary>
            Construct an XML node containg the definition of a View, as used by Video Wall 
            
            It can contain the topnode 'viewitems', with one 'viewitem' as child node.
            
            The resulting xml can be used with the Control.VideoWallApplyXmlCommand message.
            </summary>
            <param name="viewItemInformation">Configuration for one ViewItem</param>
            <param name="includeTopNode">Defines if 'viewitems' node is included</param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Util.WorkStealingTaskScheduler">
            <summary>
            Provides a work-stealing scheduler.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.WorkStealingTaskScheduler.#ctor">
            <summary>Initializes a new instance of the WorkStealingTaskScheduler class.</summary>
            <remarks>This constructors defaults to using twice as many threads as there are processors.</remarks>
        </member>
        <member name="M:VideoOS.Platform.Util.WorkStealingTaskScheduler.#ctor(System.Int32)">
            <summary>Initializes a new instance of the WorkStealingTaskScheduler class.</summary>
            <param name="concurrencyLevel">The number of threads to use in the scheduler.</param>
        </member>
        <member name="M:VideoOS.Platform.Util.WorkStealingTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler.</summary>
            <param name="task">The task to be scheduled.</param>
        </member>
        <member name="M:VideoOS.Platform.Util.WorkStealingTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Executes a task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Ignored.</param>
            <returns>Whether the task could be executed.</returns>
        </member>
        <member name="P:VideoOS.Platform.Util.WorkStealingTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="M:VideoOS.Platform.Util.WorkStealingTaskScheduler.GetScheduledTasks">
            <summary>Gets all of the tasks currently scheduled to this scheduler.</summary>
            <returns>An enumerable containing all of the scheduled tasks.</returns>
        </member>
        <member name="M:VideoOS.Platform.Util.WorkStealingTaskScheduler.AddWsq(VideoOS.Platform.Util.WorkStealingQueue{System.Threading.Tasks.Task})">
            <summary>Adds a work-stealing queue to the set of queues.</summary>
            <param name="wsq">The queue to be added.</param>
        </member>
        <member name="M:VideoOS.Platform.Util.WorkStealingTaskScheduler.RemoveWsq(VideoOS.Platform.Util.WorkStealingQueue{System.Threading.Tasks.Task})">
            <summary>Remove a work-stealing queue from the set of queues.</summary>
            <param name="wsq">The work-stealing queue to remove.</param>
        </member>
        <member name="M:VideoOS.Platform.Util.WorkStealingTaskScheduler.DispatchLoop">
            <summary>
            The dispatch loop run by each thread in the scheduler.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Util.WorkStealingTaskScheduler.Dispose">
            <summary>Signal the scheduler to shutdown and wait for all threads to finish.</summary>
        </member>
        <member name="T:VideoOS.Platform.Util.WorkStealingQueue`1">
            <summary>A work-stealing queue.</summary>
            <typeparam name="T">Specifies the type of data stored in the queue.</typeparam>
        </member>
        <member name="M:VideoOS.Platform.Util.WaitUtil.Wait(System.Func{System.Boolean},System.TimeSpan,System.TimeSpan,System.String)">
            <summary>
            Waits synchroniously for the condition to happen. 
            Timeout can be provided. Throws the <see cref="T:System.TimeoutException"/> if the timeout is reached
            </summary>
            <param name="finishCondition">Finish condition that should return true when waiting should be finished</param>
            <param name="interval">Interval with which to check the finish condition</param>
            <param name="timeout">Waiting timeout pass <see cref="F:System.TimeSpan.Zero"/> for unlimited waiting</param>
            <param name="timeoutMessage">A message that will be passed through the <see cref="T:System.TimeoutException"/> if the timeout is reached. The empty string or null means the default message.</param>
        </member>
        <member name="T:VideoOS.Platform.GenericEventConfigItem">
            <summary>
            A base class which allows generic events to be reflected in the administrator kernels' as "shadow" user-defined or manual events.
            This base class is not supposed to be instanced directly, only subclasses hereof are.
            You must use the CreateGenericEventConfigItem() method from either the XPCO or the XPE Configuration class to instance such subclasses.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.GenericEventConfigItem.GENERIC_GENERATOR_ID">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="F:VideoOS.Platform.GenericEventConfigItem.SHADOW_ID">
            <summary>
            Reserved for internal use
            </summary>
        </member>
        <member name="M:VideoOS.Platform.GenericEventConfigItem.#ctor(VideoOS.Platform.FQID,System.String)">
            <summary>
            Prototype constructor from FQID and name string.
            </summary>
            <param name="fqid"></param>
            <param name="name"></param>
        </member>
        <member name="M:VideoOS.Platform.GenericEventConfigItem.#ctor(VideoOS.Platform.Item)">
            <summary>
            Prototype constructor for creation from an "ordinary" MIP Item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.GenericEventConfigItem.RemoveShadowEvent">
            <summary>
            Remove and delete the shadow user-defined event. This base method not to be called, but is not made abstract for compatibility reasons.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.GenericEventConfigItem.Rename(System.String)">
            <summary>
            Rename the shadow user-defined event. This base method not to be called, but is not made abstract for compatibility reasons.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.GenericEventConfigItem.Create">
            <summary>
            Create the internals and return true if the item is useful
            </summary>
            <returns>False if creation failed, typically a user-defined event with that name already exists</returns>
        </member>
        <member name="P:VideoOS.Platform.GenericEventConfigItem.ShadowId">
            <summary>
            Gets and sets the id for the shadow user-defiend event. A value of Guid.Empty means that no shadow exists yet.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Login.LoginServerProductInfo">
            <summary>
            Contains information about the server that is logged on to.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginServerProductInfo.ProductName">
            <summary>
            Name of the server product
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginServerProductInfo.ProductVersion">
            <summary>
            Version of the product, e.g. "8.0b"
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginServerProductInfo.MajorVersion">
            <summary>
            The major part of the ProductVersion
            </summary>		
        </member>
        <member name="P:VideoOS.Platform.Login.LoginServerProductInfo.MinorVersion">
            <summary>
            The minor part of the ProductVersion
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginServerProductInfo.ServiceVersion">
            <summary>
            The service letter of the ProductVersion
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginServerProductInfo.ServerSubType">
            <summary>
            A number representing the supported protocol level.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Login.LoginSettings">
            <summary>
            LoginSettings contain a Token of login for one server.
            It needs to be renewed once in a while.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginSettings.Uri">
            <summary>
            The URI of the server where this class apply
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginSettings.Guid">
            <summary>
            The GUID of the server.  Please note that it may not always be filled to start with, as
            we need to login to the server before the GUID is found.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Login.LoginSettings.InstanceGuid">
            <summary>
            Identifies the instance of this one LoginSettings
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginSettings.ServerType">
            <summary>
            If the actual server type is know, initializing this field will speed-up the login process
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginSettings.ServerWebType">
            <summary>
            This field identify if the server is accessed via a ASMX or SVC service.
            
            When set to blank - the access type is not yet identified.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Login.LoginSettings.ServerProductInfo">
            <summary>
            Contains information about the server, after logon has been performed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginSettings.Name">
            <summary>
            A display name for this server, or just the Uri.Host
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginSettings.NetworkCredential">
            <summary>
            The Credential used when connecting with Windows or WindowsDefault authorization
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginSettings.CredentialCache">
            <summary>
            The Credential cache for all types of authorizations
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginSettings.UriCorporate">
            <summary>
            Ensures prefix is HTTPS for Corporate basic users
            </summary>
        </member>
        <member name="E:VideoOS.Platform.Login.LoginSettings.TokenChangedEvent">
            <summary>
            This event is fired whenever the Token has changed.  This is used for active sessions that needs to be updated on the fly,
            this event can be used to re-pass on the token as it is renewed.
            
            Note: Use can also register for the LoginTokenChangedIndication for getting same information.
            </summary>		
        </member>
        <member name="E:VideoOS.Platform.Login.LoginSettings.RequestNewTokenEvent">
            <summary>
            Used internally to ask MIPSDK to perform a re-login
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Login.LoginSettings.FireRequestNewToken">
            <summary>
            This method can be called, to ask the MIPSDK to re-login.  Only used internally for revovery situations.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Login.LoginSettings.#ctor(System.Uri,System.Net.CredentialCache,System.Guid,System.String)">
            <summary>
            Store login settings for either Basic or Windows login to a specific server.
            The Guid is allowed to be updated after construction.
            </summary>
            <param name="uri"></param>
            <param name="credentialCache"></param>
            <param name="guid"></param>
            <param name="serverName"></param>
        </member>
        <member name="M:VideoOS.Platform.Login.LoginSettings.#ctor(System.Uri,System.Net.CredentialCache,System.Guid,System.String,System.String)">
            <summary>
            Store login settings for either Basic or Windows login to a specific server.
            The Guid is allowed to be updated after construction.
            </summary>
            <param name="uri"></param>
            <param name="credentialCache"></param>
            <param name="guid"></param>
            <param name="serverName"></param>
            <param name="serverType"></param>
        </member>
        <member name="M:VideoOS.Platform.Login.LoginSettings.#ctor(System.Uri,System.Net.NetworkCredential,System.Guid,System.String)">
            <summary>
            Store login settings for Windows login.  Please use the CredentialCache overloaded method when basic authentication is used.
            </summary>
            <param name="uri"></param>
            <param name="networkCredential"></param>
            <param name="guid"></param>
            <param name="serverName"></param>
        </member>
        <member name="M:VideoOS.Platform.Login.LoginSettings.#ctor(System.Uri,System.Net.NetworkCredential,System.Guid,System.String,System.String)">
            <summary>
            Store login settings for Windows login.  Please use the CredentialCache overloaded method when basic authentication is used.
            </summary>
            <param name="uri"></param>
            <param name="networkCredential"></param>
            <param name="guid"></param>
            <param name="serverName"></param>
            <param name="serverType"></param>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginSettings.Token">
            <summary>
            Hold the current valid token for the connection to a given server.<br/>
            If this property is blank, then it indicates that it was not possible to get a new token, or the server has rejected any further login.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginSettings.TokenTimeToLive">
            <summary>
            Indicates when the token is no longer valid.<br/>
            May not be supported in all environments, is DateTime.MinValue when not filled.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginSettings.UserIdentity">
            <summary>
            The Identity of the user that have logged in.
            The Identity cam be a user SID or a GUID if it is a basic user
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginSettings.UserName">
            <summary>
            The display name of the identity logged in.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginSettings.GroupMemberShip">
            <summary>
            Get all the group ID's that the user is a member of.
            The Group ID can be both AD-groups, and internally defined groups or roles.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginSettings.IsBasicUser">
            <summary>
            Return true if logged was done as basic authentication
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginSettings.UserInformation">
            <summary>
            Contains more details about the current user.  Some of the detailed fields are the same as are available in this class.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginSettings.FullyQualifiedUserName">
            <summary>
            Provides the fully qualified user name as required by certain server requests.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Login.LoginSettingsCache">
            <summary>
            Contains the cache of all LoginSettings currently in use by the Environment.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Login.LoginSettingsCache._loginSettings">
            <summary>
            When the initial loginSettings are added, the content may not be correct. This is therefor a List and not an indexed collection
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Login.LoginSettingsCache.AddLoginSettings(VideoOS.Platform.Login.LoginSettings)">
            <summary>
            Add a LoginSetting to the cache.  The cache holds information for logging in to all known servers.
            A plugin can also save it's own server side login, if it choose to.
            When working through the normal EnvironmentManager and Configuration classes, a plugin
            should not add any Milestone servers to this list, it is done automatically.
            </summary>
            <param name="loginSettings"></param>
        </member>
        <member name="M:VideoOS.Platform.Login.LoginSettingsCache.RemoveLoginSettings(VideoOS.Platform.Login.LoginSettings)">
            <summary>
            Remove a specific LoginSettings from the cache.
            Please only do this when all other references to the LoginSettings are gone.
            This method should only be used by internal MIP abstraction layers.
            </summary>
            <param name="loginSettings"></param>
        </member>
        <member name="M:VideoOS.Platform.Login.LoginSettingsCache.Clear">
            <summary>
            Clear the entire cache.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Login.LoginSettingsCache.LoginSettings">
            <summary>
            Get the complete list of all LoginSettings
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Login.LoginSettingsCache.GetLoginSettings(System.Guid)">
            <summary>
            Get one specific LoginSetting, indexed by Guid.
            Please note that before logon and configuration has been received from the server side,
            the Guid may not be filled. (It is then Guid.Empty)
            Note: It is recommended to use the FQID version whenever possible.
            </summary>
            <param name="serverGuid"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Login.LoginSettingsCache.GetLoginSettings(VideoOS.Platform.ServerId)">
            <summary>
            Get one specific LoginSetting, by use of different information in the ServerId.
            The lookup will try the to match the login settings by both Guid and a normalized Host from the Uri.
            Note: It is recommended to use the FQID version whenever possible.
            </summary>
            <param name="serverId"></param>
            <returns>LoginSettings or null if not found</returns>
        </member>
        <member name="M:VideoOS.Platform.Login.LoginSettingsCache.GetLoginSettings(System.String)">
            <summary>
            Get one specific LoginSetting.
            The lookup will try the to match the login settings by a normalized Host from the Uri using default port.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Login.LoginSettingsCache.GetLoginSettings(System.String,System.Int32)">
            <summary>
            Get one specific LoginSetting.
            The lookup will try the to match the login settings by a normalized Host from the Uri, using specified port.
            </summary>
            <param name="hostName"></param>
            <param name="port"></param>
            <returns>LoginSettings or null if not found</returns>
        </member>
        <member name="M:VideoOS.Platform.Login.LoginSettingsCache.GetLoginSettings(VideoOS.Platform.FQID)">
            <summary>
            Get one specific LoginSetting.
            The lookup will look for a login server id in the FQID.ServerId.Id, and all its parents.
            This method should be used when the Item is a camera, audio or any other single device.<br/>
            When connecting to XProtect Enterprise vs XProtect Corporate, the hierarchy of IDs is different - 
            and this method abstracts from these differences, as it looks for all relevant IDs in the hierarchy.
            </summary>
            <param name="fqid">The FQID of the Item you need the loginSettings for.</param>
            <returns>LoginSettings or null if not found</returns>
        </member>
        <member name="M:VideoOS.Platform.Login.LoginSettingsCache.GetNetworkCredential(VideoOS.Platform.ServerId)">
            <summary>
            Returns the NetworkCredential used for connecting to a specific server.<br/>
            If no LoginSettings is available for the given ServerId, then the EnvironmentManager.Instance.LoginNetworkCredential is returned.
            </summary>
            <param name="serverId">The server to get the NetworkCredentials for</param>
            <returns>The found NetworkCredential</returns>
        </member>
        <member name="T:VideoOS.Platform.Login.Util">
            <summary>
            A utility class to build user CredentialCache and NetworkCredential.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Login.Util.BuildCredentialCache(System.Uri,System.String,System.String,System.String)">
            <summary>
            Build a CredentialCache with a NetWorkCredential or DefaultCredential depending on the 
            authenticationType string.
            The username can be a simple name, a domain\\username or blank.  Blank indicates current
            credentials should be used.
            If no domain is entered the current machine default is used.
            </summary>
            <param name="uri">The server to use this credential for</param>
            <param name="username">Blank or user name possibly preceded with domain name</param>
            <param name="password">Password</param>
            <param name="authenticationType">Either "Basic" or "Negotiate" for Window type login</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Login.Util.BuildCredentialCache(System.Uri,System.String,System.Security.SecureString,System.String)">
            <summary>
            Build a CredentialCache with a NetWorkCredential or DefaultCredential depending on the 
            authenticationType string.
            The username can be a simple name, a domain\\username or blank.  Blank indicates current
            credentials should be used.
            If no domain is entered the current machine default is used.
            </summary>
            <param name="uri">The server to use this credential for</param>
            <param name="userName">Blank or user name possibly preceded with domain name</param>
            <param name="securePassword">Password</param>
            <param name="authenticationType">Either "Basic" or "Negotiate" for Window type login</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Login.Util.ToSecureString(System.String)">
            <summary>
            Utility method for making a SecureString from a normal string
            </summary>
            <param name="unsecureString"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Login.Util.BuildNetworkCredential(System.Uri,System.String,System.String,System.String)">
            <summary>
            Build a CredentialCache with a NetWorkCredential or DefaultCredential depending on the 
            authenticationType string. <br/>
            The username can be a simple name, a domain\\username or blank.  Blank indicates current
            credentials should be used.<br/>
            If no domain is entered the server machine will determine to use either it's domain or local defined user.<br/>
            Notice that when creating a "Basic" NetworkCredential, it must be added into a CredentialCache before it can be used. The CredentialCache should then be used for adding servers etc.
            </summary>
            <param name="uri">Not used</param>
            <param name="username">Blank or user name possibly preceded with domain name</param>
            <param name="password">Password</param>
            <param name="authenticationType">Either "Basic" or "Negotiate" for Window type login</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Login.Util.BuildNetworkCredential(System.String,System.Security.SecureString,System.String)">
            <summary>
            Build a CredentialCache with a NetWorkCredential or DefaultCredential depending on the 
            authenticationType string. <br/>
            The username can be a simple name, a domain\\username or blank.  Blank indicates current
            credentials should be used.<br/>
            If no domain is entered the server machine will determine to use either it's domain or local defined user.<br/>
            Notice that when creating a "Basic" NetworkCredential, it must be added into a CredentialCache before it can be used. The CredentialCache should then be used for adding servers etc.
            </summary>
            <param name="userName">Blank or user name possibly preceded with domain name</param>
            <param name="securePassword">Password</param>
            <param name="authenticationType">Either "Basic" or "Negotiate" for Window type login</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Login.Util.GetCredential(VideoOS.Platform.ServerId)">
            <summary>
            Retrieve relevant Credentials to be used for a given ServerId
            </summary>
            <param name="serverId"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Login.Util.GetHostName(System.String)">
            <summary>
            Pick out the servername from any Url or address string
            </summary>
            <param name="mixedUrl"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Login.Util.GetHostNameWithoutDomain(System.String)">
            <summary>
            Take out any postfix domain names
            </summary>
            <param name="mixedUrl"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.MIPException">
            <summary>
            The common Exception for all exceptions thrown by the MIP environment
            </summary>
        </member>
        <member name="M:VideoOS.Platform.MIPException.#ctor">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.MIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.MIPException.#ctor(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.MIPException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.ImplementationMIPException">
            <summary>
            Thrown when some part of the plug-in has not been implemented correctly.<br/>
            A fix is often possible by changing the code.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ImplementationMIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.InvalidParameterMIPException">
            <summary>
            Thrown when a parameter is not valid<br/>
            A fix is often possible by changing the code.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.InvalidParameterMIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.ValidateAndSaveMIPException">
            <summary>
            Can be thrown by the ValidateAndSaveUserControl and ValidateAndSaveItemSummary methods implemented by MIP Plug-ins, when the user entry is not correct.<br/>
            The management client/application will show a standard error dialog containing the message from the exception.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ValidateAndSaveMIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.NotAuthorizedMIPException">
            <summary>
            Throw by the SecurityAccess class when calling CheckPermission, or when using the configuration API and the server is accessed for an object
            that is not accessible for user that is logged in.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.NotAuthorizedMIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.NotAuthorizedMIPException.#ctor(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.ServerFaultMIPException">
            <summary>
            Is thrown by the server having internal issues. Can be thrown when using configuration api.
            
            Please check the server side logs for more information on the fault.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ServerFaultMIPException.#ctor">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ServerFaultMIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ServerFaultMIPException.#ctor(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ServerFaultMIPException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.NotDualAuthorizedMIPException">
            <summary>
            Throw by the Login process if server requires dual authentication 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.NotDualAuthorizedMIPException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:VideoOS.Platform.NotDualAuthorizedMIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.NotDualAuthorizedMIPException.#ctor(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.InternalMIPException">
            <summary>
            Throw by MIP Environment.  This may be a 'should not happen' and indicate some internal MIP implementation problem. 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.InternalMIPException.#ctor(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.ArgumentMIPException">
            <summary>
            Throw by MIP Environment when an argument is incorrect.  Check innerException for more info.
            
            When using the Configuration API, this exception represent a server side thrown exception.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ArgumentMIPException.#ctor(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ArgumentMIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ArgumentMIPException.#ctor">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ArgumentMIPException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.ArgumentNullMIPException">
            <summary>
            Throw by MIP Environment when an argument is null.  Check innerException for more info.
            
            When using the Configuration API, this exception can represent a server side thrown exception.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ArgumentNullMIPException.#ctor(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ArgumentNullMIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ArgumentNullMIPException.#ctor">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ArgumentNullMIPException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.NotSupportedMIPException">
            <summary>
            Throw by MIP Environment when calling a server that does not support the current method, check version of server side product.
            
            When using the Configuration API, this exception can represent a server side thrown exception.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.NotSupportedMIPException.#ctor(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.NotSupportedMIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.NotSupportedMIPException.#ctor">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.NotSupportedMIPException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.PathNotFoundMIPException">
            <summary>
            Throw by MIP Environment when calling a server that does not have a configurtion item corresponding to the provided path.
            
            When using the Configuration API, this exception can represent a server side thrown exception.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.PathNotFoundMIPException.#ctor(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.PathNotFoundMIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.PathNotFoundMIPException.#ctor">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.PathNotFoundMIPException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.LicenseMIPException">
            <summary>
            Throw by MIP Environment when the server license limit has been reached.  Ask operator to check Management Client license overview..
            
            When using the Configuration API, this exception represent a server side thrown exception.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.LicenseMIPException.#ctor(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.LicenseMIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.LicenseMIPException.#ctor">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.LicenseMIPException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.LicenseServiceMIPException">
            <summary>
            Throw when concurrent license check cannot get hold of the LicenseService.<br/>
            Check that the LicenseService is running in the EventServer, and that the ServiceRegistration
            contains the correct URL to this service.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.LicenseServiceMIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.LicenseServiceMIPException.#ctor(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.ClientTypeNotAllowedMIPException">
            <summary>
            Throw when the provided client type is not allowed to connect
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ClientTypeNotAllowedMIPException.#ctor">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ClientTypeNotAllowedMIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.ClientTypeNotAllowedMIPException.#ctor(System.String,System.Exception)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.CommunicationMIPException">
            <summary>
            Thrown when an underlaying protocol threw an Exception, or received a Serialized Exception from the server side.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.CommunicationMIPException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:VideoOS.Platform.CommunicationMIPException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:VideoOS.Platform.CommunicationMIPException.ErrorNumber">
            <summary>
            Milestone error number
            </summary>
        </member>
        <member name="P:VideoOS.Platform.CommunicationMIPException.SubErrorNumber">
            <summary>
            Milestone sub error number
            </summary>
        </member>
        <member name="P:VideoOS.Platform.CommunicationMIPException.ErrorCode">
            <summary>
            Protocol error
            </summary>
        </member>
        <member name="P:VideoOS.Platform.CommunicationMIPException.ExtraMessage">
            <summary>
            Text appended to the default message interpreting the errorcode information.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.CommunicationMIPException.FormatExtraMessage">
            <summary>
            Called when the error codes has been filled out to assist with additional text on the message
            </summary>
        </member>
        <member name="P:VideoOS.Platform.CommunicationMIPException.Message">
            <summary>
            Extend the base Message with an interpreted version of the errorcodes.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.TimeoutCommunicationMIPException">
            <summary>
            Thrown when a timeout has happened on an underlaying session.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.TimeoutCommunicationMIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.EndpointNotFoundCommunicationMIPException">
            <summary>
            Thrown when specified host address, URL or IP address does not exist or is not responding.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.EndpointNotFoundCommunicationMIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.MessageFilterNotRegisteredMIPException">
            <summary>
            Thrown when MessageCommunication is used, and the server does not have any filter registered.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.MessageFilterNotRegisteredMIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.NoVideoInTimeSpanMIPException">
            <summary>
            Thrown when an export is started, but video is available in the given time span.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.NoVideoInTimeSpanMIPException.#ctor(System.String)">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.MIPSoapErrorCode">
            <summary>
            Internal codes from VMS servers.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Background.BackgroundPlugin">
            <summary>
            A background plugin will be started during application start and be running until the user logs off or application terminates.<br/>
            The Environment will call the methods Init() and Close() when the user login and logout, 
            so the background task can flush any cached information.<br/>
            Don't read the plugin configuration in the Init() method, as it is not guaranteed to be ready at this time. Instead listen for the message
            with MessageId == Server.ConfigurationChangedIndication and load the configuration once this is received. It will be sent once configuration is ready
            and also no later than 60 seconds after configuration has been changed by the administrator.<br/>
            The base class implementation of the LoadProperties can get a set of configuration, 
            e.g. the configuration saved by the Options Dialog in the Smart Client or a configuration set saved in one of the administrators.  
            Identification of which configuration to get is done via the GUID.<br/>
            The SaveProperties method can be used if updating of configuration is relevant.<br/>
            The configuration is stored on the server the application is logged into, and should be refreshed when the ApplicationLoggedOn method is called.
            Configuration can be user private or shared with all users.<br/>
            <br/>
            Notice: For a plugin to be loaded and executed in the Event Server, at least one BackgroundPlugin MUST be defined.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Background.BackgroundPlugin.Id">
            <summary>
            Gets the unique id identifying this plugin component
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Background.BackgroundPlugin.Name">
            <summary>
            The name of this background plugin
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Background.BackgroundPlugin.Init">
            <summary>
            Called by the Environment when the user has logged in.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Background.BackgroundPlugin.Close">
            <summary>
            Called by the Environment when the user log's out.
            You should close all remote sessions and flush cache information, as the
            user might logon to another server next time.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Background.BackgroundPlugin.TargetEnvironments">
            <summary>
            Define in what Environments the current background task should be started.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Background.BackgroundPlugin.LoadProperties(System.Boolean)">
            <summary>
            Load the stored properties from the connected server. 
            </summary>
            <param name="userPrivate">set to true when properties are save for each user</param>
            <returns>true if Properties where found and false if this is a first time</returns>
        </member>
        <member name="M:VideoOS.Platform.Background.BackgroundPlugin.LoadSettingsXml(System.Guid)">
            <summary>
            From the management server, loads the XML for a specific global custom setting given by its GUID.
            This XML will typically have been stored by ToolsOptionsDialogPlugin.SaveSettingsXml
            </summary>
            <param name="id">The GUID for the global custom setting, typically a ToolsOptionsDialogPlugin.Id</param>
            <returns>The XML or null if no XML could be loaded. This might be caused by the Event Server not being connected to the Management Server yet.</returns>
        </member>
        <member name="M:VideoOS.Platform.Background.BackgroundPlugin.SaveProperties(System.Boolean)">
            <summary>
            Saves the values in the Properties on the connected server.<br/>
            When userPrivate is true, the content is for own use only.<br/>
            When userPrivate is false, the content is shared for all users
            connected to a server.
            </summary>
            <param name="userPrivate"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.Background.EventServerControl">
            <summary>
            This class only exist in the EventServer MIP Environment.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Background.EventServerControl.Instance">
            <summary>
            This class is a singleton and be accessed through the Instance property.
            The 'setter' is for internal use only.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Background.EventServerControl.CreateAlarm(VideoOS.Platform.Data.EventData)">
            <summary>
            Directly store an Event into the alarm database.  <br/>
            Rule handling for when to store in the alarm database must be carried out
            before calling this method.
            </summary>
            <param name="eventData"></param>
        </member>
        <member name="M:VideoOS.Platform.Background.EventServerControl.ItemStatusChanged(VideoOS.Platform.Item)">
            <summary>
            When operational state has changed this method can be called to get the MAP updated.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VideoOS.Platform.Background.EventServerControl.ItemContextMenuChanged(VideoOS.Platform.Item)">
            <summary>
            When the map alarm context menu has been changed this method can be called to get the MAP item updated.
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:VideoOS.Platform.WorkSpaceState">
            <summary>
            The available Smart Client work space states.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.WorkSpaceState.Normal">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.WorkSpaceState.Setup">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.ConfigItem">
            <summary>
            An overloaded class of the Item class.<br/>
            Can be subclassed when you want new MIP Items and modifications to existing MIP Items reflect into the mother environments settings.
            Used by the Smart Client when creating and modifying Views, layouts and view groups in the smart client.<br/>
            Used by the Administrators to create, modify and delete generic events.
            Only supported for e-code family! For c-code use Configuration API instead.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigItem.#ctor">
            <summary>
            Used internally in the Smart Client
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigItem.#ctor(VideoOS.Platform.FQID,System.String)">
            <summary>
            Used internally in the Smart Client
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigItem.#ctor(VideoOS.Platform.ServerId,System.String)">
            <summary>
            Used internally in the Smart Client
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigItem.#ctor(VideoOS.Platform.ServerId,System.String,VideoOS.Platform.FolderType,System.Guid)">
            <summary>
            Used internally in the Smart Client
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ConfigItem.GetChildren">
            <summary>
            Get the children of this item. The Kind of item returned may be of different Kind.<br/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigItem.AddChild(VideoOS.Platform.ConfigItem)">
            <summary>
            Add a new child to this Item. The child's Kind must be correct, and the parentId set to this item's ObjectId.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigItem.AddRangeChild(System.Collections.Generic.ICollection{VideoOS.Platform.ConfigItem})">
            <summary>
            Add a list of children to this Item. The children's Kind must be correct, and the parentId set to this item's ObjectId.
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigItem.AddChild(VideoOS.Platform.Item)">
            <summary>
            Add a new child to this Item. The child's Kind must be correct, and the parentId set to this item's ObjectId.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigItem.AddRangeChild(System.Collections.Generic.ICollection{VideoOS.Platform.Item})">
            <summary>
            Add a list of children to this Item. The children's Kind must be correct, and the parentId set to this item's ObjectId.
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigItem.AddChild(VideoOS.Platform.FQID,System.String)">
            <summary>
            Add a new child to this Item. The child's Kind must be correct, and the parentId set to this item's ObjectId.
            </summary>
            <param name="fqid"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigItem.AddChild(System.String,System.Guid,VideoOS.Platform.FolderType)">
            <summary>
            Add a new child to this Item. The child's Kind must be correct, and the parentId set to this item's ObjectId.
            </summary>
            <param name="name"></param>
            <param name="kind"></param>
            <param name="folderType"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ConfigItem.RemoveChild(VideoOS.Platform.Item)">
            <summary>
            Remove a child from this item. 
            </summary>
            <param name="childItem"></param>
        </member>
        <member name="M:VideoOS.Platform.ConfigItem.PropertiesModified">
            <summary>
            This method is used in the Smart Client to notify to the Smart Client that ViewLayouts and Views have changed and should be saved on the server.<br/>
            In standalone MIP environment, this is called when a preset name or position needs to change. (Current position of the camera is stored in the preset).
            </summary>
        </member>
        <member name="T:VideoOS.Platform.FQID">
            <summary>
            The Fully Qualified ID contains a complete set of fields to contact a server and get further details.
            The purpose is to identify an Item to the level where it contains enough information for contacting 
            the correct server, on a relevant protocol, and obtain further information for the item from that server.
            The key identification are build up of:<br/>
               1) ServerId.Id Guid - identify a specific server or set of configuration.<br/>
               2) ParentId Guid - the parent FQID will contain this in the ObjectId field<br/>
               3) ObjectId Guid - a unique id for this object (Item)<br/>
            If an FQID does not have a parent, the parentId is Guid.Empty<br/>
            To make lookup easier and to assist in displaying relevant selection choices for users, 
            the following type fields are present:<br/>
               1) FolderType - identify if this is some kind of grouping or collection <br/>
               2) Kind Guid - identifies what type of object this FQID identifies.<br/>
            The Kind class contains a set of predefined values for all Milestone known Kinds, e.g. Kind.Camera is assigned to FQIDs
            for cameras and groups of cameras.  <br/>
            <br/>
            Note: When some object cannot be identified by a Guid, but rather a string, the ObjectIdString can be used
            as an alternative to the ObjectId. It is though highly recommended to fill the ObjectId if possible.
            <br/>
            The FQID is primarily created by plug-in developed ItemManagers and during deserialization of configurations.
            <br/>
            This method is NOT intended for overrides, as MIP Environment need to be able to deserialize a XML string to 
            a correct FQID object.<br/>
            A camera sample for XProtect Corporate:<br/>
            - ServerId will be pointing to the Recorder, e.g.:<br/>
            ---- Id = Id of the recorder that has the camera <br/>
            ---- Type = ServerId.CorporateRecordingServerType ("XPCORS")<br/>
            ---- Host = "myRecorder.domain.domainext"<br/>
            ---- Port = 7563 - when using default<br/>
            - ParentId = Guid of the XProtect Corporate Recording Server<br/>
            - ObjectId = Id of the camera<br/>
            - ObjectIdString = null<br/>
            - Kind = Kind.Camera<br/>
            - FolderType = FolderType.No<br/>
            <br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.FQID.ServerId">
            <summary>
            Id of the server that owns the item identified by the FQID.  For cameras, microphones, outputs etc. the ServerId will 
            identify the recording server that handles the device.  In a XProtect Corporate system, the user-defined events, alerts and groups, the ServerId will point to the 
            Management Server.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.FQID.ParentId">
            <summary>
            The parent to this object, e.g. recorder ID for cameras, cameraId for PTZPresets
            </summary>
        </member>
        <member name="P:VideoOS.Platform.FQID.ObjectId">
            <summary>
            Id of the item itself (Except for Presets, see below)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.FQID.ObjectIdString">
            <summary>
            When the ID is not a Guid, e.g. a preset this ObjectIdString is filled with the name of the Preset.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.FQID.Kind">
            <summary>
            The type of this item.  Predefined Milestone Kinds are defined the class Kind.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.FQID.FolderType">
            <summary>
            Identifies is this FQID identifies a folder or a specific item. A specific item would a e.g. a camera or a microphone or 
            a plug-in defined item. A folder type can be FolderType.SystemDefined or FolderType.UserDefined - where the system defined 
            is used when one of the built-in folders are used, e.g. "All Cameras" on one physical recorder. While the user defined are used
            when an administrator has created a group of items.<br/>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.FQID.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:VideoOS.Platform.FQID.#ctor(VideoOS.Platform.ServerId,System.Guid,System.Guid,VideoOS.Platform.FolderType,System.Guid)">
            <summary>
            Create a FQID with a ServerId of the server that holds and object with id=ObjectId.
            If the ObjectId is a Camera, the parentId is a Recorder.
            If the ObjectId is a PTZ, the parentId is a Camera.
            
            If the object being defined is the server itself, both ObjectId and ParentId will be Guid.Empty.
            </summary>
            <param name="serverId">The id of the server the object is owned by</param>
            <param name="parentId">Points to a parent, if relevant</param>
            <param name="objectId">The specific id of the object on the server.  Guid.Empty for the server object itself</param>
            <param name="folderType">Defines if this object is a folder, e.g. contains children</param>
            <param name="kind">Identifies the type of this object</param>
        </member>
        <member name="M:VideoOS.Platform.FQID.#ctor(VideoOS.Platform.ServerId,System.Guid,System.String,VideoOS.Platform.FolderType,System.Guid)">
            <summary>
            Create a FQID with a ServerId of the server that holds and object with id=ObjectIdString.
            If the ObjectId is a PTZ, the parentId is the Id of a Camera.
            </summary>
            <param name="serverId">The id of the server the object is owned by</param>
            <param name="parentId">Points to a parent, if relevant</param>
            <param name="objectIdString">The specific id of the object on the server</param>
            <param name="folderType">Defines if this object is a folder, e.g. contains children</param>
            <param name="kind">Identifies the type of this object</param>
        </member>
        <member name="M:VideoOS.Platform.FQID.#ctor(VideoOS.Platform.ServerId,VideoOS.Platform.FolderType,System.Guid)">
            <summary>
            Builds the FQID from a ServerId.
            This can be used when instantiating a new FQID from a parent. 
            The ObjectId and ParentId should then be filled afterwards.
            </summary>
            <param name="serverId">Id of the server that holds the item</param>
            <param name="folderType">Identify if this is a folder with children</param>
            <param name="kind">Identifying the type of this item</param>
        </member>
        <member name="M:VideoOS.Platform.FQID.#ctor(VideoOS.Platform.ServerId)">
            <summary>
            Builds the FQID from a ServerId.
            This can be used when instantiating the FQID for a Server.		
            </summary>
            <param name="serverId">The id of the Server</param>
        </member>
        <member name="M:VideoOS.Platform.FQID.#ctor(System.String)">
            <summary>
            Builds the FQID from a XmlNode in String format representing the InnerXml. 
            The will normally be created by this class itself during a Serialization call, 
            either "Serialize" or "ToXmlNode"
            </summary>
            <remarks>
            This method will try to set the <see cref="P:VideoOS.Platform.ServerId.UserContext"/>
            to the value from a single user environment. If you are using a multi-user environment,
            use the <see cref="M:VideoOS.Platform.FQID.#ctor(System.String,VideoOS.Platform.UserContext)"/> constructor instead to set the user context
            to the correct instance.
            </remarks>
            <param name="xmlString">A string containing the XmlNode.InnerXml of a FQID</param>
        </member>
        <member name="M:VideoOS.Platform.FQID.#ctor(System.String,VideoOS.Platform.UserContext)">
            <summary>
            Builds the FQID from a XmlNode in String format representing the InnerXml. 
            The will normally be created by this class itself during a Serialization call, 
            either "Serialize" or "ToXmlNode"
            </summary>
            <param name="xmlString">A string containing the XmlNode.InnerXml of a FQID</param>
            <param name="context">The <see cref="T:VideoOS.Platform.UserContext"/> the FQID belongs to.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="xmlString"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="context"/> is null.</exception>
        </member>
        <member name="M:VideoOS.Platform.FQID.#ctor(System.Xml.XmlNode)">
            <summary>
            Builds the FQID from a XmlNode. The will normally be created by this class itself
            during a Serialization call, either "Serialize" or "ToXmlNode"
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:VideoOS.Platform.FQID.GetParent">
            <summary>
            Get the parent FQID to this FQID.
            This implementation will build the FQID from the current ServerId and set objectId = ParentId,
            and assume other fields are the same (FolderType, Kind).
            Note: Please use the GetItem method on the EnvironmentManager if an Item is to be used.
            Note 2: As it is assumed that the parent have same Kind as this FQID, this call will not always work.
            </summary>
            <returns>FQID of the parent, if it could be found</returns>
        </member>
        <member name="M:VideoOS.Platform.FQID.Clone">
            <summary>
            Make a new FQID with same value in all fields.
            Note: ServerId is also cloned in itself.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.FQID.GetHashCode">
            <summary>
            Creates a hash code based on internal Guids.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.FQID.Equals(System.Object)">
            <summary>
            Compares all fields in the FQID with the given parameter.
            </summary>
            <param name="fqid">The FQID to compare this with</param>
            <returns>true if they contain same values (They can be different instances)</returns>
        </member>
        <member name="M:VideoOS.Platform.FQID.EqualsIgnoreFolderType(System.Object)">
            <summary>
            Compares all fields in the FQID with the given parameter.
            This version of the Euqals will ignore the FolderType field.
            </summary>
            <param name="fqid">The FQID to compare this with</param>
            <returns>true if they contain same values (They can be different instances)</returns>
        </member>
        <member name="M:VideoOS.Platform.FQID.EqualGuids(System.Object)">
            <summary>
            Compares all the Guids from the this and the given FQID.<br/>
            ServerId can be null in either parts, and will be ignored in that case.
            If not null, then ServerId.Id, ParentId, ObjectId and Kind are compared.
            </summary>
            <param name="fqid"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.FQID.Contains(System.String)">
            <summary>
            Search through Kind, Object and ServerId to contain the match value.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.FQID.BuildFromXmlNode(System.Xml.XmlNode)">
            <summary>
            Instantiate FQID from a xmlNode.
            </summary>
            <param name="xmlNode"></param>
        </member>
        <member name="M:VideoOS.Platform.FQID.Serialize(System.Xml.XmlWriter)">
            <summary>
            Format the FQID into a XmlNode vi the provided XmlWriter.
            A sample format is: (Guids are incorrect)
            <code>
            	<FQID>
            		<ServerId>
            			<Type>XPCO</Type>
            			<Scheme>http</Scheme>
            			<Hostname>dksr-mgt-03.company.com</Hostname>
            			<Port>80</Port>
            			<Id>FD2AB85B-B944-448f-BAA9-CC4DCE1172FA</Id>
            		</ServerId>
            		<ParentId>FD2AB85B-B944-448f-BAA9-CC4DCE1172FA</ParentId>
            		<ObjectId>FD2AB85B-B944-448f-BAA9-CC4DCE1172FA</ObjectId>
            		<ObjectIdString></ObjectIdString>
            		<FolderType>No</FolderType>
            		<Kind>FD2AB85B-B944-448f-BAA9-CC4DCE1172FA</Kind>
            	</FQID>
            </code>
            </summary>
            <param name="xmlWriter"></param>
        </member>
        <member name="M:VideoOS.Platform.FQID.ToXmlNode">
            <summary>
            Format the FQID into a XmlNode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.FQID.ToString">
            <summary>
            Format the FQID into a displayable string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.ServerId">
            <summary>
            The ServerId holds enough information for creating a connection.<br/>
            Typically this can be used to construct an URL.<br/>
            For plug-in developed solutions the ServerId need to be understood by the plug-ins own
            ItemManager, as this class is the primary place for creating, deleting and getting Items.<br/>
            
            The ServerId.Id MUST always be present.<br/>
            
            For configurations saved on a Milestone server, the other fields are not used by the Environment but 
            only by the plug-ins own ItemManager.
            If a plug-in solution creates Items in one of the administrators, saves the configuration with the
            Milestone configuration and uses the created Items in the Smart Client or Event Server, the content of
            this ServerId is not really identifying a server but should be seen as the top node of the plug-in configuration.	
            
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ServerId.ServerType">
            <summary>
            The type of server owning the Item being identified.<br/>
            The Milestone VMS built-in server types are defined as const in this class.<br/>
            The ServerId.EnterpriseServerType ("XPE") will refer to type of communication type more then product type. 
            The XProtect Professional and XProtect Essential with MIP Enabled, will also have the ServerType as EnterpriseServerType.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ServerId.ServerScheme">
            <summary>
            The http scheme to be used, default is http:// 
            
            This field is new from 2019, introduced to support https sessions. 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ServerId.ServerHostname">
            <summary>
            The name or IP address of the server owning the item being identified.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ServerId.Serverport">
            <summary>
            The TCP/IP port for this server.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ServerId.Id">
            <summary>
            Id is the Guid that identify a specific server or set of configuration.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ServerId.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="P:VideoOS.Platform.ServerId.UserContext">
            <summary>
            Identifies a specific user context.  This is used when multiple users are logged on at the same time towards 
            the same set of servers.<br/>
            Field is initialized by the stand alone SDK Environment, and should not be modified by any application code.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ServerId.#ctor(System.String,System.String,System.Int32,System.Guid)">
            <summary>
            Create a ServerId with all fields present.
            </summary>
            <param name="type">The type of server.  
            For Milestone video management servers a set of ServerTypes have been defined:<br/>
              ServerId.EnterpriseServerType - A XProtect Enterprise server<br/>
              ServerId.CorporateManagementServerType - A XProtect Corporate Management server<br/>
              ServerId.CorporateRecordingServerType - A XProtect Corporate Recording server<br/>
              ServerId.DefaultServerType - A XProtect server, but type is not known.<br/>
            </param>
            <param name="hostname"></param>
            <param name="port"></param>
            <param name="id"></param>
        </member>
        <member name="M:VideoOS.Platform.ServerId.#ctor(System.String,System.String,System.String,System.Guid)">
            <summary>
            Overloaded version with port as a String.
            </summary>
            <param name="type"></param>
            <param name="hostname"></param>
            <param name="port"></param>
            <param name="id"></param>
        </member>
        <member name="M:VideoOS.Platform.ServerId.#ctor(System.String,System.String,System.String,System.Int32,System.Guid)">
            <summary>
            Overloaded construction to include scheme
            </summary>
            <param name="type"></param>
            <param name="scheme"></param>
            <param name="hostname"></param>
            <param name="port"></param>
            <param name="id"></param>
        </member>
        <member name="M:VideoOS.Platform.ServerId.#ctor(System.String,System.String,System.String,System.String,System.Guid)">
            <summary>
            Overloaded construction to include scheme and port as string
            </summary>
            <param name="type"></param>
            <param name="scheme"></param>
            <param name="hostname"></param>
            <param name="port"></param>
            <param name="id"></param>
        </member>
        <member name="M:VideoOS.Platform.ServerId.Clone">
            <summary>
            Create clone of this class itself.
            </summary>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.ServerId.Uri">
            <summary>
            Construct an Uri from the ServerHostname and ServerPort.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.ServerId.GetHashCode">
            <summary>
            Creates a hash code based on the ServerHostname.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ServerId.Equals(System.Object)">
            <summary>
            Compare this ServerId with the one given as parameter.<br/>
            A complete compare is done for each field, except the ServerHostname that is normalized before compare is done. 
            Normalization in this case will ignore leading 'http://', and convert 0.0.0.0 and 127.0.0.1 to 'localhost',
            as well as ignore the port and colon, before comparing.
            </summary>
            <param name="otherObject"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.ServerId.Contains(System.String)">
            <summary>
            Look through ServerHostName, ServerType and Id for a match.
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.ServerId.IsExportType">
            <summary>
            Returns true if this ServerType is one of the 3 Export types (BLK, PQZ, INI)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ServerId.DefaultServerType">
            <summary>
            Identifies a Milestone server, type unknown.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ServerId.EnterpriseServerType">
            <summary>
            Identifies a XProtect Enterprise, Professional and Essential server
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ServerId.CorporateManagementServerType">
            <summary>
            Identifies a XProtect Corporate management server
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ServerId.CorporateRecordingServerType">
            <summary>
            Identifies a XProtect Corporate recording server
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ServerId.ArcusServerType">
            <summary>
            Identifies an Arcus server
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ServerId.MobileServerType">
            <summary>
            Identifies a mobile server
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ServerId.BlkExportType">
            <summary>
            Accessing exported video in BLK database format
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ServerId.PqzExportType">
            <summary>
            Accessing exported video in PQZ database format
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ServerId.IniExportType">
            <summary>
            Accessing exported video in PQZ database format (multiple sources)
            </summary>
        </member>
        <member name="T:VideoOS.Platform.FolderType">
            <summary>
            Defines if this FQID is a single object or collection of objects, e.g. usually a group of same kind.
            Servers themselves are FolderType.SystemDefined, e.g. the top Item for 
            XProtect Enterprise, Corporate and Recording servers are considered SystemDefined.
            A user defined group in XProtect Corporate will have FolderType.UserDefined.
            
            This field is used by some of the UI components to select what Items to display.
            
            If a user selects to find a camera by logical hierarchy, then TreeNodes is displayed
            based on Items with FolderType.UserDefined while drilling down groups by pressing the plus sign.
            
            If a user selects to find a camera by physical hierarchy, then TreeNodes are displayed
            based on Items with FolderType.SystemDefined as this will show the Recorders, that again will contain
            all cameras for one recorder node being expanded.
            
            Plug-in developed items can choose to implement the top node as SystemDefined (The 'server' of
            their system), and all children as FolderType.UserDefined if grouping applies, and then FolderType.No
            for lowest Item in the hierarchy - the 'real' item.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.FolderType.No">
            <summary>
            Defines a specific item
            </summary>
        </member>
        <member name="F:VideoOS.Platform.FolderType.SystemDefined">
            <summary>
            Defines a folder as defined by the physical hierarchym e.g. Server/Recorder/Hardware
            </summary>
        </member>
        <member name="F:VideoOS.Platform.FolderType.UserDefined">
            <summary>
            Defines a folder that was defined as a device group
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Configuration">
            <summary>
            Configuration provides access to all configuration objects within the Milestone Platform.<br/>
            This covers well known Milestone objects like Cameras, Servers, Presets events etc, 
            but also 3rd party plug-in objects can be accessed though this interface.
            <br/>
            Access to this class is done via Configuration.Instance
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Configuration.Instance">
            <summary>
            This class only exists once and can be accessed through the Instance static field.
            Only use the 'get' access method.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Configuration.IsMIPItemSupported">
            <summary>
            Will return true for Corporate releases 12.3 (2018R3) or later.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Configuration.TraceItemConfigurationCache">
            <summary>
            Indicate if the ItemConfigurationCache should enable for tracing.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Configuration.ServerFQID">
            <summary>
            Identifies the server that the application is currently logged into.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Configuration.ServerName">
            <summary>
            The Name of the Server, if one exists. Otherwise the DNS name / IP address.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItems">
            <summary>
            All Items configured on this server. Only top nodes are returned initially.
            All the top level Items can be retrieved through the GetItem and GetItemAsync methods. 
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItemsSorted">
            <summary>
            As GetItems() sorted by item.Name;
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItems(VideoOS.Platform.ItemHierarchy)">
            <summary>
            All Items configured on this server. Only top nodes are returned initially.
            This method may take some time to perform, and should not be called from a UI thread.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItemsSorted(VideoOS.Platform.ItemHierarchy)">
            <summary>
            As GetItems(itemHierarchy) sorted by item.Name;
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItemsAsync(VideoOS.Platform.AsyncItemsHandler,System.Windows.Forms.Control,System.Object)">
            <summary>
            All Items configured on this server. Only top nodes are returned initially, with items matching ItemHierarchy.UserDefined.
            If the control parameter is supplied, the asyncItemsHandler is Invoked on that control, ensuring that the called method is executing on the correct Thread.
            <param name="asyncItemsHandler">The handler to be called with the result</param>
            <param name="control">If supplied, the UI Control to execute the asynchronous handler on</param>
            <param name="callerReference">Any object the caller may need to interpret the result.</param>
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItem(VideoOS.Platform.FQID)">
            <summary>
            Get one specific item by its fully-Qualified ID.
            </summary>
            <param name="fqid">The ID of the item to lookup</param>
            <returns>An Item identified by the FQID or null if not identified/found</returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItem(System.Guid,System.Guid)">
            <summary>
            Get one specific Item, based on its ObjectId (the Guid), and the Kind of Item.
            The Kind is supplied to speedup the lookup method.
            </summary>
            <param name="objectId">The unique ID of this Item</param>
            <param name="kind">The Kind of the Item</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItem(VideoOS.Platform.ServerId,System.Guid,System.Guid)">
            <summary>
            Get one specific Item, based on its ObjectId (the Guid), the Kind of Item, and the Server it is located on.
            The Kind and ServerId is supplied to speedup the lookup method.
            </summary>
            <param name="serverId">The ID of the server where this Item is located</param>
            <param name="objectId">The unique ID of this Item</param>
            <param name="kind">The Kind of Item</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItemAsync(VideoOS.Platform.FQID,VideoOS.Platform.AsyncItemHandler,System.Windows.Forms.Control,System.Object)">
            <summary>
            Lookup one specific item by its fully-Qualified ID
            </summary>
            <param name="fqid">The ID of the item to lookup</param>
            <param name="asyncItemHandler">The handler to be called with the result</param>
            <param name="control">If supplied, the UI Control to execute the asynchronous handler on</param>
            <param name="callerReference">Any object the caller may need to interpret the result.</param>
            <returns>An Item for this item</returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItemsByKind(System.Guid)">
            <summary>
            Return the top level list of items having the specified Kind. The returned list will often contain Server Items or folder type Items, as they in turn contain Items of the specified Kind.
            </summary>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItemsByKindSorted(System.Guid)">
            <summary>
            As GetItemsByKind(kind) sorted by item.Name;
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItemsByKind(System.Guid,VideoOS.Platform.ItemHierarchy)">
            <summary>
            Return the top level list of items having the specified Kind.
            the ItemHierarchy specify which hierarchy to return, user defined groups or physical hierarchy.
            </summary>
            <param name="kind">Identifies the Kind we are looking for</param>
            <param name="itemHierarchy">Used to specify that the returned Item should ONLY contain children that are from the defined ItemHierarchy.</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItemsByKindSorted(System.Guid,VideoOS.Platform.ItemHierarchy)">
            <summary>
            As GetItemsByKind(kind,itemHierarchy) sorted by item.Name;
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItemsBySearch(System.String,System.Int32,System.Int32,VideoOS.Platform.SearchResult@)">
            <summary>
            Initiates a search for Items that can match a text. Generally the name and properties will be searched.
            These methods will perform a slow search through all Items to identify the ones matching the search text. 
            If the number of matches exceeds the specified limit, or if the elapsed time is exceeded 
            the return handler will be called with a result indicating the reason for stopping.
            If a successful number of Items are found within a reasonable time, the handler is called with a result of OK.
            <br/>
            This method may take some time to perform, and should not be called from a UI thread.
            </summary>
            <param name="searchText">A phrase to search for</param>
            <param name="maxCount">Only return of the total count is less then this number</param>
            <param name="maxSeconds">Max seconds to process this request</param>
            <param name="searchResult">Explains the reason for the result, e.g. timeout or a list of relevant Items</param>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItemsBySearchAsync(System.String,System.Int32,System.Int32,VideoOS.Platform.AsyncItemsSearchHandler,System.Windows.Forms.Control,System.Object)">
            <summary>
            Initiates a search for Items that can match a text. Generally the name will be searched.
            These methods will perform a slow search through all Items to identify the ones matching the search text. 
            If the number of matches exceeds the specified limit, or if the elapsed time is exceeded 
            the return handler will be called with a result indicating the reason for stopping.
            If a successful number of Items are found within a reasonable time, the handler is called with a result of OK.
            </summary>
            <param name="searchText">A phrase to search for</param>
            <param name="maxCount">Only return of the total count is less then this number</param>
            <param name="maxSeconds">Max seconds to process this request</param>
            <param name="asyncItemsHandler">The method to get the result</param>
            <param name="control">The Control the method is executed on</param>
            <param name="callerReference">Some call relevant class</param>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItemConfigurations(System.Guid,VideoOS.Platform.Item,System.Guid)">
            <summary>
            Retrieve a list of items with a specific Kind and located under a specific parentItem.
            If the parentItem is null, then all Items of this Kind is returned.  
            It should be noted that the returned Items are constructed from the base Item class.
            If your implementation needs its own Item classes, you need to convert the result to your type of class. For example:<br/>
            <code><![CDATA[
            List<Item> result = GetItemConfiguration(...);
            List<Item> myResult = new List<Item>();
            foreach (Item item in result)
            {
                myResult.Add(new MyItem(item.FQID, item.Name, item.Properties));
            }
            ]]>
            </code>
            <br/>
            As explained elsewhere, you may need your own class to implement e.g. GetChildren() and GetParent()
            </summary>
            <param name="pluginDefinitionId">The plug-in owner of the configuration</param>
            <param name="parentItem">Identify the Item that is parent to the one we are looking for.  If parentItem is null, then there are no parent.</param>
            <param name="itemKind">The Kind of Items to get</param>
            <returns>A list of all the configuration Items matching the parameters.
            If no nodes exists a list of zero entries is returned</returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItemConfigurations(VideoOS.Platform.ServerId,System.Guid,VideoOS.Platform.Item,System.Guid)">
            <summary>
            Retrieve a list of items with a specific Kind and located under a specific parentItem. 
            This overloaded method loads the configuration from a specific server as identified by the ServerId.
            </summary>
            <param name="pluginDefinitionId">The plug-in owner of the configuration</param>
            <param name="parentItem">Identify the Item that is parent to the one we are looking for.  If parentItem is null, then there are no parent.</param>
            <param name="itemKind">The Kind of Items to get</param>
            <param name="serverId">Identify the server where the configuration is located</param>
            <returns>A list of all the configuration Items matching the parameters.
            If no nodes exists a list of zero entries is returned</returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItemConfiguration(System.Guid,System.Guid,System.Guid)">
            <summary>
            Retrieve one item of a specific Kind and with a specific objectId.  Also see comment on GetItemConfiguration about converting to own class.
            </summary>
            <param name="pluginDefinitionId">The plug-in owner of the configuration</param>
            <param name="itemKind">The ID of the ItemNode</param>
            <param name="objectId">The specific id of the Item to get</param>
            <returns>The found Item. If no nodes exists null is returned</returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItemConfiguration(VideoOS.Platform.ServerId,System.Guid,System.Guid,System.Guid)">
            <summary>
            Retrieve one item of a specific Kind and with a specific objectId.  Also see comment on GetItemConfiguration about converting to own class.
            </summary>
            <param name="pluginDefinitionId">The plug-in owner of the configuration</param>
            <param name="itemKind">The ID of the ItemNode</param>
            <param name="objectId">The specific id of the Item to get</param>
            <param name="serverId">Identify the server the configuration is located</param>
            <returns>The found Item. If no nodes exists null is returned</returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItemConfigurationDataVersion(System.Guid)">
            <summary>
            Return the DataVersion of the currently loaded configuration for a given Kind.<br/>
            If it is not loaded, then 0 is returned.
            </summary>
            <param name="itemKind"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItemConfigurationDataVersion(VideoOS.Platform.ServerId,System.Guid)">
            <summary>
            Return the DataVersion of the currently loaded configuration for a given Kind.<br/>
            If it is not loaded, then 0 is returned.
            </summary>
            <param name="serverId"></param>
            <param name="itemKind"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetItemConfigurationLastModified(VideoOS.Platform.ServerId,System.Guid)">
            <summary>
            Get the DateTime for the latest update to a given kind
            </summary>
            <param name="serverId"></param>
            <param name="kind"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.SaveItemConfiguration(System.Guid,VideoOS.Platform.Item)">
            <summary>
            Call this to notify the system that there is configuration to be saved for the Item.
            
            Note that the serialization method serializes the Item base class, make sure that any fields that need to be saved are stored in the Properties Dictionary.
            
            This method is only implemented in the Management Client, Event Server and standalone SDK (not in Smart Client).
            </summary>
            <param name="pluginDefinitionId">The plug-in owner of the configuration</param>
            <param name="item">The Item to save</param>
        </member>
        <member name="M:VideoOS.Platform.Configuration.SaveItemConfiguration(VideoOS.Platform.ServerId,System.Guid,VideoOS.Platform.Item)">
            <summary>
            Save one Item's configuration.
            Note that the serialization method serializes the Item base class, make sure that any fields that need to be saved are stored in the Properties Dictionary.
            
            This method is only implemented in the Management Client, Event Server and standalone SDK (not in Smart Client).
            </summary>
            <param name="serverId">Identify the server the configuration is located</param>
            <param name="pluginDefinitionId">The plug-in owner of the configuration</param>
            <param name="item">The Item to save</param>
        </member>
        <member name="M:VideoOS.Platform.Configuration.DeleteItemConfiguration(System.Guid,VideoOS.Platform.Item)">
            <summary>
            Delete configuration for one Item
            
            This method is only implemented in the Management Client and Event Server (not in Smart Client and standalone SDK).
            </summary>
            <param name="platformDefinitionId"></param>
            <param name="item">The Item to delete</param>
        </member>
        <member name="M:VideoOS.Platform.Configuration.DeleteItemConfiguration(VideoOS.Platform.ServerId,System.Guid,VideoOS.Platform.Item)">
            <summary>
            Delete configuration for one Item
            
            This method is only implemented in the Management Client and Event Server (not in Smart Client and standalone SDK).
            </summary>
            <param name="serverId">Identify the server the configuration is located</param>
            <param name="platformDefinitionId"></param>
            <param name="item">The Item to delete</param>
        </member>
        <member name="M:VideoOS.Platform.Configuration.RefreshConfiguration(System.Guid)">
            <summary>
            This call will clear current cache and next Get operation will request a new copy from the server.		
            </summary>
            <param name="kind">Kind of items to flush</param>
        </member>
        <member name="M:VideoOS.Platform.Configuration.RefreshConfiguration(VideoOS.Platform.ServerId,System.Guid)">
            <summary>
            This call will clear current cache of items from a specific server, and next Get operation will request a new copy from the server.		
            </summary>
            <param name="kind">Kind of items to flush</param>
            <param name="serverId">Server ID of items to flush</param>
        </member>
        <member name="M:VideoOS.Platform.Configuration.BeginMassUpdate">
            <summary>
            Calling this method will suspend updating the UI for every change done to the configuration.
            When issuing many SaveItemConfiguration or DeleteItemConfiguration, this method can be called to speed up the changes.
            Always call the EndMassUpdate() when complete to get the UI updated.
            This method is only relevant when executing in one of the administrator environments.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Configuration.EndMassUpdate">
            <summary>
            Is called when updated of many items is complete. 
            The UI will be refreshed to reflect the changes been done while the BeginMassUpdate has been called.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetOptionsConfiguration(System.Guid,System.Boolean)">
            <summary>
            This method returns the configuration created in the Smart Client’s options dialog.<br/>
            It is intended to be used together with Client.OptionsDialogPlugin class to get previous defined configuration.<br/>
            The configuration can be saved for use by all users or be saved for each user.  One plug-in can store as many sets of configuration as it needs by defining and using multiple guid’s.<br/>
            The actual configuration is stored on the server the smart client or the SDK, is currently logged into.<br/>
            Note that option dialogs are now supported with MIP v3 in the administrators, and that these dialogs can choose to use the GetOptionsConfiguration and SaveOptionsConfiguration methods. 
            When doing so, please ALSO add the guids used in this call on the PluginDefinition.OptionDialogGuids to define what Guids to pre-load in the administrator.
            </summary>
            <param name="optionsDialogId"></param>
            <param name="userPrivate"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.SaveOptionsConfiguration(System.Guid,System.Boolean,System.Xml.XmlNode)">
            <summary>
            This method works in conjunction with the GetOptionsConfiguration method, to save a configuration.<br/>
            The Client.OptionsDialogPlugin class has built-in methods that use these two methods.
            Even though these methods are designed to support saving configuration defined on the Smart Client’s option dialog, 
            a plugin could utilize these methods for saving any relevant configuration or settings that the plug-in may need to share 
            with other users or have common for the same user – no matter where that user connects from.<br/>
            Note that option dialogs are now supported with MIP v3 in the administrators, and that these dialogs can choose to use the GetOptionsConfiguration and SaveOptionsConfiguration methods. 
            </summary>
            <param name="optionsDialogId"></param>
            <param name="userPrivate"></param>
            <param name="xmlNode"></param>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetAssociatedProperties(VideoOS.Platform.Item,System.Guid)">
            <summary>
            Get the properties that is associated with item, for the pluginId.
            
            This is intended to be configured on the user control provided via the TabPlugin, and used anywhere.
            </summary>
            <param name="item"></param>
            <param name="pluginId"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.SaveAssociatedProperties(VideoOS.Platform.Admin.AssociatedProperties)">
            <summary>
            Will save the associated properties on the VMS server, for use by any relevant application.
            </summary>
            <param name="associatedProperties"></param>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetRegisteredServiceUriInfo(VideoOS.Platform.ServerId)">
            <summary>
            Get all Registered services on from server identified by ServerId.
            </summary>
            <param name="serverId">Identifies the server to be contacted</param>
            <returns></returns>
            <exception cref="T:VideoOS.Platform.CommunicationMIPException">When unable to contact the registration service</exception>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetRegisteredServiceUriInfo(System.Guid,VideoOS.Platform.ServerId)">
            <summary>
            Get all Registered services on from server identified by ServerId, that has a specific serviceType.
            Built in service types are:
            	MAPServiceType
            	LogServiceType
             </summary>
            <param name="serviceType"></param>
            <param name="serverId">Identifies the server to be contacted</param>
            <returns></returns>
            <exception cref="T:VideoOS.Platform.CommunicationMIPException">When unable to contact the registration service</exception>
        </member>
        <member name="M:VideoOS.Platform.Configuration.RegisterServiceUri(System.Guid,VideoOS.Platform.ServerId,System.Guid,System.Uri,System.String,System.String,System.String)">
            <summary>
            Register own service on a login server. 
            Can be used when your have multiple servers involved in performing a CPU heavy task, and still want to access all
            servers from the different plug-ins. 
            </summary>
            <param name="serviceType"></param>
            <param name="serverId"></param>
            <param name="instance"></param>
            <param name="uri"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="customData"></param>
            <exception cref="T:VideoOS.Platform.CommunicationMIPException">When unable to contact the registration service</exception>
        </member>
        <member name="M:VideoOS.Platform.Configuration.RegisterServiceUri(System.Guid,VideoOS.Platform.ServerId,System.Guid,System.Uri,System.String,System.String,System.String,System.Collections.Generic.List{VideoOS.Platform.Configuration.RegistrationServiceEndpoint})">
            <summary>
            Register own service on a login server. 
            Can be used when your have multiple servers involved in performing a CPU heavy task, and still want to access all
            servers from the different plug-ins. 
            </summary>
            <param name="serviceType"></param>
            <param name="serverId"></param>
            <param name="instance"></param>
            <param name="uri"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="customData"></param>
            <param name="endpoints"></param>
            <exception cref="T:VideoOS.Platform.CommunicationMIPException">When unable to contact the registration service</exception>
        </member>
        <member name="M:VideoOS.Platform.Configuration.UnRegisterServiceUri(VideoOS.Platform.ServerId,System.Guid)">
            <summary>
            UnRegister own service from a server
            </summary>
            <param name="serverId"></param>
            <param name="instance"></param>
            <exception cref="T:VideoOS.Platform.CommunicationMIPException">When unable to contact the registration service</exception>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetViewGroups">
            <summary>
            Returns the list of available viewgroups designed for Smart Client usage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Configuration.GetViewGroup(System.Guid)">
            <summary>
            Returns the content of one ViewGroup
            </summary>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="F:VideoOS.Platform.Configuration.ConfigurationApiManager">
            <summary>
            Reserved for internal use (Expected to be public later)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Configuration.MAPServiceType">
            <summary>
            The type for the Event and MAP service
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Configuration.MAPServiceId">
            <summary>
            The type for the Event and MAP service
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Configuration.LogServiceType">
            <summary>
            The type for the Log service
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Configuration.LogServiceId">
            <summary>
            The type for the Event and MAP service
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Configuration.ServiceURIInfo">
            <summary>
            The information stored for each services
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Configuration.ServiceURIInfo.Type">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Configuration.ServiceURIInfo.Instance">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Configuration.ServiceURIInfo.UriArray">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Configuration.ServiceURIInfo.Name">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Configuration.ServiceURIInfo.Description">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Configuration.ServiceURIInfo.Trusted">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Configuration.ServiceURIInfo.ServiceData">
            <summary>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Configuration.ServiceURIInfo.Endpoints">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Configuration.RegistrationServiceEndpoint">
            <summary>
            Defines one individual endpoint, contained within some service.
            Multiple Endpoints are relevant for e.g. support of multiple Authentication types or multiple Uri's.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Configuration.RegistrationServiceEndpoint.Authentication">
            <summary>
            Defines the authentication type: "Basic", "Windows"
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Configuration.RegistrationServiceEndpoint.Description">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Configuration.RegistrationServiceEndpoint.Name">
            <summary>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Configuration.RegistrationServiceEndpoint.Uri">
            <summary>
            </summary>
        </member>
        <member name="T:VideoOS.Platform.SearchResult">
            <summary>
            SearchResult is used by the GetItemsBySearchAsync method to indicate the result of the command.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.SearchResult.CountExceeded">
            <summary>
            Search stopped because it found too many matching items.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.SearchResult.TimeExceeded">
            <summary>
            Search stopped bacause it took too long.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.SearchResult.OK">
            <summary>
            Search found some matching Items.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.SearchResult.Error">
            <summary>
            An internal error occurred, please check log file
            </summary>
        </member>
        <member name="T:VideoOS.Platform.ItemHierarchy">
            <summary>
            When getting items, the ItemHierarchy is used to specify which hierarchy to return.
            The UserDefined hierarchy returns user defined groups and content , when possible.
            The SystemDefined hierarchy returns ManagementServer, Recorderer, Items.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ItemHierarchy.UserDefined">
            <summary>
            The hierarchy defined via the device groups in the Management Client.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ItemHierarchy.SystemDefined">
            <summary>
            The hierarchy defined via the recorders and devices on that recorder
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ItemHierarchy.Both">
            <summary>
            Both hierarchys, with top level server available 2 times.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.AsyncItemsSearchHandler">
            <summary>
            Defines how a Handler for a Search Result looks like.
            </summary>
            <param name="items">The actual found Items that matches the search criteria.</param>
            <param name="callerReference">User defined reference.</param>
            <param name="result">Identifies how the search stopped, e.g. hitting a limit or with content.</param>
        </member>
        <member name="T:VideoOS.Platform.AsyncItemsHandler">
            <summary>
            Defines how a Handler for retrieving multiple Items looks like.
            </summary>
            <param name="items">The result</param>
            <param name="callerReference">A user defined object that can be used for interpreting the result.</param>
        </member>
        <member name="T:VideoOS.Platform.AsyncItemHandler">
            <summary>
            Defines how a Handler for retrieving a single Item looks like.
            </summary>
            <param name="item">The Item, or null if not found</param>
            <param name="callerReference">A user defined object that can be used for interpreting the result.</param>
        </member>
        <member name="T:VideoOS.Platform.Item">
            <summary>
            This class is used as a base class of all objects and items, be it cameras, audio sources
            or plug-in developed objects.
            For simple Items that does not have any Children this base class itself can be used,
            often though you will need to implement a class that inherit from this Item and make 
            overrides to GetChildren, HasChildren, GetParent and perhaps more methods.
            
            An item is identified by a FQID.  
            Only very few fields and methods are defined on an Item.  
            The Name is the user defined name of the Item, usually entered by an administrator, in a few items the internal Id and Name are the same, e.g. Presets.
            
            The Properties Dictionary contains a set of properties, and it is up to the implementer of a given Item to choose what fields to expose.
            If your plug-in does not have any relevant field, the Properties property can be empty.  All keys and values are Strings. 
            Keys are suggested to be letters only, first character in word to be capital, rest lowercase.  
            Multi-word keys should uppercase each start of a new word with no space or special character in between.
            Already abbreviated words may be kept in capital, e.g. “IPAddress”.
            
            If the Item knows that no children are present, the HasChildren property is set to HasChildren.No. 
            If Item does not know yet how many children are present, the HasChildren should be set to HasChildren.Maybe, and during the GetChildren or GetChildrenAsync call it is allowed to return an empty list.
            The GetChildren and GetChildrenAsync returns a list of children Items.
            
            Related property is used to provide a list of relevant related Items, e.g. a Camera can have a microphone and a speaker as related Items. 
            An access control device can have a camera as a related Item.
            
            Note: Presets for a camera are accessed as children to the camera Item (And not as related Items).
            
            A plug-in defined Item is managed by the plug-ins own ItemManager.
            
            When implementing your own plug-in defined Items based on this Item, please note that the MIP Environment functions for
            serializing and deserializing Items only handles the fields defined in this base class.
            If you select to save your configuration on a Milestone server, then ONLY store extra fields in 
            the properties Dictionary, to ensure serialize and deserialize will contain all fields.
            New methods can then be implemented to ease access to the fields stored in the Dictionary.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Item._hasRelated">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Item._anyChildren">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Item._related">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Item._children">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.Item._isChildrenUsed">
            <summary/>
        </member>
        <member name="M:VideoOS.Platform.Item.#ctor">
            <summary>
            Create a new Item. The FQID needs to be set afterwards.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Item.#ctor(VideoOS.Platform.FQID,System.String)">
            <summary>
            Create a new Item including FQID and the items Name.  Other properties can be set afterwards.
            </summary>
            <param name="fqid"></param>
            <param name="name"></param>
        </member>
        <member name="M:VideoOS.Platform.Item.#ctor(VideoOS.Platform.ServerId,System.String)">
            <summary>
            Create a new Item, a FQID containing the ServerId is created.  
            Important: You will need to fill the FQIDs parentId, ObjectId or ObjectString and Kind afterwards.
            </summary>
            <param name="serverId"></param>
            <param name="name"></param>
        </member>
        <member name="M:VideoOS.Platform.Item.#ctor(VideoOS.Platform.ServerId,System.String,VideoOS.Platform.FolderType,System.Guid)">
            <summary>
            Create a new Item. A FQID is created from the provided fields.
            Important: You will need to fill the FQIDs ObjectId or ObjectIdString afterwards to have a valid FQID.
            </summary>
            <param name="serverId"></param>
            <param name="name"></param>
            <param name="folderType"></param>
            <param name="kind"></param>
        </member>
        <member name="M:VideoOS.Platform.Item.#ctor(VideoOS.Platform.ServerId,System.Guid,System.Guid,System.String,VideoOS.Platform.FolderType,System.Guid)">
            <summary>
            Create a new Item. A FQID is created from the provided fields. 
            No further fields needs to be filled to have a valid Item and FQID.
            </summary>
            <param name="serverId"></param>
            <param name="parentId"></param>
            <param name="objectId"></param>
            <param name="name"></param>
            <param name="folderType"></param>
            <param name="kind"></param>
        </member>
        <member name="M:VideoOS.Platform.Item.#ctor(VideoOS.Platform.ServerId,System.Guid,System.String,System.String,VideoOS.Platform.FolderType,System.Guid)">
            <summary>
            Create a new Item. A FQID is created from the provided fields. 
            No further fields needs to be filled to have a valid Item and FQID.
            </summary>
            <param name="serverId"></param>
            <param name="parentId"></param>
            <param name="objectIdString"></param>
            <param name="name"></param>
            <param name="folderType"></param>
            <param name="kind"></param>
        </member>
        <member name="M:VideoOS.Platform.Item.#ctor(VideoOS.Platform.ConfigurationItems.MIPItem)">
            <summary>
            Construct an Item from the MIPItem retrieved via the Configuration API
            </summary>
            <param name="mipItem"></param>
        </member>
        <member name="P:VideoOS.Platform.Item.FQID">
            <summary>
            The Fully Qualified ID of this Item.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Item.Name">
            <summary>
            The Display Name of this Item.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Item.SetChildren(System.Collections.Generic.List{VideoOS.Platform.Item})">
            <summary>
            This method can be used when the base Item class is used, and it contains children's.
            This method will NOT add the children to any servers or configuration, but is merely to simplify instantiation.
            The children set by this method is what is returned by the GetChildren method.
            You should only use this way of implementing an Item, if the number of children is limited.
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:VideoOS.Platform.Item.GetParent">
            <summary>
            Get the parent Item to this Item
            This implementation will build the FQID from the current ServerId and set objectId = ParentId,
            and assume other fields are the same (FolderType, Kind).  If not found it will try with Kind = Kind.Server
            </summary>
            <returns>Item of the parent, if it could be found</returns>
        </member>
        <member name="P:VideoOS.Platform.Item.HasChildren">
            <summary>
            Inform if this Item contains children.  If the property is no, then no children
            should be available.  If the property is yes, there will normally be children, but 
            it is not a requirement.
            This property is used to improve the UI when displaying TreeView controls to avoid
            the (+) plus sing for expanding items, that does not have any children.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Item.GetChildren">
            <summary>
            Return a list of Children of this Item.
            Implementation not required.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Item.GetChildrenSorted">
            <summary>
            Same as GetChildren, just sorted by name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Item.GetChildrenAsync(VideoOS.Platform.AsyncItemsHandler,System.Windows.Forms.Control,System.Object)">
            <summary>
            Initiates a call to retrieve all Children for the item.
            The AsyncItemHandler will be called with the result.
            
            Implementation not required.
            If not implemented, the default implementation will simply call the GetChildren() 
            method and user the parameters to call be on directly. E.g. executed in the callers thread.
            </summary>
            <param name="asyncItemsHandler">The Async Handler to retrieve the list of Children</param>
            <param name="control">The Forms.Control to execute on.</param>
            <param name="callerReference">Any object the called need to synchronize the call and the result.</param>
        </member>
        <member name="P:VideoOS.Platform.Item.Icon">
            <summary>
            Icon used for ViewAndLayout items in the Smart Client.<br/>
            The Icon represent a given layout.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Item.MapIconKey">
            <summary>
            Identified what Icon to display on the Map.<br/>
            A value of Guid.Empty or this Items Kind will use the default MapIcon on the ItemNode.<br/>
            Otherwise the value is the key into the MapIconDictionary on the ItemNode class.<br/>
            Note: Supported from EventServer version 3.0
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Item.GetDataSource">
            <summary>
            Get the DataSource relevant for this Item type.<br/>
            If no DataSource is available for this Item, a null value is returned.<br/>
            <br/>
            This can for instance be used for retrieving Sequence information for a Camera Item.
            </summary>
            <returns>The default DataSource for the item, or null is none supported</returns>
        </member>
        <member name="P:VideoOS.Platform.Item.HasRelated">
            <summary>
            Inform if this Item contains children.  If the property is no, then no children
            should be available.  If the property is yes, there will normally be children, but 
            it is not a requirement.<br/>
            This property is used to improve the UI when displaying TreeView controls to avoid
            the (+) plus sing for expanding items, that does not have any children.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Item.GetRelated">
            <summary>
            Return a list of Related Items for this Item.<br/>
            Could e.g. be Audio devices to a Camera.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Item.GetRelatedAsync(VideoOS.Platform.AsyncItemsHandler,System.Windows.Forms.Control,System.Object)">
            <summary>
            Initiates a call to retrieve all Related items for the item.<br/>
            The AsyncItemHandler will be called with the result.
            </summary>
            <param name="asyncItemsHandler">The Async Handler to retrieve the list of related items</param>
            <param name="control">The Forms.Control to execute on.</param>
            <param name="callerReference">Any object the called need to synchronize the call and the result.</param>
        </member>
        <member name="P:VideoOS.Platform.Item.Properties">
            <summary>
            Returns a set of selected properties for the Item.
            Can also return null, if implementation has no relevant properties for this type of Item.<br/>
            For built-in items, the available properties depends on the Kind of item, where it is accessed (e.g. Management Client/Application or Smart Client/Standalone).<br/>
            <br/>
            A item containing a Camera, Recorder or a Server contains the most properties.<br/>
            
            Sample: A camera item retrieved in a standalone application, could be:
               PTZ : Yes<br/>
               PTZCenter = No<br/>
               PTZRectangle = Yes<br/>
               PTZHome = Yes <br/>
               pan = Absolute<br/>
               tilt = Absolute<br/>
               zoom = Absolute<br/>
            
            In the Management Client / Application the following can be used:<br/>
               Enabled = Yes (or No) <br/>
            
            <br/>
            A camera accessed from within the management client/application will also contain information about storage, path to disk and more.<br/>
            <br/>
            To get a full set of properties, please run the configuration dump sample, or check the ItemProperties class.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Item.Enabled">
            <summary>
            Interpret the properties disctionary for "Enabled" and "Disabled" keys. If no entry is found, default is enabled.
            Otherwise values of "Yes"/"No" and "True" / "False" is checked for each.
            
            When setting this property, the "Enabled" entries in the Properties dictionary is updated with "Yes" / "No"
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Item.PositioningInformation">
            <summary>
            Will retrieve the gis location and other positioning information for this Item.
            
            If Item does not have any defined position, null is returned.
            
            Setting part is for future use.
            
            Note: Supported for Camera items from 2018 R1
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Item.IconWithOverlay">
            <summary>
            Take item's icon (if available) and place a 'disable' red cross over - if item is disabled.
            
            If item does not have an icon, the defaulr icon is taken from the ItemNode definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Item.IconWithOverlay(System.Boolean,System.Boolean)">
            <summary>
            Construct an icon with overlay.
            
            The prority is to place an overlay - checked in this order:<br/>
            1 - Disabled<br/>
            2 - Attention required<br/>
            3 - Active
            </summary>
            <param name="attention"></param>
            <param name="active"></param>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.Item.Authorization">
            <summary>
            Returns a set of strings identifying what the current user is authorized to do.<br/>
            
            Implementation is not required.<br/>
            
            From MIP v2.0 this Dictionary will be filled by the authorized options allowed for the current user, when
            the item is one of the built-in items, e.g. a Camera. Value will always be either "Yes" or "No" depending on whether current user
            is allowed to do the given operation on the item.<br/>
            <br/>
            Following keys are available for a camera item:<br/>
              BookmarkAdd<br/>
              BookmarkDelete<br/>
              BookmarkEdit<br/>
              BookmarkView<br/>
              Event<br/>
              ExportAvi<br/>
              ExportJpeg<br/>
              ExportDatabase<br/>
              GetSequences<br/>
              Live<br/>
              Output<br/>
              Playback<br/>
              Preset<br/>
              PTZ<br/>
              RetentionCreate<br/>
              RetentionRemove<br/>
              RetentionView<br/>
              RetrieveEdgeRecordings<br/>
              SmartSearch<br/>
              StartRecording<br/>
            <br/>
            When the Dictionary is not filled out, it is unknown what the configured authorization is.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Item.ContextMenu">
            <summary>
            Defines a list of ContextMenu items relevant for this item.
            It is displayed when a user right click on a Map containing this item.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Item.ToString">
            <summary>
            Returns the name of the item. Can be used for adding the Item directly on ListBox's and other user controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Item.Contains(System.String)">
            <summary>
            Looks through all fields for a match.
            
            But name and properties are searched.
            </summary>
            <param name="searchString"></param>
            <returns>True if any string contains the searchString</returns>
        </member>
        <member name="M:VideoOS.Platform.Item.Serialize">
            <summary>
            Serialize the content of the Item, that is independant of Environment and User.<br/>
            Note: Overloaded properties, UserContext and Authentication will not be saved.
            </summary>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.Item.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serialize the content of the Item, that is independent of Environment and User.<br/>
            Note: Overloaded properties, UserContext and Authentication will not be saved.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.Item.Deserialize(System.String)">
            <summary>
            Deserializes a string as generated by the Serialize method.<br/>
            Note: UserContext and Authorization properties are not filled.  
            </summary>
            <param name="serializedItem"></param>
            <returns></returns>
        </member>
        <member name="T:VideoOS.Platform.PositioningInformation">
            <summary>
            Defines the position for an Item, the direction and view zone
            </summary>
        </member>
        <member name="M:VideoOS.Platform.PositioningInformation.#ctor">
            <summary>
            Empty constructor, only used when no values are available
            </summary>
        </member>
        <member name="M:VideoOS.Platform.PositioningInformation.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Construct with all fields filled from GisPoint and doubles
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PositioningInformation.IsPointDefined">
            <summary>
            Is set to true when Latitude and Longitude contains defined values.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.PositioningInformation.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct with all fields filled
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PositioningInformation.Latitude">
            <summary>
            Defines the latitude where this item is located
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PositioningInformation.Longitude">
            <summary>
            Defines the longitude where this item is located
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PositioningInformation.CoverageDirection">
            <summary>
            CoverageDirection: [-1..1], 0 - North, default(0.25) -> East
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PositioningInformation.CoverageDepth">
            <summary>
            CoverageDepth: [0..10000.0], meters, default (20.0)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PositioningInformation.CoverageFieldOfView">
            <summary>
            CoverageFieldOfView: [0 .. 1.0], default(0.2)
            </summary>
        </member>
        <member name="T:VideoOS.Platform.HasChildren">
            <summary>
            Specifies if Item has any Children.
            Used to enhance UI by only displaying the plus sign when relevant.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.HasRelated">
            <summary>
            Specifies if Item has any related Items.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ItemProperties.Channel">
            <summary>
            Identifies the port this device is located at on the hardware.  For Video Servers this would often be e.g. be from "0" to "3" for a 4 channel device.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.ItemProperties.Enabled">
            <summary>
            Identify if the item is enabled or disabled.  If "Enabled" property is not in dictionary, the item is by default enabled,
            when value is "No" or "False" the item is disabled.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Kind">
            <summary>
            Kind is a class that contains Milestone defined kinds as static members.  Each field is a GUID.  <br/>
            New plugins defines their own Kinds on the plugins ItemNodes.<br/>
            In the ItemPicker each Kind is represented with a specific icon.  The ItemPicker uses the icon defined on the ItemNode.<br/>
            During load of the plugins the plug-in defined ItemNodes and their Kinds and Icons are added to the static
            Hashtable members of this class.	
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Kind.Alert">
            <summary>
            Notice: Alerts has been deprecated in XProtect Corporate from version 4.0 - consider to use bookmarks or alarms.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Kind.SmartWallPreset">
            <summary>
            Note: Implementation in Smart Client has changed with 2018 R1, as SmartWallPreset is now identified as SmartWallMonitor
            
            Smart Wall Presets are not available as MIP items in Smart Client, but can be found via the Configuration API
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Kind.DefaultTypeToCategoryTable">
            <summary>
            Convert a Kind to a Category
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Kind.DefaultTypeToNameTable">
            <summary>
            Convert the Kind to a default Name for that kind.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Kind.KindToNamespace">
            <summary>
            Contains a table for converting built-in Kinds to security namespaces (for internal use)
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Kind.SecurityNamespaceIdentifier">
            <summary>
            Namespaces used for internal objects (Internal use only)
            </summary>
        </member>
        <member name="T:VideoOS.Platform.PluginDefinition">
            <summary>
            The PluginDefinition is the ‘entry’ point to any plug-in.  
            This is the starting point for any plug-in development and the class MUST be available for a plug-in to be loaded.  
            Here the references to all other plug-in known objects and classes are defined.
            The class is an abstract class where all implemented methods and properties need to be declared with override.
            The class is constructed when the environment is loading the DLL.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.Id">
            <summary>
            Gets the unique id identifying this plug-in component
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.Name">
            <summary>
            Define the product name that will be shown in e.g. the about list.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.SharedNodeName">
            <summary>
            Define name of top level Tree node if such node is used.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.VersionString">
            <summary>
            The version of the plug-in. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.Manufacturer">
            <summary>
            The name of your company.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.PluginDefinition.Init">
            <summary>
            This method is called when the environment is up and running.
            Registration of Messages via RegisterReceiver can be done at this point.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.PluginDefinition.Close">
            <summary>
            The main application is about to be in an undetermined state, either logging off or exiting.
            You can release resources at this point, it should match what you acquired during Init, so additional call to Init() work.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.SharedNodeId">
            <summary>
            This Guid can be defined on several different PluginDefinitions with the same value,
            and will result in a combination of this top level Node for several plug-ins.
            Set to Guid.Empty if no sharing is enabled.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.Icon">
            <summary>
            Icon to be used on top level - e.g. a product or company logo
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.AdminPlacementHint">
            <summary>
            The suggested location for the plug-in's root UI node.<br/>
            The default placement is under the 'MIP Plugins' node.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.ExcludeFromAboutBox">
            <summary>
            Can be set to true, to avoid plugin information to show up in about box plugin overview.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.PluginDefinition.GenerateUserControl">
            <summary>
            A user control to display when the administrator clicks on the top TreeNode
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.UserControlFillEntirePanel">
            <summary>
            This property can be set to true, to be able to display your own help UserControl on the entire panel.
            When this is false - a standard top and left side is added by the system.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.LoginPlugins">
            <summary>
            A list of Login plugins for the Smart Client. Note that since these plugins are used during the Smart Client login 
            this property will be called before Init() is called on the plugin definition. When Init() is called on
            the plugin definition it is guaranteed that processing calls (LoginFlowExecute() and 
            GenerateCustomLoginUserControl()) on the login plugins have been completed. This is also beneficial 
            for the code in plugin definition because the login information that the LoginPlugin gather 
            during the login is available when Init() is called.
            
            The Smart Client configuration will be available when this property is called.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.ViewItemPlugins">
            <summary>
            A list of Client side definitions for Smart Client
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.OptionsDialogPlugins">
            <summary>
            An extension plug-in running in the Smart Client to add more choices in 'Application options' of Settings panel.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.SettingsPanelPlugins">
            <summary>
            An extension plug-in running in the Smart Client to add more choices on the Settings panel.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.BackgroundPlugins">
            <summary> 
            An extension plug-in to run in the background.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.SidePanelPlugins">
            <summary> 
            An extension plug-in to add to the side panel of the Smart Client.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.ViewItemToolbarPlugins">
            <summary> 
            An extension plug-in to add to the view item toolbar in the Smart Client.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.WorkSpacePlugins">
            <summary> 
            An extension plug-in to add to workspace of the Smart Client.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.WorkSpaceToolbarPlugins">
            <summary> 
            An extension plug-in to add to the work space toolbar in the Smart Client.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.ToolsOptionsDialogPlugins">
            <summary>
            An extension plug-in running in the Administrator to add more tabs to the Tools-Options dialog.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.TabPlugins">
            <summary>
            An extension plug-in running in the Administrator to add a tab for built-in devices and hardware.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.SearchAgentPlugins">
            <summary>
            An extension plug-in running in the Smart Client for adding custom search agents.<br/>
            This is for future use!
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.SearchUserControlsPlugins">
            <summary>
            An extension plug-in running in the Smart Client for adding/modifying custom UI for search results and/or criteria attributes.<br/>
            This is for future use!
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.SearchToolbarPlugins">
            <summary>
            An extension plug-in to add to the search toolbar in the Smart Client.<br/>
            This is for future use!
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.ViewLayouts">
            <summary>
            An extension plug-in running in the Smart Client to provide extra view layouts.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.ItemNodes">
            <summary>
            List the types of Items managed by this plug-in.<br/>
            This property returns a hierarchy of ItemNodes. When the system builds the structure of the administrators TreeView, 
            the PluginDefinition items will be placed as root nodes containing the ItemNodes in the hierarchy they are defined, 
            e.g. children of top level ItemNodes will be created as sub-nodes to top level nodes.
            ItemNodes with a ParentId of Guid.Empty will be considered a top node from a configuration point of view. 
            Items created on any node below this top level node will use the ServerId of Item created on from the top level ItemNode. 
            E.g. the ServerId should be the same for all Items created below one specific top level node.
            <br/>
            Note: This Property is accessed many times, it is suggested that it is created and stored in a private field.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.PluginDefinedMessageIds">
            <summary>
            A list of the MessageIds that the plugin have defined. If the plugin does not defined any new messageIds a null or empty list is returned.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.SecurityActions">
            <summary>
            Specifies the list of actions the administrator can manage. These apply
            for the application or function as a whole. (See ItemNode for more on authorization on specific Items)
            If the list is null, no authorization is done for this plug-in and everyone can perform all actions.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.PluginDefinition.ShowHelp">
            <summary>
            Show the general help for this plugindefinition
            </summary>
        </member>
        <member name="M:VideoOS.Platform.PluginDefinition.ShowHelp(VideoOS.Platform.Admin.ItemNode)">
            <summary>
            Show help in relation to a specific ItemNode
            </summary>
            <param name="itemNode"></param>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.IncludeInExport">
            <summary>
            Identify if this plug-in should be included in an export process<br/>
            When this property is true the GenerateExportManager is called to assist in the export process.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.ManageDatabaseExport">
            <summary>
            If IncludeInExport is true and ManageDatabaseExport is true the generated ExportManager will be called when database export is included in the export process
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.ManageMovieClipExport">
            <summary>
            If IncludeInExport is true and ManageMovieClipExport is true the generated ExportManager will be called when movie clip export is included in the export process
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.ManageStillImageExport">
            <summary>
            If IncludeInExport is true and ManageStillImageExport is true the generated ExportManager will be called when still image export is included in the export process
            </summary>
        </member>
        <member name="M:VideoOS.Platform.PluginDefinition.GenerateExportManager(VideoOS.Platform.Client.ExportParameters)">
            <summary>
            When this property returns an ExportManager and IncludePluginFilesInExport is true, all files in the plug-ins own folder is copied.<br/>
            For Smart Client versions prior to 2019 R1 it was done in the following manor:<br/>
            1) if a sub folder exists with the name "x86" then this folder is exported as the main plug-in<br/>
            2) otherwise the main plug-in folder is exported as is.<br/>
            From Smart Client 2019 R1 the target executable will be executing in same mode as the one doing the export. 
            For Smart Client versions prior to 2019 R1 it is ALWAYS executing in 32-bit mode.<br/>
            This property is only relevant when executing in the Smart Client.<br/>
            The ExportManager must implement the actual copying of data relevant for the time period being exported.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.PluginLicenseRequest">
            <summary>
            Returns a list of licenses relevant for this type of plug-in.
            Default is that the plug-in does not have any license requirements, and will return an empty collection.<br/>		
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.CustomSettingsGuids">
            <summary>
            A list of the GUIDs other than the Id member for which the plugin expects to load and save custom settings
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.OptionDialogGuids">
            <summary>
            A list of the GUIDs that this plug-in will use on the Configuration.Instance.GetOptionsConfiguration() and the Configuration.Instance.SaveOptionsConfiguration() methods.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.PluginDefinition.ActionManager">
            <summary>
            ActionManager used to specify and execute actions.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.PluginDefinition.GenerateAlarmPreviewUserControl(System.Object)">
             <summary>
             For new plugins it is recommended to use the WPF version, GenerateAlarmPreviewWpfUserControl(), instead.
            
             For displaying detail information about an Alarm or an Event, this method can be implemented
             to return a UserControl to be displayed when the user selects an Alarm in the alarm list, or a Event in the event list, in the
             Smart Client.<br/>
             The returned UserControl will be placed together with other relevant information like CameraViewItem's within the AlarmPreview ViewItem.<br/>
             This UserControl can be used to interpret custom data in an event/alarm from e.g. an Analytics event.
             
             Note: the alarmOrBaseEvent need to be checked for type and type casted accordingly, e.g. to Alarm, BaseEvent or AnalyticsEvent.<br/>
             Note: a similar method is available on the ItemManager, used when an event or alarm was generated from a source item provided by the ItemManager.<br/>
             Note: This UserControl does not need any other class implemented in the plugin.
             </summary>
             <returns>null if no relevant information to display, otherwise a filled UserControl</returns>
        </member>
        <member name="M:VideoOS.Platform.PluginDefinition.GenerateAlarmPreviewWpfUserControl(System.Object)">
            <summary>
            For displaying detail information about an Alarm or an Event, this method can be implemented
            to return a UserControl to be displayed when the user selects an Alarm in the alarm list, or a Event in the event list, in the
            Smart Client.<br/>
            The returned UserControl will be placed together with other relevant information like CameraViewItem's within the AlarmPreview ViewItem.<br/>
            This UserControl can be used to interpret custom data in an event/alarm from e.g. an Analytics event.
            
            Note: the alarmOrBaseEvent need to be checked for type and type casted accordingly, e.g. to Alarm, BaseEvent or AnalyticsEvent.<br/>
            Note: a similar method is available on the ItemManager, used when an event or alarm was generated from a source item provided by the ItemManager.<br/>
            Note: This UserControl does not need any other class implemented in the plugin.
            </summary>
            <returns>null if no relevant information to display, otherwise a filled UserControl</returns>
        </member>
        <member name="T:VideoOS.Platform.AdminPlacementHint">
            <summary>
            The placement enumeration is used to place or hide the plug-in's root UI node. Currently, the only visible location is Default: Under the MIP plug-in root node, and Root: Directly under the root node.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.AdminPlacementHint.Hidden">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.AdminPlacementHint.Default">
            <summary/>
        </member>
        <member name="F:VideoOS.Platform.AdminPlacementHint.Root">
            <summary/>
        </member>
        <member name="T:VideoOS.Platform.EnvironmentManager">
            <summary>
            The EnvironmentManager is the top class for the MIP Environment.
            The class can always be accessed though:
            	EnvironmentManager.Instance
            As it is a singleton.
            
            The class has identification information of the current environment executing.
            When executing in XProtect Corporate management client, XProtect Enterprise management application,
            the Event Server and the Smart Client,  the EnvironmentManager is created by the main application, 
            while when executing in a stand-alone application, the SDK version of the EnvironmentManager needs to be 
            instantiated by the standalone application.
            
            Please check out the SDK instantiation notes for a complete description of SDK startup.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.Instance">
            <summary>
            This Singleton item of this class. 
            Only the 'get' access should be used.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.Mode">
            <summary>
            The Mode the environment is executing right now.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.SmartClientInOfflineMode">
            <summary>
            Determines if the Smart Client is excuting after an export, and therefor is running in Offline mode.
            In Offline mode, it will not be possible to contact any servers for additional information.
            Make sure to export all relevant material during the Export process.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.SmartClientOfflineDirectory">
            <summary>
            When Smart Client is running in offline mode, this property defines the root directory for the exported data.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.ApplicationLoggedOn">
            <summary>
            Indicate if the application is currently logged on
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.EnvironmentType">
            <summary>
            Identifies the current executing Environment
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.UsingUserContext">
            <summary>
            This field identifies if the current stand alone environment is using multi-user context.<br/>
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.EnvironmentProduct">
            <summary>
            Identifies the current product executing.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.SystemLicense">
            <summary>
            SystemLicense contains general information about the license for the XProtect system.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.LicenseManager">
            <summary>
            Helps the plug-in with checking current use of licenses.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.EnvironmentOptions">
            <summary>
            Used to control specific environment behavior. For dynamic options, call the FireEnvironmentOptionsChangedEvent method
            to let the system know it was changed.
            </summary>
        </member>
        <member name="E:VideoOS.Platform.EnvironmentManager.EnvironmentOptionsChangedEvent">
            <summary>
            This event is used for components that need to change behavious when an option has been modified.
            
            Applications changing the EnvironmentOptions dictionary, should call the FireEnvironmentOptionsChangedEvent method.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.FireEnvironmentOptionsChangedEvent">
            <summary>
            Applications changing the EnvironmentOptions dictionary, should call this method.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.HasCapability(System.String)">
            <summary>
            Can be used to check if the product supports a given capability
            Check EnvironmentCapabilities for available capabilities.
            
            Supported from 2016
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.CurrentSite">
            <summary>
            Get the Item that represent the server currently selected (May only be relevant for XProtect Corporate management client)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.MasterSite">
            <summary>
            Get the Item that represent the server that was logged in to.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.GetSiteItem(System.Guid)">
            <summary>
            Get the Item representing a specific site / island.
            The id is the id of a XProtect Management server or XProtect Enterprise server.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.GetSiteItem(VideoOS.Platform.FQID)">
            <summary>
            Get the Item representing a specific site / island.
            The fqid is the id of a XProtect Management server or XProtect Enterprise server.
            </summary>
            <param name="fqid"></param>
            <returns></returns>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.LoginNetworkCredential">
            <summary>
            The Credential used when connecting with Windows or WindowsDefault authorization
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.LoginAuthType">
            <summary>
            Defines the type of authentication stored in the LoginNetworkCredential property.<br/>
            This property can be used to construct a credentialCache.<br/>
            Values are:<br/> 
              "Negotiate" for Active Directory, Windows and local system defined users<br/>
              "Basic" for basic users 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.LoginCredentialCache">
            <summary>
            The Credential cache for all types of authorizations.<br/>
            Notice: Only valid in Smart Client from version 7.0b
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.TraceFunctionCalls">
            <summary>
            Set this bool if you like to have a line of trace written for all calls to all plug-ins.
            The trace lines are written to the respective debug logs for the environment. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.TraceMessageCommunication">
            <summary>
            Set this bool if you like to have a lot of trace lines about how message communication works.
            The trace lines are written to the respective debug logs for the environment. 
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.TraceSendDetails">
            <summary>
            Make deeper log entries for sendmessage / postmessage (MIPSDK 2016 - just for stand alone MIP Environment)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.TracePlaybackDetails">
            <summary>
            Make deeper log entries for playback (MIPSDK 2016 - just for stand alone MIP Environment)
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.MeasureSendPostHandlers">
            <summary>
            Creates an ElapseTimer class and measures how much time each message handler is using. (Implemented for Event Server only in 2019 R3)<br/>
            The MIP SDK Tray Manager can display the results.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.EnableConfigurationChangedService">
            <summary>
            Set this if you need to receive the ConfigurationChangedIndication messages.
            When this is true, a service will poll the configuration server every 60 second for changes
            and send the message if anything changed.<br/>
            The message being sent is Server.ConfigurationChangedIndication, where the Message.RelatedFQID
            contains the top node of what was changed, often you can just check if the Message.RelatedFQID.Kind
            matches your one of your kinds.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.AllPluginDefinitions">
            <summary>
            Returns a list of all loaded MIP Plug-ins.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.Log(System.Boolean,System.String,System.String)">
            <summary>
            Logs a message
            </summary>
            <param name="error">True if this is an error</param>
            <param name="where">Where the this is coming from, provide class name and method</param>
            <param name="text">The message</param>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.Log(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Logs a message
            </summary>
            <param name="error">True if this is an error</param>
            <param name="where">Where the this is coming from, provide class name and method</param>
            <param name="text">The message</param>
            <param name="args">Any relevant parameters</param>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.Log(System.String,System.Boolean,System.String,System.String,System.Object[])">
            <summary>
            Logs a message in a Debug log.
            </summary>
            <param name="nameOfClass">The class being worked on.</param>
            <param name="error">True if this is an error</param>
            <param name="where">Where the this is coming from</param>
            <param name="text">The message</param>
            <param name="args">Any relevant parameters</param>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.ExceptionHandler(System.String,System.Exception)">
            <summary>
            Common exception handler. Logs the incident into the Log and opens the ExceptionDialog to the user.
            </summary>
            <param name="where">Where the Exception happened</param>
            <param name="exception">The Exception itself</param>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.ExceptionHandler(System.String,System.String,System.Exception)">
            <summary>
            Common exception handler. Logs the incident into the Log and opens the ExceptionDialog to the user.
            </summary>
            <param name="nameOfClass">The class being worked on, when the exception happened.</param>
            <param name="where">Where the Exception happened</param>
            <param name="exception">The Exception itself</param>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.ExceptionDialog(System.String,System.Exception)">
            <summary>
            Opens an ExceptionDialog to the user with a formatted layout of the exception itself.
            </summary>
            <param name="where">Where the Exception happened</param>
            <param name="exception">The Exception itself</param>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.ExceptionDialog(System.String,System.String,System.Exception)">
            <summary>
            Opens an ExceptionDialog to the user with a formatted layout of the exception itself.
            </summary>
            <param name="nameOfClass">The class being worked on, when the exception happened</param>
            <param name="where">Where the Exception happened</param>
            <param name="exception">The Exception itself</param>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.RegisterReceiver(VideoOS.Platform.MessageReceiver,VideoOS.Platform.Messaging.MessageFilter)">
            <summary>
            Register a method to receive messages.
            </summary>
            <param name="messageReceiver">The method to be called</param>
            <param name="messageFilter">The filter to be used</param>
            <returns>The object to be used for UnRegister method</returns>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.UnRegisterReceiver(System.Object)">
            <summary>
            UnRegister a MessageReceiver
            </summary>
            <param name="registeredReceiver">The object returned from the the RegisterReceiver call</param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.SendMessage(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            Send a Message. All receivers will be called before the call returns.
            Message id's and formatted Data field are found in namespace VideoOS.Platform.Messaging
            for the Milestone defined messages.
            </summary>
            <param name="message">The message to send</param>
            <param name="destination">The destination FQID, if relevant</param>
            <param name="sender">The sender, if known</param>
            <returns>A Collection of the result each receiver returns. null result are filtered off.</returns>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.SendMessage(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID)">
            <summary>
            Overloaded method to be used if sender==null
            </summary>
            <param name="message"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.SendMessage(VideoOS.Platform.Messaging.Message)">
            <summary>
            Overloaded method to be used if both destination and sender == null
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.PostMessage(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID,VideoOS.Platform.FQID)">
            <summary>
            Post a Message. Similar method as SendMessage except that there is not result value.
            </summary>
            <param name="message">The message to send</param>
            <param name="destination">The destination FQID, if relevant</param>
            <param name="sender">The sender, if known</param>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.PostMessage(VideoOS.Platform.Messaging.Message,VideoOS.Platform.FQID)">
            <summary>
            Overloaded message if sender == null
            </summary>
            <param name="message"></param>
            <param name="destination"></param>
        </member>
        <member name="M:VideoOS.Platform.EnvironmentManager.PostMessage(VideoOS.Platform.Messaging.Message)">
            <summary>
            Overloaded method if both destination and sender == null
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.MessageIdList">
            <summary>
            List of all known MessageIds.
            This includes all the message id's defined by the PlatformPlugin and environment
            as well as for all loaded plug-ins.		
            
            A plug-in should add any plug-in defined messages to the plug-ins own PluginDefinition
            </summary>
        </member>
        <member name="P:VideoOS.Platform.EnvironmentManager.PluginInitializationInProgress">
            <summary>
            Identifies if the plugin load process in progress
            </summary>
        </member>
        <member name="T:VideoOS.Platform.EnvironmentOptions">
            <summary>
            Options available for the EnvironmentManager.Instance.EnvironmentOptions dictionary.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.UseControlForMessaging">
            <summary>
            Key in EnvironmentOptions.<br/>
            Used by standalone MIP Environment to identify is sending and posting messages should be carried out on
            the top level user control. <br/>
            Default is "Yes".
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.UsePing">
            <summary>
            Key in EnvironmentOptions.<br/>
            Used by standalone MIP Environment to identify is server identification should use Ping. For application connecting over the internet, this should be changed to a "No".
            Defautl is "Yes" from MIPSDK 4.0.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.ToolkitFork">
            <summary>
            Key in EnvironmentOptions.<br/>
            Used by the standalone MIP Environment to define if live streams should be shared among multiple users, e.g. JPEGLiveSource, BitmapLiveSource - when possible.
            <br/>
            Default is "Yes".
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.DualItemHierarchy">
            <summary>
            Key in EnvironmentOptions - reserved for internal use.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.OptionYes">
            <summary>
            Value used on EnvironmentOptions.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.OptionNo">
            <summary>
            Value used on EnvironmentOptions.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.CompanyNameFolder">
            <summary>
            Identify if product has been OEM'ed to another company.  Used for building ProgramData\\"CompanyNameFolder"\\MIPSDK\\ log files.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.HardwareDecodingMode">
            <summary>
            Specify if hardware decoding can be used.
            
            Available options are:<br/>
               "Auto" - The media toolkit selects the best way to decode, can be either using GPU or software.<br/>
               "Off"  - Do not utilize any hardware for decoding.<br/>
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.OptionHardwareDecodingModeAuto">
            <summary>
            Value used on EnvironmentOptions, where key is HardwareDecodingMode 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.OptionHardwareDecodingModeAutoNvidia">
            <summary>
            Value used on EnvironmentOptions, where key is HardwareDecodingMode 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.OptionHardwareDecodingModeOnlyNvidia">
            <summary>
            Value used on EnvironmentOptions, where key is HardwareDecodingMode 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.OptionHardwareDecodingModeOnlyIntel">
            <summary>
            Value used on EnvironmentOptions, where key is HardwareDecodingMode 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.OptionHardwareDecodingModeOff">
            <summary>
             Value used on EnvironmentOptions, where key is HardwareDecodingMode 
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.PtzReverseTiltForContinuesMoves">
            <summary>
            This property controls if the continues move commands will have the tilt value multiplied with -1.<br/>
            Values can be "True", "False" - or not filled.
            
            Default is not filled (same as "False")
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.SoftwareDecodingThreads">
            <summary>
            Defines the number of threads to be used while decoding. The value is formatted as:<br/>
             "4,1" - defining that 4 threads is to be used when just one stream is active, while 1 thread is used if more streams are active.
            
            Default for 32-bit application is: "4,1"<br/>
            Default for 64-bit application is: "4,4"
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.ConfigurationChangeCheckInterval">
            <summary>
            In seconds
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.UseActiveX">
            <summary>
            Deprecated. Defines if the ImageViewer ActiveX should be used, or the hardware accellerated implementation should be used.
            
            Default is "No".
            
            Note: Valid from MIPSDK 2016 R3. Deprecated from MIPSDK 2019 R1.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.PlayerDiagnosticLevel">
            <summary>
            Set this value to number between "0" and "3", to display developer information on top of ImageViewerCOntrol.
            
            Value of "0" - No diagnostics<br/>
            Value of "1", "2", "3" - Display more and more information about the video stream and the decoding details
            
            If changing the value on the fly - call the EnvironmentManager.Instance.FireEnvironmentOptionsChangedEvent to have the
            ImageViewerControl pick up the change right away.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.LogPrefix">
            <summary>
            Used by standalone application to name what it's log file should start with.
            
            Default is "MIP"
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.MulticastLog">
            <summary>
            When added to EnvironmentManager.Instance.EnvironmentOptions, multicast activity is logged on debug level.
            
            Only supported in standalone environment.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentOptions.MulticastErrorRate">
            <summary>
            When added to EnvironmentManager.Instance.EnvironmentOptions, the value indicates when to switch
            from using multicast to unicast.  Default is "0.25".
            
            It represent the rate of errors compared to all frames, e.g. 0.25 signifies that when 25% of the
            frame are in error, swap to unicast.
            
            Only supported in standalone environment.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.MessageReceiver">
            <summary>
            A method to receive Messages.
            </summary>
            <param name="message">The Message</param>
            <param name="destination">Id of destination, if relevant</param>
            <param name="sender">Id of the sender, if known</param>
        </member>
        <member name="T:VideoOS.Platform.Mode">
            <summary>
            The Mode the application is running right now.  
            When the Mode changes, the message System.ModeChangedIndication is send with
            data set to the new Mode.
            Note: The current Mode is always available in: EnvironmentManager.Instance.Mode
            Note: Do not use Mode in Smart Client plugins. Instead use ShownWorkSpace, WorkSpaceState and associated messages.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Mode.ServerSetup">
            <summary>
            Environment is in one of the administators
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Mode.ClientSetup">
            <summary>
            Environment is in the Client in the Setup mode
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Mode.ClientLive">
            <summary>
            Environment is in the Client in the Live mode
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Mode.ClientPlayback">
            <summary>
            Environment is in the Client in the Playback mode
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Mode.ServerService">
            <summary>
            Environment is in the EventServer
            </summary>
        </member>
        <member name="F:VideoOS.Platform.Mode.StandAlone">
            <summary>
            Environment is in a standalone SDK Environment
            </summary>
        </member>
        <member name="T:VideoOS.Platform.EnvironmentType">
            <summary>
            Available types of Environments available.	
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentType.Administration">
            <summary>
            When running in the Manamenent Client (Corporate or Expert products), of Management Application (Enterprise, Professional or Express products)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentType.SmartClient">
            <summary>
            When running in the Smart Client
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentType.Standalone">
            <summary>
            When running .Net component library (VideoOS.PLatform.SDK implementation)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentType.Service">
            <summary>
            When running in the Event Server
            </summary>
        </member>
        <member name="T:VideoOS.Platform.EnvironmentCapabilities">
            <summary>
            Used by the EnvironmentManager.Instance.HasCapability() method.
            </summary>
        </member>
        <member name="F:VideoOS.Platform.EnvironmentCapabilities.DynamicSecurityActions">
            <summary>
            Defines if a plugin can add and remove SecurityActions over time.  E.g. between releases.
            When this capability is not available, a MIP plugin should keep the same set of SecurityActions.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Resources.Images">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Images.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Images.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Images.Attention16ni8">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Images.Disabled16ni8">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Images.Running16ni8">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Images.SDK_general">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="T:VideoOS.Platform.Resources.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInCommandTypeCategories_AccessRequest">
            <summary>
              Looks up a localized string similar to Access request.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInCommandTypeCategories_GrantAccess">
            <summary>
              Looks up a localized string similar to Grant access.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInEventTypeCategories_AccessRequest">
            <summary>
              Looks up a localized string similar to Access request.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInEventTypeCategories_Alarm">
            <summary>
              Looks up a localized string similar to Alarm.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInEventTypeCategories_CredentialHolderAccessDenied">
            <summary>
              Looks up a localized string similar to Access denied.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInEventTypeCategories_CredentialHolderAccessGranted">
            <summary>
              Looks up a localized string similar to Access granted.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInEventTypeCategories_Error">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInEventTypeCategories_Ignore">
            <summary>
              Looks up a localized string similar to Ignore.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInEventTypeCategories_Warning">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInStateProperties_ServerStatusConnectionMessage">
            <summary>
              Looks up a localized string similar to Connection status.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInStateTypeCategories_Disabled">
            <summary>
              Looks up a localized string similar to Disabled.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInStateTypeCategories_DoorStateClosed">
            <summary>
              Looks up a localized string similar to Door closed.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInStateTypeCategories_DoorStateLocked">
            <summary>
              Looks up a localized string similar to Door locked.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInStateTypeCategories_DoorStateOpen">
            <summary>
              Looks up a localized string similar to Door open.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInStateTypeCategories_DoorStateUnlocked">
            <summary>
              Looks up a localized string similar to Door unlocked.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInStateTypeCategories_Error">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInStateTypeCategories_ServerStatusConnectionConnected">
            <summary>
              Looks up a localized string similar to System connected.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInStateTypeCategories_ServerStatusConnectionNotConnected">
            <summary>
              Looks up a localized string similar to System not connected.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInStateTypeCategories_Warning">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInUnitTypeCategories_AccessPoint">
            <summary>
              Looks up a localized string similar to Access point.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlBuiltInUnitTypeCategories_Door">
            <summary>
              Looks up a localized string similar to Door.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlEventSourceKind">
            <summary>
              Looks up a localized string similar to Access control event source.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlSystem">
            <summary>
              Looks up a localized string similar to Access control system.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlUnit">
            <summary>
              Looks up a localized string similar to Access control unit.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AccessControlUnitGroupName">
            <summary>
              Looks up a localized string similar to Units.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Alert">
            <summary>
              Looks up a localized string similar to Alert.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.All">
            <summary>
              Looks up a localized string similar to All.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AllGisMapLocations">
            <summary>
              Looks up a localized string similar to GIS map locations.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AllLayoutGroups">
            <summary>
              Looks up a localized string similar to All layout groups.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AllLayouts">
            <summary>
              Looks up a localized string similar to All layouts.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.AllVideoWalls">
            <summary>
              Looks up a localized string similar to All video walls.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Bookmark">
            <summary>
              Looks up a localized string similar to Bookmark.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.BookmarkSearchResultConfigurationPropertyTitleDescription">
            <summary>
              Looks up a localized string similar to Description.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.BookmarkSearchResultConfigurationPropertyTitleHeader">
            <summary>
              Looks up a localized string similar to Headline.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.BookmarkSearchResultConfigurationPropertyTitleReference">
            <summary>
              Looks up a localized string similar to Bookmark ID.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.BookmarkSearchResultConfigurationPropertyTitleUser">
            <summary>
              Looks up a localized string similar to Added by.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Camera">
            <summary>
              Looks up a localized string similar to Camera.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Event">
            <summary>
              Looks up a localized string similar to Event.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.GisMapLocation">
            <summary>
              Looks up a localized string similar to Location on a map.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Hardware">
            <summary>
              Looks up a localized string similar to Hardware.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.ImageViewerWpfControlNotAvailable">
            <summary>
              Looks up a localized string similar to ImageViewerWpfControl implementation not loaded.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.InputEvent">
            <summary>
              Looks up a localized string similar to Input event.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Layout">
            <summary>
              Looks up a localized string similar to Layout.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.LayoutGroup">
            <summary>
              Looks up a localized string similar to Layout group.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Loading">
            <summary>
              Looks up a localized string similar to Loading....
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Matrix">
            <summary>
              Looks up a localized string similar to Matrix.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Metadata">
            <summary>
              Looks up a localized string similar to Metadata.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Microphone">
            <summary>
              Looks up a localized string similar to Microphone.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Monitor">
            <summary>
              Looks up a localized string similar to Monitor.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Output">
            <summary>
              Looks up a localized string similar to Output.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.PersonAgeSearchFilter_Description">
            <summary>
              Looks up a localized string similar to Age range.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.PersonAgeSearchFilter_Name">
            <summary>
              Looks up a localized string similar to Age.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.PersonGenderSearchFilter_Description">
            <summary>
              Looks up a localized string similar to Genders.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.PersonGenderSearchFilter_GenderFemale">
            <summary>
              Looks up a localized string similar to Female.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.PersonGenderSearchFilter_GenderMale">
            <summary>
              Looks up a localized string similar to Male.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.PersonGenderSearchFilter_GenderNotSelected">
            <summary>
              Looks up a localized string similar to No gender selected.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.PersonGenderSearchFilter_Name">
            <summary>
              Looks up a localized string similar to Gender.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.PhysicalScreen">
            <summary>
              Looks up a localized string similar to Physical display.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.PlaybackUserControlMini_MultiDays">
            <summary>
              Looks up a localized string similar to {0} days.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.PlaybackUserControlMini_MultiHours">
            <summary>
              Looks up a localized string similar to {0} hours.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.PlaybackUserControlMini_MultiMinutes">
            <summary>
              Looks up a localized string similar to {0} minutes.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.PlaybackUserControlMini_MultiWeeks">
            <summary>
              Looks up a localized string similar to {0} weeks.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.PlaybackUserControlMini_SingleDay">
            <summary>
              Looks up a localized string similar to 1 day.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.PlaybackUserControlMini_SingleHour">
            <summary>
              Looks up a localized string similar to 1 hour.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.PlaybackUserControlMini_SingleMinute">
            <summary>
              Looks up a localized string similar to 1 minute.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.PlaybackUserControlMini_SingleWeek">
            <summary>
              Looks up a localized string similar to 1 week.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Preset">
            <summary>
              Looks up a localized string similar to Preset.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Role">
            <summary>
              Looks up a localized string similar to Role.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.SelectionFilterValueFallbackDisplayValue">
            <summary>
              Looks up a localized string similar to {0} options selected.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Server">
            <summary>
              Looks up a localized string similar to Server.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.SmartClientView">
            <summary>
              Looks up a localized string similar to Client view.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.SmartClientViewItem">
            <summary>
              Looks up a localized string similar to Client view item.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.SmartClientWindow">
            <summary>
              Looks up a localized string similar to Client window.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.SmartWall">
            <summary>
              Looks up a localized string similar to Video wall.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.SmartwallPreset">
            <summary>
              Looks up a localized string similar to Video wall preset.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Speaker">
            <summary>
              Looks up a localized string similar to Speaker.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.SystemFolder">
            <summary>
              Looks up a localized string similar to System folder.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.TimeProfile">
            <summary>
              Looks up a localized string similar to Time profile.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.Transact">
            <summary>
              Looks up a localized string similar to Transact.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.User">
            <summary>
              Looks up a localized string similar to User.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.VehicleColorSearchFilter_ColorBeige">
            <summary>
              Looks up a localized string similar to Beige.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.VehicleColorSearchFilter_ColorBlack">
            <summary>
              Looks up a localized string similar to Black.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.VehicleColorSearchFilter_ColorBlue">
            <summary>
              Looks up a localized string similar to Blue.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.VehicleColorSearchFilter_ColorGreen">
            <summary>
              Looks up a localized string similar to Green.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.VehicleColorSearchFilter_ColorGrey">
            <summary>
              Looks up a localized string similar to Grey.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.VehicleColorSearchFilter_ColorNotSelected">
            <summary>
              Looks up a localized string similar to No color selected.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.VehicleColorSearchFilter_ColorRed">
            <summary>
              Looks up a localized string similar to Red.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.VehicleColorSearchFilter_ColorWhite">
            <summary>
              Looks up a localized string similar to White.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.VehicleColorSearchFilter_ColorYellow">
            <summary>
              Looks up a localized string similar to Yellow.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.VehicleColorSearchFilter_Description">
            <summary>
              Looks up a localized string similar to Colors of the vehicles.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.VehicleColorSearchFilter_Name">
            <summary>
              Looks up a localized string similar to Color.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.VehicleColorSearchFilter_SearchWatermark">
            <summary>
              Looks up a localized string similar to Search for a color....
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.VehicleLicensePlateSearchFilter_Description">
            <summary>
              Looks up a localized string similar to License plate of the vehicle.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.VehicleLicensePlateSearchFilter_Name">
            <summary>
              Looks up a localized string similar to License plate.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.VehicleLicensePlateSearchFilter_Watermark">
            <summary>
              Looks up a localized string similar to Enter a license plate....
            </summary>
        </member>
        <member name="P:VideoOS.Platform.Resources.Strings.WorkSpace">
            <summary>
              Looks up a localized string similar to Client workspace.
            </summary>
        </member>
        <member name="T:VideoOS.Platform.UserContext">
            <summary>
            This class is used for stand alone applications and services that need to handle multiple users logging in to
            the same set of server(s).<br/>
            Some functions and methods are required to be called though this class instead of the usual
            Configuration.Instance.SomeMethod
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UserContext.CredentialCache">
            <summary>
            The credentials for this user
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UserContext.Configuration">
            <summary>
            Used for accessing the configuration relevant for the user in this context.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UserContext.ClientType">
            <summary>
            Used internally for client type checking
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UserContext._loginSettings">
            <summary>
            When the initial loginSettings are added, the content may not be filled entirely out. This is therefor a List and not an indexed collection
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UserContext.PrivacyMaskLiftChanged">
            <summary>
            Used internally to indicate when privacy mask lifted flag has changed
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UserContext.PrivacyMaskLifted">
            <summary>
            This property indicates the current state for showing liftable privacy masks.  
            
            The state is set by calling the SetPrivacyMaskLifted method.
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UserContext.SetPrivacyMaskLifted(System.Boolean)">
            <summary>
            Sets the privacy mask on or off. 
            
            Notice: that user needs to have the correct rights to perform this change.
            </summary>
            <param name="liftMask">True when mask should not be shown</param>
            <returns>The return value will indicate if the current user has permission to do so.</returns>
        </member>
        <member name="M:VideoOS.Platform.UserContext.#ctor">
            <summary>
            Used internally within .Net library (Internal use only)
            </summary>
        </member>
        <member name="F:VideoOS.Platform.UserContext.InstanceGuid">
            <summary>
            Identify this specific instance
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UserContext.AddLoginSettings(VideoOS.Platform.Login.LoginSettings)">
            <summary>
            Add a LoginSetting to the cache.  The cache holds information for logging in to all known servers.
            A plugin can also save it's own server side login, if it choose to.
            When working through the normal EnvironmentManager and Configuration classes, a plugin
            should not add any Milestone servers to this list, it is done automatically.
            </summary>
            <param name="loginSettings"></param>
        </member>
        <member name="M:VideoOS.Platform.UserContext.RemoveLoginSettings(VideoOS.Platform.Login.LoginSettings)">
            <summary>
            Remove a specific LoginSettings from the cache.
            Please only do this when all other references to the LoginSettings are gone.
            This method should only be used by internal MIP abstraction layers.
            </summary>
            <param name="loginSettings"></param>
        </member>
        <member name="M:VideoOS.Platform.UserContext.Clear">
            <summary>
            Clear the entire cache.
            </summary>
        </member>
        <member name="P:VideoOS.Platform.UserContext.LoginSettings">
            <summary>
            Get the complete list of all LoginSettings
            </summary>
        </member>
        <member name="M:VideoOS.Platform.UserContext.GetLoginSettings(System.Guid)">
            <summary>
            Get one specific LoginSetting, indexed by Guid.
            Please note that before logon and configuration has been received from the server side,
            the Guid may not be filled. (It is then Guid.Empty)
            Note: It is recommended to use the FQID version whenever possible.
            </summary>
            <param name="serverGuid"></param>
            <returns></returns>
        </member>
        <member name="M:VideoOS.Platform.UserContext.GetLoginSettings(VideoOS.Platform.ServerId)">
            <summary>
            Get one specific LoginSetting, by use of different information in the ServerId.
            The lookup will try the to match the login settings by both Guid and a normalized Host from the Uri.
            Note: It is recommended to use the FQID version whenever possible.
            </summary>
            <param name="serverId"></param>
            <returns>LoginSettings or null if not found</returns>
        </member>
        <member name="M:VideoOS.Platform.UserContext.GetLoginSettings(System.String,System.Int32)">
            <summary>
            Get one specific LoginSetting.
            The lookup will try the to match the login settings by a normalized Host from the Uri.
            </summary>
            <param name="hostName"></param>
            <param name="port">Specify for non-default ports</param>
            <returns>LoginSettings or null if not found</returns>
        </member>
        <member name="M:VideoOS.Platform.UserContext.GetLoginSettings(VideoOS.Platform.FQID)">
            <summary>
            Get one specific LoginSetting.
            The lookup will look for a login server id in the FQID.ServerId.Id, and all its parents.
            This method should be used when the Item is a camera, audio or any other single device.<br/>
            When connecting to XProtect Enterprise vs XProtect Corporate, the hierarchy of IDs is different - 
            and this method abstracts from these differences, as it looks for all relevant IDs in the hierarchy.
            </summary>
            <param name="fqid">The FQID of the Item you need the loginSettings for.</param>
            <returns>LoginSettings or null if not found</returns>
        </member>
        <member name="M:VideoOS.Platform.UserContext.GetNetworkCredential(VideoOS.Platform.ServerId)">
            <summary>
            Returns the NetworkCredential used for connecting to a specific server.<br/>
            If no LoginSettings is available for the given ServerId, then the EnvironmentManager.Instance.LoginNetworkCredential is returned.
            </summary>
            <param name="serverId">The server to get the NetworkCredentials for</param>
            <returns>The found NetworkCredential</returns>
        </member>
        <member name="T:AlarmCommandClient">
            <summary>
            The alarm command token is a WCF client class used against XProtect Corporate to handle 
            alarms. <see cref="T:VideoOS.Platform.Proxy.AlarmClient.IAlarmClient"/> for a description of the 
            available methods.  Use <see cref="T:VideoOS.Platform.Proxy.AlarmClient.AlarmClientManager"/> whenever
            possible instead.
            </summary>
        </member>
        <member name="M:AlarmCommandClient.Add(VideoOS.Platform.Data.Alarm)">
            <summary>
            Add an alarm to the Event Server. No filtering and manipulation is done 
            on the way to the database and the alarm structure is preserved in the 
            database. This means that adding the alarm and getting it afterwards using 
            the Alarm.Eventheader.ID will result in an alarm containing the same data 
            fields. 
            </summary>
            <param name="alarm">Alarm</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
        </member>
        <member name="M:AlarmCommandClient.AddEvent(VideoOS.Platform.Data.BaseEvent)">
            <summary>
            Add an event to the Event Server. The event is checked and filtered in 
            the Event Server against the user defined alarm definitions. Alarms are 
            created based on the baseEvent data on every matching alarm definition. 
            The match criteria is the BaseEvent.EventHeader.Message which match the 
            alarm definition event message and the 
            BaseEvent.EventHeader.Source.FQID.ObjectId which matches the source. The 
            alarms created gets the alarm definition details added as data and the 
            alarm is given a unique id.
            </summary>
            <param name="baseEvent">Event</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
        </member>
        <member name="M:AlarmCommandClient.Get(System.Guid)">
            <summary>
            Gets a specific alarm based on the input id.
            </summary>
            <param name="id">Alarm id</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>Alarm</returns>
        </member>
        <member name="M:AlarmCommandClient.GetEvent(System.Guid)">
            <summary>
            Gets a specific event based on the input id.
            </summary>
            <param name="id">Event id</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the id is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>Event</returns>
        </member>
        <member name="M:AlarmCommandClient.GetHeader(System.Guid)">
            <summary>
            Gets the event header from a specific alarm.
            </summary>
            <param name="id">Alarm id</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>Event header</returns>
        </member>
        <member name="M:AlarmCommandClient.GetSnapshots(System.Guid)">
            <summary>
            Get the snapshot list from a specific alarm. 
            </summary>
            <param name="id">Alarm id</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>Snapshot list</returns>
        </member>
        <member name="M:AlarmCommandClient.AttachSnapshot(System.Guid,VideoOS.Platform.Data.Snapshot)">
            <summary>
            Attach a snapshot to a specific alarm. 
            </summary>
            <param name="id">Alarm id</param>
            <param name="snapshot">Snapshot to attach</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
        </member>
        <member name="M:AlarmCommandClient.UpdateAlarmValues(System.Guid,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Updates a set of fields on a given alarm. The alarm to update is identified by the id.
            
            The updates parameter defines what fields to update, and what value to assign to them.
            
            The following fields can be updated:<br/>
            - "AssignedTo"<br/>
            - "Comment"<br/>
            - "Priority"<br/>
            - "PriorityInt"<br/>
            - "PriorityName"<br/>
            - "ReasonCode"<br/>
            - "State"<br/>
            - "StateInt"<br/>
            - "StateName"<br/>
            </summary>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">
            Thrown if invalid field key or value</exception>
            <param name="id">Id of alarm to update</param>
            <param name="updates">KeyValuePair of fields to update</param>
        </member>
        <member name="M:AlarmCommandClient.UpdateAlarm(System.Guid,System.String,System.Int32,System.Int32,System.DateTime,System.String)">
            <summary>
            Updates a specific alarm with the input parameters. Only valid input 
            parameters is updated.
            </summary>
            <param name="id">Id of the alarm to be updated</param>
            <param name="text">The text will not be added to the alarm but to the 
            alarm history which contains the history of alarm updates 
            <see cref="T:VideoOS.Platform.Proxy.Alarm.AlarmHistory"/>. 
            If null no text is written</param>
            <param name="state">The new alarm state. Only states greater than 0 is 
            valid</param>
            <param name="priority">The new alarm priority. Only priorities greater 
            than 0 is valid</param>
            <param name="time">The time of the update</param>
            <param name="assignedTo">The new assigned to owner. If null no owner is 
            assigned</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
        </member>
        <member name="M:AlarmCommandClient.Acknowledge(System.Guid)">
            <summary>
            Acknowledges a specific alarm. Acknowledge alarms wil get the state set to In
            Progress (state = 4) and the owner will be set to the user calling.
            </summary>
            <param name="id">Id of the alarm to be updated</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
        </member>
        <member name="M:AlarmCommandClient.UpdateMultipleAlarms(System.Guid,System.Int32,System.Int32,System.DateTime,System.String)">
            <summary>
            Updates multiple alarms. The method updates all alarms which is created by a 
            specific object. The object is defined by the 
            Alarm.EventHeader.Source.FQID.ObjectId. Both state and the assigned to will 
            be updated. 
            </summary>
            <param name="objectId">Object id of the alarms to update. The id is matched to 
            Alarm.EventHeader.Source.FQID.ObjectId in the alarm.</param>
            <param name="oldState">Old state. Only alarms with the this state will be 
            updated.</param>
            <param name="newState">New state.</param>
            <param name="time">The time of the update</param>
            <param name="assignedTo">New assigned to user</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
        </member>
        <member name="M:AlarmCommandClient.AcknowledgeMultipleAlarms(System.Guid)">
            <summary>
            Acknowledges multiple alarms. The method will acknowledge all alarms which is 
            created by a specific object. The object is defined by the 
            Alarm.EventHeader.Source.FQID.ObjectId. The acknowledge alarms wil get the state 
            set to In Progress (state = 4) and the owner will be set to the user calling.
            </summary>
            <param name="objectId">Object id of the alarms to update. The id is matched to 
            Alarm.EventHeader.Source.FQID.ObjectId in the alarm.</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
        </member>
        <member name="M:AlarmCommandClient.GetAlarmLines(System.Int32,System.Int32,VideoOS.Platform.Proxy.Alarm.AlarmFilter)">
            <summary>
            Gets alarm lines based on alarm filter. The lines received is a subset of the
            full set of alarm lines that satisfies the filter conditions. The subset is
            received based on the "from" and "maxCount" input parameters. 
            An example:
            Get the newest 100 alarm lines where the alarm state is In Progress (state = 4). 
            The alarm lines should be returned in descending time order. Help on constructing
            the alarm filter matching this, see the Alarm filter documentation. The "from"
            parameter should be set to 0 meaning the start of the resulting matching set and the
            "maxCount" parameter is set to 100.
            </summary>
            <param name="from">Start of alarm lines.</param>
            <param name="maxCount">Max count of received alarm lines</param>
            <param name="filter">The alarm filter</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>List of alarm lines</returns>
        </member>
        <member name="M:AlarmCommandClient.GetEventLines(System.Int32,System.Int32,VideoOS.Platform.Proxy.Alarm.EventFilter)">
            <summary>
            Gets event lines based on event filter. The lines received is a subset of the
            full set of event lines that satisfies the filter conditions. The subset is
            received based on the "from" and "maxCount" input parameters. 
            An example:
            Get the newest 100 event lines where the event name contains "My event". 
            The event lines should be returned in descending time order. Help on constructing
            the event filter matching this, see the event filter documentation. The "from"
            parameter should be set to 0 meaning the start of the resulting matching set and the
            "maxCount" parameter is set to 100.
            </summary>
            <param name="from">Start of event lines.</param>
            <param name="maxCount">Max count of received event lines</param>
            <param name="filter">The event filter</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the event id is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>List of event lines</returns>
        </member>
        <member name="M:AlarmCommandClient.GetStatistics">
            <summary>
            Gets the alarm statistics. The statistics contains overall informations on alarm
            count based on different alarm properties like state and priority 
            <see cref="T:VideoOS.Platform.Proxy.Alarm.Statistic"/> 
            for more information about the content.
            </summary>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>Alarm statistics</returns>
        </member>
        <member name="M:AlarmCommandClient.GetAlarmHistory(System.Guid)">
            <summary>
            Gets the alarm history. This methods returns a collection alarm history 
            objects which contains information on the changes made to the alarm.
            The alarm history reflects the alarm updates made 
            <see cref="T:VideoOS.Platform.Proxy.Alarm.AlarmHistory"/>
            for details.
            </summary>
            <param name="id">Id of the alarm to get the history about</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>Alarm history</returns>
        </member>
        <member name="M:AlarmCommandClient.GetAlarmMessages">
            <summary>
            Gets all the different alarm messages received up to this point in time. 
            The alarm message is the Alarm.EventHeader.Message field in the alarm.
            </summary>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">
            Thrown if the alarm is rejected by the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception> 
            <returns>Messages</returns>
        </member>
        <member name="M:AlarmCommandClient.AddAsEvent(VideoOS.Platform.Data.Alarm)">
            <summary>
            Add alarm as event (deprecated)
            </summary>
            <param name="alarm">Alarm</param>
            <exception cref="T:VideoOS.Platform.Proxy.Alarm.AlarmServiceFault">Thrown if the alarm is rejected by 
            the Event Server</exception>
            <exception cref="T:System.Exception">Thrown on communications errors.</exception>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
